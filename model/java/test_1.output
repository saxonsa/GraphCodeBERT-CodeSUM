0	Emit a value in the queue .
1	Wraps an ObservableSource into an Observable .
2	Returns an observable that is sorted by the given comparator .
3	Observes a ConnectableObservableObservable .
4	Create a new unicast processor .
5	Creates a new executor .
6	Tries to apply a scalar function to the provided Publisher
7	Executes a scalar x map on a scalar value .
8	Reset the state of this instance .
9	Construct a Maybe from a CompletableSource
10	Creates a Maybe from a SingleSource .
11	Retries the element at the specified times .
12	Ensure that the object is not null .
13	Identifies identity function .
14	Creates a callable for the given value .
15	Creates a function that wraps the given value .
16	Creates a function that casts the given target to the target class .
17	Creates a new unicast subject .
18	Creates a new unicast subject .
19	Create a new unicast subject .
20	Create a new unicast subject .
21	Waits until an error occurs .
22	Waits until the queue is complete .
23	Waits for the element to complete .
24	Drains a maximum value into a queue .
25	Require a prefetch request .
26	Post complete action to the given queue .
27	Completes the current value
28	Gets value .
29	Gets the error .
30	Validates the upstream Disposable .
31	Atomically sets the upstream AtomicReference .
32	Validates an upstream subscription .
33	Atomically sets the upstream AtomicReference .
34	Compute the sum of two values .
35	Multiply two values .
36	Adds an element to the request .
37	Converts a Throwable to a NullPointerException .
38	Adds an object to the list .
39	Shutdown the pool .
40	Create a ScheduledExecutorService
41	Sets the subscription .
42	Loop loop loop .
43	Wrap the given Throwable as a RuntimeException .
44	Flatten a Throwable into a list of exceptions .
45	Throws the given exception if it is a Throwable .
46	Removes all resources .
47	Returns the number of resources .
48	Performs a scalar operation on the ObservableSource .
49	Creates a scalar x map .
50	Adds a subscriber to the list .
51	Adds an observer to the list .
52	Starts the Queue .
53	Start the stream .
54	Inserts an element into the queue .
55	Gets the disposedable .
56	Completes the value .
57	Emit an error .
58	Completes the stream .
59	Performs a concatenation on the concatenation errors .
60	Concatenates an iterable by concatenating the elements of the concatenation .
61	Sorts the elements in the stream using the provided sort function .
62	Waits until the consumer returns .
63	Request an upstream subscription
64	Adds a new PublishDispatable to this queue .
65	Removes the given PublishDispatcher from the list
66	Observes a Connectable Flowable in a Scheduler .
67	Parses the given method and returns response body .
68	Sets the delay .
69	Creates the error response .
70	Calculates the delay for the sample .
71	Create sample data .
72	Returns the HttpMethod object for the given string .
73	Search for a user .
74	Encodes a raw password .
75	Checks if the raw password matches the provided password .
76	Performs the actual checks on the given version .
77	Determines whether or not the given spring version should be disabled .
78	Returns the Spring Security core version .
79	Configures an attribute exchange with an identifier pattern .
80	Creates an OAuth2 client configurer .
81	Creates an OAuth2 resource server .
82	Returns a new ChannelMatcherRegurer that will be used for authentication .
83	Compares the specified DN with the specified value .
84	Retrieves an entry for the specified DN .
85	Search for single attribute values .
86	Search for multiple attribute values .
87	Search for a single entry .
88	Builds the search controls .
89	Lookup primary keys .
90	Build the preAuthenticationDetails for the given request .
91	Create embedded server .
92	Create the servlet api filter
93	Create the jaas filter .
94	Whitelisted default types .
95	Registers a new Spring Security Filter .
96	Retrieves the token for the given series .
97	Gets the granted authorities .
98	Creates a new cipher object .
99	Initialize the servlet properties set .
100	Handle the security context .
101	Check if the pre - authenticated principal has been changed .
102	Performs a pre - authenticated authentication .
103	Checks that the content length is valid .
104	Maps a collection of authorities to a set of authorities .
105	Sets the URL to redirect to .
106	Update the authentication defaults .
107	Updates the access properties .
108	Maps a password to a string .
109	Extract cookie from request .
110	Encode cookie .
111	Sets the cookie .
112	Resolve the value for the given parameter .
113	Gets the query string .
114	Returns the service port for the cas service .
115	Gets the principal .
116	Log out the session .
117	Authenticate the given AuthenticationToken .
118	Build the provider URL for the given URLs .
119	Sets the context environment properties .
120	Returns the redirect URL .
121	Render the page .
122	Initialize the user details service .
123	Gets the UserDetailsService .
124	Adds the parameters to the attributes .
125	Determines if the request needs authentication .
126	Override to validate the service ticket request .
127	Proxy ticket request .
128	Checks if the current session is authenticated .
129	ProxyReceptorRequest .
130	Creates a MethodSecurityExpressionRoot object for the given invocation .
131	Get JWK set .
132	Encode a string value .
133	Gets the granted authorities for the current user .
134	Load user by assertion .
135	Get the pre - authenticated principal .
136	Concatenates the arrays into a single byte array .
137	Returns a copy of the specified byte array .
138	Returns the granted authorities for the given attributes .
139	Preprocessing the map .
140	Gets the grantedAuthority collection .
141	Adds the given value to the result .
142	Extract the pre - authenticated principal from the request .
143	Gets the shared object .
144	Build the redirect URL for the given request .
145	Invoke the interceptor method .
146	Checks if the given string is a role .
147	Checks to see if any of the supplied roles are present .
148	Process auto login cookie .
149	Sets the persistent login token .
150	Attempt to switch to a user .
151	Attempt to exit a user .
152	Sets the exit user URL .
153	Display a public index .
154	Sets the spring security filter chain .
155	Decodes a JWT .
156	Checks access expression using access expression .
157	Checks if the request is authorized by the URL check .
158	Convert the given JWT to a collection of grantedAuthority .
159	Generate a Csrf token .
160	Display admin permission
161	Display the AddPermission page for a contact .
162	Handle addPermission
163	Displays a permission
164	Gets the role with the default role prefix .
165	Creates a new UserDetailsResource instance from a String .
166	Gets attribute values .
167	Gets the first attribute value .
168	Encode a string to a byte array .
169	Decode bytes .
170	Find the parameter names for the given type .
171	Add a new contact .
172	Find attributes in the target class
173	Add a secure method .
174	Returns all configuration attributes .
175	Checks if a method name is a match .
176	Matches any request .
177	Handle bind exception .
178	Returns a random contact
179	Clears the authentication exceptions .
180	Returns the field with the given name .
181	Creates the service URL .
182	Create redirect url
183	Extract the prefix from a string .
184	Invoked after a pre - authenticated call .
185	Checks for duplicates .
186	Returns the list of registered types .
187	Extract the cause from the given throwable .
188	Register access manager .
189	Converts a collection of user authorities to a set of authorities .
190	Compare two byte arrays
191	Sets the default failure URL .
192	Sets the value of the hidden hidden inputs .
193	Build request URL .
194	Checks if the given URL is an absolute URL .
195	Creates a list of OpenID attributes for the given identifier .
196	Convert a ResultSet into an Identifier object .
197	Creates the entries for the given ACL .
198	Creates an object identity .
199	Update objectIdentity .
200	Saves the request .
201	Creates a new path matcher that matches the given patterns .
202	Matches an AnyWebExchange .
203	Creates a text encryptor with the given salt and salt .
204	Creates a text encryptor with the given salt and salt .
205	Encrypt a queryable text .
206	Write headers to response
207	Determines the target URL for the given request .
208	Determines the target URL .
209	Sets the target URL parameter .
210	Gets the directory with the given id .
211	Build the distinguished name for the given username .
212	Creates shared objects .
213	Utility method to set the JAAS configuration .
214	Get current date
215	Internal method to parse a date .
216	Update cache .
217	Sets the authentication details .
218	Determines the security name for the given subject .
219	Get the list of WebSphere groups
220	Changes the user s password .
221	Build the distinguished name for the group .
222	Throws an exception if allowed .
223	Copies the details from another AuthenticationToken to another .
224	Returns the filters for the given request .
225	Returns a list of filters from the specified URL .
226	Get the context for the web application context .
227	Returns the full distinguished name with the given base context .
228	Sets session attributes .
229	Provides a preemptive authentication scheme .
230	Add filters .
231	Add filters .
232	Creates a basic authentication scheme .
233	Creates an authentication scheme .
234	Creates a new form authentication scheme .
235	Creates a proxy for the given URI .
236	Prints response body .
237	Sets redirect configuration .
238	Sets the default query parameter charset .
239	Sets the default object mapper type
240	Sets the JAXB ObjectMapper .
241	Creates the mock mvc config .
242	Creates a mock mvc config .
243	Sets the object mapper config .
244	Creates a mock mock mvc config .
245	Creates a mock mvc config .
246	Creates a new mock mvc config .
247	Sets the header config .
248	Creates a mock mock mvc config .
249	Sets the mock mvc config .
250	Creates a mock mvc config .
251	Sets the mock mvc param config .
252	Creates a new mock mvc config .
253	Sets the allowed hostnames .
254	Declares a set of namespaces .
255	Creates a new path configuration with the given namespace .
256	Perform a HTTP request with the given method and configuration closure .
257	Sets the headers .
258	Sets the proxy .
259	Sets the control name .
260	Sets a header value .
261	Configures the basic authentication .
262	Configures an ntlm .
263	Creates a new headers object .
264	Reset the configuration .
265	Sets a header .
266	Build the response .
267	Matches a cookie with the given matcher .
268	Matches a cookie with the given matcher .
269	Matches an expiry date .
270	Matches a domain property .
271	Matches a cookie with the given matcher .
272	Matches a cookie that matches the given matcher .
273	Matches a HttpOnly cookie .
274	Matches a cookie with the given matcher .
275	Matches the maximum age of the cookie .
276	Expect the given header with the given name
277	Expect the given header with the expected value .
278	Expect the given cookie with the expected value .
279	Returns a copy of this proxy specification with the specified host .
280	Sets the number return type .
281	Sets the default parser type .
282	Returns a default LogConfig that will be used for logging .
283	Enable logging of request and response .
284	Creates a HttpRequest object based on the given HTTP method and method name .
285	Gets the default boundary .
286	Add attribute .
287	Add header .
288	Add multi part .
289	Adds additional result handlers .
290	Sets the given parameter with the given name and value .
291	Adds the given HttpClientParams to this HttpClientConfig .
292	Returns a new HttpClientConfig with the given HttpClientFactory .
293	Sets the http multipart mode .
294	Executes a GET request and returns the result .
295	Get an integer value .
296	Returns the byte at the given path .
297	Returns the short value for the given path .
298	Get a float value .
299	Get a double value as a double .
300	Get a long value .
301	Gets the value at the specified path as a List .
302	Gets a mapped value .
303	Get the value at the given path as an object .
304	Sets the body for the request .
305	Add a cookie .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	Sets the form parameters update strategy .
309	Returns a filter that matches the given matcher with the given matcher .
310	Creates a new cookies .
311	Clean up all keys and sources
312	Index all explicit bindings .
313	Gets the binding .
314	Convert a constant string to a binding .
315	Clean up a binding .
316	Remove a failed jit binding .
317	Returns the set of internal dependencies for the given binding .
318	Creates an uninitialized binding .
319	Returns an array of parameters for the given parameters .
320	Binds an injector .
321	Binds a logger .
322	Checks to see if there is a misplaced binding annotation .
323	Determines whether two methods are overrides .
324	Initialize the delegate .
325	Returns the type of the provider .
326	Resolve all types .
327	Converts a type literal to a type literal .
328	Prepare the built in converters .
329	Convert the given class loader to the system bridge .
330	Returns true if this class has the same version of the same class loader .
331	Checks to see if the given member is public .
332	Fix the given key .
333	Request member injection .
334	Validate the pending injections .
335	Creates a new instance of this class .
336	Add a dispatcher to the servlet .
337	Applies the given scope .
338	Makes the given scoping .
339	Normalize a path .
340	Generate an annotation for the given type .
341	Checks if the given annotation is retained at runtime .
342	Finds a scope annotation .
343	Returns the key for the given member .
344	Returns the name of the given key .
345	Initialize the provider .
346	Adds a direct type binding .
347	Get the constructor for the given injection point .
348	Checks if the interceptor has scope annotation .
349	Creates a new real map binder for the given key and value type .
350	Returns the key for the new value .
351	Creates a new instance of the given context and returns it .
352	Replace the source .
353	Creates a module for the given module .
354	Gets the assisted methods .
355	Checks if the given type is not a valid type .
356	Checks to see if the constructor has a matching parameters .
357	Returns the set of dependencies for the given class .
358	Removes the set of dependencies from the set .
359	Checks to see if the given object is valid for an optimization .
360	Gets the binding from the injector .
361	Invoke the proxy
362	Throws an exception if missing .
363	Create a new real set binder for the given key .
364	Returns the key for the new item .
365	Find the next filter .
366	Returns true if the given constructor has at least one of the given inject .
367	Gets the internal constructor .
368	Returns the set of internal dependencies .
369	Creates a module for the given module .
370	Returns the annotation for the given method .
371	Returns the line number for the given member .
372	Initialize the injector
373	Creates a new callable with the provided seed map .
374	Transforms a callable into a Callable .
375	Validates the given value .
376	Creates a new instance of the specified type .
377	Creates members injector for given type .
378	Returns the injectors for the given injection points .
379	Creates a Key from the given type and annotation strategy .
380	Returns an annotation strategy for the given annotation .
381	Returns an annotation strategy for the given annotation type .
382	Removes the stack trace from the stack trace .
383	Returns the binding source .
384	Format error messages .
385	Create a message with the given message format and arguments .
386	Creates a new message with the given message and message format and arguments .
387	Creates a message with the given source and message format and arguments .
388	Convert an object to another object .
389	Indicates whether the given class should be skipped .
390	Determines the source for the given modules .
391	Main entry point .
392	Pushes a dependency .
393	Sets the source for the given key .
394	Creates a new initializable instance .
395	Applies the given provider to the given dependency .
396	Handles a connection event .
397	Adds a connection event processor .
398	Retrieves the result of the given task .
399	Throw a RuntimeException .
400	Registers a processor for the given command code .
401	Registers the default processor
402	Returns the processor for the given command code .
403	Try to get a cached URL .
404	Decodes the protocol code .
405	Returns a map of all connection pools .
406	Scan the pool .
407	Get and create and create a new connection if necessary .
408	Creates a connection to the remote server .
409	Remove a task from the pool
410	Evaluate a connection pool if necessary .
411	create connection from url
412	Close a connection .
413	Closes the connection .
414	Close the connection .
415	Sets the attribute if not already present .
416	Register a user processor .
417	Register a user processor .
418	Dispatches a request command to a user processor
419	Deserialize an RpcRequestCommand .
420	Pre processing remoting context
421	Log the timeout .
422	Debug the rpc request .
423	Executes the given message and returns it .
424	Execute a remote command with a callback .
425	Sends a request to the remote endpoint .
426	Converts a BitSet to a byte .
427	Convert an integer to a BitSet .
428	Adds a reconnect task .
429	Stop the daemon .
430	Creates a remoting command .
431	Filter a list of connections
432	Monitor the connection pools .
433	Close new connections
434	Get a boolean property .
435	Log an info log .
436	Returns true if the request is a request timeout .
437	Returns the user processor for the given class name .
438	Returns a connection from a list of connections .
439	Returns the value associated with the given key .
440	Get a property value
441	Returns the response object for the given response command .
442	Converts response command to response object
443	Converts a ResponseCommand to a Throwable .
444	Returns the detail error message
445	Creates a server exception from the Throwable .
446	Print a connection trace log .
447	Creates a new event loop group .
448	Parse the remote address .
449	Parse local address .
450	Parse the remote IP address .
451	Returns the host name of the channel .
452	Parse local IP address .
453	Parse the remote port .
454	Parse local port .
455	Parse address to host IP address
456	Adds a connection .
457	Remove and close the connection
458	Returns the next available connection .
459	Register a custom serializer for the given class .
460	Get custom serializer by name
461	Registers a custom serializer for the given command code .
462	Returns the custom serializer for the given command code .
463	Starts the connection monitor .
464	Checks if the remote address is connected .
465	Initialize the write buffer water mark
466	Get the frame for the given opcode .
467	Performs a batch write .
468	Sets the status code .
469	Validate UTF8 .
470	Updates the payload .
471	Checks if the given protocol contains the requested protocol .
472	Translate a single frame check length limit .
473	Translate a single frame check packet size .
474	Generate final key
475	Process a continuous frame
476	Process binary data .
477	Log a runtime exception .
478	Process a frame text .
479	Process the next frame in the WebSocket
480	Process a frame that is not already completed .
481	Process a close frame .
482	Check buffer size .
483	Get payload from byteBufferList
484	Returns the total size of the byte buffer list .
485	Translate the http server to a new one .
486	Translate the HTTP client .
487	Decode the handshake data .
488	Closes the connection and writes it to the response .
489	Closes the connection asynchronously .
490	Generate a response for an error code .
491	Sends text to a WebSocket .
492	Reset the connection .
493	Connects to the WebSocket client .
494	Gets the port .
495	Sends the handshake .
496	Sets the connection lost timeout .
497	Stop connection lost timer .
498	Start the connection lost timer .
499	Restarts the connection lost timer .
500	Try to close a connection .
501	Cancel connection lost timer .
502	On websocket handshake .
503	Sends a ping frame .
504	Stop the server .
505	Gets the port .
506	Performs additional read .
507	Accepts the selector .
508	Performs a read .
509	Writes a single element
510	Setup the selector and server thread
511	Ensure that a single thread is started .
512	Shutdown the server .
513	Get the socket
514	Broadcasts the data to all clients .
515	Broadcasts a text to all connected clients .
516	Broadcast data to all connected clients .
517	Adds the frames to the given draft .
518	Transfer bytes from source to dest .
519	Starts the persistence unit .
520	Returns an EntityManager for the given name .
521	Performs a transaction with a transaction .
522	Convert arguments to ScalaBuffer
523	Wraps the given arguments to a List if it is a List .
524	Gets the message with the given arguments .
525	Returns the message with the given arguments .
526	Checks if the key is defined in the language .
527	Returns the preferred messages for the given languages .
528	Get preferred messages for this request .
529	Set the language of the result
530	Adds bindings for the given modules .
531	Adds bindings to the Guiceable .
532	Sets the bindings .
533	Overwrites the given Guiceable modules .
534	Overwrites the given modules .
535	Specifies the given bindings .
536	Disable module classes .
537	Creates a new instance of the specified type .
538	Executes the given request .
539	Gets the file with the given relative path .
540	Creates a binding for this binding .
541	Creates a new tuple .
542	Static factory method for creating a tuple 5 .
543	Convert execution context to Executor
544	Creates a default JPAConfig .
545	Creates a default JPAConfig .
546	Creates a new JPAConfig from a map .
547	Creates a flow of string
548	Creates a Flow from JsonNode
549	Adds a constraint validator for the given key .
550	Instantiates a constraint validator for the given key .
551	Gets the matching method .
552	Handles a client error .
553	Handle bad request .
554	Handle forbidden response .
555	Handle not found .
556	Handles a server error .
557	Log a server error message .
558	Transform a throwable into a useful exception .
559	Handles an error .
560	Handle the error page .
561	Create a build doc handler from the given resources .
562	Creates a new BuildDocHandler from the given directory .
563	Create a new BuildDocHandler from a given directory and a base directory .
564	Creates a new documentation handler for the given directory and the given directory .
565	Create a document handler from a jar file .
566	Consume data from a materializer .
567	Creates an entity from content .
568	Creates an entity from a string .
569	Creates a chunked entity .
570	Creates a response with the given status code and content .
571	Sends a response with the given status code and encoding .
572	Creates a response with the given content .
573	Sends a status response with the given content and content length .
574	Creates a response with the given content and content .
575	Find a user by id
576	Returns the preferred language for this language .
577	Unique call .
578	Creates a call to this call .
579	Returns the absolute URL for the given request .
580	Returns the web socket URL for the given request .
581	Returns a function that applies the given connection runnable .
582	Returns a function that applies the given connection callable .
583	Creates a new server for a router .
584	To json node .
585	Converts a JsonNode to a given class .
586	Parse a string to a JsonNode .
587	Parse a JsonNode from an input stream .
588	Returns the relative path relative to the target path .
589	Returns the canonical path .
590	Returns a list of displayable constraints .
591	Returns the displayable constraint .
592	Completes the CompletionStage with the given amount .
593	Returns true if the given array is assignable to the given array .
594	Parse cron expression .
595	Get the next cron interval
596	Creates a new ahcWS client .
597	Creates a new Guice application builder with the given context .
598	Displays a todo page .
599	Sets a session .
600	Flash a key value
601	Returns a binding key with the given instance .
602	Returns a binding key with the given annotation .
603	Converts this Binding to a Java Binding .
604	Creates a binding for this binding .
605	Converts this Binding to a Java Binding .
606	Coerce to a binding key
607	Converts this Binding to a Java Binding .
608	Returns the available languages .
609	Returns the preferred language for the given application .
610	Creates a new evolution reader from the map .
611	Creates a default evolution reader for the default evolution .
612	Clean up the given database .
613	Adds a configuration loader to the Guice application .
614	Adds a module loader to the application .
615	Load the Guiceable application with the given modules .
616	Load the Guice application .
617	Load the Guice application .
618	Load the Guice application with the given bindings .
619	Creates a new Guice application builder .
620	Encodes the given cookie .
621	Gets the entity manager .
622	Gets the current entity manager .
623	Pushes or pops an entity from the stack .
624	Applies the given flow with the given splitter
625	Applies the given flow with the given splitter .
626	Creates a flow from an actor .
627	Converts an array of arguments to an unmodifiable list .
628	Creates a new form with the given value .
629	Gets global errors .
630	Get errors as json .
631	Returns the value associated with the given key
632	Creates a new DynamicForm with the given value .
633	Parse a string to a given class .
634	Convert a string to a type descriptor .
635	Prints a value to a String
636	Prints a type descriptor .
637	Prints a type descriptor .
638	Register an optional format converter .
639	Registers a formatter for the given class .
640	Registers the given annotation formatter .
641	Encode a cookie .
642	Returns a list of nodes matching the specified node .
643	Converts a List to a List .
644	Converts an array to a JavaSeq .
645	Returns a sequence of the given arguments .
646	Mapped WebSocket acceptor
647	Accepts and returns a WebSocket .
648	Sets the visibility of the given object .
649	Compute the promotion cost of a primitive class .
650	Compute the total transformation cost for the given source arguments .
651	Returns the conversion cost between two classes .
652	Returns the message for the given key .
653	Get the message for the given keys .
654	Creates a database from the given driver and configuration .
655	Create a parallel Sorter .
656	Sorts the specified range in ascending order .
657	Merges the specified sort into this array .
658	Invoke the method
659	cast a type to another type
660	Load an argument .
661	Generate a field instruction .
662	null or null
663	Unbox the given type .
664	Process an array .
665	Compares two null pointers
666	Resolve all bridges .
667	Get methods from superclass .
668	Filter constructors .
669	Sets the superclass .
670	Generate a field .
671	Add method .
672	Returns the cardinality of this set .
673	Sets the naming policy .
674	Find methods by names and descriptors .
675	Resolve a base path .
676	Read a string from a file .
677	Sets the host .
678	Creates a new request with the given method and destination .
679	Start a CONNECT request .
680	Start a GET request .
681	Start a POST request .
682	Start a PUT request .
683	Start a PATCH request .
684	Start a DELETE request .
685	Start a HEAD request .
686	Start a TRACE request .
687	Start an OPTIONS request .
688	Sets the path .
689	Sets the cookies .
690	Add query parameter .
691	Sets the query .
692	Sets the query string .
693	Returns the query string .
694	Returns the host URL .
695	Sets the basic authentication .
696	Sets the host header .
697	Returns the buffer for writing .
698	Send and receive and receive and return the response handler .
699	Remove a range from the first handler .
700	Returns the length of the exception table .
701	Collect the action interceptors .
702	Collects action filters .
703	Collect the action results .
704	Collect all action runs .
705	Sets a simple property .
706	Resolve the named property .
707	Extract the property name from the property name
708	Gets the writer for writing .
709	Sets the object reference .
710	Get object reference by name
711	Lookup an object reference .
712	Returns the descriptor for the given table .
713	Find table descriptor by column ref .
714	Gets the table alias .
715	Registers a table reference .
716	Lookup a table reference .
717	Registers a hint .
718	Serialize the value .
719	Inject attributes .
720	Inject parameters into targets .
721	Inject uploaded files .
722	Convert a property name to a column name .
723	Convert a column name to a property name .
724	Convert a column name to a column name
725	Stores the value in the prepared statement .
726	Convert get value to destination type
727	Gets all the wrappers .
728	Resolve a wrapper .
729	Creates a wrapper for the given class .
730	Convert path separators to system .
731	Returns the path part of the given filename .
732	Splits a file name into a suffix array .
733	Relative path .
734	Register the specified class .
735	Registers an action config consumer .
736	Starts the application .
737	Configures the default values .
738	Register all components in the madvoc container .
739	Excludes the specified jars .
740	Includes the specified jars .
741	Includes the specified entries .
742	Excludes the given entries .
743	Scan a jar file .
744	Scans the given directory recursively .
745	Returns the bytecode signature of the given type .
746	Scan files .
747	Starts the jar .
748	Create a new JtxTransaction
749	Gets the default or scope type .
750	Get or create a scope for the given type .
751	Executes the specified varvoc scope with the specified type .
752	Decode a char array to a byte array .
753	Generate a new CSRF token .
754	Ensure that the size of the token is valid .
755	Checks if a CSRF token is present in the session .
756	Create a BeanCopy from the given object .
757	Copy all declared properties .
758	Visits a property .
759	Initialize the entity reference
760	Resolve a scope .
761	Registers a bean with the given type and scope type .
762	Register a bean .
763	Removes a bean from the context .
764	Resolve bean names for given type .
765	Registers an injection point for the specified bean .
766	Registers a property injection point .
767	Registers a set injection point for the given bean name .
768	Registers an injected method in the bean .
769	Registers init methods for a bean .
770	Registers the destroy methods for the given bean name .
771	Registers a new provider with the given name and method name .
772	Registers a provider .
773	Iterates over all beans with the given type .
774	Define a set of parameters .
775	Intercept the action request .
776	Resolve Java version .
777	Push an int onto the stack .
778	Checks that the argument index is valid .
779	Generate an advice field name .
780	Returns the name of the advice method name .
781	Load special method arguments .
782	Load static method arguments .
783	Load virtual method arguments .
784	load method argument
785	Store method argument .
786	prepare the return value
787	Creates a signature key .
788	Generate a new array
789	Store an array into an array .
790	Extract the encoding from the content type
791	Returns true if the flags are empty
792	Resolve the auth bearer token .
793	Requires authentication .
794	Prepares a download .
795	Prepares the response .
796	Gets all cookies with the given name .
797	Read request body from reader
798	Read request body from stream
799	Store the current context path variable
800	Store the context path variable
801	Checks if the given name is a GET parameter .
802	Prepares the parameter values to be null
803	Copy all request parameters to attributes .
804	Invokes the body .
805	Renders the body into a char array .
806	Renders the body into a String .
807	Invokes init methods .
808	Call destroy methods .
809	Creates a new bean instance .
810	Inject parameters .
811	Rewrite the action path .
812	Add a header .
813	Put a value into the map .
814	Put a base property .
815	Put a profile property .
816	Get a profile property .
817	Resolve the value for the given value .
818	Extract the profiles from a map .
819	Writes a stream to an array of bytes .
820	Hashes a password .
821	Checks if the given plaintext matches the given plaintext .
822	Copies all bytes from the stream to the given output stream .
823	Copies bytes from the input stream to the output stream .
824	Parse the action .
825	Resolve action config .
826	Detect and register an alias .
827	Read the action interceptors .
828	Reads the action filters for the action .
829	Read package action path
830	Reads the action path .
831	Parse the method alias .
832	Creates the action runtime .
833	Sets the response header .
834	Apply an advice .
835	Inject target into proxy
836	Visits an annotation .
837	Returns the real name for the given json name .
838	Resolve json name .
839	Lookup the type data for the given type .
840	Lookup the type data for the given type .
841	Find the type data for the given type .
842	Resolves the name of the given type .
843	Resolves the real name of the given type .
844	Returns the file content
845	Copy bootstrap methods .
846	Sets the major version and class name .
847	Put constant pool .
848	Put bootstrap methods .
849	Adds a constant field ref .
850	Adds a constant method reference .
851	Adds a constant member reference .
852	Adds a constant member reference .
853	Adds a constant integer to the constant pool .
854	Adds a constant integer entry .
855	Adds a long or double entry to the constant pool .
856	Adds a constant long or double entry .
857	Adds a constant name and type to the constant pool .
858	Adds a constant name and type .
859	Adds a UTF8 string to the constant pool .
860	Adds a UTF8 constant .
861	Adds a constant method handle .
862	Adds a constant method handle .
863	Adds a constant dynamic variable .
864	Adds a constant invoke dynamic method to the class .
865	Adds a constant dynamic reference to the constant pool .
866	Add a constant dynamic or invoke dynamic reference .
867	Adds a constant reference to the constant pool .
868	Adds a reference to the constant pool .
869	Adds a bootstrap method .
870	Adds the merged type .
871	Returns the hash for the given name .
872	Clears the map .
873	Returns all values with the given name .
874	Returns an iterator over the elements in this map .
875	Returns all entries in this map .
876	Grows the buffer .
877	Append a sequence of characters to the buffer .
878	Visits an annotation .
879	Visit end chain .
880	Create the first chain delegate .
881	Create the first chain delegate call .
882	Parse a path .
883	Adds a field to the current path .
884	Configures the servlet context .
885	Execute the next method .
886	Gets all field descriptors .
887	Creates the bean definition for registration .
888	Convert transaction mode to db mode
889	Read a property .
890	Copies all values from the given Map into this Map .
891	Appends the specified buffer to this buffer .
892	Write the content to a writer .
893	Write the contents of the document to an output stream .
894	Write the response to an output stream .
895	Returns a string value for the given key .
896	Gets an integer value .
897	Gets a long value .
898	Gets a double value .
899	Gets a float value .
900	Returns the value associated with the given key
901	Sets the value for the given key .
902	Sets the folder if not already opened .
903	Receive messages .
904	Update the flags for the received email .
905	Closes the folder if not already opened .
906	Look up a named parameter by its name .
907	Concatenates the target string .
908	Validate action .
909	Adds a violation .
910	Sets the raw data type .
911	Sets the download file .
912	Sets the target .
913	Sets target class name
914	Sets the target class
915	Process the target .
916	Create the proxy .
917	Define the target class .
918	Create a new instance of the class
919	Dumps the class in the debug folder .
920	Sets the email address .
921	Sets the recipient address .
922	Sets the recipient address .
923	Sets the replyTo address .
924	Sets the cc addresses .
925	Creates a text message with the specified encoding .
926	Creates an HTML message with the specified encoding .
927	Sets a header value .
928	Gets the value of a property .
929	Get boolean value .
930	Get an int value from the name .
931	Get long value from name
932	Returns the resolved method parameter names .
933	Serialize a key value .
934	Lookup an alias .
935	Resolve alias .
936	Resolves the given path with the given value .
937	Resolve a result path string .
938	Returns the last index of the last slash in the string
939	Returns the index of the last element after the given slash .
940	Returns the index of the first slash after the last slash .
941	Strip the last letter word from a name .
942	Resolves the schema name for the given type .
943	Resolve column descriptors .
944	Initializes the key with the given key .
945	Multiply the matrix
946	Implements the permutation .
947	Schedule a key
948	Initializes the key message with the given key message .
949	Encrypt a block
950	Converts a byte array to a long array .
951	Removes any bounding from a string .
952	Returns the path of this method .
953	Zipping a file
954	Gzip a file
955	Ungzip a file
956	List a zip file .
957	Unzip a file to a destination directory
958	Adds a file to a ZIP output stream .
959	Adds content to a ZIP file .
960	Gets the field descriptor .
961	Returns the property descriptor with the given name and declared flag .
962	Sets the request bundle name .
963	Sets the session locale .
964	Gets the session locale .
965	Filter parameters for a bean name .
966	Add profile .
967	Reads a little endian long from the buffer .
968	Read data from an input stream .
969	Reads a label .
970	Returns the bytecode bytecode offset for a type annotation .
971	Read element values .
972	Read verification type information .
973	Read bootstrap methods attribute .
974	Returns an array of constructor descriptors .
975	Returns the ctor descriptor for the given arguments .
976	Gets the request map .
977	Creates the request map .
978	Convert an array to an array .
979	Initialize the filter .
980	Registers a consumer for a file .
981	Searches the search path .
982	Add a search path to the container .
983	Includes the specified patterns .
984	Excludes the specified patterns .
985	Adds a path to the list .
986	Find all files .
987	Initialize the list .
988	Returns an iterator over all files in the list .
989	Resolve the Spring bean .
990	Resolve the bean name .
991	Returns a PrintWriter for writing .
992	Gets the output stream .
993	Returns the class name of the type .
994	Gets the constructor descriptor .
995	Returns the method descriptor for the given return type and argument types .
996	Returns the method descriptor for the given method .
997	Append the descriptor .
998	Returns the size of this object .
999	Returns the number of arguments and return sizes of the given method descriptor .
1000	Sets the rollback only .
1001	Commit the transaction .
1002	Rollback all resources .
1003	Request a resource
1004	Pop name .
1005	Write string .
1006	Write a unicode character .
1007	Write a character sequence .
1008	Sets the logging error log level .
1009	Start region .
1010	Checks if the value is contained within the include .
1011	Registers a pseudo function .
1012	Lookup a pseudo function by its name .
1013	Visit a proxy class .
1014	Visits an annotation .
1015	Generate the static init block .
1016	Generate proxy constructor .
1017	Process super methods .
1018	Find the last element in the range
1019	Process a string .
1020	Replace the ASM instructions .
1021	Returns the attribute prototype for this method .
1022	Register default values .
1023	Register a type .
1024	Lookup the type for the given class .
1025	Lookup a SQL type .
1026	Creates a new SOCKS 4 proxy .
1027	Create a new SOCKS5 proxy .
1028	Creates a proxy for the http proxy .
1029	Get total number of thread transactions
1030	Count total number of transactions with the given status
1031	Associate a transaction .
1032	Performs a transactional transaction .
1033	Lookup the resource manager for the given resource type .
1034	Creates proxy object .
1035	Append method name .
1036	Left and pad the given text to the given size .
1037	Returns a pretty string representation of the given value .
1038	Converts a string to a camel case .
1039	Format a paragraph .
1040	Convert tabs to spaces .
1041	Escape a string .
1042	Unescape Java code .
1043	Retrieves a bean by its name .
1044	Gets a bean by its name .
1045	Initialize the bean definition
1046	Invoke a provider .
1047	Adds a bean .
1048	Sets the bean property .
1049	Get bean property .
1050	Shutdown the bean .
1051	Resolve the parameters of a method or constructor .
1052	Render the form .
1053	Gets the value of the property .
1054	Closes the end tag .
1055	Create an element node .
1056	Adds a tag .
1057	Removes the last child node if it is empty .
1058	Returns the query string .
1059	Get the action class name
1060	Calculates the to value for the given count .
1061	Iterate collection .
1062	Iterate the array .
1063	Replaces substring with substring with another string .
1064	Replaces a substring with a substring with another .
1065	Replaces all characters in a string with another .
1066	Replaces the first substring with another string .
1067	Replaces the first substring of a string with another char .
1068	Replaces the last substring of string with another string .
1069	Replaces the last substring of a string with another char .
1070	Removes substring from string .
1071	Removes the specified character from the string .
1072	Checks if all strings are empty .
1073	Checks if all strings are blank
1074	ToString array .
1075	Change the first character case .
1076	Title title .
1077	Compresses the given character with the given character .
1078	Checks if the given string starts with the given startIndex ignoring case .
1079	Checks if the string ends with the given character .
1080	Count the number of occurrences of the specified string ignoring case .
1081	Compares two strings ignoring case .
1082	Returns the index of the first whitespace in the given string .
1083	Strip the leading character from a string .
1084	Strip the last character from the string .
1085	Removes the specified character from the string .
1086	Removes the specified character from the string .
1087	Strip from a string .
1088	Crop all whitespace characters
1089	Removes leading whitespace from a string .
1090	Removes whitespace from a string .
1091	Returns the index of the first region of the given string
1092	Joins a Collection into a String
1093	Joins an array of objects into a string .
1094	Convert charset to charset name
1095	Checks if the given index is equal to the given index .
1096	Surround a string with a prefix .
1097	Prefix string .
1098	Add suffix to string .
1099	Cut the string to the end of the string .
1100	Cut a substring from a string .
1101	Removes prefix from string .
1102	Cut suffix from string .
1103	Cut the surrounding string .
1104	Inserts a string into a string .
1105	Repeats a string .
1106	Reverse the string .
1107	Returns the longest common prefix of two strings .
1108	Returns the common prefix of the given strings .
1109	Shortcut to shorten a string .
1110	Converts a string to upper case .
1111	Removes quotes from a string .
1112	Converts a byte array to a hexadecimal string .
1113	Get the bytes of a string
1114	Detect quote character .
1115	Visit a variable .
1116	Visit an enum .
1117	Visits an annotation .
1118	Register a type
1119	Registers an entity .
1120	Remove an entity .
1121	Create an entity instance .
1122	Sets the target interface
1123	Inject target field .
1124	Look up all annotated properties for the given type .
1125	Detect database .
1126	Closes the stream .
1127	Write a single byte .
1128	Determines the session id from the request .
1129	Returns the name of the mail .
1130	Serialize this object into a byte array .
1131	Write the data source to a file .
1132	Writes the message to the specified output stream .
1133	Append an argument to a string .
1134	Prepend argument .
1135	Change return type .
1136	Sets the text .
1137	Registers a type converter .
1138	Lookup a type converter .
1139	Selects a query .
1140	Selects multiple selectors .
1141	Process selectors .
1142	Selects the first node that matches the query .
1143	Walk descendants recursively .
1144	Traverses the given node .
1145	Selects and adds the given node to the result .
1146	Filter the given node at the given index .
1147	Unpack a map from a packed string
1148	Refill the buffer
1149	Creates a page from the given query .
1150	Removes select .
1151	Removes the from from from from the FROM clause
1152	Removes last order by .
1153	Decode HTML .
1154	Detects an entity name from the input string .
1155	Build the ORDER BY clause .
1156	Build the page SQL statement .
1157	Resolve columns and properties for the given type .
1158	Find by column name .
1159	Find by property name
1160	Get property name
1161	Get column name
1162	Returns the id value associated with the given object .
1163	Sets the id value .
1164	Returns the key value for the given object .
1165	Appends a string to the end of the list .
1166	Sets the index .
1167	Expands the capacity of the array .
1168	Calculates the length of the array
1169	Creates a messing message for the target bean definition .
1170	Creates a scoped proxy bean .
1171	Generate loop body .
1172	Initialize the map .
1173	Return true if the given file should be accepted .
1174	Tries to create a watch file .
1175	Start polling .
1176	Handles a change event .
1177	Adds an enumeration to the enumeration .
1178	Compute the size of the field .
1179	Put field info .
1180	Creates a target with the specified value .
1181	Write a property value to the output stream .
1182	Decorate a page .
1183	Parse the content of the page .
1184	Write decorated page .
1185	Write region .
1186	Starts the server .
1187	Run the given process .
1188	Gets the store .
1189	Creates the output stream
1190	Initialize the hint .
1191	Append an alias .
1192	Append the column name
1193	Adds a rule .
1194	Applies the given value to the rule .
1195	Process include .
1196	Processes the given value .
1197	Returns the pseudo class name .
1198	Adds all elements from the given collection to this one .
1199	Find the insertion point for an element .
1200	Binds an annotation config .
1201	Registers a new action configuration .
1202	Lookup an ActionConfig by its name .
1203	Registers an action for the given action type .
1204	Sets the system mail properties .
1205	Validate that the value is within this context .
1206	Find the last table .
1207	Fix XML elements .
1208	Registers session beans .
1209	Gets the session data .
1210	Initialize the proxy with the given name .
1211	Add an advice init method .
1212	Ends the bundle .
1213	Add a key value pair .
1214	Extract the profiles and add it to the key
1215	Add a key profile .
1216	Convert a type descriptor to a class name .
1217	Convert a type reference to a type reference .
1218	Convert a type descriptor to a signature .
1219	Convert a type to a type ref .
1220	Adds multiple consumers to the list .
1221	Creates a collection .
1222	Convert a value to a single element collection .
1223	Convert value to collection
1224	Convert collection to collection .
1225	Convert primitive array to collection
1226	Adds a line number .
1227	Accepts a MethodVisitor .
1228	Put forward reference .
1229	Adds a forward reference to the source instruction .
1230	Resolve forward reference .
1231	Mark a subroutine .
1232	Add the given subroutine retry .
1233	Compare digits .
1234	Fix the accent character .
1235	Put a byte into the buffer .
1236	Put two byte arrays .
1237	Put a short value .
1238	Put a 16 bit integer into the buffer .
1239	Puts two byte arrays into the buffer .
1240	Put an int value into the buffer .
1241	Put four bytes into the buffer
1242	Put a long value .
1243	Puts a byte array into the buffer .
1244	Enlarges the size of the array
1245	Authenticate user via http session .
1246	Authenticate user via token .
1247	Authenticate user via basic auth .
1248	Find the default message for the given locale and key
1249	Gets the resource bundle .
1250	Gets the element at the given index .
1251	Sets the id for the given entity .
1252	Saves the entity .
1253	Update an entity .
1254	Updates a property .
1255	Update property .
1256	Find an entity by id .
1257	Find an entity by property .
1258	Finds an entity that matches the given criteria .
1259	Delete an entity by id
1260	Delete an entity
1261	Count the number of entities
1262	Increases a property by its name
1263	Decrease a property by its name
1264	Finds related entities
1265	Lists all entities in the database .
1266	Removes all entries from the map .
1267	Returns a set of entries .
1268	Put a value in the map .
1269	Removes the entry from the map .
1270	Get the current stack trace .
1271	Get the stack trace from the Throwable
1272	Get the stack trace chain for the given exception .
1273	Returns the cause chain of the given throwable .
1274	Returns the stack trace of the given exception .
1275	Returns the stack trace as a string .
1276	Builds the message for the given message .
1277	Unwraps the given exception .
1278	Registers the given class path entry .
1279	Accepts the specified class .
1280	Gets the system class loader .
1281	Get a resource as a stream .
1282	Get a resource as a stream .
1283	Gets the given class as a stream .
1284	Gets a class as a stream .
1285	Adds a new value to this route .
1286	Find or create a child .
1287	Parse the request .
1288	Convert value to collection .
1289	Invokes setter .
1290	For internal use only
1291	Create a bean property .
1292	Extract the type of the getter .
1293	Stop authentication .
1294	Starts the authentication token .
1295	Convert localDate to Date
1296	Converts a LocalDateTime to a Calendar object .
1297	Define a proxy .
1298	Adds a check .
1299	Resolve the given class .
1300	Add classes to the cache .
1301	Collect annotation checks for a property .
1302	Collect annotation checks .
1303	Copy default values from an annotation .
1304	Encode URI part .
1305	Encodes a string .
1306	Encodes the scheme .
1307	Encodes host .
1308	Encodes the port .
1309	Encodes a path .
1310	Encodes a query .
1311	Encodes a query parameter .
1312	Encodes the fragment .
1313	Retrieves the properties of the class .
1314	Gets all property descriptors .
1315	Returns the set - cookie header .
1316	Unzip the response .
1317	Closes the response .
1318	Returns true if the given scope should be accepted .
1319	Prints the routes .
1320	Encrypt a byte array
1321	Decrypt a byte array
1322	Convert map to bean type
1323	Generate a list .
1324	Sets the property value .
1325	Generate a map .
1326	Sort by id .
1327	Sets the default header .
1328	Sends a request to the client .
1329	Sends a request .
1330	Adds default headers .
1331	Read cookies .
1332	Add cookies to the request .
1333	Sends an email .
1334	Sets the subject for the given email .
1335	Sets the sent date .
1336	Sets headers .
1337	Sets the people from a mail message .
1338	Sets the recipients .
1339	Add body data .
1340	Sets the content of the part .
1341	Creates the body part for an attachment .
1342	Extract the content type from data header .
1343	Saves the result set .
1344	Close all ResultSets
1345	Closes the query .
1346	Closes the query .
1347	Sets the fetch size .
1348	Sets the maximum number of rows .
1349	Execute update .
1350	Execute the query and close the statement .
1351	Returns the set of generated columns .
1352	Returns the query string .
1353	Create a proxy for the given aspect class
1354	Creates a collection from an iterator .
1355	Creates a stream from an iterator .
1356	Compares two Comparators
1357	Sets the default wiring mode .
1358	Print a log message .
1359	Determines the caller class name .
1360	Shortens the class name .
1361	Exclude types .
1362	Serializes the given object to the given target .
1363	Serialize an object to a String
1364	Clone the object using serialization .
1365	Write an object to a file
1366	Reads an object from a file .
1367	Serialize an object to a byte array .
1368	Convert a byte array to an object
1369	Returns the names of the mapped types .
1370	Creates the names of the types .
1371	Read a column value .
1372	Cache entities .
1373	Resolve provider by name .
1374	Convert entity name to entity name
1375	Validate connection .
1376	Renders the view .
1377	Locates the target .
1378	Gets the writer .
1379	Gets the output stream .
1380	Write content to response .
1381	Sets the content type .
1382	Print string .
1383	Login the user session .
1384	Returns the token as json .
1385	Login via basic auth .
1386	Log out the user session .
1387	Convert a URL to a container file .
1388	Creates a new directory .
1389	Creates a directory .
1390	Copies a file to a destination file .
1391	Copies a directory recursively .
1392	Moves a file to a destination directory .
1393	Moves a directory .
1394	Deletes a directory .
1395	Read the UTF - 8 chars from a file .
1396	Read the contents of a file into a char array .
1397	Writes a string to a file .
1398	Write a string to a file
1399	Append a string to a file .
1400	Read a number of bytes from a file .
1401	Write a byte array to a file .
1402	Append a byte array to a file .
1403	Copies a file or directory .
1404	Deletes a file or directory .
1405	Creates a temporary directory
1406	Checks if the given file is binary .
1407	Checks that the given source directory exists .
1408	Checks if the given source file exists .
1409	Prints the usage for the given command .
1410	Resolves an action method .
1411	Registers an action .
1412	Registers a path alias .
1413	Moves to the next iteration .
1414	Creates a new CharArraySequence from the specified value .
1415	Execute the proxy
1416	Matches the target string .
1417	Creates a new CharSequence .
1418	Returns an array of URLs for the given class .
1419	Set the bcc addresses .
1420	Registers a type serializer for the given type .
1421	Lookup a type
1422	Parses the given input stream as a multipart request .
1423	Gets the value of a parameter .
1424	Gets the value of a parameter .
1425	Gets a file param .
1426	Gets the request files .
1427	Initialize the filter .
1428	Parse the given string to the SQL statement .
1429	Find the end of the macro .
1430	Count the number of escapes for a macro .
1431	Build query string .
1432	Parse query string .
1433	Prepares header parameter name .
1434	Extract the media type from a content type .
1435	Generate the HTML representation of the given node .
1436	Generate HTML for the given node .
1437	Configures the servlet with the given servlet context .
1438	Reset the iterator .
1439	Sets whether the parser should be lazy .
1440	Replaces the target type with the given path .
1441	Parse string as list .
1442	Parse the given string as a Map .
1443	Resolves the value for the given value .
1444	Skip object .
1445	Parse a string .
1446	Parse string content .
1447	Parse unicode .
1448	Parse string content .
1449	Parse a number .
1450	Parse array content .
1451	Create empty constructor
1452	Creates a simple method wrapper .
1453	Resolves the raw type name .
1454	Resolve a reference from a property descriptor .
1455	Convert references to bean references .
1456	Read all references from an annotation .
1457	Build the default references for the given method or method .
1458	Build the default reference for the given property descriptor .
1459	Removes duplicate names .
1460	Convert references to bean references .
1461	Convert an annotation value to an array of beans .
1462	Run the Jodd Joy
1463	Finds a method by its name .
1464	Finds the constructor with the given parameter types .
1465	Resolve all interfaces of the given type .
1466	Compare two classes .
1467	Force access .
1468	Create a new instance of the given class with the given parameters .
1469	Get the superclasses of the given type
1470	Returns the child class of the given parent class .
1471	Returns the JAR file for the given class .
1472	Sleeps .
1473	Sleeps .
1474	Waits for the specified object to be interrupted .
1475	Creates a thread factory with the specified name and priority .
1476	Gets the value of the supplier .
1477	Visit a parameter .
1478	Visits an annotation .
1479	Visits a type annotation .
1480	Visits a parameter annotation .
1481	Visit a field instruction .
1482	Visits a method instruction .
1483	Generate invoke dynamic instruction .
1484	Visit a jump instruction .
1485	Visit a multi - array instruction .
1486	Visit a try catch block .
1487	Visits a local variable annotation .
1488	Convert the properties to a writer .
1489	Process the input stream .
1490	Moves to the next element .
1491	Moves to the next element .
1492	Joins the given arrays into a single array .
1493	Joins the given arrays into a single array .
1494	Resize the buffer to a new size
1495	Appends an element to the buffer .
1496	Removes the specified component from the buffer .
1497	Returns the index of the specified value .
1498	Returns the index of the specified value .
1499	Returns the index of the first occurrence of the specified byte array .
1500	Enable XHTML mode .
1501	Parse the content and return a Document .
1502	Parse and return a DOM Document .
1503	Compute max stack and local
1504	Ends the current basic block without its parent .
1505	Collect attribute prototypes .
1506	Inject target object .
1507	Registers a pseudo class .
1508	Lookup a pseudo class by its name .
1509	Invokes an action .
1510	Returns the names of all bean properties for the given type .
1511	Visit all properties .
1512	Returns true if the given property name matches the specified rule .
1513	Resolves the given class .
1514	Read the parameters from the given filter config .
1515	Sends the bundle file to the response .
1516	Lookup a bundle file .
1517	Looks up the gzip bundle file
1518	Registers a bundle .
1519	Creates a digest for the given source .
1520	Create bundle .
1521	Clears the bundle files .
1522	Fix CSS relative URLs .
1523	Update column .
1524	Creates the table reference name .
1525	Gets the DbSession .
1526	Convert value to single element array .
1527	Parse the signature for the trace .
1528	Resolve set injection points for given type .
1529	Checks if the given property type is ignored .
1530	Opens a connection for a query .
1531	Opens a transaction .
1532	Closes the transaction .
1533	Commit a transaction .
1534	Rollback a transaction .
1535	Creates a new Properties object from a file .
1536	Creates a new Properties object from a String
1537	Load properties from a string
1538	Returns a subset of the given properties .
1539	Create a Properties object from the classpath
1540	Get a property from a Map
1541	Resolve all variables in a Properties object .
1542	Resolve a property .
1543	Resolve scope .
1544	Get the transaction mode
1545	Registers the given annotations .
1546	Read transaction annotation values from method .
1547	Returns true if the node is accepted .
1548	Matches an element .
1549	Accepts a node at the given index .
1550	Unescape the value .
1551	Build a list of packages from a Java version number .
1552	Clones this node to another .
1553	Detach from parent node .
1554	Adds a child node .
1555	Insert a child node .
1556	Inserts a new child .
1557	Inserts a new child .
1558	Inserts a new child .
1559	Inserts a new child node into this node .
1560	Remove all child elements
1561	Find the child node with the given name .
1562	Filters child nodes by predicate .
1563	Checks whether this node is valid .
1564	Initialize the child elements .
1565	Initialize sibling names .
1566	Initialize the child nodes .
1567	Changes the owner document of a node .
1568	Returns the previous sibling name .
1569	Returns the text content of this element .
1570	Returns the HTML representation of the lagart object .
1571	Returns the inner HTML of the fragment .
1572	Visit all child nodes .
1573	Returns the CSS path .
1574	On decora tag .
1575	Process id attribute start .
1576	Initialize the decora tag .
1577	Adds a proxied aspect to the graph
1578	Add a root package .
1579	Add the root package of the given action class .
1580	Find the root package for the given action path .
1581	Resolve validation message .
1582	Removes duplicate names .
1583	Adds a property file to the properties file .
1584	Iterates over all targets .
1585	Iterates over all targets and executes the specified scope .
1586	Iterates over the targets and executes the given scope .
1587	Retrieves the values of the target parameter .
1588	Create the targets for the action .
1589	Creates an action method argument .
1590	Notification that the session was created .
1591	Notification that the session was destroyed .
1592	Adds a value to the list
1593	Adds the given JsonArray to the list .
1594	Removes the element at the given position .
1595	Resolve target .
1596	Handle target not found .
1597	Convert value to string .
1598	Resolve an action filter by its class .
1599	Returns the pseudo function name .
1600	Resolve the specified class .
1601	Creates Socks4 proxy socket .
1602	Returns the number of attributes .
1603	Gets all action results .
1604	Checks if the given character is equivalent to the match .
1605	Find the first equal to the given index .
1606	Find the first equal to the given index .
1607	Add arguments to the command line .
1608	Set environment variable .
1609	Run the command line .
1610	Invokes the given listener type .
1611	Copy from another frame .
1612	Get the abstract type from an API format .
1613	Extracts the abstract type from the descriptor .
1614	Sets the input frame from the input stack .
1615	Gets the local variable .
1616	Set local .
1617	Push the given abstract type onto the stack .
1618	Pushes an abstract type .
1619	Pop the output stack .
1620	Pop the stack .
1621	Adds an initialized type .
1622	Determines the type of the given abstract type .
1623	Write an abstract type .
1624	Removes expired entries .
1625	Schedule prune .
1626	Visits a module .
1627	Visit a host
1628	Visit an outer class .
1629	Visits an annotation .
1630	Visit a nest member .
1631	Visit an inner class .
1632	Visits a field .
1633	Get the current thread session
1634	Closes the current thread session .
1635	Creates the execution array .
1636	Invokes the action method .
1637	Read the request body
1638	Calculates the index of the first item in the page .
1639	Calculate the index of the first page .
1640	Returns true if the given value matches this .
1641	Converts a char array to a byte array .
1642	Find the first difference in the given index .
1643	Resolve node name .
1644	Resolve attribute name .
1645	Renders an attribute .
1646	Load properties from a file .
1647	Load props from file
1648	Load props from an input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Load properties from classpath .
1652	Returns the value associated with the specified key
1653	Sets a value .
1654	Extract properties from a map
1655	Extract properties from a map
1656	Extract all sub - properties from the given map .
1657	Extracts the inner map with the specified prefix .
1658	Adds an inner map .
1659	Resolve active profiles .
1660	Get all profiles
1661	Get profiles for a given key name .
1662	Adds a property injection point .
1663	Adds a set injection point .
1664	Adds a method injection point .
1665	Add init method points .
1666	Add destroy method points .
1667	Resolves the target class .
1668	Inject target field .
1669	Get the target wrapper type
1670	Find a field by its name .
1671	Returns the type of the field .
1672	Determines the type of the field .
1673	Resolves the type of the getter .
1674	Creates a JsonResult from the given object .
1675	Creates a JsonResult from an exception .
1676	Resolve the http method name .
1677	Match pattern .
1678	Resolves the given class name .
1679	Resolve resource loading .
1680	Load a class .
1681	Resolves a resource by its name .
1682	Wait for the end of the queue .
1683	Detect annotation type .
1684	Build an InjectionPoint from an annotation value .
1685	Visit a class .
1686	Returns an array of URLs for the given class .
1687	Sets the bean .
1688	Updates the bean .
1689	Load property descriptor
1690	Returns the getter for the property .
1691	Returns setter .
1692	Connect the connection to the database .
1693	Adds an iterator to the list .
1694	print logo
1695	Stop the agent .
1696	Creates a socket .
1697	Creates SSLSocket .
1698	Gets the default SSLSocketFactory .
1699	Gets the socket factory .
1700	Generate a random string from the given chars .
1701	Generate a random string .
1702	Generate random ranges
1703	Creates new array instance .
1704	Inject value into target object .
1705	Convert value to target type .
1706	Visit a Provider .
1707	Creates a default type cache .
1708	Sets the value for the given type .
1709	Gets all method descriptors .
1710	Returns the IP address for the given hostname .
1711	Get ip address as int
1712	Checks to see if an IP address is valid
1713	Returns the host name of the given IP address .
1714	Download bytes from URL
1715	Download a string from a URL
1716	Download a file .
1717	Inject targets .
1718	Injects the target request .
1719	Connect to a host and port .
1720	Connect to a host and port .
1721	Returns the index of the primitive class name .
1722	Loads a class from a class loader .
1723	Loads an array class by its component type .
1724	Shutdown all bean data .
1725	Creates a binary search for the given array .
1726	Creates a binary search for the given array .
1727	Exclude exclude patterns .
1728	Includes the given strings .
1729	Includes all bean properties matching the given template .
1730	Start the tag .
1731	Register a component
1732	Determines the type of the column .
1733	Preprocess a SQL statement .
1734	Creates a new ResultSetMapper
1735	Find generated key by type
1736	Populate generated keys .
1737	Creates a wrapper for the action interceptor .
1738	Sets the bean .
1739	Sets the map .
1740	Sets the specified objects .
1741	Inserts a chunk after the given one .
1742	Lookup the type for the given entity .
1743	Find the column reference
1744	Resolve table name
1745	Resolves the class .
1746	Append missing space .
1747	Returns the names of the file parameter names .
1748	Includes page .
1749	Gets the servlet path .
1750	Get request uri
1751	Resolve parameter names for the action class .
1752	Initialize the pite container
1753	Stop the container .
1754	Method allow to filter email subject .
1755	Method allow to filter emails by ID .
1756	Method allow to filter from address .
1757	Method allow to specify to address .
1758	Method allow to filter a cc address .
1759	Method allow to specify bcc address .
1760	Method allow to filter email fields .
1761	Adds a flag to the email filter .
1762	Method allow to find the received date .
1763	Method allow to filter sent date .
1764	Method allow to filter email size
1765	Creates and returns a new filter that will be used to search for an email filters .
1766	Creates and returns an OrFilter that accepts the given emails .
1767	Returns a new email filter which is not equal to this one .
1768	Concatenates the search term .
1769	Encode a byte array to a base 32 string .
1770	Convert value to byte array .
1771	Checks if gzip is eligible for gzip .
1772	Validate target .
1773	Validate target bean .
1774	Sets the specified profile .
1775	Sets the enabled profiles .
1776	Checks if all profiles match .
1777	Parse request body .
1778	Converts this object to milliseconds .
1779	Add a new Julian date .
1780	Subtract a Julian date from another .
1781	Sets the fraction .
1782	Initialize the parser .
1783	Emit a comment .
1784	Prints an error message
1785	Creates a hash for the given password .
1786	Generate PBKDF2 .
1787	Converts a hex string to a byte array .
1788	Resolve provider definition .
1789	Sets the name of the email attachment .
1790	Sets the content id from the name if not set .
1791	Resolves the content type .
1792	Parse type .
1793	Compute the attribute size size .
1794	Write attributes to the output .
1795	Decode a string .
1796	Decode query string .
1797	Starts the database .
1798	Check connection provider .
1799	Visits a method .
1800	Visit the end of the list .
1801	Creates a method signature .
1802	Converts an array of objects to a CSV string .
1803	Converts a String to a String array
1804	Resolve the specified class .
1805	Creates a class reader for the given advice .
1806	Get the class reader for the given advice .
1807	Encrypt a string
1808	Decrypt a string
1809	Get logger by name .
1810	Sets the cookie name .
1811	Creates an action request .
1812	Creates a wrapper for the action filter .
1813	Destroy bean .
1814	Shutdown all beans .
1815	Gets the received emails .
1816	Starts the ClusteredService container .
1817	Run the report .
1818	Prints an error message .
1819	Prints a rate .
1820	Maps an existing file .
1821	Closes the replay .
1822	Performs the actual work .
1823	Compute the position of the term .
1824	Inserts a new buffer into the buffer .
1825	Append the padding for the given length .
1826	Closes the archive .
1827	Poll for error response .
1828	Stop a replay .
1829	Event for an image .
1830	Displays an unavailable image .
1831	Get status indicator reader
1832	Returns the status indicator reader for the given channel .
1833	Sets the limit .
1834	Appends a buffer to the buffer .
1835	Polls from the server .
1836	Maps a file to an aeron file .
1837	Creates a snapshot of the counters .
1838	Creates the default header .
1839	Sets the key buffer .
1840	Adds a label buffer .
1841	Connect to the client
1842	Try to connect to the server .
1843	Closes the stream .
1844	Starts a new recording .
1845	Stop recording .
1846	Replays a buffer .
1847	Stop replay .
1848	Lists records in the buffer .
1849	List all records for a uri .
1850	Requests a listing request .
1851	Extend a recording .
1852	Gets the recording position .
1853	Gets the stop position request .
1854	List recording subscriptions .
1855	Returns true if the given channel has the specified tag .
1856	Returns the destination address for the given URI .
1857	Returns a human readable description of this instance .
1858	Add a destination to the transport .
1859	Insert a new packet .
1860	Find control toggle .
1861	Put a value .
1862	Returns the channel tag .
1863	Returns the entity tag .
1864	Add session id to channel .
1865	Gets the tag .
1866	Appends the padding to the header .
1867	Updates the publisher limit .
1868	Allocate a new unsafe buffer .
1869	Returns the label name for the given type id .
1870	Returns the number of bytes available in the buffer .
1871	Clears the builder .
1872	Validates the URI .
1873	Sets the prefix .
1874	Sets the media .
1875	Sets the control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the length of the socket .
1879	Open datagram channel .
1880	Close the connection .
1881	Checks if the given buffer is a valid frame .
1882	Receive data from the receive datagram channel .
1883	Handles a NAK request .
1884	Process the timeouts of the active retransmit actions .
1885	Returns a string representation of the given status .
1886	Allocate a counter .
1887	Reset this vector .
1888	Validates this buffer .
1889	Computes and returns the length of the given vectors .
1890	Computes the producer window length for the given term buffer length
1891	Checks that the socket buffers are valid
1892	Validate the page size .
1893	Validates the session id range .
1894	Validates the unblock timeout .
1895	Sets the error code .
1896	Resets the leader .
1897	Encode cluster members .
1898	Add members publications to the channel .
1899	Close member publications .
1900	Checks if the given cluster members are active .
1901	Returns the rank of the cluster members .
1902	Resets the log position for all cluster members .
1903	Checks to see if the log position is reached .
1904	Checks to see if all members have a vote on full count .
1905	Checks to see if the node has the majority vote .
1906	Determines a member from a list of members .
1907	Validate member endpoints .
1908	Checks if two cluster members are identical .
1909	Checks to see if the given member is a valid candidate .
1910	Returns true if the given member is a quorum .
1911	Checks if two members are duplicated .
1912	Find the index of the member with the given id .
1913	Removes a member from the old members array
1914	Returns the highest member id
1915	Maps an existing CNC file to an existing one .
1916	Checks if the specified directory is active .
1917	Checks if the driver is active .
1918	Checks if the driver is active .
1919	Require the driver termination
1920	Returns the length of the frame in the buffer
1921	Encodes the given frame length in the given buffer .
1922	Sets the type header .
1923	Writes the flags to the given buffer .
1924	Writes the specified term offset to the given buffer .
1925	Write a term id to the buffer
1926	Find the counter id by recordingId
1927	Find a counter id by session id
1928	Returns the recorded id for the given counter id .
1929	Checks if a counter is active .
1930	Sets the application specific feedback message .
1931	Reload the entries .
1932	Find the last term .
1933	Creates a new recovery plan .
1934	Creates a recovery plan from a list of snapshots .
1935	Append a term .
1936	Appends a snapshot entry .
1937	Commit a log position .
1938	Write a tombstone entry .
1939	Closes the connection .
1940	Inserts a header vector .
1941	Unblock a block of term buffers
1942	Returns the channel .
1943	Sets the channel .
1944	Validates the term length .
1945	Checks that the given page size is valid .
1946	Sets the active term count .
1947	Compute the position of the active term .
1948	Compute the log length for the term and file size
1949	Store the default header .
1950	Applies the default header .
1951	Rotate the log .
1952	Initialises the tail with the given term id
1953	Returns the offset for the term length
1954	Returns the raw tail of the given metadata buffer .
1955	Atomically sets the raw raw raw bytes to the metadata buffer .
1956	Sets the token buffer .
1957	Allocate a counter .
1958	Find the next counter id .
1959	Checks to see if a counter has been received .
1960	Get the snapshot recording id for the given counter id .
1961	Converts the flags to a character array .
1962	Sets the channel name .
1963	Inserts a buffer to the cluster .
1964	Wrap the given AtomicBuffer .
1965	Commit the buffer .
1966	Abort the header .
1967	Starts the media driver .
1968	Close all resources .
1969	Compute the position of this frame .
1970	Allocate a counter .
1971	Find the counter id for the given service .
1972	Creates a snapshot of the counters .
1973	Allocate a counter .
1974	Closes the buffer .
1975	Dispatches a recording descriptor .
1976	Add a new slab .
1977	Sets the byte at the specified index .
1978	Add statistics .
1979	Calculates the row ranges for a given filter .
1980	Convert a list type .
1981	Convert a struct type into a group type .
1982	Add a message to the message .
1983	End the next bit packed run .
1984	Reads a single object from the stream .
1985	Read the footers from a file .
1986	Reads a summary file from a summary file .
1987	Read footer from a file
1988	Reads the next row group .
1989	Reads the next row group from the current block .
1990	Reads a dictionary .
1991	Adds a writer to the writer .
1992	Removes a writer from the writer .
1993	Update total allocation .
1994	Registers a call back with the given name .
1995	Starts the stream .
1996	Start a block .
1997	Start a new column .
1998	Write a dictionary page .
1999	Write data page .
2000	Write a single column chunk .
2001	Ends a block .
2002	Copies the specified number of bytes from the input stream to the given position .
2003	Ends the writer .
2004	Merge a list of metadata files .
2005	Merge a list of metadata files .
2006	Write a metadata file .
2007	Merges the given file metadata into a new one .
2008	Read the value .
2009	Returns true if the given schema is null .
2010	Returns the first non - null non - null object .
2011	Convert a string to a value
2012	Creates a thrift meta data from the extra metadata .
2013	Converts a thrift class to a ThriftMetaData object .
2014	Returns the extra metadata for the thrift class .
2015	Write null value .
2016	Write a page .
2017	Initialize data from a page .
2018	Allocate the values buffer
2019	Checks if an enumeration is present .
2020	Calculate bit widths for delta blocks
2021	Throws the given exception if it is an instance of the given class .
2022	Get the statistics for the given type .
2023	Returns a builder for the given primitive type .
2024	Merge statistics .
2025	Gets the non - null value .
2026	Creates a new TaskAttemptContext instance .
2027	Invoke a method .
2028	Write members to a string buffer .
2029	Merges all fields of the given type into a list of types .
2030	Initialize the counter from the given reporter .
2031	Get a filter from the configuration .
2032	Get all footers in parallel
2033	Generates a list of splits for the given block .
2034	Write a record to the message writer .
2035	Validates that the given field is a valid mapping .
2036	Serialize a message descriptor .
2037	Creates a new direct codec factory .
2038	Makes sure that there is no mandatory fields that are missing .
2039	Check set .
2040	Read a file meta data from an input stream .
2041	Closes the record writer .
2042	Sets the schema for the job .
2043	Add a primitive type .
2044	Assert that the type is valid .
2045	Checks if the given long is a valid int .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a SchemaMapping from a Parquet schema
2048	Creates a SchemaMapping for the given arrow schema .
2049	Write data page header .
2050	Skip to match .
2051	Write object as base64
2052	Removes the entry from the cache .
2053	Put a cache entry .
2054	Gets the current value for the specified key .
2055	Write value .
2056	Write value without conversion .
2057	Set the glob pattern .
2058	Output a string to a file
2059	Opens an input stream for the given filename .
2060	Create a unbound record filter for the given column .
2061	Convert a struct type to a schema type
2062	Wrap a list type .
2063	Creates a group type .
2064	Gets the merged key value metadata .
2065	Creates a new split .
2066	Get fields by name .
2067	Resolves the requested schema access to the given configuration .
2068	Get the list of input files .
2069	Checks that the parquet files are valid .
2070	Get input files from a directory
2071	Binds a page filter to a page .
2072	Creates a List consumer for the specified type .
2073	Initialize the mwork .
2074	Merges the given tuple into a single tuple .
2075	Sum up the sum up of a tuple
2076	Read a struct .
2077	Read a map entry .
2078	Write an int .
2079	Read an int from the buffer starting at the given offset
2080	Sets the schema for the given job .
2081	Creates topic if not already exists .
2082	Creates a duplicate pipeline stage .
2083	Creates a new stage bean .
2084	Creates a list of interceptors .
2085	Creates an interceptor bean .
2086	Parse the given schema and return a Schema object .
2087	Convert milliseconds to days
2088	Get Avro schema from a header
2089	Convert V1 to V1
2090	Returns the length of the buffer .
2091	Copy blobstore resources to the staging directory
2092	Reset the statement .
2093	Reports a thread health check .
2094	Registers the specified thread .
2095	Store control hub configurations .
2096	Login a WebCredential .
2097	Upgrade the given issues if necessary .
2098	Upgrade the stage if needed
2099	Upgrade the version if needed
2100	Upgrade services if needed .
2101	Upgrade stage if needed
2102	Get the list of fields that are null .
2103	Checks if the given name is a system class .
2104	Adds an element to the end of the list .
2105	Adds an element to the queue .
2106	Returns the value associated with the given key or default if no value exists .
2107	Adds a list of reported errors to all stages .
2108	Get a descriptor from a file .
2109	Get all file descriptors from the given set .
2110	Populates the default values for the given file descriptor .
2111	Create a descriptor from a file descriptor .
2112	Maps a protobuf message to a SDC field .
2113	Converts a SDC field to a protobuf message .
2114	Convert a field to a protobuf message .
2115	Convenience method to convert configuration to SeaClouds .
2116	Check connection .
2117	Convert a kudu type to a field type .
2118	Creates a field from the result .
2119	Intercept the interceptors
2120	Returns the text of this buffer .
2121	Adds missing configurations to a stage .
2122	Parse the response .
2123	Adds response headers to record .
2124	Write the response header to a record .
2125	Write response header to record header .
2126	Saves metadata .
2127	Configure the client .
2128	Parses the headers from the request .
2129	Increments the source offset by the given amount .
2130	Parse paginated result .
2131	Add response headers to record .
2132	Resolve headers .
2133	Process the response .
2134	Checks if a property is defined .
2135	Convert a DataParserException to a RecoverableDataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException .
2137	Gets the credentials .
2138	Generate a preview from a pipeline
2139	Copies the buffer to the buffer .
2140	Removes duplicates from the given packages .
2141	Empty batch .
2142	Find the next line .
2143	Resolve a chunk .
2144	Closes the connection .
2145	Escape string .
2146	Creates flow control settings .
2147	Gets the channel provider .
2148	Puts a batch into the producer .
2149	Compile an expression .
2150	Digest expression for digest expression
2151	Adds a dictionary .
2152	Adds a dictionary .
2153	Stops the aggregator data .
2154	Creates a new data window for the aggregator .
2155	Serialize object .
2156	Deserialize a string to a type
2157	Deserialize a file .
2158	Write a record to the output stream
2159	Evaluate an EL expression .
2160	Generate an inner field from the original list .
2161	Get the table name
2162	Extract the database name from the metadata record .
2163	Returns true if the metadata record contains an internal field .
2164	Returns the location of the given metadata record .
2165	Determines if a record is a custom location
2166	Extract the avro schema from the metadata record .
2167	Returns the data format for the given metadata record .
2168	Creates a new schema metadata field .
2169	Validate partition information .
2170	Generate the partition path .
2171	Serialize a schema to an HDFS file .
2172	Sets the parameters for the operation .
2173	Get configuration
2174	Parse a ISO 8601 formatted timestamp .
2175	Formats a template .
2176	Start a batch context .
2177	Checks if the record contains Solr fields
2178	Filters the list of autogenated fields .
2179	Sends an event to the handler .
2180	Parse a jar name from a source name .
2181	Parse a jar file name .
2182	Get an instance of CouchbaseConnector .
2183	Closes the Couchbase environment .
2184	Validate the Couchbase configuration .
2185	Get the label from a string code .
2186	Verify that the given config definition exists .
2187	Retrieves a value from the vault .
2188	Get the operation type from the header .
2189	Write document .
2190	Build the subdoc mutation .
2191	Returns the SQL statement to alter the table .
2192	Configures the SASL authentication .
2193	Retrieves the next message from the queue .
2194	Commits a batch .
2195	Sends a throwable error .
2196	Inject the given stage .
2197	Get the definitions for the stage
2198	Get the lineage publisher definition
2199	Format a column name .
2200	Returns the value for the given value .
2201	Get information about a pipeline
2202	Creates a pipeline fragment .
2203	Get a list of pipelines
2204	Imports a pipeline fragment .
2205	Get the file path for the given record .
2206	Get the operation code from a record .
2207	Gets the field path
2208	Retrieves the next stage from the queue .
2209	Get the next available runner
2210	Gets the idle runner for the specified idle time .
2211	Adds a runner to the pipeline .
2212	Destroy the pipeline
2213	Validates that the queue is not destroyed .
2214	Checks if the stream exists .
2215	Returns the last shard id for the given Stream .
2216	Process the queue .
2217	Handle SQL exception .
2218	Returns the hash for the given record .
2219	Compare two files .
2220	Retrieves the PID value of the given process .
2221	Validate and extract fields to hash .
2222	Get the UserGroupInformation for the given user .
2223	Roll the stats .
2224	Creates a snapshot of the current stats .
2225	Ensure that the directory exists .
2226	Writes a batch of records to the disk .
2227	Writes a batch of records to the disk .
2228	Write records to disk .
2229	Generate no more data event
2230	Detect a new partition .
2231	Updates an Avro record .
2232	Process a single value .
2233	Checks if two stages are identical .
2234	Starts the Mesos driver .
2235	Configure the auth and build the client .
2236	Resolve headers .
2237	Evaluate an HttpMethod object .
2238	Fill null types .
2239	Gets the value of a field .
2240	Load a schema from the registry
2241	Registers a schema .
2242	Load the schema from the registry
2243	Gets the schema id from the given subject .
2244	Load schema from registry
2245	Write schema id .
2246	Detect schema id .
2247	Get default values from schema
2248	Parse all records and return a list of records .
2249	Logs information about this dependency .
2250	Get bad records from error sink .
2251	Initialize the schema generator .
2252	Returns the vertex vertices for the given vertex .
2253	Returns the vertex vertices for the given vertex .
2254	Serialize the offset map .
2255	Deserialize the offset map .
2256	Queue a report
2257	Get a report .
2258	Checks to see if the check point file is valid .
2259	Write offsets to the main offset file .
2260	Deletes the given blob .
2261	Handle error .
2262	Handle an archive .
2263	Returns a live file reader .
2264	Release a reader .
2265	Sets DPM base URL
2266	Add default header .
2267	Parse a date from a string .
2268	Escape a string .
2269	Gets the client .
2270	Initialize and return a connection .
2271	Get table metadata .
2272	Create a bulk inser .
2273	Creates a new event builder .
2274	Build a Schema from the given fields .
2275	Convert an Oracle code to an SDCC code .
2276	Add jars to a job .
2277	Add jars to a job .
2278	Check a field order by name .
2279	Checks if the given field name matches the given field name .
2280	Gets the offset lag for a file .
2281	Starts the premain method .
2282	Returns the parallelism for this stage .
2283	Run a query .
2284	Returns a map of field names to their values .
2285	Get the table description
2286	Validate that the table accepts inserts .
2287	Get the type of a field
2288	Checks if a field is nullable
2289	Get the schema for the table response
2290	Get the column properties
2291	Returns the class for the given type name
2292	Initializes the Aerospike bean .
2293	Get the topic for a record .
2294	Convert a list of configurations to a V6 version
2295	Get input stream .
2296	Gets the output stream .
2297	Returns true if the file exists .
2298	Parse a filesystem permission string .
2299	Validate all services available .
2300	Creates a simple aggregate .
2301	Gets the aggregator unit .
2302	Create aggregator data .
2303	Creates a new aggregator .
2304	Starts the data provider .
2305	Stops the aggregator .
2306	Updates the aggregator data .
2307	Acquires a login manager .
2308	Release a LoginManager .
2309	Convert a glob to a regular expression .
2310	Lists objects in S3 .
2311	Stop the pipeline .
2312	Returns an empty batches for all active runners .
2313	Creates the failure batch .
2314	Convert a record to a bound statement .
2315	Sets the configuration .
2316	Generate lookup key .
2317	Handles partitioning turned off .
2318	Read the next line .
2319	Roll the usage timer .
2320	Enable DPM .
2321	Disables DPM .
2322	Normalize URL .
2323	Retrieve a user token .
2324	Log out the user auth token
2325	Updates the token file .
2326	Update DPM properties
2327	Creates a Schema field for the given type .
2328	Creates a simple schema for a type .
2329	Determines the decimal scale of a record .
2330	Returns the default value for the given schema .
2331	Initialize the metrics if needed .
2332	Compare two files
2333	Returns the index of the specified group .
2334	Returns a list of group names .
2335	Checks if the string is an escaped character .
2336	Checks if the string is a slash escaped char .
2337	Checks if the given string is inside a character class .
2338	Count the number of open parens .
2339	Extract groups from a named pattern .
2340	Replaces all occurrences of the given pattern with the given replacement .
2341	Handle a GET request .
2342	refresh the schema
2343	Returns true if the given entry has expired .
2344	Returns the offset of the file .
2345	Fast forward .
2346	Creates an empty stage .
2347	Convert a string to a nice number .
2348	Parse a part .
2349	Parse values .
2350	Lookup primary keys .
2351	Create custom field mappings .
2352	Get SQL type name
2353	Returns the table name .
2354	Set primary keys .
2355	Handle exception .
2356	Performs the processing of the pipeline .
2357	Prepares the pipe context
2358	Finish the pipeline context .
2359	Flatten the entire record .
2360	Create a detached stage from the given stage .
2361	Execute the specified record .
2362	Returns a sorted map of columns to a list of parameters .
2363	Returns the condition for the partition column
2364	Validate the given offset and offset .
2365	Determines the list of generated bundles .
2366	Gets non - empty arguments .
2367	Gets the operation .
2368	Convert bytes to display format
2369	Scan a live file .
2370	Get number of pending files
2371	Checks if the specified name is whitelisted .
2372	Checks if the expected versions are equal
2373	Entry point to the bootstrap cluster .
2374	Propagate runtime configuration .
2375	Validate the report description .
2376	Creates a JdbcRecordWriter for the given data source .
2377	Creates a JdbcRecordWriter for the given data source .
2378	Upgrade a list of configurations .
2379	Extract named groups from raw data .
2380	Commit a consumer .
2381	Creates an embedded SDC .
2382	Sets fields in a record .
2383	Retrieves a list of all the pipelines that have been changed .
2384	Acknowledge an Ack event .
2385	Create a gauge .
2386	Returns a sorted map of column names to parameters .
2387	Generate header attributes .
2388	Validate the record .
2389	Deletes the temporary parquet file
2390	Get an input stream from a record .
2391	Get a datum reader from an input stream
2392	Write a Parquet file .
2393	Checks that the input field is not supported .
2394	Checks if the given field is an input field .
2395	Checks that the input field is valid .
2396	Checks if the input is an input decrypt .
2397	Encrypt the given field
2398	Sets the parent pattern .
2399	Append a replacement to a string buffer .
2400	Returns the named groups .
2401	Replaces the pattern with the given replacement string .
2402	Ensure that the avro schema exists .
2403	Get the value of a global variable .
2404	Creates the start event record for the pipeline .
2405	Creates a stop event record .
2406	Fix offset .
2407	Extract the value of the value from a field .
2408	Execute the alter table add partition query .
2409	Execute the alter table set table properties .
2410	Execute describe database .
2411	Execute a SQL query .
2412	Execute a SELECT statement
2413	Execute a batch .
2414	For each stage in the pipeline
2415	Gets the offset commit trigger .
2416	Checks if the pipeline is stop .
2417	Accepts a new pipe
2418	Evaluates the insert id for a record .
2419	Gets the value from a field .
2420	Sets the fragment in a record .
2421	Sets the document in the record .
2422	Sets the n1QL query .
2423	Handles a single file data format .
2424	Checks to see if there is an incomplete transaction with the given sequence number .
2425	Executes the given class loader on the current thread .
2426	Sets the state creator .
2427	Logout from Kerberos .
2428	Sets the exceptions .
2429	Replace all variables in the path
2430	Ensure that the path is correct .
2431	Main entry point .
2432	Get directory path
2433	Renames a temporary file .
2434	Checks if the record is roll .
2435	Matches a string against a pattern .
2436	Retrieves the offsets of the file .
2437	Returns the remaining wait time .
2438	Returns the offsets lag for the given map .
2439	Creates and initializes the stage library .
2440	Create a new stage library .
2441	Creates a new instance of StageLibraryDelegate .
2442	Gets the value of the specified metric .
2443	Find the end of the header .
2444	Gets the body size .
2445	Save a byte buffer to a file
2446	Create an SSLSocketFactory for the given key and path .
2447	Returns the mime type for a file .
2448	Handle the given session .
2449	Stop all connections .
2450	Add the mappings .
2451	Sends the response to an output stream .
2452	Sends the body to the given output stream .
2453	Creates a new response with the given status and total bytes .
2454	Determines if the response should be written to the response .
2455	Sets a cookie .
2456	Unload the queue
2457	Decode a base64 value .
2458	Encode a cookie .
2459	Sets the table name .
2460	Returns the name of the given principal .
2461	Registers a session repository filter .
2462	Resolves the principal name from the session .
2463	Get session by id
2464	Extract the JNDI name from a model node .
2465	Returns the canonical name of the given view method .
2466	Registers a Synchronization .
2467	This method is called before the thread finishes .
2468	Get current transaction
2469	Determine the bean factory .
2470	Determines if the cache region name matches the cache region name .
2471	Retrieves the list of services for the WSE extension .
2472	Decrease read lock count
2473	Increments the read lock count
2474	Add a service .
2475	Perform the restore calculation .
2476	Deploys the JPA deployment .
2477	Make the top level bdas accessible from the top level deployment
2478	Create the JSE metadata for the given deployment .
2479	Set the config name and file
2480	Returns the list of security meta data .
2481	Gets servlet url patterns mapping .
2482	Get servlet class mapping from POJO endpoints .
2483	Resolve the view .
2484	Get available connections for the given operation .
2485	Parse the core environment element .
2486	Parse the process id environment element .
2487	Returns the path address for the operation .
2488	Sets the address to the given operation .
2489	Returns the value of an attribute .
2490	Returns true if the given operation is included in the given model .
2491	Creates a composite operation .
2492	Creates an add operation to the given address .
2493	Creates an add operation .
2494	Creates a read - attribute operation .
2495	Creates a write attribute operation .
2496	Creates an undefine attribute operation .
2497	Returns the value associated with this context .
2498	Adds a URL context factory for the given scheme .
2499	Removes the URL context factory for the given scheme .
2500	Load validation providers .
2501	Modify the deployment .
2502	Sets the endpoints .
2503	Modify the context root .
2504	Get the transport class name
2505	Sets the runAs identity for the given security context .
2506	Pop the runAs identity from the security context .
2507	Process the servlet management .
2508	Injects a property with the given name to the given object .
2509	Checks if the given class type matches the given property type .
2510	Find the method for the given name and property type
2511	Find a field by its name
2512	Initialize the command line options .
2513	Derives the useful info for the request .
2514	Creates a standalone report .
2515	Collect the Jdr report .
2516	Register a resource adapter deployment
2517	Unregister a resource adapter deployment
2518	Register transformers for the given subsystem .
2519	Write the parameters to an output stream .
2520	Read an exception from an input stream .
2521	Get the owner of the transaction .
2522	Releases the lock for the given instance .
2523	Adds a log to the output stream
2524	Adds the CDI flag to the deployment .
2525	Gets the component view .
2526	Invoke the wsInvocation .
2527	Returns the view method that matches the given view method .
2528	Checks if source method matches the given view method .
2529	Create management statistics resource .
2530	Gets the security metadata for the specified EJB .
2531	Get the domain for the old security domain .
2532	Ensures that the two security domains are identical .
2533	Sets the IDL name .
2534	Returns the absolute name of this entry .
2535	Creates a new JNDI name from the given name .
2536	Processes the JBoss deployment .
2537	Handle a request
2538	Checks if the current transaction is in a transaction .
2539	Get the transaction synchronization registry
2540	Get the connection factory
2541	Gets the last component of the given name .
2542	Checks if name is empty .
2543	Thrown when the name is not found in the context .
2544	Creates a naming exception with the specified detail message .
2545	Creates a naming exception with the specified name and name .
2546	Creates and returns an exception with the given name .
2547	Returns a naming enumeration of the given collection .
2548	Replace the specified value with the specified name .
2549	Gets the activeMQ component control .
2550	Parse connection attributes .
2551	Creates a new instance from the given object .
2552	Gets the virtual file .
2553	Resolves the runtime name for the given address .
2554	Creates a listener for the given resource .
2555	Returns a primitive analysis for the given class .
2556	Shutdown the pool .
2557	Gets url patterns .
2558	Get servlets meta data .
2559	Gets servlet mappings .
2560	Gets the security constraints .
2561	Get the LoginConfigMetaData for the given JBossWebMetaData .
2562	Extract the context parameters from the JBossWebMetaData .
2563	Gets the web resource collections metadata .
2564	Gets the init params .
2565	Factory method to create a new SecurityConstraint .
2566	Factory method for creating WebResourceCollectionMetaData .
2567	Creates a new servlet metadata .
2568	Creates a new servlet mapping .
2569	Creates a new Auth ConstraintMetaData object with the given security constraint metadata .
2570	Creates a new UserDataConstraintMetaData .
2571	New param value .
2572	Creates a new ParamValueMetaData object .
2573	Register session bean interceptors .
2574	Process injection targets .
2575	Stop the container
2576	Returns the JNDI name for the given model node .
2577	Resolve attribute .
2578	Determines the type of a URL pattern .
2579	Checks to see if a connection factory should be used .
2580	Determines if the specified resource adapter supports an external pool .
2581	Get the activeMQ server name
2582	Returns the default persistence unit name .
2583	Starts the activity .
2584	Stop the activity .
2585	Suspend the activity .
2586	Resume the context
2587	Called when an invocation completes .
2588	Called when a transaction is created .
2589	Starts the resource .
2590	Stop the controller .
2591	Gets the capability name .
2592	Create the list of resource roots .
2593	Retrieves the class loaders for the given deployment unit .
2594	Is class file transformer?
2595	Allow two - phase bootstrap .
2596	Is default data source use?
2597	Determines whether or not the target entity manager should be skipped .
2598	Returns an ORB for the given server and port .
2599	Initialize the ORB
2600	Initialize method handles .
2601	Sets the active naming store .
2602	Validate default values .
2603	Check parameter type .
2604	Find the default value annotation .
2605	Validate base type .
2606	Gets the deferred entity managers .
2607	Returns the status as a string
2608	Add cache dependencies .
2609	Extract the dialects .
2610	Inspect the database .
2611	Identifies dialect name .
2612	Check database .
2613	Convert a string to a date
2614	Sets the node name .
2615	Mark a deployment unit .
2616	Read parameters from an input stream .
2617	Write a value to an output stream .
2618	Write an exception to the output stream .
2619	Performs a lookup .
2620	Start a new SFSB .
2621	Ends a new SFSB creation .
2622	Returns the current invocation of the current SFS call stack .
2623	Pushes the given entity managers to the current call stack .
2624	Pop the current call stack
2625	Gets the current SFSBC call .
2626	Deploys the deployment
2627	Process managed beans .
2628	Process phase listeners .
2629	Get type IDL name
2630	Inserts a primitive .
2631	Convert the name to an IDL name .
2632	Returns true if the string is a reserved IDL keyword .
2633	Returns the signature for the given class .
2634	Returns the method signature for the given method .
2635	Returns the name of a primitive type .
2636	Returns the BatchPermission for the given name .
2637	Get or create a transaction scoped entity manager .
2638	Adds a value to the map .
2639	Convert a role to a ModelNode .
2640	Returns the most recent entity version for the given timer .
2641	Gets the timers for the specified timed object id .
2642	Returns the directory name for the specified timed object id .
2643	Adds a listener to the target scope .
2644	Removes the given naming listener .
2645	Fires an event .
2646	Closes the value .
2647	Add a private credential to the Subject
2648	Returns an object instance for the specified name .
2649	Add tx management interceptor for view
2650	Substitute substring from string to another .
2651	Creates the InVM transport configuration .
2652	Adds the EAR prefix to the resource adapter if it exists .
2653	Returns the root deployment unit of the given deployment .
2654	Gets the service name .
2655	Creates a view configuration for the given class .
2656	Creates an InjectionSource for the service .
2657	Returns the view interceptors for the given method .
2658	Add a view interceptor
2659	Add a view interceptor for the given method .
2660	Returns the client interceptors for the given method .
2661	Add a client interceptor
2662	Adds a client interceptor for the given method .
2663	Put private data .
2664	Reports an unexpected element .
2665	Gets the jaxws endpoint for the deployment .
2666	Gets the POJO endpoints for the deployment .
2667	Get the endpoint name from the servlet metadata .
2668	Get the endpoint class name
2669	Returns the servlet metadata for the given servlet name .
2670	Gets required attachment .
2671	Gets optional attachment .
2672	Get the JBossWebWebMetaData for the deployment unit .
2673	Gets the JBoss Web Webservice metadata for the given deployment unit .
2674	Returns the EJBEnd endpoint for the given class name .
2675	Get the context root from the deployment
2676	Returns the class for the given name .
2677	Get a resource
2678	Returns all resources matching the given name .
2679	Lists all servlet resources under the specified path .
2680	Closes the call stack
2681	Gets the entity manager for the given context .
2682	Registers a cleanup listener for cleanup .
2683	Deploys the WAR .
2684	Updates the server configuration .
2685	Is all fields public?
2686	Factory method for creating an endpoint .
2687	Creates a new UML deployment model .
2688	Determines if the deployment is a JAXRS deployment .
2689	Sets the next timeout .
2690	Set the current timer state
2691	Merges the deployment data .
2692	Deploys the deployment
2693	Add remote transactions dependency .
2694	Gets all interceptors .
2695	Checks if the specified method is a method level .
2696	Checks that there are only one element .
2697	Returns the type of the given class .
2698	Returns the type of the given parameter .
2699	Replies the keystore resource .
2700	Replies the default key managers .
2701	Replies the resource which should be used to retrieve the trust manager .
2702	Parse a name from a name .
2703	Convert a string to a vector of ids .
2704	Parse a name component .
2705	Shutdown the POJO
2706	Convert a CORBA servant to a reference
2707	Authenticate the given username and password .
2708	Checks if the given class is a type .
2709	Lookup a binding by name .
2710	Unbinds a JNDI binding .
2711	Instantiates a joinpoint .
2712	Configures the bean .
2713	Dispatches a lifecycle join .
2714	Get current selector context
2715	Convert a name to a bean name .
2716	Returns the service name for the given class .
2717	Returns the class with the given name .
2718	Process the given deployment unit .
2719	Post parse steps .
2720	Validate the given descriptor .
2721	Create the deployment descriptor for the deployment .
2722	Create the web application descriptor .
2723	Get the auth method for the deployment .
2724	Deploys the JBoss service descriptor .
2725	Handles a stateless session bean .
2726	Create a stub class for the given class .
2727	Returns the anonymous object id for the given long .
2728	Returns a list of persistence providers .
2729	Removes all the deployment specific providers from the cache .
2730	Add a persistence provider to the deployment class loader .
2731	Find the parent class loader for the given class loader .
2732	Deploys the JBoss Service XML
2733	Add persistence unit to the deployment
2734	Sets annotation indexes .
2735	Returns the adapter adaptor for the given persistence unit
2736	Saves the shared PersistenceProviderAdaptor for the given deployment unit .
2737	Looks up the persistence provider for the given deployment .
2738	Returns the set of annotations for the given uri .
2739	Build the metadata for the webservice deployment .
2740	Build the metadata for the enterprise bean .
2741	Refresh participant .
2742	Get the analysis for the given class .
2743	Lookup the given class .
2744	Creates a work in progress .
2745	Returns the IDL module name
2746	Converts an integer to a hexadecimal string .
2747	Converts a long to a hexadecimal string .
2748	Returns true if the method is an accessor .
2749	Returns true if the method is a mutator .
2750	Returns true if the method has non - application exceptions .
2751	Replies the read name for an attribute .
2752	Returns the name of the attribute write name .
2753	Fix up overridden operations .
2754	Fix up case names .
2755	Escape an XML name .
2756	Parse an environment element .
2757	Parse the default context propagation element .
2758	Process all attributes of an element .
2759	Load provider by name
2760	Create an add operation handler .
2761	Performs the deployment .
2762	Write attribute .
2763	Creates a new MethodInterface for the given invocation .
2764	Creates a session with the specified control point .
2765	Infers destination name .
2766	Registers endpoint handlers for the given endpoint class .
2767	Get the list of xml names for a given job .
2768	Initialize the servlet .
2769	Returns the URI of the request .
2770	Create a new context using the given URL and environment .
2771	Lookup a name .
2772	Binds an object with the specified name .
2773	Call unbind method .
2774	List bindings for a given name .
2775	Call the destroy method .
2776	Destroys a subcontext .
2777	Call bind new context
2778	Create a subcontext with the given name .
2779	Lookup a link .
2780	Add a property to the environment .
2781	Remove a property from the environment .
2782	Add transformations to the builder .
2783	Parses a credential .
2784	Remove a security domain
2785	Looks up the JNDI for the given name .
2786	Creates a new module reference for the given type and factory class .
2787	Create a module reference .
2788	Creates a new modular reference .
2789	Returns the IDL type for the given type .
2790	Waits for the Security domain to be up .
2791	Compute the masked password .
2792	Initializes the security vault .
2793	Start the security vault .
2794	Displays an attribute created display .
2795	Displays the vault configuration .
2796	Returns the vault configuration .
2797	Checks if the value is not null .
2798	Returns the ServiceName for the given Activation .
2799	Inserts a value into an Any object .
2800	Indicates whether the given JndiPermission implies the given permission .
2801	Returns the action string .
2802	Returns the name of the logger .
2803	Sends a state change notification .
2804	Determine the name to bind to the given name .
2805	Returns the value of the given type .
2806	Gets the context service name .
2807	Returns all interceptors .
2808	Adds an interceptor for the given method .
2809	Adds a dependency .
2810	Returns the list of interceptors for the given method .
2811	Returns the list of interceptors for the given method .
2812	Add a timeout view interceptor for the given timeout .
2813	Add an interceptor to the interceptor
2814	Adds a postConstruct interceptor to the container .
2815	Add preDestroy interceptor to preDestroy .
2816	Add pre pass interceptor for pre passivate .
2817	Add a post activation interceptor .
2818	Sets the component create service .
2819	Removes all JNDI aliases for the given list of entries .
2820	Add a transport provider .
2821	Returns the service name of a component .
2822	Returns the context service name of the given app .
2823	Returns the bind information for the given environment entry name .
2824	Returns the bind info for the specified JNDI name .
2825	Returns a cache of all the domain info .
2826	Returns the value members .
2827	Returns the value members for a type code .
2828	Create the subsystem root .
2829	Parse the configuration element .
2830	Start the naming service .
2831	Add a weld integration .
2832	Returns the job operator service name .
2833	Add a component description .
2834	Adds a message destination .
2835	Gets the components for the given view type and deployment root .
2836	Get components by name .
2837	Returns the set of components for the given component name .
2838	Resolve message destination name .
2839	Add transformers to the builder .
2840	Reject attribute with default value .
2841	Rename an attribute .
2842	Pop identity .
2843	Loads all the ids in the system .
2844	Checks to see if the version is missing .
2845	Compute the slot for the given JSF version .
2846	Returns the constant type code for the given class .
2847	Adds a type code for the given class .
2848	Ensure that the package exists .
2849	Add interfaces to the list of interfaces .
2850	Add abstract base valu types to the container .
2851	Adds a class .
2852	Add an interface .
2853	Add a value .
2854	Add an exception .
2855	Gets the class level injection type .
2856	Checks if JTS is enabled .
2857	Starts the namenode .
2858	Close the root context .
2859	Checks if the given method type is allowed .
2860	Check transaction sync .
2861	Retrieves all component classes for the given deployment unit .
2862	Retrieves the timers associated with the transaction .
2863	Gets extra parameters .
2864	Extract the parameters from the model .
2865	Convert a Type to a Class
2866	Convert a value to a class
2867	Returns the type names of the values .
2868	Checks if the given type names are valid .
2869	Returns the next binding .
2870	Returns true if there is no more than one .
2871	Maps a binding to a name .
2872	Observe resources .
2873	Close the health check .
2874	Returns the reference for the given locator .
2875	Returns the handle for the specified locator .
2876	Converts value into Enum .
2877	Skips the given amount of bytes .
2878	Checks that two elements are not present .
2879	Adds a component description .
2880	Add a class loaders for the given top level .
2881	Unbind the specified name .
2882	Lookup an object .
2883	Returns the names of the specified name .
2884	List bindings .
2885	Adds a context handle factory .
2886	Creates a new setup context handle .
2887	Create IO subsystem .
2888	Create the welcome content handler .
2889	Acquire an object from the pool .
2890	Calculate the operation analysis map .
2891	Collects resource metrics for a resource .
2892	Prepare the deployment unit
2893	Deploys the deployment .
2894	Publish the deployment .
2895	Stop web application .
2896	Start the Weld container .
2897	Registers an endpoint configuration .
2898	Method called when a timer is active .
2899	Post timeout processing .
2900	Returns the declared methods of the given class .
2901	Returns the declared fields of the given class .
2902	Get the Constructor for the given class .
2903	Get a method by name and parameters
2904	Adds a Messaging ActiveMQ extension to the server .
2905	Checks if the parameter is allowed .
2906	Migrate generic transport .
2907	Cancel the wait flag .
2908	Run the action if not already cancelled .
2909	Sets the type .
2910	Determines whether or not this clause can be executed .
2911	Estimates the estimated size of an object .
2912	Find all classes in the directory
2913	Gets all classes of the given package .
2914	Returns the generic type for a field .
2915	Evaluate the record .
2916	Derives the type of a field .
2917	Update record .
2918	Find record by ID .
2919	Returns the minimal set of nodes for the sharded query .
2920	Translates a list of WHERE clauses to a list of WHERE clauses .
2921	Add order by projection to the query plan .
2922	Extract sub queries .
2923	Checks to see if the ID is in the cluster .
2924	Handle a class with index only .
2925	Returns true if the given class is a hierarchy of the given class .
2926	Determines the order direction of the query .
2927	Checks if there is multiple index lookup .
2928	Finds the best index for the given block .
2929	Build the index search descriptor for fulltext .
2930	Returns the common factor for the common factor .
2931	Creates a new instance of the given strategy .
2932	Performs an operation against the given resource .
2933	Checks to see if a resource is defined .
2934	Get the compact server status .
2935	Initialize system database .
2936	Load local databases .
2937	Invoked when a member is removed .
2938	Selects a new lock manager .
2939	Attempt to assign the lock manager from the cluster .
2940	Commits the transaction .
2941	Rollback the transaction .
2942	Update identity after record commit .
2943	Update record cache after rollback .
2944	Makes sure that the given path exists or replaces it with a replacement .
2945	Moves the given source file to the target .
2946	Get disjoint patterns .
2947	Execute local node locally .
2948	Append the characters to the builder .
2949	Checks if the socket is connected .
2950	Merge two buffers .
2951	Split a short into two buffers
2952	Execute the command
2953	Put a single value into the index .
2954	Removes the key from the map .
2955	Run the command .
2956	Execute the first command .
2957	Create a new file
2958	Check regions .
2959	Replaces the content of this file with a new one .
2960	Execute a command on the server .
2961	Ends a request
2962	Add host to host .
2963	Synchronously sends a response to a remote client .
2964	Gets the current database .
2965	Returns a connection to the channel .
2966	Kills a connection .
2967	Interrupt the channel .
2968	Disconnect the channel with the given id
2969	Push Distrib config to clients
2970	Swaps the entry at the specified index .
2971	Release locks .
2972	Synchronize schema .
2973	Update the metadata .
2974	Moves to the last record in the iterator .
2975	Returns the next character .
2976	Execute the subquery .
2977	OnAsyncReplicationError .
2978	Registers a new compression algorithm .
2979	Returns the limit of open files .
2980	Determines whether the child expression can be indexed by the given target .
2981	Move the buffer .
2982	Fills the buffer .
2983	Execute the execution step until returning the last result .
2984	Execute the full path and return the result .
2985	Evaluate the record .
2986	Execute the SQL command .
2987	Loads the configuration from the database .
2988	Parse and return an OQuery object .
2989	Execute the request
2990	Update the schedule starting at the given start node .
2991	Adds an index definition .
2992	Split this expression into an aggregate expression .
2993	Determines the type of the document .
2994	Returns the collate for the given document .
2995	Returns the value of the property .
2996	Advances the probe .
2997	Execute the command .
2998	Build json from file path
2999	Checks if the given hash is a hash .
3000	Create hash from input string .
3001	Checks if algorithm is supported .
3002	Create an index .
3003	Returns the vertices in this graph .
3004	Returns all edges in the graph
3005	Get partition key .
3006	Gets the distributed executor timeout .
3007	Get features .
3008	Checks to see if the changes container contains the given page index .
3009	Parse the timeout value .
3010	Parse the lock strategy .
3011	Create a cluster .
3012	Frees a cluster .
3013	Starts the cache .
3014	Shutdown the database .
3015	Returns an OScriptResultSet for the given entity .
3016	Grant access .
3017	Revoke access for a resource .
3018	Process the record .
3019	Bind parameters .
3020	Reset the table .
3021	Returns the index of the given item
3022	Applies a spread function to the generator .
3023	Create an index .
3024	Drops all indexes for a property .
3025	Gets the global index .
3026	Gets the linked class .
3027	Serialize the index to a document
3028	Removes a listener .
3029	Register a database .
3030	Timeout a request
3031	Creates a deep copy of this document .
3032	Merges this object into another one .
3033	Replace the collection with the given pointer
3034	Transform result .
3035	Execute the command .
3036	Closes all databases .
3037	Invoked when a storage is unregistered .
3038	Returns the names of the names of the system .
3039	Replies the names of the names of all registered collections .
3040	Returns a set of names of all the names available in the registry .
3041	Get the size and type from the current position
3042	Write the status code .
3043	Write headers .
3044	Write records .
3045	Write record .
3046	Send the response .
3047	Send a stream to the response
3048	Create a new OObjectDatabase object
3049	Closes the database .
3050	Notification that the collection has changed .
3051	Complete a component operation .
3052	Sets the counters for a component .
3053	Pushes a WritCacheCountersHolder .
3054	Pushes storage counter holder .
3055	Adds a WALCountersHolder to the snapshot .
3056	Pushes the specified component counters .
3057	Stop write cache flush timer
3058	Stop a fuzzy checkpoint timer .
3059	Stop the full checkpoint timer .
3060	Stop commit timer .
3061	Stop WAL record timer .
3062	Stop the flush timer .
3063	Parse a SQL statement
3064	Initialize the receive messages .
3065	Initialize disconnect .
3066	Removes the record .
3067	Sets a property .
3068	Remove a property .
3069	Checks for a given class name .
3070	Wrap a cursor .
3071	Define a vertex attribute strategy .
3072	Define an edge attribute strategy
3073	Get new record entries by class
3074	Returns a list of record entries for the given cluster IDs .
3075	Add an index entry .
3076	Merge two sets .
3077	Execute the update .
3078	Checks to see if this is an indexable function .
3079	Prepares the keys for the given index .
3080	Write page .
3081	Read page .
3082	Truncates the buffer to the specified page index .
3083	Initialize the WAL page .
3084	Checks if the node is active .
3085	Gets the new node strategy .
3086	Is the execution mode?
3087	Checks if the cluster is read .
3088	Get a map of server - side cluster names .
3089	Get a set of server names .
3090	Checks if a server contains all clusters
3091	Checks if a server contains a specific cluster .
3092	Get master servers .
3093	Get all configured servers .
3094	Get all clusters on a given node
3095	Returns all clusters owned by the given node .
3096	Get the cluster owner .
3097	Gets the cluster owner .
3098	Retrieves a list of configured servers .
3099	Returns set of registered servers .
3100	Get data centers .
3101	Get the write quorum
3102	Determines if the cluster is sharded .
3103	Get the list of servers in the distributed database .
3104	Returns the data center of the specified server .
3105	Get the read quorum for the cluster .
3106	Get the write quorum for the given server name .
3107	Gets the cluster s configuration .
3108	Gets the data center .
3109	Clear the initialization stack .
3110	Get an index by its name
3111	Drop an index
3112	Adds a vertex to the graph .
3113	Adds an edge to the graph .
3114	Returns the vertex with the given id
3115	Returns the vertices of the given class .
3116	Returns the edges of the given class .
3117	Get an edge by its id .
3118	Reuse this graph
3119	Shutdown the database .
3120	Gets the type of the vertex .
3121	Gets the vertex type .
3122	Create a vertex type
3123	Drop a vertex type .
3124	Get the edge type by name
3125	Create an edge type
3126	Gets an element by its id .
3127	Drop a key index
3128	Create a key index
3129	Removes the given listener from the background thread .
3130	Fires a background flush exception event .
3131	Stop monitoring .
3132	Registers a mbean with the given storage id .
3133	Unregister a mbean
3134	Fetch the write cache counter .
3135	Fetch system counters .
3136	Fetch component counters for the specified component .
3137	Compress a json string
3138	Get the value of this property .
3139	Detach this object from an object .
3140	Get the version of this object .
3141	Execute a command
3142	Is this object dirty?
3143	Unset the current record .
3144	Returns the index types .
3145	Gets the index engines .
3146	Get missing nodes .
3147	Retrieves the list of response responses for the response .
3148	Get the best response group .
3149	Compute the quorum response .
3150	Returns the list of received responses .
3151	Returns the execution plan for the given statement .
3152	Returns true if the expression is executed on the given target .
3153	Get the library .
3154	Release a database engine .
3155	Returns the next page .
3156	Update the size of the ridBag .
3157	Returns the value at the given index .
3158	Checks if the index can be used by the index .
3159	Returns the index of the first occurrence of the given string .
3160	Jump to the next whitespace .
3161	Jump to the next character .
3162	Sets the fetch plan .
3163	Enqueue a repair record .
3164	Cancel repair record .
3165	Enqueue a repair cluster .
3166	Get the dependencies for the given pattern .
3167	Create a POJO from the given class name .
3168	Register a collection of class names .
3169	Registers the given class .
3170	Sets the class handler .
3171	Acquires a DB .
3172	Get the number of available connections for a given user .
3173	Acquires a DB .
3174	Execute an OrientDB command .
3175	Find the provider with the given class loader .
3176	Checks if the cache size is valid .
3177	Creates a vertex from a json object .
3178	Creates an edge from json .
3179	Creates a json object from an element
3180	Creates an ObjectNode from an XML Element
3181	Execute an import .
3182	Returns the status of the current job .
3183	Returns a map of active data centers for all registered servers .
3184	Extract the algorithm from the cipher transform string .
3185	Creates a new OSymmetric key from the given key configuration .
3186	Creates an asymmetric key from a file .
3187	Creates an OAMetric key from an input stream .
3188	Encrypt the given bytes using the given transform .
3189	Save the key to an output stream .
3190	Saves the keystore to an output stream .
3191	Set child context .
3192	Adds an object to the unique result set .
3193	Get the value as object .
3194	Authenticate the given username and password .
3195	Get the value of this map .
3196	Gets the record .
3197	Read the current record .
3198	Get the tx graph
3199	Gets the no - tx .
3200	Setup the pool
3201	Gets the property .
3202	Stop the transaction .
3203	Parse the statement
3204	Returns the next token .
3205	Returns the token at the given index .
3206	Generate a parse exception .
3207	Retrieves a set of vertices from the graph
3208	Removes the triples from the graph .
3209	Adds an edge to the graph .
3210	Adds an edge to the graph .
3211	Get the connection class name
3212	Get a connection to a field name
3213	Process broken Rids .
3214	Gets the console methods .
3215	Execute a task on a local node
3216	Returns the number of nodes with the given status .
3217	Performs a backup operation .
3218	Wait for next retry .
3219	Gets the argument at the specified position .
3220	Checks if the request has a parameter with the given name .
3221	Connects to a remote server .
3222	List databases .
3223	Get server information .
3224	Checks if a database exists .
3225	Drop a database
3226	Freeze database .
3227	Release a database .
3228	Get the cluster status
3229	Execute the index .
3230	Gets the graph .
3231	Parses retry .
3232	Save the record .
3233	Delete the record .
3234	Gets the authentication header .
3235	Authenticate with the given username and password .
3236	Checks to see if the user is authorized .
3237	Starts the server .
3238	Adjust the beginning and column of the buffer .
3239	Sets the bucket pointer .
3240	Gets the bucket pointer .
3241	Ends an atomic operation .
3242	Acquires an exclusive lock on the given operation .
3243	Changes the maximum amount of memory used by the read cache .
3244	Starts the connections on the specified host .
3245	Read the parameters .
3246	Shutdown the log manager .
3247	Adds an item to the disk .
3248	Removes the entry from the map .
3249	Acquires an entry .
3250	Returns the value associated with the given key .
3251	Clear all read buffers
3252	Closes the specified key .
3253	Empty read buffers .
3254	Adds a task to the drain .
3255	Invoked after a read .
3256	Put an entry in the read buffer
3257	Finds the closest power of two 2 .
3258	On push request .
3259	Convert this object to an Enum .
3260	Convert the underlying map to an Enum .
3261	Returns the object serializer for the given type .
3262	Initialize the shutdown queue
3263	Get an engine by name .
3264	Execute the database .
3265	Execute an OQL query
3266	Adds a new state to the reader .
3267	Authenticate an OAuth token .
3268	Creates the metadata for the database .
3269	Acquires a read lock .
3270	Returns the vertex with the specified direction
3271	Returns the id of this element .
3272	Sets a property .
3273	Remove a property from the graph
3274	Clears the cache .
3275	Deletes the file .
3276	End the batch .
3277	Creates a vertex .
3278	Parse strategy .
3279	Extract positions from embedded collection
3280	Execute the command .
3281	Fix a link .
3282	Fill the record .
3283	Set the version .
3284	Returns the type of the record .
3285	Initializes the database instance .
3286	Returns the stack trace for the given exception .
3287	Execute an index query .
3288	Convert link to record .
3289	Register a command instance .
3290	Create a server user configuration .
3291	Analyzes the given criteria and returns a list of conditions .
3292	Creates the indexed property .
3293	Attaches this object to the given object .
3294	Gets the index class .
3295	Execute the next value in the database .
3296	Truncate the schema .
3297	Add a base class .
3298	Adds the polymorphic cluster ids to the index .
3299	Convert the link to a stream .
3300	Releases a pointer from the pool .
3301	Check memory leaks .
3302	Deallocate memory
3303	Convert a byte array to an int .
3304	On open database .
3305	Install clusters of a given class .
3306	Dumps the server status .
3307	Returns the index of the specified object in the array .
3308	Returns the index of the specified object .
3309	Returns the set of clusters used by the query .
3310	Handle a result .
3311	Get the id counter for this query
3312	Reports a tooltip .
3313	Parse the fetch plan .
3314	Parse no cache .
3315	Optimize the sort .
3316	Returns the status of the batch .
3317	Execute the command .
3318	Handle JVM error .
3319	Validate an index value .
3320	Rollback a micro - transaction .
3321	Execute a command
3322	Registers a cluster .
3323	Set a property .
3324	Execute the command .
3325	Execute the database command
3326	Delete the record from the database .
3327	Pushes the hooks for the given type and scope .
3328	Delete the record from the database .
3329	Counts view by view name
3330	Count the number of classes in the database .
3331	This method is used to set the record reference on the current thread
3332	Registers an encryption algorithm .
3333	Returns the relative index of the given position .
3334	Parses an optional word .
3335	Parses the next word .
3336	Parses the next word .
3337	Parses an optional keyword .
3338	Check if the given character is a separator .
3339	Execute the command .
3340	Clear the configuration files .
3341	Returns the offset of this buffer as a byte array .
3342	Extract the token from the OAuth2 token .
3343	Acquires an access token .
3344	Copy access token .
3345	Returns true if there is no more characters .
3346	Read a line from a byte array .
3347	Read a line from the stream .
3348	Skip by reading bytes .
3349	Skip n bytes .
3350	Ensure that the offset is within the array .
3351	Merge sort sort .
3352	Swap two elements
3353	Performs a parallel quick sort on the specified integers .
3354	Hash the given int
3355	Hash a long .
3356	Writes a byte buffer to the output stream .
3357	Truncates the buffer to the given size .
3358	Positions the underlying byte stream .
3359	Checks if there is no failure reporting
3360	Waits for all current tasks to complete .
3361	Find matches by query .
3362	Find the types that are compatible with this schema .
3363	Clean all snapshots .
3364	Returns the hash code for the given ordinal .
3365	Checks if two fields are equal
3366	Removes references that are referenced by a closure .
3367	Called when an announcement occurs .
3368	Called when a cycle completes .
3369	Read header tags .
3370	Extract the primary key for the given object .
3371	Clear all entries from the set .
3372	Reads the ordinal values .
3373	Returns the size of the sparse bit set .
3374	Get field value .
3375	Copies the contents of another ByteData to another .
3376	Copies data from srcPos to destPos
3377	Compares two byte arrays .
3378	Copy bytes from srcPos to destPos
3379	Copy bytes from srcPos to destPos
3380	Copies a number of bytes from an input stream .
3381	Writes len bytes to an output stream .
3382	Ensure that the given segment is at the given index .
3383	Returns the position of the specified field .
3384	Calculates the size of the list of select buckets and sums .
3385	Checks to see if there is any collections in the dataset
3386	Generate the files in the given directory .
3387	Generate the files for the given schemas .
3388	Returns true if the given keys are equal
3389	Returns the record key for the given ordinal .
3390	Creates a field path for the primary key .
3391	Creates a field path for the hash index .
3392	Creates a field path for the given prefix index .
3393	Adds an object to the list .
3394	Initialize the field .
3395	Returns true if the map contains the specified key .
3396	Returns the percentage of the change between two cardinality .
3397	Adds a field to the given type .
3398	Returns a list of schema names ordered by their dependencies .
3399	Initialize with default major version .
3400	Returns the bit at the given index .
3401	Find records that match the given field value .
3402	Find records that match the given field value .
3403	Sets element match paths .
3404	Sets element key paths .
3405	Calculates the hash table .
3406	Restore the state from the database .
3407	Runs a cycle .
3408	Exclude key from primary key
3409	Removes all objects that are referenced by the given state engine .
3410	Write the blob header
3411	Calculates the total size of the type .
3412	Write data to a buffer
3413	Write fixed length int .
3414	Write fixed length long .
3415	Adds an ordinal to the pool .
3416	Sorts the free orders .
3417	Returns the hash for the given key .
3418	Returns the hash code for the given field type .
3419	Resize storage .
3420	Find a free ordinal .
3421	Prepare the data for writing .
3422	Compares the serialized representation with the given key .
3423	Grows the key array .
3424	Rehash previously added data .
3425	Returns an empty key array
3426	Checks if two fields are equal
3427	Finds a match by key .
3428	Swap the current ReadStateHelper .
3429	Returns the size of the hash table .
3430	Run the compaction cycle .
3431	Write a snapshot to an output stream .
3432	Write the delta to an output stream .
3433	Adds a set of schema names to the set of schemas .
3434	Normalize a field path name .
3435	Reindex the hash index .
3436	Finds matches for the given query .
3437	Triggers an async refresh with random delay .
3438	Triggers an asynchronous refresh .
3439	Add a type diff .
3440	Calculates the type differences .
3441	Writes a long to the output stream .
3442	Writes an int to the output stream .
3443	Write a VInt to a byte array
3444	Read a VInt from the input stream .
3445	Read a VLong .
3446	Add a view to the layout .
3447	Refresh the loading sizes
3448	Updates the UI .
3449	Handle pull event
3450	OverscrollBy .
3451	Creates a new rule builder .
3452	Adds a rule to the rule .
3453	Creates a new rule builder .
3454	Creates a new rule builder .
3455	Creates a new rule builder with the given fact type .
3456	Creates a new rule builder with the given result type .
3457	Creates a new rule builder .
3458	Creates a new rule builder .
3459	Creates a new instance with the given name and action .
3460	Returns the instance of the given rule .
3461	Gets the first field of the given class .
3462	Gets the first annotated method from the given class .
3463	Gets annotation .
3464	Registers an auditable rule .
3465	Updates the status for the given rule .
3466	Gets the audit status map .
3467	Creates a new rule book with the given result type .
3468	Adds an action to the builder .
3469	Adds an action to the builder .
3470	Resets the default value .
3471	Creates a new rule with the given fact type .
3472	Gets the pojo rules .
3473	Read an empty line from the end of the table .
3474	Converts a list of services to an array of services .
3475	Get the port from the image configuration .
3476	Extract the list of ports from the configuration .
3477	Parse the port mapping .
3478	Add a port to the list if not null .
3479	Removes the first available port from the list .
3480	Add missing service parts .
3481	Appends an image stream resource to a file .
3482	Checks if the given service port is compatible with the given int or string
3483	Convert a service name to a default port .
3484	Returns the host and port for the given service name
3485	Put a value in the map if it does not already exist .
3486	Merges the given map if it does not already exist .
3487	Merges two maps .
3488	Put all values in the map if not null .
3489	Waits until a pod is ready .
3490	Validate the kubernetes id .
3491	To item list .
3492	Gets the resource version .
3493	Checks if a pod is ready .
3494	Gets the current context .
3495	Checks to see if there is a route with the given name .
3496	Checks if the given path is a resource
3497	Reads the content of the given file from the given file .
3498	Converts a map of environment variables to a list of Envars .
3499	Merges two resources .
3500	Merges the map and removes empty strings .
3501	Checks if a pod is a localisation .
3502	Reads the configuration from a file .
3503	Adds a port if it is valid .
3504	Get docker json config string
3505	Returns the configuration for the specified plugin .
3506	Returns the secret configuration for the given id .
3507	Download a file
3508	Compare two strings
3509	Appends a profile to the configuration
3510	Lookup a profile .
3511	Read all profiles from the classpath
3512	Read all profiles from the classpath
3513	Find a profile yaml file
3514	Returns the list of filenames for the given extension .
3515	Creates a list of profiles from an input stream
3516	Get image pull policy
3517	Is OpenShift mode?
3518	Get replica count .
3519	Returns the first child element with the given name .
3520	Install a template
3521	Remove a tag by its name
3522	Apply a namespace .
3523	Apply a project .
3524	Apply a project request .
3525	Get namespace from entity
3526	On apply error .
3527	Creates the list builder .
3528	Populates the namespace .
3529	Extract the environment variable for the application .
3530	Get the duration from a duration string .
3531	Parses a duration string from a string .
3532	Scan files matching the given patterns .
3533	Disables OpenShift features .
3534	Checks whether the given service has an Ingress rule .
3535	Parse a mapping from an input stream .
3536	Build the generator context
3537	Extract the generator config .
3538	Gets the Enricher context .
3539	Extract the enricher config .
3540	Returns the default icon .
3541	Recursively copies the app config files .
3542	Get a Properties object from a URL
3543	Extract the Spring boot version from a Maven project .
3544	Creates a list of service descriptors .
3545	Enricher .
3546	Gets the raw configuration .
3547	Returns the flattened map .
3548	Extracts the watcher config .
3549	Get the singleton template
3550	Gets the build reference date .
3551	Returns the value for the given key .
3552	Returns the configuration map .
3553	Prepares processors for the given type .
3554	Add from builder to builder
3555	Determines the from mode from mode .
3556	Returns the name of the image .
3557	Gets the registry .
3558	Indicates if the framework is online .
3559	Get an external service URL
3560	Get a boolean value from the global properties .
3561	Creates a Jest client for the given URI .
3562	Create an external node .
3563	Scan all the plugins .
3564	Creates anAmerican ExpressRewardsBalance object from a JSON string .
3565	Retrieves the rewards balance of a given fragment .
3566	Create a payment resource from a JSON string
3567	Executes a GET request .
3568	Sends a POST request to the client .
3569	Converts a JSON object to a VenmoConfiguration object .
3570	Collect device data .
3571	Collect device data .
3572	Collect payPal device data
3573	Get the client metadata id
3574	Checks if the given package is valid .
3575	Get a property as a string
3576	Parse the payment method nonce list .
3577	Gets the browser checkout configuration .
3578	Gets the billing agreement for the browser .
3579	Executes a GET request .
3580	Performs a POST request on the server .
3581	Perform a POST request .
3582	Start a payment .
3583	Appro approve payment .
3584	Adds a listener to the list of listeners .
3585	Remove a listener
3586	Request billing agreement .
3587	Process an activity result .
3588	Parses the response and returns the response builder .
3589	Adds words to a dictionary .
3590	Remove word from dictionary
3591	Returns a list of tokens from a sentence .
3592	Extract the phrases from a sentence .
3593	Tokenize a list of tokens .
3594	Fetches a buffer from a buffer .
3595	Joins the nal units into a byte buffer .
3596	Joins the nal units into a buffer .
3597	Returns the profile for the given integer
3598	Normalize and generate fixed precision .
3599	Reads the next marker from the buffer .
3600	Reads the next marker .
3601	Returns the maximum available frame .
3602	Modify a file .
3603	Copies all fragments from src to dst .
3604	Returns the duration of the edit box .
3605	Convert a frame to a time value
3606	Convert a time value to a frame
3607	Converts a media tv to edited time .
3608	Convert edited time to media time
3609	Convert a movie to a QT frame
3610	Get the qt player time
3611	Convert a timecode frame to a timecode frame
3612	Format a timecode track .
3613	Calculate the 7 bit .
3614	Sets the given value to the given value .
3615	Returns true if this color space matches this color space .
3616	Computes the size of the given size
3617	Create a new MP4Demuxer
3618	Read cache .
3619	Creates WAV header .
3620	Creates a WAV header .
3621	Parses an MP4 decoder specific information from a byte array
3622	Encodes the given symbol
3623	Reads the decoderPic Marking instruction
3624	Splits the movie box into two modes
3625	Decode a frame
3626	Sets the bit endian flag .
3627	Deblock the block
3628	Encodes a picture into a video frame .
3629	Encode a long value .
3630	Returns the length of a long .
3631	Adds a packet to the output stream .
3632	Reposition the buffer .
3633	Decodes a binary .
3634	Decode a binary value .
3635	Gets the marker .
3636	Returns the sample frequency for the given integer
3637	Generate the next plane .
3638	Sets the DDC to the given DDC array
3639	Calculate the coefficient of a block
3640	Finalize the block array
3641	Concatenates two BitsBuffers
3642	Rewrite a 32 bit integer
3643	Rewrite a range of bits
3644	Seeks to the next frame
3645	Get the photo buffer
3646	Determine the change point ID
3647	Converts a byte array to an integer array .
3648	Converts an int array to a byte array .
3649	Converts an audio format into a float buffer .
3650	Converts a float buffer into a buffer .
3651	Interleave the input buffer
3652	Convenience method for interleave the input buffers
3653	Returns the size of the video track .
3654	Build the out map .
3655	Build the pipe map for the given size
3656	Read a batch of data from a byte buffer .
3657	Read an int array from the byte buffer .
3658	Calculate the median value of the matrix
3659	Encode a picture .
3660	Encode an IDR frame
3661	Encode a P frame .
3662	Returns the supported codecs .
3663	Returns a collection of supported codecs .
3664	Adds a reference to this node .
3665	Deletes all references .
3666	Flushes all references .
3667	Load the JNI library .
3668	Unpack a JNI library .
3669	Deletes temporary files .
3670	Returns the default layout for the given number of channels .
3671	Get the channel from the layout at the given index
3672	Create a new media packet .
3673	Get version information .
3674	Get the default time base .
3675	Create a new Demuxer
3676	Starts a video .
3677	Display a video at the specified time .
3678	Creates a new codec descriptor for the given ID .
3679	Prints an option to a PrintStream .
3680	Register a factory for the given protocol prefix .
3681	Generates a unique name for an object .
3682	Create a new media resampler .
3683	Gets the supported video frames rates .
3684	Gets the supported video pixel formats .
3685	Gets the supported audio sample rates .
3686	Gets the supported audio formats .
3687	Returns the supported audio channel layouts .
3688	Sets the flag .
3689	Set the flag2 flag .
3690	Returns a decoder for this stream .
3691	Returns the demuxer
3692	Gets the formats .
3693	Create a new filter graph .
3694	Returns the type of this filter .
3695	Returns a copy of this buffer
3696	Create a new AudioFrame from the given audio format .
3697	Resample a picture
3698	Validate image .
3699	Validate the given picture .
3700	Get the filter graph
3701	Gets the meta data for this media raw .
3702	Get the cpu architecture from a string
3703	Extract the cpu arch from a string
3704	Get the OS family from a string .
3705	Get the OS family from a string .
3706	Play sound .
3707	Load a library .
3708	Set the library with the given name
3709	Load a candidate library .
3710	Initialize search paths .
3711	Checks if a library is already loaded .
3712	Record a snapshot of the screen .
3713	Deletes this object .
3714	Get a stream from the stream
3715	Get the muxer
3716	Creates a SET script transaction .
3717	Decode a base58 string .
3718	Generate a random seed .
3719	Get information about a transaction .
3720	Get a list of transactions from an address .
3721	Retrieves a list of transactions for an address .
3722	Retrieves a list of block headers .
3723	Retrieve a block
3724	Sends a transaction .
3725	Sets the script to the given address .
3726	Compile a script .
3727	Write primitive array .
3728	Flush the buffer .
3729	Write object to memory .
3730	Read a class .
3731	Writes an object to the output buffer
3732	Sets the mmF data
3733	Returns the specificity of the given class .
3734	Resize the underlying store .
3735	Removes a key from the index
3736	Write an ASCII string as an ASCII string .
3737	Sets the output stream .
3738	Utility method to create a JST configuration
3739	Creates a struct configuration .
3740	Calculates the size of an object .
3741	Clear all caches .
3742	Get an object input from the input stream
3743	Get an object input from the input array
3744	Get an object input from a byte array
3745	Gets the object output
3746	Registers a cross - platform class mapping .
3747	Get the name of a class
3748	Write an int field .
3749	Write a long value .
3750	Write an integer to the output stream
3751	Write an array
3752	Write raw bytes to the stream .
3753	Get the cached field info for the current depth .
3754	Called when an object is written .
3755	Notification that an object has been written .
3756	Get the serialization info for the given referencee .
3757	Write an array .
3758	Sets the string to the buffer .
3759	Write a primitive array
3760	Finish the change tracking .
3761	snapshot changes from origin to origin
3762	Registers an object for writing .
3763	Writes an object to the stream
3764	Read a byte array from the byte array
3765	Read len bytes .
3766	Read an int .
3767	Back off the buffer .
3768	Sets whether or not the thread pool is enabled .
3769	Starts embedded cassandra .
3770	Clean data from Cassandra .
3771	Copy a resource to a directory
3772	Prints the thread information .
3773	Check if a remote port is available .
3774	Creates a new subscriber state .
3775	Get the op descriptors
3776	Calculate the output shape
3777	Returns true if the ndarray is true or false otherwise .
3778	Returns true if the ndarray is satisfied
3779	Returns true if the specified condition is satisfied
3780	OR operation
3781	Applies the condition to the ndarray
3782	Get the first index of the first element
3783	As FlatProperties .
3784	Create FunctionProperties from FlatProperties .
3785	Converts a collection of properties to a FlatBuffer
3786	Sets the exception .
3787	Sets the next Throwable .
3788	Merge two coordinates
3789	Partition variable variable by chunk .
3790	Convert on ndx type to nd4j type
3791	Shutdown the server .
3792	Get current device architecture
3793	Convert a column matrix
3794	Pooling 2d array
3795	Creates a new compression descriptor from a byte buffer .
3796	Split a list into a list of Batch objects
3797	Validate concatenation of arrays
3798	Sets the opType
3799	Linear interpolation of a number of numbers
3800	Convert a collection of matrices to a flattened array
3801	Applies the bilinear product of the current tensor
3802	Creates a complex ndarray from a double array
3803	Creates a complex value from a given value
3804	Creates a complex value of the given shape
3805	Determines whether the file should be replicated .
3806	Subtract a complex number from another .
3807	Create a complex number from a complex number .
3808	Return the closest complex number of complex numbers .
3809	Negate a complex number .
3810	Returns the absolute value of a complex number .
3811	Raises the power of a complex number .
3812	Gets the context .
3813	Binary version of the feature matrix
3814	Sample the dataset
3815	Get memory footprint
3816	Returns a string representation of an exception .
3817	Returns the full hostname of the given hostname .
3818	Convert an array of strings to a String
3819	Converts a byte array to a hex string .
3820	Returns an array of strings from a delimiter .
3821	Splits the given string into an array of strings .
3822	Splits the given string by the given separator .
3823	Find the next separator .
3824	Escape HTML entities .
3825	Joins a list of strings using a separator .
3826	Convert a string to a camel case .
3827	Replaces all tokens with the given pattern with the given map .
3828	Returns the stack trace of the given thread .
3829	Invert an ndarray
3830	Support the subscript operator .
3831	Checks to see if this is actual on the host side .
3832	Is actual on device side?
3833	Returns the shape information for the shape
3834	Creates the shape information for the shape
3835	Determines if the shape is a vector
3836	Get the order of the ndarray
3837	Get the offset for a shape
3838	Returns an array of indices for the given indices .
3839	Gets the short .
3840	Allocate a new data buffer
3841	Copies the given number of bytes from the given buffer into the given buffer .
3842	Get a constant buffer for a float array
3843	Returns the kafka uri .
3844	Raises an ndarray
3845	Log the log function
3846	Max of ndarray
3847	Max of two arrays
3848	Minimum element of ndarray
3849	Minimum element of two arrays
3850	Stabilize the ndarray
3851	Expm1 function
3852	Log1 p1p
3853	Prepare the bounds for the x
3854	Adjusts the scheme to the upper bound
3855	Returns the next data set .
3856	Compute the SVD of the matrix
3857	Build the allocation shape for the given buffer
3858	Checks if a directory exists in the system .
3859	Read data from an input stream
3860	Sweep the tail
3861	Create an ndarray from a npy pointer
3862	Create an ndarray from a file
3863	This method is used to allocate a PagedPointer from Memory
3864	Attaches an object to this thread .
3865	Returns true if the server is started .
3866	Execute the given op .
3867	Flush the queue .
3868	Returns an input stream for the resource .
3869	Returns the device for the given thread id .
3870	Attaches a thread to a device
3871	Returns the next device for the given thread id
3872	Returns the name of the operating system .
3873	Calculates the ARCH type
3874	Publish an ndarray
3875	Starts the instrumentation application .
3876	Create a data buffer
3877	Intercept the int data type
3878	Add two complex numbers .
3879	Process the message .
3880	Average pooling 3d operation
3881	Depth - wise convolution .
3882	Resets the statistics .
3883	Returns the name of the operation .
3884	Store and allocate a new array
3885	Gets the shape .
3886	Execute the function
3887	Compress a double array
3888	Convert a complex array to a complex array
3889	Center the shape
3890	Truncate the ndarray
3891	Pads the ndarray to the target shape
3892	Find the maximum element of a vector
3893	Broadcast an array
3894	Sends a vector aggregation .
3895	Gamma function .
3896	Returns the square root of a square root .
3897	Returns the cbrt of the given value .
3898	Returns the root of the root of the given number .
3899	Compute the exponent of a BigDecimal .
3900	Returns the BigDecimal representation of the BigDecimal .
3901	Raise two numbers .
3902	Rounds a BigDecimal to a BigDecimal .
3903	Implementation of the sinine function .
3904	Tangent function .
3905	Calculate the cosine of x .
3906	Implementation of the sinh function .
3907	 tanh function .
3908	Implementation of the BigDecimal .
3909	Compute the cosine of a complex number .
3910	Gamma function .
3911	This method is used to calculate the broad Bouncy Castle B
3912	Scale a BigDecimal to a BigDecimal .
3913	Scale a BigDecimal to a BigDecimal .
3914	Convert an error to decimal precision .
3915	Put a function by id
3916	Get input names for a function
3917	Update an array for a given variable name
3918	Put a shape for the given variable name
3919	Associate an array with a variable
3920	Gets property for function .
3921	Add a property for a function
3922	Add outgoing arguments for the given function .
3923	Add the arguments for the function
3924	Checks if the function has arguments .
3925	Execute the operation
3926	Create a 1 variable with the given shape
3927	Create a 1 - like function with the given name
3928	Creates a zeros with the given name
3929	Remove arg from function .
3930	Set the gradient for a variable
3931	Average pooling 3d operation
3932	Create a GRUCell .
3933	Execute a list of Differential functions
3934	Creates a While statement .
3935	Execute a function
3936	Execute the given function with the given name
3937	Execute backward and end result
3938	Adds a variable name to the place holder .
3939	Allocate a memory pointer
3940	Returns the length for the given data buffer .
3941	Returns the type name for the given allocation mode .
3942	Get the type from the context
3943	Get the op number by name
3944	Destroy all workspaces for the current thread
3945	Print allocation statistics for current thread
3946	Performs a matrix multiplication on a matrix
3947	Receive ndarray
3948	Execute the function
3949	Performs a threshold decoding .
3950	Returns the node name for the given name .
3951	Invokes a scalar operation on the specified dimension
3952	Assert that no workspaces are active
3953	Returns the negative log likelihood of the given labels
3954	Request a tick
3955	Tries to request to to Ee .
3956	Releases the access state .
3957	Get current state
3958	Build the environment
3959	Pins the clipboard .
3960	Initialize the curr from a list of examples
3961	Initialize host collector threads .
3962	Get device pointer
3963	Synchronize the host and port .
3964	Applies an update to the history .
3965	Synchronize the allocation point to the host .
3966	Create an index from an ndarray
3967	Gets properties for a function .
3968	Is place holder inputs?
3969	Execute a diff operation
3970	Format an ndarray
3971	Imports the given graph .
3972	Convert a complex array to a blob
3973	Load a complex ndarray
3974	Saves the object to the database .
3975	Copies the real vector to another
3976	Copy the image to another
3977	Returns the epsi between two numbers
3978	Copies this complex array to another .
3979	Get the rows of a matrix
3980	Put a single element into the array
3981	Put a column
3982	Subtract another vector from another
3983	Add another ndarray to another
3984	Subtract a complex ndarray from another
3985	Add the ndarray to another
3986	Assigns a value to another
3987	Returns a new complex ndarray
3988	Returns the eigenvalues of A
3989	Compute the symmetric eigenvalues of A and B
3990	Returns the maximum element of a complex array
3991	Copies the contents of the two complex arrays .
3992	Multiplies a scalar by a scalar .
3993	Reads the data from the client .
3994	Counts non - zero counts
3995	Performs a reduction .
3996	Gets no argument constructor .
3997	Returns a MethodHandle for the given class .
3998	Invokes the given method handle with the given parameters .
3999	Gets the annotation from the given annotation type .
4000	Gets the declared annotation of the given class .
4001	Checks if the given class is present on the given class .
4002	Creates a proxy for the given result .
4003	Load the entity .
4004	Saves the entity to disk .
4005	Create a memcache service .
4006	Returns the metadata for the given kind .
4007	Query keys only .
4008	Queries a single key query .
4009	Query the normal query .
4010	Queries a projection query .
4011	Queries the specified query .
4012	Partition an Iterator into an Iterator .
4013	Load the keys from the iterator .
4014	Appends a message to a path .
4015	Create a Key from a POJO
4016	Compare two objects
4017	Creates a Key from the given Cloud .
4018	Gets the key .
4019	Returns the kind of the given class .
4020	Returns true if the given type is missing .
4021	Returns true if the given type is a super type .
4022	Returns the direct super types of the given type .
4023	Capture the given type .
4024	Returns a translator for the given type .
4025	Gets the populator for the given class and path .
4026	Gets the index instruction for the given class .
4027	Checks if the given method is of interest .
4028	Returns the declared properties for the given class .
4029	Returns the key metadata for this entity .
4030	Get a value from the session .
4031	Execute the next round .
4032	Fetch pending items .
4033	Adds the discriminators for the given class .
4034	Register a class translator .
4035	Returns the type of the collection .
4036	Returns the type of the map .
4037	Create forward path from path
4038	Returns the final path .
4039	Returns the path string .
4040	Returns the depth of this path .
4041	Put all updates in the cache .
4042	Empty a set of keys
4043	Cache put if not present .
4044	Get all items from the cache .
4045	Returns the keys of the given collections .
4046	Find all key fields in the class hierarchy
4047	Sets the key .
4048	Sets the id of the given POJO .
4049	Retrieves the raw value of the parent .
4050	Registers a subclass .
4051	Checks if two types are identical .
4052	Transform the owner to a class .
4053	Gets the annotation with the given type .
4054	Adds all values from another session .
4055	Loads a key from the graph
4056	Execute the next round .
4057	Translate a raw result into a result cache .
4058	Fetch a set of keys .
4059	Loads an entity from the Cloud Storage .
4060	Creates a raw key .
4061	Gets the raw key .
4062	Returns the id value for the given key .
4063	Converts a url safe key to a key .
4064	Creates a transactionless object for the given transaction .
4065	Actual work for transactional work .
4066	Performs transactional work once .
4067	Checks if the value matches the given conditions .
4068	Creates a new object for the given type .
4069	Retrieves an asynchronous datastore from the cache .
4070	Returns the metadata for the given entity .
4071	Allocate a key range .
4072	Opens a new object .
4073	Closes the context .
4074	Makes sure that the indexes are homogeneous .
4075	Creates a new Ref .
4076	Retrieves and throws an exception .
4077	Adds a value to the map .
4078	Indicates whether this Future is done .
4079	Generate if conditions for the given class .
4080	Called when the executor completes .
4081	Returns the container with the specified path and path .
4082	Get a Stat object .
4083	Unwraps the given exception .
4084	Retrieves a translator for the given type .
4085	Gets the root for the given class .
4086	Creates a translator for the given type .
4087	Loads the value from the given container .
4088	Get the value from the container .
4089	Sets the value of the given property .
4090	Saves the property .
4091	Gets the value of the property .
4092	Writes the extensions to the given message .
4093	Write content category .
4094	Write content categories .
4095	Process the given snippet .
4096	Get bids from the response
4097	Returns the bid with the given id
4098	Update the bids .
4099	Removes the bids from the response .
4100	Returns an iterable of imps that match the given request .
4101	Read extensions .
4102	Returns true if the current token is null .
4103	Registers an OpenRtJsonReader with the given class
4104	Register an OpenRtJsonWriter for the given field name
4105	Processes the ticket .
4106	Process the fields .
4107	Updates the given objects using the given updater .
4108	Filters a list of objects according to the provided predicate .
4109	Returns the name of the current JsonParser .
4110	Checks that the current token is an object .
4111	Checks that the current token is an array .
4112	Returns the next token .
4113	Write a boolean field .
4114	Write a list of strings .
4115	Write a list of integers .
4116	Write a list of longs .
4117	Write a list of Enums to the JSON stream .
4118	Resolves the target URL .
4119	Fix target URL .
4120	Returns the host part of the given URL .
4121	Returns the host of the given URL .
4122	Gets page .
4123	Load list from storm conf
4124	Extract the first element from the configuration .
4125	Returns the protocol for the given URL .
4126	Generate the WARC info
4127	Extract refresh URL .
4128	Get the metadata for an outlink
4129	Filters the given metadata .
4130	Add a scheduled url .
4131	Clean a field name .
4132	Get the charset name from the BOM .
4133	Extract the charset from content .
4134	Extract the charset from the metadata .
4135	Checks to see if the given content is in the given byte array .
4136	Sets a value .
4137	Get the first value from the metadata
4138	Returns a list of cookies .
4139	Checks to see if the cookie domain is in the URL .
4140	Get cache key .
4141	Get robot rules set from cache .
4142	Extracts the meta tags .
4143	Acknowledge ack .
4144	Filter the given URL .
4145	Replaces all rules in the URL .
4146	Read rules from a file .
4147	Process query elements .
4148	Load the navigation filters from the storm conf file .
4149	Adds a record format to the output .
4150	Tries to throttle queries .
4151	Triggers the query .
4152	Load Parse filters from configuration .
4153	Append a node to the current node .
4154	Ignorable whitespace .
4155	Add a processing instruction .
4156	Report a comment .
4157	Writes a cdata element .
4158	This method is called by the SAX parser .
4159	Report a prefix mapping .
4160	Returns the value for the given URL .
4161	Trim the text from maxLength .
4162	Checks if the given status is a custom interval .
4163	Load URL filters from configuration .
4164	Sets the item count
4165	Returns the size and size of the given measure .
4166	Sets the empty item drawable
4167	Set the current angle .
4168	Updates the selected position
4169	Invalidate the wheel item drawable
4170	Convert a relative position to a wheel position
4171	Updates the current velocity .
4172	Get the contrast color
4173	Clamp the given value to the given upperLimit .
4174	Write coveralls data .
4175	Get data as a ByteBuffer
4176	Sets the string representation of the array
4177	Creates a 1 - dimensional array of strings .
4178	Create an ArrayChar from a String
4179	Creates an ArrayChar from an array of values .
4180	Create an ArrayChar from an array of strings .
4181	Returns the time interval offset for the record .
4182	Show the frame .
4183	Show the frame if not .
4184	Calculates the size estimate for a grid size
4185	Takes a file and writes it to a file .
4186	Creates a new unit name .
4187	Creates a new unit name .
4188	Make plural form .
4189	Returns true if the specified date is included .
4190	Returns a new DateRange with the specified clip .
4191	Extend this date range to another .
4192	Extend the specified date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculates the duration .
4197	Add a map bean .
4198	Prints an error .
4199	Gets the file name .
4200	Returns a string representation of the parameters .
4201	Create a DAP object from raw data .
4202	Compute the bounds of the polygon
4203	Synchronize the UI .
4204	Compute chunking .
4205	Register a watcher .
4206	Process events .
4207	Sets the reference date .
4208	Opens a feature dataset .
4209	Wrap a dataset
4210	Checks if the given feature type is ok .
4211	Find the feature type
4212	Write a catalog .
4213	Converts a catalog into an HTML page .
4214	Generate user CSS link
4215	Returns the user head .
4216	Creates the dynamic catalog .
4217	Add global services .
4218	Initialize the session with the given credentials provider .
4219	Get the content as a String
4220	Puts content to a URL .
4221	Get the front page
4222	Create a catalog .
4223	Extract the Geospatial coverage from a GDS collection
4224	Gets a single dataset by type name .
4225	Checks to see if two vertices are identical .
4226	Creates a new unit ID .
4227	Parse an attribute string .
4228	Read the top of the document
4229	Convert two shorts to an int .
4230	Converts a byte array to an int .
4231	Gets a date from the julian days .
4232	Makes sure that the name is a valid netcdf object name .
4233	Returns true if the given name is a valid netcdf3 object name .
4234	Opens a file for writing .
4235	Read the record data .
4236	Read the record data subset .
4237	Fill non - record variables .
4238	Makes a time struct from a datatype .
4239	Makes a timestamp from a calendar .
4240	Checks if the given string is a time template .
4241	Add a function
4242	Get a BoolFunction by name
4243	Returns the BTFFunction object with the given name
4244	Load a new function .
4245	Returns the name of the level .
4246	Returns the level description for this record .
4247	Returns the level unit for the given record .
4248	Get the type of the grid .
4249	Determines if a grid record is a vertical coordinate .
4250	Is this record?
4251	Create a coordinate transform from a dataset .
4252	Create a dummy transformation variable
4253	Create a projection for the coverage transform
4254	Demonstrates how to create an XML store .
4255	Saves the collection name table .
4256	Returns a copy of this Chronology with the specified timezone .
4257	Write a count .
4258	Write atomic array .
4259	Write bytes to the output stream
4260	Output a byte array .
4261	Finish initializing the servlet .
4262	Construct a CalendarDateRange from a DateRange .
4263	Factory method to create a new Grib2G for the given data
4264	Parse the text and return the number of bytes .
4265	Parse text and return the number of bytes
4266	Swaps the header of the header
4267	Reads a grid from the input stream
4268	This is a utility method that can be used to print a grid .
4269	Write an attribute to the file .
4270	Writes the headers to the file output .
4271	Write operations .
4272	Scans all files in the given directory recursively .
4273	Scans a log file .
4274	Determines the size of a grid .
4275	Find the grid with the given param .
4276	Implementation of the search algorithm
4277	Unpack data
4278	Performs QR decomposition .
4279	Unpack Grib1 data
4280	Unpack Grib2 data
4281	Prints the grid .
4282	Get the next byte .
4283	Creates a new date from the given calendar .
4284	Creates a new CalendarDate from the given date .
4285	Creates a new calendar date from the given milliseconds .
4286	Creates a new date from the given milliseconds .
4287	Parse a Ud units string into a calendar date .
4288	Get the difference between two dates .
4289	Create an atomic variable from the data cursor
4290	Sets up the context .
4291	Escape a string .
4292	Create a slice from a list of ranges
4293	Unwrap a file .
4294	Returns true if the dimension set contains variable length .
4295	Compute effective shape
4296	Add the specified date to this calendar .
4297	Multiply by another .
4298	Divides the scale by another .
4299	Divide this unit into another .
4300	Raise this unit to the specified power .
4301	Convert this unit to a derived unit .
4302	Converts the input to a derived unit .
4303	Converts a derived unit to a value .
4304	Returns the canonical string representation of this unit .
4305	Reads the contents of this object into an ArrayIterable
4306	Read data from the data set
4307	Given a list of station names and a list of station names create a new one .
4308	Find a service by its name .
4309	Returns the size of the given datatype
4310	Determines the start of a datatype .
4311	Returns the number of gates for the given datatype
4312	Writes an XML document to an output stream .
4313	Determines the preferred size of the target .
4314	Verify the descendant cras dataset
4315	Generate proxy datas resolver catalog
4316	Creates a new date unit with the given name and uuid string .
4317	Creates a new CalendarDateUnit with the given string .
4318	Creates a new instance of a CalendarDateUnit with the given base date .
4319	Compute the offset from a reference date .
4320	Calculates a calendar date .
4321	Returns the quantity dimension .
4322	Returns true if the given file is a valid file .
4323	Read stn names .
4324	Reads an array of data from the input .
4325	Read an int data .
4326	Reads a file into a byte channel .
4327	calculate the elevation of an angle
4328	Calculate the next step
4329	Calculate the az . az
4330	Calculate data .
4331	Calculate the ny vortex
4332	Creates a vertical transform for this dataset
4333	Sets the debug flags .
4334	Sets the index mode .
4335	Reads the x y y .
4336	Checks if the given variable is missing .
4337	Get the LatLon bounding box
4338	Finishes the structure .
4339	Adds tabs to a string buffer .
4340	Pads the string to the specified width .
4341	Returns an integer padded with the specified width .
4342	Pad long .
4343	Format a byte size .
4344	Displays a datagram .
4345	Show the number of decimal places
4346	Returns a string representation of the shape
4347	Finishes writing a slice .
4348	Returns a string representation of this constraint .
4349	Compose two slices .
4350	Applies an index to a slice
4351	Dumps the contents of a buffer into a byte buffer .
4352	Dumps the contents of a buffer into a byte buffer .
4353	Get the type from the name
4354	Get the type of the ellipgId
4355	Decode vlen data .
4356	Decodes vlen data .
4357	Extracts the content from the URL
4358	Get text content from URL
4359	Removes all tags from an input stream
4360	Reads the contents of a variable into a byte channel .
4361	Adds all attributes .
4362	Removes an attribute .
4363	Remove an attribute by its name ignoring case .
4364	Gets the offsets in the time units .
4365	Add an ActionSourceListener to the ActionSource
4366	Get standard date from text .
4367	Gets the standard date from the given text .
4368	Gets the date origin of this unit .
4369	Gets the date .
4370	Convert a double value to a date .
4371	Calculates the value for the given date .
4372	Converts a double value to a standard date string .
4373	Get the grid spacing in meters .
4374	Add dimensions to a NetcdfFile
4375	Add a coordinate axis .
4376	Create a projection for the given file
4377	Add GDS parameters for GDS parameters .
4378	Adds a coordinate system variable .
4379	Makes sure that the LCP is a lot of the same type .
4380	Makes sure that the number of pixels is in the grid .
4381	Make the mercator .
4382	This method is used to make the MSG geometries
4383	Sets the x y y and y y y
4384	Read a dataset .
4385	Read a dataset scan .
4386	Read the metadata content from a URL .
4387	Gets the level type .
4388	Returns true if the file is a valid file .
4389	Writes bytes to the output stream .
4390	Sets the clear name .
4391	Returns the coordinate name for the given axis .
4392	Returns the coordinate name for the given dimension
4393	Returns the XML representation of the response .
4394	Build a DAPException from the response .
4395	Break the level variables .
4396	Creates the coordinate axis for the given values .
4397	Creates new variables for the given level .
4398	Creates a coordinate axis from a reference variable .
4399	BitShave function
4400	Write a Grib file to a file .
4401	Wraps the given ncdfFile into a NetcdfDataset
4402	Open a file
4403	Clear the coordinate systems .
4404	Finds a coordinate axis by type
4405	Finds a coordinate axis by its full name .
4406	Finds a coordinate system by its name .
4407	Find a coordinate transform by its name .
4408	Check if enhanced mode is needed
4409	Sets the values of a variable
4410	Sets the values of a variable .
4411	Create an array from a list of strings .
4412	Returns the index of this matrix .
4413	Get the file with the given filename
4414	Get features that intersect the bounding box
4415	Discretize the data
4416	Adds all metadata from the given tmd .
4417	Adds a document to the document .
4418	Removes a document from the document .
4419	Returns the maximum bytes for the given range .
4420	Checks to see if the ncdf file is aMine file
4421	Get a dataset
4422	Returns a list of convention names for the given attribute value .
4423	Build the convention attribute for the main converter .
4424	Builds the coordinate systems
4425	Finds the coordinate axes for all variables in the graph .
4426	Finds the coordinate systems in the given dataset .
4427	Create a coordinate system for the given dataset .
4428	Makes sure that all coordinate systems are minimal
4429	Returns true if the given variable is a coordinate axis for the given variable .
4430	Adds a coordinate variable for the given dimension .
4431	Sets the given dataset .
4432	Applies a filter to the dataset .
4433	Mark a dataset
4434	Delete the dataset
4435	Initialize once .
4436	Counts the specified value with the specified value .
4437	Adds a symbol .
4438	Compares this row with the specified column
4439	Compare two boolean values
4440	Returns the group scope .
4441	Pass a map of attributes to a XML node .
4442	Checks to see if the given time is valid .
4443	Returns true if this slice has at least one element .
4444	Register a named class .
4445	Register a DSP
4446	Checks if the specified dsp class is registered .
4447	Unregister the specified dsp .
4448	Create a new Grib2T tables .
4449	Get the forecast time interval size in hours
4450	Get the time interval offset for a record .
4451	Returns the vertex type for the given code .
4452	Finishes writing .
4453	Sorts the heap .
4454	Get the raf file
4455	Find a variable with the given attribute .
4456	Find the variable with the given attribute value .
4457	Find the name of a variable with the given attribute value .
4458	Find a variable with the given attribute value .
4459	Find the nested structure .
4460	Checks to see if there is a record structure
4461	Gets the value of a global attribute .
4462	Get the feature type
4463	Returns the variable name for the given key
4464	Get the value of a coordinate
4465	Determines the distance between the given point .
4466	Returns the coordinates of the coordinate axis
4467	Creates a new section with the specified ranges .
4468	Finds the midpoint to the target
4469	Returns the name of the sort .
4470	Add an action .
4471	Returns the match for the given path .
4472	Main entry point .
4473	Returns the index of the specified data .
4474	Add a picture to the cache .
4475	Report cache .
4476	Stop background loading
4477	Stop the picture cache except the exemption url
4478	HTTP GET method
4479	Creates a new HTTP method .
4480	Generate a random float
4481	Returns the next count .
4482	Reads the data for a cdm variable .
4483	Get a provider for the given URI .
4484	Read the stations table .
4485	Returns the index of the element
4486	Removes the data variable with the given name .
4487	Convert the Google CloudHgt2 to meters
4488	This is a utility method that can be used to read a grid .
4489	Sets the number of colors
4490	Calculate the transform for the screen .
4491	Convert a URI to an auth scope .
4492	Completes the grid .
4493	Returns true if this factor is a reciprocal of another .
4494	Get a catalog of a directory
4495	Find the index of the input
4496	Read metadata content from a URL .
4497	Read metadata content .
4498	Add metadata content .
4499	Validate metadata .
4500	Read the catalog generation configuration element .
4501	Reads a dataset source element .
4502	Reads a dataset element .
4503	Reads a dataset filter element .
4504	Read result service element .
4505	Creates the XML element for the catalog generation .
4506	Create a dataset source element .
4507	Create a dataset element .
4508	Create a dataset filter element
4509	Create the result service element .
4510	Returns true if the specified flag is set .
4511	Constructs the menu .
4512	Adds to the menu .
4513	Load the parameters from a table .
4514	Create a parameter from a list of parameters .
4515	Get the param by name
4516	Read the contents of an input stream
4517	Read bytes from an input stream .
4518	Replaces the file template at the end of a file .
4519	Sets the stn id variable .
4520	Accepts a string buffer .
4521	Show the format information for the given textfield .
4522	Get bitmap
4523	Set the ncdf file
4524	Sets the debug flags .
4525	Parse a name .
4526	Returns true if the structure is a group .
4527	Returns the length of the ncdf variable
4528	Gets the shared dimension .
4529	Construct a list of dimensions from a group .
4530	Returns true if the given type is an unsigned integer .
4531	Read a DataDDS from the server
4532	Get the icon from the resource
4533	Get an image
4534	Create a cursor from an image .
4535	Read a fill value from a layout file
4536	Read a fill value .
4537	Read a fill value .
4538	Create a primitive array from the given data type
4539	Converts a byte array to a char array .
4540	Converts a char to a byte array .
4541	Convert a byte array to a char array .
4542	Read a section .
4543	Creates an ArrayStructure from a member .
4544	Get a scalar string .
4545	Returns the structure at the given index .
4546	Method to get an Array from a StructureMember
4547	Returns the structure members for a given variable .
4548	Adds dimensions to a Netcdf file .
4549	Creates a crawable dataset from the given path .
4550	Normalize a path .
4551	Adds an explicit dataset to the cache .
4552	Add a dataset scan .
4553	Call this method to clean up the data .
4554	Create a set of datasets .
4555	Get the typical dataset
4556	Creates a Dataset .
4557	Put resource control
4558	Add a point
4559	Get the bb upper bounding box
4560	Returns the bbLower lower of this shape
4561	Validate the input .
4562	Returns true if the given dataset is the same .
4563	Adds all features from a dataset .
4564	Parse a constraint .
4565	Evaluate all clauses .
4566	Prints a constraint .
4567	Removes the structure from an XML file .
4568	Set shared dimensions .
4569	Checks to see if there is a number of unknown dimensions
4570	Finds a group by its name
4571	Read the Xlink content .
4572	Returns the standard URI of the document .
4573	Sets the projection
4574	Add a new layout component .
4575	Invalidate the layout .
4576	Remove a layout component .
4577	Returns the minimum size of the parent container .
4578	Layout the container
4579	Returns true if the coordinate system is a rectangular coordinate system .
4580	Gets the maximum radius .
4581	Opens the URL and opens it .
4582	Convert geographic coordinates to geographic coordinates
4583	Convert a latitude to Earth
4584	Converts the Lambda_go_go_go_go_go_go to a GO_GO_GO_GO_GO_GO_GO_GO_GO_GO_GO_GOES
4585	Convert a scan geometry to a sweep angle
4586	Convert a sweep angle to a scan geometry .
4587	Set the runtime coordinates .
4588	Write a point observation dataset to a file
4589	Rewrite a point feature dataset .
4590	Gets the element with the given name .
4591	Returns full name .
4592	Returns the unique identifier .
4593	Returns the access for the given service type
4594	Find a dataset by its name
4595	Gets the parent catalog .
4596	Get a list of invocation metadata from the catalog .
4597	Find an InvService by its name .
4598	Returns the variables for the given vocabulary .
4599	Find all catalog refs in a list of catalogs .
4600	Escape a path .
4601	Adds a starting marker to the array
4602	Extract a set of values from the array
4603	Compute the rho of a latitude
4604	Returns detail information .
4605	Generate the structure for the parameter
4606	Create a MISSING variable .
4607	Create a parameter variable for the parameter
4608	Add global attributes .
4609	Returns the size of a stn variable .
4610	Get a 1D array for a given type
4611	Returns the state of the yyyy table .
4612	Returns the error code for the yyyy token .
4613	Prints the topy stack for the given rule .
4614	Read DMR string .
4615	Read an error .
4616	Read a number of bytes from the input stream .
4617	Reads the header .
4618	Convert a ISO 8601 ISO 8601 formatted ISO 8601 formatted ISO8601 formatted ISO8601 formatted ISO8601 formatted ISO8601 formatted ISO8601 formatted string to a Date .
4619	Read a table .
4620	Transfers a group to another .
4621	Gets the stn file .
4622	Initializes the file with the specified location .
4623	Returns the index of the specified index .
4624	Returns the end of the buffer .
4625	Create all runtime collections
4626	Sets the edit value .
4627	Get data type
4628	This function converts an ECF F to a 2D coordinate matrix
4629	Clean up a string .
4630	Clean the name of the name .
4631	Returns true if the given string is a unitless string .
4632	Creates a new note object for the specified type .
4633	Returns the variable id for a given note .
4634	Parses the DAS data .
4635	Find the DodsV with the given name
4636	Find the data v for the given dodsV .
4637	Find a child by its index .
4638	Gets the parent group .
4639	Returns the dimension at the specified position .
4640	Find the dimension with the given name
4641	Get the units string
4642	Returns the shape as section .
4643	Applies a slice to a variable
4644	Sets the enum type .
4645	Reads a list of ranges .
4646	Read a scalar string .
4647	Reads an array from the input stream .
4648	Reads a section .
4649	Writes a CDL definition to a string .
4650	Returns a string representation of this variable .
4651	Sets the data type .
4652	Sets the dimensions .
4653	Reset the shape .
4654	Sets the dimensions of this group .
4655	Reset dimensions .
4656	Set the dimension
4657	Sets cached data .
4658	Returns a list of dimensions .
4659	Set the bounding box
4660	Completes the grid .
4661	Returns all datasets contained in this dataset .
4662	Checks if the given path is a dsp match .
4663	Opens the CDM data structure
4664	Build DMR file .
4665	Build the sequence types .
4666	Build the dimension refs .
4667	Finds a matching Enum type .
4668	Gets the core dimensions .
4669	Scans the given file and returns the total number of messages .
4670	Process a Bufr message .
4671	Perform post .
4672	Get the transform for this navigation .
4673	Determines if the map area is rotated
4674	Get map area
4675	Converts world coordinates to screen coordinates
4676	Pan the map .
4677	Zoom the zoom
4678	Recalculates the navigation from the bounding box .
4679	Add listener .
4680	Remove listener
4681	Sends an event to all registered listeners .
4682	Dispatches an event from the event object .
4683	Prints a command to a Writer .
4684	Print a command to the output stream
4685	Prints a variable .
4686	Prints a variable section .
4687	Print a structure data structure data .
4688	Print an array
4689	Print an array
4690	Write a NcML file to a writer .
4691	Read attribute double .
4692	Adds a parameter to the coordinate transform .
4693	Main entry point .
4694	Reads the contents of an atom variable .
4695	Returns true if the given record is positive .
4696	Checks if this unit is compatible with another .
4697	Returns the label for the given quantity ID .
4698	Set bit offset
4699	Convert nb bits to unsigned integer
4700	Reads an integer from the stream .
4701	Open a connection .
4702	Get the DAS command
4703	Get DDS
4704	Extracts the complete CE and returns it .
4705	Transform a projection to a latitude
4706	Generate idv dataset catalog .
4707	Convert a date range to an idv compatible range .
4708	Checks to see if a file is a valid file .
4709	Handles the sensor information .
4710	Reads the number of samples per band .
4711	Read the root element .
4712	Clean XML data .
4713	Unescape string .
4714	Escape a string .
4715	Unescape URL query .
4716	Decode backslash .
4717	Encode backslash .
4718	Add light attributes to the network
4719	Swap two byte arrays at offset offset
4720	Swap the byte arrays at the offset
4721	Swap a double from a byte array .
4722	Swap two float values
4723	Swap two double values
4724	Converts a short to a byte array .
4725	Convert an int to a byte array .
4726	Converts a long to a byte array .
4727	Creates a subset of this transformation .
4728	Writes the last modified date .
4729	Makes sure that the array is a non - zero
4730	Start XML .
4731	Write the features .
4732	Add levels .
4733	Add dimensions to a NetcdfFile
4734	Adds a group to the netcdf file .
4735	Find the coordinate transform for a group .
4736	Returns the index of the specified record .
4737	Exit the disk cache .
4738	Gets the file for the given location .
4739	Gets the file or cache file or cache if not cached .
4740	Show the cache files
4741	Clean the disk cache
4742	Calculates the bearing of the Earth .
4743	Calculates the bearing between two points .
4744	Main entry point .
4745	Find a point from the Earth .
4746	Create a LatLonPoint from the given points .
4747	Create a LatLonPoint from the specified coordinates .
4748	Load a picture in a thread
4749	Load a picture
4750	Load a picture .
4751	Stop the image .
4752	Stop the image .
4753	Get size of image
4754	Sets the source image
4755	Returns the standard URI of this dataset .
4756	Create a data descriptor for a bit width
4757	Transfer information about a list of data descriptors .
4758	Count the number of bits
4759	Compares two DataDescriptors
4760	Load the header .
4761	Load the data
4762	Returns the field with the given name .
4763	Retrieves a double value by its name .
4764	Retrieves a list of strings by name .
4765	Retrieves the boolean value for this record .
4766	Returns the name of a field .
4767	Returns the list of field names .
4768	Prints a dump of a file .
4769	Returns a Map of DAP attributes .
4770	Sets the attribute for this DapAttribute .
4771	Removes an attribute .
4772	Gets the group .
4773	Returns the container of this node .
4774	Gets the short name .
4775	Returns the path of this node .
4776	Returns the path of the group .
4777	Compute the qualified name .
4778	Returns true if this is a top level .
4779	Build DAP data .
4780	Put a bean collection .
4781	Get a list by key
4782	Get object by keyName
4783	Reads the data from the rdf file
4784	Prints the contents of this variable .
4785	Print a compound instance .
4786	Writes the element to a string .
4787	Writes the element to a file .
4788	Writes an element to a stream .
4789	Writes an element to a writer .
4790	Create a dimension element .
4791	Create a coordinate transform from an attribute container .
4792	Gets an int array attribute .
4793	Creates a new unit .
4794	Creates a new unit with the given name and symbol .
4795	Create the base unit db .
4796	Generate a unit db .
4797	Get the SI object .
4798	Returns the index element for the target .
4799	Find the closest point in the axis
4800	Sets the subset values .
4801	Open a feature dataset .
4802	Opens a feature dataset .
4803	Annotates a Dataset
4804	Read the data from a file starting at the specified position .
4805	Returns the full URI of the given parts .
4806	Removes whitespace from a string .
4807	Normalize a string .
4808	Compile the Dap Dataset
4809	Finish the metadata .
4810	Get the value associated with the given key
4811	Put the value in the map .
4812	Get the date
4813	Print attributes of a node .
4814	Print an attribute .
4815	Returns true if the attribute is a special attribute .
4816	Print dimensions references .
4817	Returns true if the given file is a valid file .
4818	Sets the area attributes for the area .
4819	Sets the navigation_type attribute .
4820	Determines the type of the specified calendar .
4821	Sets the attributes of the calendar .
4822	Finds the coordinates for the specified table .
4823	Finds the coordinate name for a given type
4824	Finds the coordinate axis for a given type
4825	Finds a coordinate by type
4826	Find the dimension by type
4827	Finds the best coordinate system for the given dataset .
4828	Finds the dependent axis .
4829	Gets the variable .
4830	Deserialize a data input stream .
4831	Read marker .
4832	Write marker
4833	Report a fatal error .
4834	Creates a dataset for a given base .
4835	Starts the demo .
4836	Gets the java array string .
4837	Returns the parameter list .
4838	Sets the stations list .
4839	Set the selected station
4840	Redraw the image
4841	Reads a rectangle from an input stream .
4842	Serialize this object to a stream .
4843	Adds the specified unit DBI to this one .
4844	Add a unit .
4845	Adds a symbol .
4846	Gets a unit by its identifier .
4847	Adds a new unit by its name .
4848	Adds a unit by its symbol .
4849	Adds a unique unit to the map .
4850	Add the currently loaded feel to the menu .
4851	Find a record by drs position
4852	Read a dataset .
4853	Serialize a dataset
4854	Get the values of the radd parameter
4855	Creates a copy of this projection
4856	Opens a feature dataset
4857	Opens a feature dataset .
4858	Create a NetcdfDataset
4859	Annotate an InvDataset
4860	Removes duplicate properties from a list
4861	Adds a new partition .
4862	Creates and returns a GribCollectionMutableMutableCollectionMutableMutableMutableMutableMutableMutableCollectionMutableMutableCollectionMutable object .
4863	Gets an instance to match on a dataset name .
4864	Gets an instance to match on a dataset path .
4865	Write a query capability to a file
4866	Read the structure data .
4867	Sets the current screen picture .
4868	Set a buffered image
4869	Zoom the map
4870	Paint the component .
4871	also used for testing
4872	This is a utility method that can be used to create a string representation of the TIFF file .
4873	Takes an integer array and returns it as a string
4874	get the day of the month
4875	This is a utility method that can be used to determine the location of a variable .
4876	Reverse a range of integers
4877	Get the packing name
4878	Get the data type
4879	Read data from an input stream
4880	Writes the contents of the document to an output stream .
4881	Returns the tag for the given code .
4882	Get next image
4883	Returns the size of a dap type .
4884	Returns the sum of all elements in the array
4885	Sets the location of the grid .
4886	Sets the overlap .
4887	Clear the grid
4888	Mark the specified rectangle to the specified rectangle .
4889	Find the intersection of the specified rectangle
4890	Finds the intersection of a point
4891	Finds the closest point
4892	Returns the Euclidean distance between the specified point
4893	Get or create a base unit .
4894	Returns the service type for the given fragment .
4895	Returns the service type for the given URL .
4896	Decode a path extension .
4897	Checks to see if the location is a DOD file .
4898	Checks if the given location is a dap4 file .
4899	Send data to the output stream
4900	Removes the suffix from a fully qualified class name .
4901	Extracts the name of the package from the given class name .
4902	Locates a file and returns it .
4903	Locates a relative path from a relative path .
4904	Extract the bytes from the buffer .
4905	Returns the structure path of the given variable .
4906	Returns null if the path is null or empty .
4907	Joins an array of strings into a string .
4908	Checks if the path contains a drive letter .
4909	Get the list of protocols from a URL .
4910	Converts an index to a list of slices
4911	Converts an offset to a list of dimensions
4912	Checks if slices are contiguous .
4913	Returns true if the slice is a single point
4914	Convert slices to index
4915	Read data from an input stream .
4916	Sets the stn with the stn id variable .
4917	Sets the short names and their values .
4918	Read a feature collection from a catalog file .
4919	Adds a new declaration .
4920	Update the list of groups .
4921	Find a variable by its name .
4922	Returns the axis type for the given variable .
4923	Returns the stat type for the given time range indicator .
4924	Sets the coordinates of the LatLonRect .
4925	Gets the ranges .
4926	Sets the default properties .
4927	Gets the session id .
4928	Sets the maximum number of redirects .
4929	Sets whether or not the session should be used .
4930	Closes the pool .
4931	Sets authentication and proxy .
4932	Track a session .
4933	Sets the global credentials provider for the given scope .
4934	Validate URL .
4935	Creates an index for the given shape
4936	Compute the stride of the shape
4937	Returns the section of the specified ranges .
4938	Reduce this index .
4939	Reduce the index of the specified dimension
4940	Transpose two indices
4941	Performs a permutation of the specified dimensions
4942	Get index iterator .
4943	Returns the current element .
4944	Sets the index to the specified index .
4945	Sets the specified dimension .
4946	Sets the dimensions of this index .
4947	Returns the time interval name .
4948	Creates a new date range from the given calendar .
4949	Returns a list of date names for each item .
4950	Creates a list of params from a DMPP request .
4951	Get the list of station names
4952	Create a new station object from the header header
4953	Returns the names of the station keys .
4954	Returns a list of dates
4955	Find the index of a station
4956	Get file type
4957	Indent indentation .
4958	Set indent .
4959	Read a single index from a single file .
4960	Add directory scan .
4961	Determines if a scan is needed .
4962	Scan first time .
4963	Set debug flags .
4964	Add a new variable .
4965	Write the output file to the file .
4966	Validate XML document .
4967	Returns a string representation of this constraint .
4968	Sets the original variable .
4969	Implementation of readData .
4970	Implementation of readData
4971	Checks to see if the parameter is needed .
4972	Convert an array structure to an array structure
4973	Convert member information to member variables .
4974	Find a variable by its name
4975	Checks if the given variable has a data structure .
4976	Enhances a set of variables .
4977	Check whether the resource control is ok .
4978	Makes an empty sequence .
4979	Create an ArraySequence from a list of parameters
4980	Generate a sequence from the parameters .
4981	Helper method to add the vertical coordinate attribute
4982	Read an XML document asynch
4983	Read an InvCatalog from a String
4984	Read an InvCatalog from a StringReader
4985	Write an XML document to an output stream .
4986	Gets the metadata converter for the given key .
4987	Returns the name of the dimensionless id .
4988	Multiply by another .
4989	Divide this unit by another .
4990	Converts the input to a derived unit .
4991	Returns true if the given unit is compatible with this one .
4992	Write a simple geometry .
4993	Write a point .
4994	Writes the line as a string .
4995	Write a polygon
4996	Pull an attribute from a named node .
4997	Get all subnodes of a parent node
4998	Parse the response .
4999	Pass attributes to DAP .
5000	Get a subset string from a variable
5001	Creates a new array structure from an array structure .
5002	Sets a member array .
5003	Factory method that creates an array structure from a structure .
5004	Returns the geometry type by name .
5005	Make a station from a structure data structure .
5006	Compile an AST node .
5007	Compile filter .
5008	Create a dimef .
5009	Creates the view for the given index .
5010	Checks if this rectangle is contained within another .
5011	Extend the specified point .
5012	Extend this rectangle to another .
5013	Returns the intersection of this rectangle .
5014	Adds two arrays .
5015	Checks if two arrays are conformable .
5016	Checks if two arrays are conformable .
5017	Convert an array to an array
5018	Copies the elements from an Array to the result .
5019	Copies a boolean array to a result .
5020	Copies the contents of an Array to the result
5021	Gets the min max .
5022	Sets the value of a double .
5023	Creates a catalog builder for this catalog .
5024	Factory method for creating a new Project
5025	Unescape DAP identifier .
5026	Decode a string .
5027	Unescape URL .
5028	Escape backslash .
5029	Unescape a string .
5030	Tokenizes an escaped name .
5031	Returns the index of the specified character .
5032	Transform backslash to dap .
5033	Read an atomic scalar .
5034	Returns the path of the given cursor .
5035	Get the UIDefaults of a class
5036	Returns the class for the given component .
5037	Compile the DAP file .
5038	Compile a structure array .
5039	Compile a DAP structure .
5040	Compile a sequence array .
5041	Compile a sequence .
5042	Read a Little Endian long .
5043	Returns the field with the given name .
5044	Returns the value of the specified field .
5045	Sets the value of the specified field .
5046	Add a field .
5047	Adds a check box field .
5048	Adds a date field .
5049	Adds a double field .
5050	Adds an int field .
5051	Adds a password field .
5052	Adds a text field .
5053	Add a TextCombo field .
5054	Add a text area field .
5055	Adds a heading .
5056	Adds a component to the layout .
5057	Adds an empty row .
5058	Find the active frame
5059	Returns the cell spacing .
5060	Gets the factors .
5061	Multiplies the factors by the specified dimension .
5062	Raises the factors by the given power .
5063	Checks to see if two factors are equivalent .
5064	Returns true if the factor is a dimensionless factor .
5065	Create a new Grib1ParamTable from the given name and lookup table .
5066	Create a new Grib1ParamTables object .
5067	Add a parameter table lookup .
5068	Adds a parameter table .
5069	Raise this unit to another .
5070	Converts the input array to a derived unit .
5071	Initialize the unit table .
5072	Creates a vertical variable .
5073	Peek the next name from the file .
5074	Reads a short from the byte array starting at the given offset .
5075	Gets an int from the byte array .
5076	Reads a 4 - byte float from the byte array .
5077	Read a double from the byte array .
5078	Acquires an AA
5079	Adds a symbol to the system .
5080	Create a converter between two units .
5081	Sets the structure data .
5082	Set the point feature data
5083	Draws this shape with the specified coordinates .
5084	Get the shape shapes
5085	Process input stream .
5086	Read bytes from an input stream .
5087	Get more bytes .
5088	Read a number of bytes from the stream .
5089	Skip n bytes .
5090	Adds dimensions to a netcdf file .
5091	Returns the coordinate index for the given record .
5092	Returns true if the given file is a valid file .
5093	Reads and parses the file .
5094	Reads data from a variable
5095	Reads a single row data .
5096	Create a dataset from a dataset
5097	Creates a variable .
5098	Fires a map area event
5099	Set the map area
5100	Set the map area
5101	Set the map area
5102	Sets the projection .
5103	Add actions to the menu .
5104	Redraw the specified delay .
5105	Changes the screen size
5106	Sets the selected variable .
5107	Returns the double at the specified offset .
5108	Read a double value from the datap .
5109	Returns the value at the specified index .
5110	Returns the identifier for the given ent_id
5111	Reads a scaled int .
5112	Find the parameter with the given name ignoring case .
5113	Checks to see if there is at least one element
5114	Swaps the byte orders .
5115	Returns the time steps for the given file .
5116	Get file name
5117	Get the list of file names .
5118	Returns the path to DDF file .
5119	Returns the full path for the given filename .
5120	Adds a new Chsub object .
5121	Convert a reference date to a time coordinate .
5122	Read the WMO file .
5123	Get the uncompressed byte array .
5124	12 . 4
5125	Generate the radius for a circle .
5126	Checks the validity of the message header .
5127	Seeks to the pcode .
5128	Generate a 32 - bit 32 bit integer .
5129	generate the unlinked vector size
5130	Extracts the levels from a header array .
5131	Compute the levels for the dual interpolation .
5132	Adds a variable .
5133	Adds a parameter .
5134	Uncompress the input buffer
5135	Get an unsigned integer from a byte array
5136	Get an int from a byte array
5137	Convert a byte array to an object .
5138	Do a DMR request .
5139	Gets the request state .
5140	Sends an error message .
5141	Moves the anchor point to the last point .
5142	Stretch the last element .
5143	Returns the bounds of this element
5144	Returns the bounds of the last point .
5145	Convert text to date only .
5146	Replace the data variables in the structure .
5147	Ensure that the size of the array is okay .
5148	Read two bytes .
5149	Read an unsigned integer from a file .
5150	Read the three bytes from the file
5151	Read two bytes from a file .
5152	Read a 32 bit integer from a file
5153	Read a 4 - byte float from a file
5154	Calculate the 32 - bit 32 bit unsigned integer .
5155	Read an int from a file .
5156	Count the number of bits in a bitmap .
5157	Creates a copy of this projection .
5158	Outputs the WGS84 Data structure as a String
5159	Escape a string .
5160	Unescape backslash .
5161	Split a path into a list of slashes .
5162	Creates an FMR inv for the given format .
5163	Gets the service special .
5164	Returns the number of components that are projected to the input .
5165	Gets the reference time .
5166	Factory method for creating an ArrayStructureBsection .
5167	Index documents .
5168	Read a record .
5169	Checks to see if the given netcdfFile is a mine .
5170	Creates a projection for a dataset .
5171	Acquire area .
5172	Returns true if this element is before the given date .
5173	Returns true if the date is before the given date .
5174	Returns true if this element is after the given date .
5175	Set the value at the given index .
5176	Adds a new coordinate system to this variable .
5177	Sets the units of this CDM .
5178	Gets the units attribute .
5179	Initializes the reader with the given read mode .
5180	Reads a catalog .
5181	Process datasets .
5182	Reads all categories in the specified directory .
5183	Checks to see if the given long is between the given long .
5184	Convert a latitude to a string .
5185	Convert lon to string
5186	Compares this quantity by name .
5187	Returns the selected dataset .
5188	Sets the selected dataset .
5189	Creates a tree path from the given node .
5190	Open all nodes in the tree .
5191	Sets the catalog location .
5192	Sets the catalog .
5193	Finds an alias for a variable
5194	Write a VInt .
5195	Writes a string to the output stream .
5196	Read a number of bytes from the stream .
5197	Set debug flags .
5198	Adds a member .
5199	Hide the member
5200	Gets the value of the memberNames property .
5201	Finds the member with the given name .
5202	Gets the bitmap .
5203	Restore the state of the table .
5204	Get selected rows
5205	Returns the index of the model .
5206	Returns an Array for a member
5207	Access the scalar value for a member .
5208	Retrieve a java array as a double array .
5209	Get a scalar float from a member .
5210	Get a java array float from a member .
5211	Get the scalar byte for a member .
5212	Get the java array member as a byte array .
5213	Retrieve a scalar integer from a member .
5214	Retrieve a java array from a member .
5215	Get the short value for a member .
5216	Get a short array from a member .
5217	Get the scalar value for a member .
5218	Retrieves a long value for a member .
5219	Get a scalar char from a member .
5220	Get the java array as a char array .
5221	Do a single dataset .
5222	Checks if a dataset is useable .
5223	Creates a copy of this dataset .
5224	Transfer metadata from another dataset .
5225	Gets the inheritable metadata .
5226	Adds a record to the grid .
5227	Displays missing values .
5228	Show the missing summary
5229	Find the record for the given time and level .
5230	Returns a dump of the grid .
5231	Returns the long name for the first record .
5232	Subtracts the coordinates by their intervals .
5233	Determines if two buffers are equal
5234	Parse a DMR document from a DMR document
5235	Remove attributes from a dataset .
5236	Add coordinates to the partition collection .
5237	Sets the gaussian coordinates .
5238	Parse a variable selector .
5239	Returns the section spec string for the given range .
5240	Returns true if the area is inside the area
5241	Closes the pool .
5242	Execute the request
5243	Identify an encoding station .
5244	Checks to see if the given coordinate type is equal to the specified type .
5245	Sets the input stream .
5246	Read the next character .
5247	Start the UI .
5248	Parse a string to a URI .
5249	Removes the given URI from the given URI .
5250	If null returns null .
5251	Joins the prefix and suffix .
5252	Return true if the given dataset is the last modified limit .
5253	Copies information from another to another .
5254	Gets the list of files .
5255	Sets the index file .
5256	Returns the index file path in the cache .
5257	Close the index .
5258	Returns the number of counters .
5259	Adds a global attribute .
5260	Adds a global attribute .
5261	Deletes a global attribute .
5262	Renames a global attribute .
5263	Adds a variable attribute .
5264	Adds a variable attribute .
5265	Deletes an attribute .
5266	Rename a variable .
5267	Makes the file subtype of the file .
5268	Write the headers to the file output
5269	Write members .
5270	Writes a station observation dataset to a XML file
5271	Writes the station collection XML to a string .
5272	Write DRS to the output stream .
5273	Sends XR to the server .
5274	Write an error response
5275	Close the connection
5276	Flush the buffer .
5277	Creates a copy of this projection
5278	Returns true if the list contains the specified element .
5279	Returns the element at the specified index .
5280	Shift this range by the given origin .
5281	Read data from the rfile
5282	Reads the layout .
5283	Returns a subset of this vector .
5284	Returns an iterable of all catalog entries .
5285	Deletes the given tracker .
5286	Sets the values of the GDS file .
5287	Returns a DataChunkIterator that contains the specified section .
5288	Create a double array from an integer array .
5289	Get the dataset boundary
5290	Checks the requested variables .
5291	Get the structure for the given name
5292	Get the real path of a datap request .
5293	Creates the vertical dimensions for the given group .
5294	Read PIB file .
5295	Finishes writing .
5296	Transfer all inherited metadata from parent .
5297	Transfer metadata from another dataset .
5298	Transfer all inherited metadata from another dataset .
5299	Sets the contributors .
5300	Adds a dataset .
5301	Remove a dataset from the catalog .
5302	Replace a dataset .
5303	Add a service to the list .
5304	Removes a service from this context .
5305	A list of services that have been added to this environment .
5306	Removes the given metadata from the graph
5307	Get user property .
5308	Validate the input .
5309	Returns a list of descriptors
5310	Constructs the path to the web server .
5311	Get the capabilities .
5312	Get the feature .
5313	Check parameters for error .
5314	Handle a servlet request .
5315	Get the capabilities for the given URL .
5316	Returns the length of this buffer .
5317	Returns the last modified date of the S3 object .
5318	Create a dataset
5319	Return a file
5320	Return a string
5321	Set the content length
5322	Get the request URI
5323	Returns the request path .
5324	Returns the request base .
5325	Gets the value of a parameter ignoring case .
5326	Saves the current selection .
5327	Write directory .
5328	Set bit offset
5329	Creates a bit counter for the given sub - key .
5330	Count the number of bits in this row .
5331	Appends a line to the end of the line .
5332	Creates a document that represents a station collection of names .
5333	Gets the capabilities document .
5334	Returns the record at the specified coordinates .
5335	Returns the coordinate at the specified index .
5336	Adds an item to the list
5337	Handle exception .
5338	Returns the slice at the specified index .
5339	Sets the number of characters .
5340	Gets the nce process .
5341	Checks to see if the provided endpoint is a Cdm domain .
5342	Sets the type .
5343	Factory method to create a GDS1G from a grid .
5344	Copies the input stream to the output stream .
5345	Read the contents of an input stream into a String .
5346	Read the contents of an input stream into a byte array .
5347	Write contents to an output stream
5348	Copies the given file into the given output stream .
5349	Copies the contents of a file into an output stream .
5350	Copies all files from one directory to another .
5351	Read a file into a byte array .
5352	Read a file
5353	Write contents to a file
5354	Write contents to a file
5355	Write an input stream to a file .
5356	Dispatches an exception handler .
5357	Dispatches an exception handler .
5358	Sends a bad URL page .
5359	Get catalog .
5360	Print catalog .
5361	Prints the status of the server .
5362	Prints a bad URL page .
5363	Gets the reference date .
5364	Read varlen data .
5365	Reads a NcML document from a String
5366	Opens a NCML document reader .
5367	Returns true if the given string is a valid string .
5368	Clean up a byte array
5369	Filters characters from a string .
5370	Removes 7 bits from a string .
5371	Makes sure that the name is valid .
5372	Compare two strings
5373	Pad a string to a desired length
5374	Pad a string to a desired length .
5375	Removes substring from string .
5376	Removes the specified character from the string .
5377	Removes the specified character from the end of the string .
5378	Collapse whitespace from a string .
5379	Replaces the string with the specified character in the string .
5380	Replaces each substring with another string .
5381	Replaces the specified pattern with the given value .
5382	Substitute substring with substring .
5383	Substitute the substring in the original string .
5384	Removes all characters from a StringBuilder .
5385	Replaces the character at the end of the string .
5386	Replace all occurrences of a string in a StringBuilder .
5387	Substitute a substring from a string buffer .
5388	Removes characters from a string .
5389	Process event .
5390	Check state .
5391	Update the collection .
5392	Generate unique templates
5393	Gets the data set .
5394	Releases the dataset .
5395	Creates a deep copy of the given structures .
5396	Copies the given ArrayStructure to an ArrayB .
5397	Copies a Structure object into an ArrayStructureB
5398	Create a new ArrayStructureBB from a StructureData object
5399	Copies the structure from a StructureData structure .
5400	Get the forecast time interval size
5401	Creates a new section with the specified range .
5402	Create a new table analyzer .
5403	Returns the first feature type
5404	Analyzes the list of features .
5405	Synchronize the data .
5406	Returns an array of Latitudes of the specified type .
5407	Swaps the given byte array at the given offset .
5408	Swap a float from a byte array
5409	Swaps the character at the specified offset .
5410	Finds the coordinates for the coordinate axis
5411	Adds a parameter to the coordinate transform .
5412	Returns the common parent of this group .
5413	Is this group?
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Adds a dimension to this group if it does not already exist .
5417	Adds a group to this group .
5418	Adds an enumeration to this group .
5419	Adds a variable .
5420	Remove a dimension by its name
5421	Makes a relative path from a NetcdfFile .
5422	Converts an attribute name to a DAS alias .
5423	Print the DAS object
5424	Returns the variable with the given name .
5425	Write a grid .
5426	Replace missing values .
5427	Replace missing values .
5428	Gets the xstart of the latitude
5429	Write a grid .
5430	Writes the exception to the response .
5431	This method returns the number of libraries available in the network .
5432	Creates the top index file for the collection .
5433	Get the type of the collection
5434	Update a collection .
5435	Update leaf collection .
5436	Open a GribCollection from a raf file .
5437	Create a new GribCollection from a data file
5438	Opens a Grib collection from a data file .
5439	Returns true if the given URL matches the pattern .
5440	Adds a triple .
5441	Find a key and url
5442	Checks if all triples are well - known .
5443	Load a file
5444	Insert a triple into the triples .
5445	Retrieves a list of datasets .
5446	Find a dataset by its name
5447	Set the project s project .
5448	Get the shapes for the shape
5449	Generate shapes for a feature
5450	Compares this string to another .
5451	Start a progress monitor task .
5452	Checks if the given collection index file exists .
5453	Normalize the result .
5454	Sets the object at the given index .
5455	Returns the structure data at the specified index .
5456	Copy structures from a member .
5457	Get a scalar object .
5458	Convert a scalar double to a double .
5459	Convert a member to an integer value .
5460	Access a scalar float value .
5461	Get a scalar byte from this structure .
5462	Get a short from a member .
5463	Get a char from a member .
5464	Get a scalar string .
5465	Get an ArrayStructure from a member
5466	Get an ArraySequence from a member .
5467	Retrieve an ArrayObject from the structure .
5468	Returns the minimum of the given value .
5469	Evaluate an expression .
5470	Returns a string representation of this constraint .
5471	Returns true if the given node is a reference to this node .
5472	Evaluate and return true if the variable matches the given record .
5473	Returns the number of expansion entries .
5474	Compute enumeration .
5475	Compute the set of groups .
5476	Compile a sce constraint .
5477	Returns true if the given file is a valid file .
5478	Creates the actions for the action .
5479	Returns the byte order for the given machn .
5480	Sets the byte order .
5481	Finds a key by its name .
5482	Find a file header by its name .
5483	Get the header of a file
5484	Print parts .
5485	Returns the data pointer for the specified row and column .
5486	Reads the given word
5487	Read a string from the file
5488	This function converts a part of a multipart part into an integer array .
5489	Returns a string representation of the bits .
5490	Writes the given ncdf file to the given byte channel .
5491	Parse base element .
5492	Parse a grid element .
5493	Parse aliases .
5494	Decodes the key descriptors
5495	Replicates a list of data descriptors .
5496	Returns the dataset name
5497	Gets the CFFature type
5498	Compares two float numbers .
5499	Returns true if the given node is a reference to this node .
5500	Parse a unit from a string .
5501	Prospect the object .
5502	Checks if a variable is a tiled variable .
5503	Returns the best time from the complete list .
5504	Converts a LatLonR to a projection matrix .
5505	Show the time series
5506	Convert a list of Attribute names to a Map .
5507	Returns the value of the property .
5508	Returns the value at the specified index .
5509	Write CDL .
5510	Sets the attribute value .
5511	Sets the attribute values .
5512	Sets the values of this Array .
5513	Starts the scan .
5514	Generate a proxy datas resolver for a proxy datasource handler
5515	Schedules write .
5516	Sets the tredds datatype
5517	Downloads the Tredds datatype for the invocation .
5518	Opens the tredds dataset
5519	Initialize the dataset
5520	Prepares the GUI for the application .
5521	Create the tools frame .
5522	Returns the name of a list of coordinates .
5523	Sets the rank of the two arrays .
5524	Finds the axis with the specified type .
5525	Gets the projectionCT .
5526	Checks to see if this is a GeoXY .
5527	Checks if all coordinates are regular .
5528	Returns true if the set is a subset of the set .
5529	Checks if there is a list of coordinates
5530	Checks if the coordinate axis contains the specified axis name .
5531	Checks if the domain contains the specified dimension
5532	Checks if the given list contains the expected axes .
5533	Checks if the coordinate axis has the specified axis type .
5534	Clones the DAG .
5535	Returns the currently selected bean .
5536	Returns the selected beans .
5537	Returns the list of selected cells
5538	Sets the selected bean .
5539	Restore the state of the table
5540	Creates an unknown unit .
5541	Closes the stream .
5542	Returns true if the given variable is an extra variable .
5543	Checks if the variable is a coordinate .
5544	Finds a coordinate variable from a table .
5545	Add data variables to a table .
5546	Add join data to the cursor
5547	Create a station from a structure data structure .
5548	Creates a Map of CDM nodes .
5549	Factory method .
5550	Creates a new unit with the given name .
5551	Create a unit from a name .
5552	Checks if two strings are compatible with this one .
5553	Checks if the given unit is a date unit
5554	Checks if string represents a TimeUnit .
5555	Returns the conversion factor between two strings .
5556	Convert a value to a unit
5557	Returns true if the given unit represents an unknown unit .
5558	Gets the value of this unit .
5559	Creates a new RelOp clause
5560	Creates a new Boolean clause .
5561	Creates a new B - clause with the given name .
5562	Creates a grayscale image
5563	Crawl the catalog .
5564	Crawl a dataset .
5565	Crawl a dataset .
5566	Gets a file or cache it .
5567	Gets a file or cache it .
5568	Sets whether debugging should be enabled .
5569	Returns the list of files .
5570	Closes the cache .
5571	Seeks to the specified position .
5572	Flush the buffer .
5573	Reads a single byte .
5574	Read a short .
5575	Read an int from the stream .
5576	Read an integer from the stream .
5577	Read a long .
5578	Read a float .
5579	Read a double .
5580	Read a string
5581	Read a string from the stream
5582	Write boolean .
5583	Write a short array .
5584	Writes a sequence of characters .
5585	Writes an integer array to the stream .
5586	Write a long array .
5587	Write a float array
5588	Write a double array .
5589	Write a string to the output stream .
5590	Writes a byte array to the output stream .
5591	Search for the next bytes in the stream .
5592	Append query .
5593	Factory method to create a new MCollection .
5594	Find the index .
5595	Checks if the directory is a leaf .
5596	Construct the list of children .
5597	Scan for children .
5598	Read all files from the index
5599	Returns a list of grids
5600	Acquires a file cacheable .
5601	Remove an element from the list
5602	Inserts the specified hash from the cache .
5603	Release the ncfileable
5604	Compute the four four four four four four values .
5605	Update the cached element .
5606	Clears the cache .
5607	Creates the vertical transform for the given grid .
5608	Checks to see if this is a global coordinate .
5609	Checks to see if the current axis is positive .
5610	Finds the y - axis for the given coordinate
5611	Finds the x - axis from a coordinate array
5612	Finds the index for the given LatLon
5613	Given a latitude and a bounding box return an array of coordinates
5614	Returns the position of the item .
5615	Get the item at the specified pixel
5616	Iterate over all files in the collection .
5617	Download the logs from the remote server .
5618	Overridden to get the name of the name of the sub center
5619	Converts a string to a CalendarPeriod .
5620	Creates a new CalendarPeriod with the specified value .
5621	Constructs a CalendarPeriod from a String .
5622	Subtract the difference between two dates .
5623	Returns the conversion factor for this calendar .
5624	Get the value in milliseconds for this calendar .
5625	Returns the offset between two dates .
5626	Synchronize the grid index .
5627	initialize the tables
5628	Put a data root extension .
5629	Finds the longest path matching the given request path .
5630	Finds the data root for the given request path .
5631	Convert data root to data root
5632	Get the date range for the given calendar .
5633	Reindex a list of coordinates
5634	Creates a new NetcdfFileWriter
5635	Adds a group to the parent .
5636	Adds a enum type to the group .
5637	Deletes an attribute from a group .
5638	rename an attribute
5639	Add a record structure
5640	Close the stream .
5641	Writes properties to a PrintWriter .
5642	Extract the Thredds metadata from a Dataset
5643	Divide this instance into another .
5644	Converts this unit to a derived unit .
5645	Converts a derived unit to a value .
5646	Convert a nested variable to a nested array
5647	Convert a top variable to an Array
5648	Convert DodsV to an Array
5649	Close all open databases .
5650	Open database .
5651	Convert a UUID to a Joda Time .
5652	Ensure that the array is capacity .
5653	Gets the value at the specified index .
5654	Create a catalog for a directory .
5655	Creates a proxy dns resolver for the given path .
5656	Get the coordinate type
5657	Factory method to create a new Grib2Pds object .
5658	Calculates the time at the specified index .
5659	Applies a scale factor to a value
5660	Parse a local concept .
5661	Adds a local concept from an input stream .
5662	Clean the line
5663	Store a concept .
5664	Write the grib1 tables .
5665	Write the lookup table file .
5666	Show local concepts .
5667	Main entry point .
5668	Get type by name
5669	Expand the input dataset
5670	Expand this Dataset .
5671	Call this method to name a list of datasets .
5672	Name a dataset list
5673	Generate the name of the tree
5674	Load a picture from the specified URL .
5675	Stops the picture from the given url .
5676	Sets the source picture .
5677	Called when a source image is loaded .
5678	Create a new scaled picture in thread
5679	Gets the size of the picture .
5680	Get the size of the image
5681	Gets the merged parts .
5682	Creates the header for the station .
5683	This method returns a list of all known types
5684	Checks if the part is a valid group .
5685	Sets the root directory .
5686	Creates the root directory .
5687	Gets the cache file .
5688	Clean the cache files in the directory
5689	Clean the disk cache
5690	Checks to see if the given byte is auf table .
5691	Factory method to create a new coordinate axis .
5692	Creates a copy of this coordinate axis .
5693	Returns true if this is a numeric type .
5694	Returns information about this axis .
5695	Get the calendar from an attribute .
5696	Set the list
5697	Returns the selected item .
5698	Increments the selected value .
5699	Returns the index of the model .
5700	Set the selected index
5701	quick sort algorithm
5702	Swap the elements of an array
5703	Get an existing file
5704	Rotate the rotation matrix .
5705	Create an XML store from a preferences file .
5706	Create an XMLStore from an input stream .
5707	Create an XML store from a resource name .
5708	Returns the standard filename for the given store name .
5709	Save the preferences file .
5710	Saves the properties to the output stream .
5711	Write atomic variable .
5712	Writes the contents of the DAP structure
5713	Writes the data structure of a DataCursor .
5714	Writes a sequence to the output stream
5715	Write record .
5716	Returns true if the specified file is a valid file .
5717	Get the wmo ID
5718	Reads a row from a DataInputStream .
5719	Returns the data at the specified position .
5720	Extracts the data from the rdrs .
5721	This method is used to get the number of samples from a Grib2 file
5722	Reads a slice from a list of slices
5723	Generate a grid file
5724	Determines the size of a grid file .
5725	Create a file from a grid file .
5726	Sets the stations .
5727	Set the selected station
5728	Pick a station from the world
5729	Selects the closest station from the world
5730	Returns the selected station .
5731	Returns the name of the given type .
5732	Returns a list of stations within the specified bounding box
5733	Returns the station with the given name
5734	Get the data iterator for a station .
5735	Get data iterator for a station .
5736	Reads the gate data .
5737	Returns the dot product of this vector
5738	Returns the norm of this vector
5739	Normalizes the matrix .
5740	Set the services for the given dataset .
5741	Get parameter by id
5742	Returns the parameter with the given id
5743	Adds a name .
5744	Adds a symbol .
5745	Returns the prefix for the given string .
5746	Checks if the source is ok
5747	Gets the parameter value .
5748	Calculates the CRC of the data .
5749	Determines if this buffer is a thin image
5750	Returns the index of the field with the given name
5751	Returns the time range name for the given time range indicator
5752	Get the time coordinate
5753	Set the next polygon .
5754	Set the prev polygon .
5755	Find a property by its name .
5756	Set current projection
5757	Subtracts the time from the given time .
5758	Registers an IO provider .
5759	Register an IOProvider
5760	Dynamically registers the given class to the given target .
5761	Checks if the given class is registered with the given class .
5762	De - registers the given class .
5763	Checks to see if a file can be opened .
5764	Create a NetcdfFile from a byte array
5765	Create a NetcdfFile from a byte array
5766	Opens a file in memory .
5767	Opens a NetcdfFile in memory .
5768	Find a global attribute by its name ignoring case .
5769	Writes a NcML document to a String
5770	Writes the CDL to an output stream .
5771	Write CDL .
5772	Write CDL .
5773	Adds an attribute to the group .
5774	Adds an attribute to the group .
5775	Adds a group to the tree .
5776	Adds a dimension to the group .
5777	Removes a dimension from the group .
5778	Adds a variable to the group .
5779	Adds a variable to this group .
5780	Adds a string variable to the group .
5781	Removes a variable from the group .
5782	Sends an Iosp message .
5783	Create the record structure .
5784	Finishes this group .
5785	Reads a variable section .
5786	Reads a variable to a byte channel
5787	Read a list of arrays .
5788	Read a variable section .
5789	Returns the full name of the CDM node .
5790	Returns the full path name with the given name .
5791	Checks to see if a file should be included .
5792	Checks to see if the file should be excluded .
5793	Checks to see if the given file is a filter .
5794	Append a value .
5795	Dispatch check value .
5796	Check value .
5797	Checks if a string is a byte .
5798	Check a short .
5799	Checks if a string is a valid integer .
5800	Checks if a string is a UInt .
5801	Checks if string is a float .
5802	Checks if a string is a double .
5803	Determines the data type of an attribute .
5804	Returns true if the dataset is visible .
5805	Returns true if the given string is a valid boolean .
5806	Returns true if the given string is a valid alphanumeric string .
5807	Checks if the given alphanumeric string is a valid alphanumeric string .
5808	Returns true if the path is a file path .
5809	Converts a Unicode code point into a percentage string .
5810	Gets a parameter value .
5811	Compare two grid definitions
5812	Process the input stream .
5813	Processes the input buffer .
5814	Removes double quotes from a string .
5815	Mark a stack trace .
5816	Write a NcML file to a file .
5817	Get the value from the Hredds config
5818	Returns a CDL string representation of the CDL .
5819	Creates a station helper .
5820	Validate the input .
5821	Get the azimuth
5822	Returns the elevation of the message .
5823	Returns the latitude of the ASB .
5824	This method returns the longitudes of this object
5825	This method returns the altitudes of this object
5826	This method returns the azimuths for this entry .
5827	This method returns the elevation of the object
5828	Returns a structure with the given names .
5829	Returns a structure with the given variable name .
5830	Adds a member variable .
5831	Set member variables .
5832	Set parent group .
5833	Calculates the size of all elements in this variable .
5834	Read the structure at the given index
5835	Reads a structure from a vector .
5836	Get the structure data iterator
5837	Get data category
5838	Gets the class name .
5839	Adds a parameter .
5840	Returns the header .
5841	Converts a LatLon rectangle to a projection matrix .
5842	Extract the version number from a string .
5843	Returns the positive value of the z axis .
5844	Delete the next file .
5845	Sets the color scale parameters .
5846	Renders the plan view
5847	Is this H5Group?
5848	Returns the type for the given name .
5849	Install the table in all columns
5850	Sets the API key and secret .
5851	Creates a label with the given value .
5852	Creates a label with the given lines .
5853	Creates a new label .
5854	Connects to the server .
5855	Returns a list of IPs .
5856	Connect to the given host and port .
5857	Purges a logger .
5858	Compiles all source code files .
5859	Compile the given class and source code .
5860	Adds a source code .
5861	Read the graphic control file
5862	Get the next frame
5863	Gets the selectable strings property .
5864	Initialize list events .
5865	Returns the person with the given id
5866	Add a message to a validator
5867	Sets the person id .
5868	Creates and inject a view model .
5869	Creates a view model from the given view .
5870	Loads the list of countries .
5871	Load the list of subdivisions .
5872	Adds a new string property to the bean .
5873	Creates a new immutable string property .
5874	Creates a new view .
5875	Factory method to create a Fxml View .
5876	Clears the map .
5877	Create the index events .
5878	Access the given member .
5879	Load the Fxml view with the given resource type
5880	Creates the Fxml path for the given view type .
5881	Query for a style row
5882	Get pixel value
5883	Get pixel values
5884	Validate the image type
5885	Creates a new image with the specified tile width and height
5886	Sets the tile data
5887	Execute a raw query
5888	Wrap query
5889	Queries the query using the previous result .
5890	Execute a query
5891	Handles a cursor .
5892	Get the feature row
5893	Register a table
5894	Get the tile row
5895	Get the coverage data
5896	Get the coverage data for the tile DAO
5897	Get the coverage data
5898	Get the coverage data tile matrix results
5899	Get the results zoom level
5900	Get the coverage data tile matrix
5901	Get the coverage data tile matrix
5902	Get the tile matrix
5903	Get the value of the tile at the specified location
5904	Sets the icon for the geometry type
5905	Get the icon for the geometry type
5906	Returns the bindings database .
5907	Converts a byte array to a Bitmap
5908	Compress a bitmap to a byte array
5909	Create the table metadata
5910	Delete the geometry metadata
5911	Get or create a table metadata
5912	Get the id of the GeoPackage
5913	Create the table metadata
5914	Creates the extension .
5915	Gets the feature row .
5916	Execute raw query
5917	Query by the bounding box
5918	Query by envelope
5919	Counts the number of entries in the given envelope .
5920	Query where clause
5921	Build the WHERE clause
5922	Query for features within the bounding box
5923	Count the number of features in the bounding box
5924	Query by envelope
5925	Query for features within the feature table .
5926	Counts the number of elements in the rectangle
5927	Sets the bitmap
5928	Sets the bitmap data
5929	Sets the bitmap compression config .
5930	Get the number of tiles
5931	Adjust the bounding box
5932	Adjust the bounds of the Google bounds .
5933	Adjust the bounding box
5934	Adjust the bounding box
5935	Get the bounding box for the zoom level
5936	Get the tile grid
5937	Query for a tile
5938	Query by zoom level
5939	Get the zoom level
5940	Get the approximate zoom level
5941	Query for the zoom level
5942	Delete the tile
5943	Count the zoom level
5944	Determines if the map is Google Maps .
5945	Get the pixel value at the given x and y
5946	Get the pixel values of the TIFF image
5947	Validate the image type
5948	Creates a new image with the specified tile width and height
5949	Sets the pixel value of the image
5950	Get or create a GeoPackage
5951	Gets the current row .
5952	Moves to the next invalid .
5953	Query by base feature id
5954	Delete by base id
5955	Get a rectangle from the specified width and height
5956	Get rounded float rectangle
5957	Removes missing databases .
5958	Create and close the GeoPackage database
5959	Check if the database is valid
5960	Validate database and close on error .
5961	Validate database .
5962	Validate database .
5963	Validate the database header
5964	Check if the database is valid
5965	Add internal databases
5966	Adds external databases .
5967	Import a database
5968	Get the GeoPackage metadata for the database
5969	Get the GeoPackage metadata at the external path
5970	Creates the content of a geometry .
5971	Populate the geometry metadata
5972	Delete the geometry
5973	Creates or updates or updates a geometry .
5974	Update the geometry metadata
5975	Counts the bounding box
5976	Create a geometry metadata from a cursor
5977	Update rows in the table
5978	Draw a tile .
5979	Get the rows for a list of IDs
5980	Checks if the cursor is ok .
5981	Get the UserMapping DAO
5982	Get SimpleAttributes DAO
5983	Returns the mappings for the given base id
5984	Retrieves the mappings for the given relationship
5985	Checks if the user has a mapping
5986	Returns the number of rows in the given cursor .
5987	Register a cursor wrapper
5988	Read a table
5989	Get the tile from the request bounding box
5990	Draw the tile .
5991	Reproject the requested tile .
5992	Get the tile results
5993	Calculates the draw overlap
5994	Set density
5995	Sets the line paint .
5996	Sets the polygon paint .
5997	Draw a tile
5998	Draw the tile at the specified zoom level
5999	Draw a tile index
6000	Query the feature count
6001	Query feature count
6002	Query for indexed features
6003	Query features within the bounding box
6004	Draw the tile at the specified zoom
6005	Simplify a list of geometries
6006	Get the paint for the feature
6007	Get the paint for the feature
6008	Get the paint for the feature
6009	Get the fill paint for the feature style
6010	Get the paint for the feature style
6011	Get the style paint
6012	Get the paint for a style row
6013	Get the paint for the feature
6014	Put a bitmap for the icon row
6015	Creates a bitmap from an icon row
6016	Wrap a ContentValues object
6017	Create a bitmap
6018	Recycle the layers
6019	Get the bitmap for the layer
6020	Get the canvas for the layer
6021	Creates a bitmap and adds it to the canvas
6022	Get the style mapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature style for the feature table
6026	Get the styles for the feature table
6027	Get the style for the feature table
6028	Get the icons for the feature table
6029	Get the icon for the feature table
6030	Get the feature style for the feature row
6031	Get the feature style for the feature table
6032	Get the styles for the feature row
6033	Get the icons for the feature row
6034	Get the styles for the feature
6035	Get icons for the feature
6036	Set the feature style for the feature table
6037	Set the style for the feature table
6038	Sets the icon for the feature table
6039	Set the feature style for the feature row .
6040	Set the style for the feature table
6041	Sets the styles for the feature row .
6042	Sets the style for the feature table
6043	Set the style for the feature row
6044	Set the default style for the feature row
6045	Set the default style for the feature table
6046	Sets the icons for the feature row .
6047	Sets the icon for the feature table
6048	Sets the icon for the feature row .
6049	Sets the default icon for the feature row
6050	Sets the default icon for the feature table
6051	Get or insert a style
6052	Get or insert an icon
6053	Insert a style mapping
6054	Delete the table style mapping
6055	Delete the table icon
6056	Delete the table mappings
6057	Delete the feature mapping
6058	Delete the style mapping
6059	Get all style ids for the feature table
6060	Get all the icon ids for the feature table
6061	Get all style ids for the feature table
6062	Get all icon ids for the feature table
6063	Get the image bytes
6064	Flush the image .
6065	Get the pixel value
6066	Reads the pixels
6067	Draw the feature
6068	Draw a line path
6069	Draw a polygon
6070	Add a linestring to the path
6071	Add a polygon to the path
6072	Get the cache for the given table name .
6073	Remove the feature from the table
6074	Clear and resize all caches .
6075	Get the cached table style
6076	Get the cached icons .
6077	Get the RTree Index Table DAO
6078	Set the width
6079	Set the height of the area
6080	Gets the derived dimensions .
6081	Calculates the density of the density of the specified density
6082	Read blob value .
6083	Read a custom table
6084	Gets the current color .
6085	Validate the color
6086	Create a color from a hex color
6087	Get the manager
6088	Set the progress
6089	Index a list of features .
6090	Index a row
6091	Deletes a collection of features .
6092	Delete the index for the given type
6093	Deletes a list of feature types .
6094	Delete the feature index
6095	Checks if location is indexed .
6096	Gets the indexed types .
6097	Query the feature index
6098	Count the number of features
6099	Get the bounding box
6100	Query for features within the bounding box
6101	Returns the feature index type .
6102	Gets the internal file .
6103	Get file path .
6104	Get the geometry type
6105	Set the geometry type
6106	Checks if the URL contains the bounding box
6107	Replace the x and y z
6108	Checks if the URL has a XYZ value .
6109	Replace the bounding box
6110	Replace the bounding box
6111	Get the geometry data
6112	Index a feature row
6113	Update the last indexed time
6114	Delete the feature
6115	Delete the feature s index
6116	Indicates if the feature is indexed .
6117	Query the feature metadata
6118	Query the feature table
6119	Count the number of features in the bounding box
6120	Query the geometry table
6121	Count the number of features in the geometry
6122	Query the feature bounding box
6123	Count the number of features in the bounding box
6124	Get the feature bounding box
6125	Get the geometry metadata for the cursor
6126	Get the feature row from the cursor
6127	Get the feature row
6128	Get the tile DAOs for the feature table
6129	Get the feature DAO for the tile table
6130	Get the bounding box
6131	Query by base id
6132	Query the base ids
6133	Query the unique id table
6134	Delete by base id
6135	Delete by related id
6136	Delete by id
6137	Build the WHERE ids
6138	Create the GeoPackage metadata
6139	Delete the table metadata
6140	Rename the metadata
6141	Rename the name
6142	Get all the metadata
6143	Get the GeoPackage metadata
6144	Get the GeoPackage metadata
6145	Get or create the metadata for the GeoPackage
6146	Check if a database exists
6147	Get the metadata for the external path
6148	Get metadata where name like name
6149	Get metadata where name notLike
6150	Get metadata by name
6151	Create the GeoPackage metadata
6152	OnView created .
6153	Add a parallax view to the view
6154	On createView .
6155	Create a custom view .
6156	Subpend the given event to the output buffer
6157	Find the logback config file from system properties .
6158	Get a resource
6159	Automatically configures the application .
6160	Status on resource search .
6161	Converts a socket address to a string .
6162	New executor service .
6163	Starts all converters starting at the specified head .
6164	This method is called from subclasses to subclasses should override this method .
6165	Adds a substitution property .
6166	Returns the value of a property .
6167	Compile the given tree .
6168	Emit an EOpt
6169	11 . 1
6170	Escape the string .
6171	Returns the regular expression for a fixed date .
6172	Begins the execution context .
6173	End an evaluator .
6174	Initialize the context
6175	Returns a context selector for the given string .
6176	Sets up properties .
6177	Returns the path of the mounted external storage directory .
6178	Gets the database directory path .
6179	Returns the absolute path of the given filename .
6180	Evaluate the logging event .
6181	Gets the discriminator value for the given event .
6182	Updates the mask if necessary .
6183	Get the filter chain decision .
6184	Create key managers .
6185	Create trust managers .
6186	Create a keystore factory from system properties .
6187	Get the location from the system property
6188	Returns the URL for the given location .
6189	Returns true if the chain is a throwable chain .
6190	Stop the context .
6191	Prints out the given context .
6192	Prints the given context if any .
6193	Prints a context .
6194	Write the first line to the output stream
6195	Get the entry from the map
6196	Removes the specified key from the map .
6197	Creates a FormatInfo object from a string .
6198	Rename a file .
6199	Checks if source file is on different volumes
6200	Gets the value of the environment variable .
6201	Get a system property value
6202	Sets the mDC property map .
6203	Output the MDC for all keys
6204	Extract the stack trace from the stack trace .
6205	Checks if current class is in the framework space list
6206	Adds a new status .
6207	Adds a status listener to the console .
6208	Looks up an implicit action for an element .
6209	Returns the list of applicable actions for the element .
6210	Set the class loader
6211	Get a string value from the system properties
6212	Get a boolean property
6213	Decompresses the name .
6214	Returns the method descriptors for the given class .
6215	Returns the property descriptors for the given class .
6216	Starts the appender .
6217	Add onConsoleStatusListener instance .
6218	Ends a property definition .
6219	Returns the discriminating value for the given event .
6220	Determines if the logging event should be discarded .
6221	Start a shutdown hook .
6222	Registers a shutdown hook .
6223	Returns the set of supported protocols .
6224	Returns the set of supported cipher suites .
6225	Returns the included strings .
6226	Convert String to Scope
6227	Sets the properties for the given scope .
6228	Adds a new appender .
6229	Removes the given appender from the list .
6230	Detach an appender by its name .
6231	Handle parent level change .
6232	Call appenders .
6233	Detach the given appender from this thread .
6234	Create a child logger by its last name part .
6235	Call the Turbo filters .
6236	Log a SLF4J event .
6237	Creates a new socket .
6238	Create the parent directories for the given file .
6239	Convert the level to an integer .
6240	cast int to a Level
6241	Counts the number of occurrences of a resource .
6242	Get the URL of a resource
6243	Returns the class loader for the given object .
6244	Get the class loader for the given class
6245	Gets the class loader for the given class .
6246	Starts the appender .
6247	Returns the tag for the given logging event .
6248	Start a substitution property .
6249	Returns the index of the separator index of the given name .
6250	Evaluate the logging event .
6251	Get client thread name
6252	Checks if two files are on the same file .
6253	Starts the mail .
6254	Append an event to the aggregator .
6255	Sends a buffer to the output buffer .
6256	Adds a new MDCValueLevelPair .
6257	Creates a converter for the given keyword .
6258	Creates a composite converter .
6259	Determines the compression mode .
6260	Configure the servlet .
6261	Configures the given file with the given file .
6262	Configure the input stream
6263	Build the interpreter .
6264	Configures the input source .
6265	Sets up the configuration for the given event list .
6266	Gets a property .
6267	Sets the name .
6268	Returns true if the status manager has a status listener .
6269	Returns the time of the last reset .
6270	Start parser .
6271	Gets the effective converter map .
6272	Returns the file header .
6273	Get file footer
6274	Begins an action .
6275	Ends an appender .
6276	Creates a copy of the clients .
6277	Adds a client .
6278	Removes a client from the queue .
6279	Get a copy of the context map
6280	Gets the value of the given type .
6281	This method is used to get a filter chain decision .
6282	Checks if the current operating system is an Android OS .
6283	Initialize the default logger context
6284	Returns a list of files that match the given regular expression .
6285	Prints a status message .
6286	Convert a string representation of the string representation of the given string .
6287	Get the database file name
6288	Clear expired logs .
6289	Checks if the last check is expired .
6290	Subappend method .
6291	Add a secondary sub - append to the log .
6292	Bind logging event .
6293	Truncate a String to a String
6294	Compute the reference mask for the logging event
6295	Merges the properties into a map .
6296	Insert exception .
6297	Returns the length of this path .
6298	Returns the effective level .
6299	Sets a property .
6300	Determines whether the given class can be instantiated .
6301	Returns the child value for the given parent .
6302	Process an include .
6303	Open a URL .
6304	Trim the head and tail of the queue .
6305	Returns true if the server is started .
6306	Check if response is transient
6307	Set default hosts .
6308	Acquires a local index .
6309	Sync the data selection .
6310	Sync the last sync date if any .
6311	Wait a task
6312	List indexes offline .
6313	Converts an input stream to a char array .
6314	Converts an input stream to a byte array .
6315	Consume and close the connection .
6316	Returns the list of hosts that are up .
6317	Sets type .
6318	Starts the browse .
6319	Put the value in the cache .
6320	Get the value associated with the given key
6321	Waits for all threads to complete .
6322	Compare two strings
6323	Reports an exception .
6324	Copies the given directory to the given target directory .
6325	Initialize the simulator properties .
6326	Gets a static field value .
6327	Gets a method by its name .
6328	Formats a percentage value .
6329	Formats a double .
6330	Format long .
6331	Reads the next token .
6332	Parses the given byte as a byte .
6333	Write a JSON string .
6334	Write a JSON integer .
6335	Write a double .
6336	Read json string .
6337	Read json numeric chars .
6338	Read a JSON integer .
6339	Read a double .
6340	Read json .
6341	Execute a method call .
6342	Invokes a method call .
6343	Enqueue a method call .
6344	Gets the file for the given path .
6345	Updates the decoration .
6346	Refresh the repository view .
6347	Returns the resource history view
6348	Opens an editor
6349	Reports an authentication failure .
6350	Prompts for authentication .
6351	Create default page .
6352	Start the thread
6353	Sets whether the element is kept alive .
6354	Sets whether the element should be emitted .
6355	Sets the owner .
6356	Adds a condition factor .
6357	Create a condition term from a tokenizer .
6358	Returns true if the given condition term matches the given condition term .
6359	Returns the DDL content for the given rule source .
6360	Load the DSL config file .
6361	Read the configuration file .
6362	Gets the menu .
6363	Adds a response element .
6364	Adds a href .
6365	Inserts a new href in the document .
6366	Remove an href from the document .
6367	Add a property stat .
6368	Gets the href attribute .
6369	Returns the status of the document .
6370	Get the stack frame for the given value
6371	Checks if two classes are a subtype of the given class .
6372	Checks if the list contains a new proposal .
6373	Clones a node .
6374	Reset the buffer .
6375	Create actions for contentAssist .
6376	Adds a connection .
6377	Get a property value
6378	Remove a connection
6379	Sets the location .
6380	Sets a property value .
6381	Sets the size of the gauge .
6382	Dumps the constraints .
6383	Adds a lock entry .
6384	Adds a child vertex to the graph .
6385	Remove a child from this vertex .
6386	Initialize the preferences .
6387	Stop the bundle .
6388	Retrieves a string from the resource bundle .
6389	Gets the resource bundle .
6390	Gets the form builder formatter .
6391	Sets the date time from a string .
6392	Sets the date time according to the given pattern .
6393	Creates an error .
6394	Log an error .
6395	Adds a field editor .
6396	Updates the grid layout .
6397	Apply font .
6398	Calculates the number of controls .
6399	Initialize the preferences .
6400	Fires a property change event
6401	Sets the active editor .
6402	Adds the zoom to the tool bar .
6403	Determines the dialect for the back text .
6404	Create a context for the given locator .
6405	Saves the current state of the file .
6406	Create the table listeners .
6407	Create the table .
6408	Sets the value to the given URL .
6409	Put a value into the cache .
6410	Adds a token .
6411	Adds a child node to this node .
6412	Sets the file .
6413	Adds a condition .
6414	Adds a state token .
6415	Returns true if the condition matches the given condition .
6416	Gets the property .
6417	Returns the status of the element .
6418	Sets the property .
6419	Get last line from backText
6420	Get the last non - dash line
6421	Binds the given id with the given id .
6422	Binds the given id to the given id .
6423	Binds the given id with the given bindings .
6424	Create the process .
6425	Create the sample sample JUnit
6426	Gets the runtime id .
6427	Visit a Rete .
6428	Visit a node .
6429	Returns the dot id for the given object .
6430	Adds a remove element .
6431	Adds a set property .
6432	Factory method to create a new locator .
6433	Get the presentation Reconciler
6434	Returns true if this object is the same as the same .
6435	Returns true if this term contains the given term .
6436	Create a condition factor .
6437	Add pages .
6438	Performs an HTTP DELETE request .
6439	Performs a POST request .
6440	Get the status of a job
6441	Execute the pull operation .
6442	Handle pull results .
6443	Sets the value at the given index .
6444	Adds an active lock .
6445	Filters a list of completion proposals for a given prefix .
6446	Reads the prefix from the beginning of the document .
6447	Calculates the rows for a given node .
6448	Paint the component .
6449	Returns the edit part for the given model element .
6450	Get the image descriptor for the given path
6451	Declares an image
6452	Adds a vertex at the specified depth .
6453	Returns the row for the given vertex .
6454	Get the width of all rows
6455	Dumps all rows in the table
6456	Optimize the rows
6457	Load the RETE tree .
6458	Initialize the graphical viewer
6459	Draw the graph
6460	Returns the breakpoint for the given source .
6461	Sets the href .
6462	Returns true if the server can talk to the server .
6463	Copy all properties to the destination .
6464	Examine the response .
6465	Extract the prop stats from the list of properties .
6466	Gets the response content .
6467	Returns an enumeration of active locks .
6468	Get a property .
6469	Perform a HEAD request .
6470	Lock the file .
6471	Moves the given names to the given destination .
6472	Check in the directory .
6473	Refresh lock .
6474	Removes a set of properties .
6475	Remove a property .
6476	Sets the content of the file .
6477	Sets the properties .
6478	Sets the property .
6479	Unlock the lock .
6480	Update document .
6481	Request version control .
6482	Delete a file .
6483	Examines the status code .
6484	Checks if the property has a child with the given name .
6485	Writes the request body to an output stream .
6486	Converts a byte array to a hexadecimal string .
6487	Converts an int array to a hex string .
6488	Sets whether the element is all the properties of the element .
6489	Sets whether the element is a property name .
6490	Sets the property .
6491	Removes the last word from a prefix .
6492	Updates the tree .
6493	Write the content to an output stream .
6494	Sets up the next frame over the buffer .
6495	Mark parser errors .
6496	Skip whitespace .
6497	add a resource to the web . xml
6498	Commit changes to a file
6499	Gets the age attribute .
6500	Gets the content length .
6501	Gets the maximum number of forwards .
6502	Returns true if the file should be overwritten .
6503	Determines whether or not this element should be sent .
6504	Gets the timeout value .
6505	Put a property value .
6506	Sets the timeout .
6507	Open DDL file
6508	Parse the contents of a file .
6509	Returns the metadata for the given text .
6510	Strip object metadata .
6511	Add tokens to the tree .
6512	Get the children of the given text .
6513	Get the children of the given object .
6514	Adds a child node to the list .
6515	Prints the tree .
6516	Prints a node tree .
6517	Prints tabs .
6518	Read a JsonValue from a string
6519	Get an image descriptor by id
6520	Invokes the given request .
6521	Sets a request header field .
6522	Create the sample sample launcher .
6523	Create the rule .
6524	Create the rule flow .
6525	Creates the template for the rule flow .
6526	Returns the selected IU items .
6527	Creates an image to the given output stream
6528	Gets the field name .
6529	Gets the evaluator .
6530	Gets the value of this node .
6531	Helper method to add a Guvn resource to the Guice .
6532	Perform a baseline control .
6533	Binds a member .
6534	Get a member by its name .
6535	Optimize the vertices .
6536	Initialize the controls .
6537	Validate the page .
6538	Generate entity tag .
6539	Returns the opposite vertex .
6540	Validate a list of otp .
6541	Checks if the given username is a right user .
6542	Returns the username for the given id .
6543	Adds a yubikey to a file .
6544	Verify an OATH .
6545	Clear password .
6546	Returns the public id for the given otp .
6547	Returns true if the given string is a valid OTP format .
6548	Creates an evaluation for the given node .
6549	Creates an Evaluation for the given node .
6550	Clears the cache .
6551	Determines if this class is a jdk 5 . 1 . 1 . 1 . 1
6552	Get package name
6553	Extract the package name from a class .
6554	Returns the unique descriptor for the given object .
6555	Returns the type of the argument
6556	Checks if two classes are more specific .
6557	Returns the best matching method for the given source and target .
6558	Get the value of a property on the target object .
6559	Returns the property descriptors for the given target class .
6560	Gets a property descriptor from an array of properties .
6561	Gets a read method .
6562	Read a single character .
6563	Generate a projection
6564	Select all selectAll
6565	Returns the long value represented by the given value .
6566	Returns the double value .
6567	Convert value to BigInteger
6568	Convert value to BigDecimal
6569	Returns the string value .
6570	Returns the numeric type of the given value .
6571	Convert value to type
6572	Convert value to integer
6573	Returns the numeric type for the given types .
6574	Returns the numeric type of two objects
6575	Creates an integer from the given long value .
6576	Pop the current evaluation .
6577	Generate an OGNL getter for the given field .
6578	Generate an OGNL setter .
6579	Flatten the tree .
6580	Initialize this node .
6581	Escape the image .
6582	Sets the root .
6583	Retrieves the value of the given expression .
6584	Sets the value of the given object .
6585	Sets the value for the given tree .
6586	Returns true if the expression is a constant .
6587	Returns the default watch service id .
6588	Waits for the server to start .
6589	Read file as string
6590	Reload the class loader
6591	Gets an archive by its name .
6592	Checks the given archiver for problems .
6593	Read file as string
6594	Create the project .
6595	Add a system property .
6596	Add a system property .
6597	Opens a new folder dialog
6598	Changes the selected directory .
6599	Refresh the button state .
6600	Creates a new file observer .
6601	Return the selected directory .
6602	Create folder .
6603	Checks if the given file is a valid file .
6604	Start a background job
6605	Start a list .
6606	Ends a list .
6607	Handle motion .
6608	Get the crop rectangle
6609	Compute the layout .
6610	Registers an RTC edit text listener .
6611	Sets the span watcher .
6612	Returns the view with the specified position
6613	Get the drop down view
6614	Convert a text to an RTF image .
6615	Iterates over the text inside a paragraph .
6616	Creates a unique file in the target folder
6617	Determines the original file of the given Uri .
6618	Returns the namespace for the given name .
6619	Returns the local name of the given name .
6620	Sets an attribute value .
6621	Sets an attribute .
6622	Get font name
6623	Get font name
6624	For internal use only
6625	Writes a byte array to the current buffer .
6626	Write a byte .
6627	Write the contents of an input stream to the current buffer .
6628	Writes the buffer to the given output stream .
6629	Returns a copy of this buffer as a byte array .
6630	Sets the font size
6631	Transform the path to Unix .
6632	Recompute focus .
6633	Ensure that the view is visible .
6634	Center the view based on the highlight view
6635	Reset document locator .
6636	Validate the value .
6637	Adds an element type .
6638	Set attribute .
6639	Set parent element .
6640	Returns the element type by its name .
6641	Returns the index of the specified entity .
6642	Clean all paragraphs in the editor .
6643	Applies the given value to the selection .
6644	Returns true if the given domain is a valid domain .
6645	Executes the given operation .
6646	Performs a redo operation .
6647	Replaces all occurrences of the search with the given search string .
6648	Get or create a thread status for the given thread .
6649	Sets the bitmap options .
6650	Returns true if the given thread can be decoded .
6651	Decode a file descriptor .
6652	Gets the font fonts .
6653	Gets the font fonts .
6654	Get system font names
6655	Initialize the schema .
6656	Returns a reader for the given input source .
6657	Returns an input stream to the system .
6658	Replaces an attribute with the current element .
6659	Expands all entities in a string .
6660	Lookup an entity .
6661	Restart the saved element .
6662	Pop the stack .
6663	Restore an element .
6664	Returns the prefix of the given name .
6665	Determines whether a prefix is foreign .
6666	Removes double quotes from a string .
6667	Splits a string into an array of strings .
6668	Rectify an element .
6669	Create a name from a buffer .
6670	Sets the state of the instance .
6671	Destroys this object .
6672	Called when an event occurs .
6673	Dispatches the current fragment .
6674	Calculate the correct base matrix .
6675	Determines the maximum zoom level .
6676	Checks to see if this object exists in the selection .
6677	Remove spans from a paragraph
6678	Encode url .
6679	Decode query string .
6680	Pick a directory
6681	Rotate image .
6682	Sets the output writer .
6683	Writes a character to the output stream .
6684	Writes a string to the output stream .
6685	Checks whether the given attribute is a boolean attribute .
6686	Escape a string .
6687	Write namespace declarations .
6688	Write name .
6689	Creates a stream with the given name and shard count .
6690	Waits for a stream creation .
6691	Checks to see if there are any snapshots in the target store .
6692	Waits for the next partitioning request to execute .
6693	Gets records .
6694	Performs an action with retries .
6695	Executes an action on an AWS Amazon S3 .
6696	Checks if the specified bucket is accessible .
6697	Loads the transactions from the snapshot store .
6698	Trigger wildcard expander .
6699	Replace all occurrences of a pattern in a String .
6700	Deletes any chars from a string .
6701	Adds a report .
6702	Update properties with configuration .
6703	Gets the configuration properties .
6704	Creates an input stream from the wro file .
6705	Convert pre processors to post processors .
6706	Compile the content using the provided arguments .
6707	Reload cache with new value .
6708	Reload the model with a new value
6709	Creates a new servlet request that wraps the given request .
6710	Creates a transformer for the base name .
6711	On error .
6712	Sends redirect to the given location .
6713	Process a resource .
6714	Creates and returns the handler for the given resource .
6715	Locates an input stream .
6716	Creates the Wro configuration .
6717	Registers listeners for the cache update .
6718	Process the request .
6719	Sets the Wro configuration .
6720	Identify duplicate groups .
6721	Merges the given model with the given model .
6722	Locates the given uri .
6723	Apply post processors .
6724	Decorate the resource post processor .
6725	Process a resource .
6726	Splits an option string into an array of options .
6727	Load properties from an input stream .
6728	Parse the properties from a string .
6729	Creates custom wro manager factory .
6730	Persists a list of resource names .
6731	Checks if the target group is a target group .
6732	Extend the plugin classpath .
6733	Gets the model resource .
6734	Initialize the Wro manager factory .
6735	Sets the model transformer .
6736	Compile the HTML template
6737	Merges a list of resources .
6738	Merges all resources into a string .
6739	Run the pre processing in parallel .
6740	Apply pre processors to a resource
6741	Decorate a ResourcePreProcessor .
6742	Persists the fallback storage .
6743	Returns all fields of the given object .
6744	Rewrite an image URL .
6745	Compute new image location
6746	Adds a model transformer to the model .
6747	Serve the bundle .
6748	Initialize the aggregated folder path
6749	Extract variables from a list of variables .
6750	Parse a CSS file .
6751	Replaces all variables in the CSS .
6752	Creates a preprocessor for the given post processor .
6753	Checks if the resource type is eligible for the search .
6754	Applies the gzip response .
6755	Returns a path pattern processor that matches the given pattern .
6756	Creates a path pattern processor that matches the given path patterns .
6757	Create a resource change handler .
6758	Adds a resource to the cache .
6759	For each css import apply the provided function .
6760	Filter the collection
6761	Checks if the request is minimized .
6762	Find all imported resources .
6763	Compute the absolute URL for the given resource .
6764	Creates a string representation of the given items .
6765	Returns the list of aliases .
6766	Creates the context .
6767	Evaluates the given reader and returns the result .
6768	Evaluates a script .
6769	Processes the input stream .
6770	Checks if the request is a handler request .
6771	Creates the handler request path .
6772	Rename a file .
6773	Compute the destination folder
6774	Process a group .
6775	Checks if the given URL is changed to the given group .
6776	Locates a resource with the given URI .
6777	Creates a new object pool .
6778	Locates an InputStream for a jar file .
6779	Open a JAR file .
6780	Extract the path from a URI .
6781	Checks if the request should be minimized .
6782	Add locators to the factory .
6783	Decorate the given WroModelFactory .
6784	Adds a require .
6785	Process the update .
6786	Logs the summary of the analysis .
6787	Process a resource .
6788	Returns a ReadWriteLock for the given key .
6789	Create a process from a source file .
6790	Parse the contents of a comma separated list of properties .
6791	Get the task info .
6792	Gets the compilation command .
6793	Parse header .
6794	Adds no cache headers .
6795	Gets the path info from a location .
6796	Get servlet path from location .
6797	Checks if the given path matches the given path .
6798	Loads a pattern from the properties file .
6799	Safely copies the contents of a reader to a writer .
6800	Creates a new temporary file .
6801	Clean image url .
6802	Sets an attribute on the servlet context .
6803	Generates a data URI from an input stream .
6804	Generate data URI .
6805	Sets the context .
6806	Removes the context .
6807	Check changes for a given cache key .
6808	Handle exception .
6809	Checks if a resource has changed .
6810	Updates the hash for a group .
6811	Checks if all resources have the given type .
6812	Create a process from source file and destination file .
6813	Encode an object to a String
6814	Process groups .
6815	Parse the group element .
6816	Create a group from an XML element .
6817	Parse resource .
6818	Get the resources for a group .
6819	Log to the given logger
6820	Stop a named timer .
6821	Get a timer for the current thread .
6822	Get a named timer .
6823	Prints the saturation statistics .
6824	Wake up the workers .
6825	Updates the processed counters .
6826	Updates the completion counters for the current snapshot .
6827	Updates the counter if it is smaller than the given value .
6828	Default implementation .
6829	Inserts a property into the taxonomy .
6830	Ensure that loading is done .
6831	Restore saturation .
6832	Returns true if the classification check is consistent .
6833	Restore the taxonomy .
6834	Restore the instance taxonomy .
6835	Returns the evidence for this ontology .
6836	Initialize the executor .
6837	Recursively invalidates this reasoner .
6838	Returns a collection of individual individuals to add to the collection .
6839	Returns the set of individuals to remove .
6840	Throws an UnsupportedOperationException with the given method name .
6841	Removes the element at the specified position .
6842	Removes the element at the specified position .
6843	Returns the position of the moved element in the array .
6844	Returns true if the specified element is inside the specified array .
6845	Adds an element to the list .
6846	Checks that the occurrences are valid .
6847	Add a timer to this timer .
6848	Adds a timer .
6849	Put a key value into the array
6850	Removes the entry from the key array .
6851	Increases the size of the map .
6852	Shrinks the map .
6853	Save the configuration to disk .
6854	Prints the syntonomy declarations .
6855	Creates a set of entities from a node .
6856	Clears the hash table .
6857	Combines multiple hashes into a single hash set .
6858	Combine a list of hashes .
6859	Copies the input stream to the output stream .
6860	Gets the incompleteness monitor .
6861	Process taxonomy .
6862	Submit an input to the buffer .
6863	Appends the given el object to the given appender .
6864	Marks not computed .
6865	Adds a direct type node .
6866	Checks to see if there is an exact match .
6867	Returns a set of elements that satisfy the given condition .
6868	Returns a set consisting of the elements of the given set .
6869	Adds an element to the log .
6870	Removes an object from the log .
6871	Adds the given counter to this counter .
6872	Log memory usage
6873	Set configuration options .
6874	Shutdown the reasoner .
6875	Print header .
6876	Print an array of values .
6877	Get a string from a character sequence .
6878	Adds the given rule to this rule .
6879	Write resource .
6880	Get an ActionInputParameter by name
6881	Gets the property descriptor for the given property path .
6882	Gets the required parameters .
6883	Returns true if the given class is a single value type .
6884	Adds a rel .
6885	Sets the type of the link .
6886	Sets the hreflang parameter .
6887	Adds a revision .
6888	Adds a parameter to the link .
6889	Expand the uri template .
6890	Gets the list of rels .
6891	Gets the list of revisions .
6892	Checks if all required variables have been satisfied .
6893	Gets the value of the property .
6894	Checks if a property is hidden .
6895	Checks if the given property is included in the input annotation .
6896	Checks if an explicit property include value .
6897	Checks if the request is required .
6898	Returns the default value
6899	Gets the parameter name .
6900	Returns the name of the exposed property .
6901	Gets the vocab .
6902	Returns the query string
6903	Append form .
6904	Generates an input button .
6905	Append an input or select or select .
6906	Adds an action descriptor to this builder .
6907	Returns this URI template as an empty string .
6908	Removes optional variables from the template .
6909	Returns the first node with the given name .
6910	Get the first node by rel
6911	Returns an iterator over this UberNode .
6912	Creates a PersistentHashMap from an Iterable .
6913	Creates a new PersistentTreeMap from the given Map .
6914	Returns an empty PersistentTreeMap .
6915	Returns an unmodifiable view of this map .
6916	Returns the last key in this map .
6917	Creates a new Xform from an iterable .
6918	Performs a fold operation on an iterable
6919	Drop all elements from this stream using the given predicate .
6920	Performs a reducer using a reducer .
6921	Creates a tuple from the given entry .
6922	Implementation of the function .
6923	Register types .
6924	Returns the element at the given index .
6925	Appends an element to the vector .
6926	Concatenates an iterable into a persistent vector .
6927	Creates a mutable set of items .
6928	Creates a mutable vector from the given elements .
6929	Creates a set of the given items .
6930	Returns an immutable view of the given items .
6931	Returns an unmodifiable view of the given array .
6932	Returns a string builder for indentation .
6933	Returns a string representation of an array
6934	Creates a lazy reference from the given producer function
6935	Call this method to apply the lock to the disk .
6936	Inserts an item into the array at the specified index .
6937	Returns a copy of the given array .
6938	Suspend the thread if any .
6939	Initialize the async operation .
6940	Build a list of service components .
6941	Validates a directory .
6942	Creates an inheritance link .
6943	Copies methods from source to destination classes .
6944	Copies the given methods to the destination .
6945	Performs the tree structure .
6946	Remove the SbbEntity with the current class loader
6947	Returns whether or not notifications are enabled or not .
6948	Returns the set of resources that are referenced by the given service .
6949	Install a service .
6950	Uninstalls the specified service .
6951	Checks to see if a resource link name is referenced by a resource adapter .
6952	Returns the usage parameter sets for the SbbID .
6953	Reset all usage parameters .
6954	Retrieves the profiles for the given table name .
6955	Returns a profile table activity
6956	Get profile by attribute name .
6957	Displays the result .
6958	Normalize an array into a string .
6959	Execute fire event .
6960	Adds a name to the node .
6961	Unbinds a named name .
6962	Lookup a node by its name .
6963	Returns the name bindings .
6964	Handle the next event .
6965	Returns true if the given TraceLevel is higher than this one .
6966	Extract a jar file from a jar file .
6967	Writes the input stream to the output stream .
6968	Sets an object value .
6969	Attach a SbbEntity to this node .
6970	Removes the given SbbEntity from this node .
6971	Returns true if the element is no longer attached .
6972	Retrieves the set of attachments attached to this node .
6973	Attach a timer .
6974	Removes the specified timer from this timer .
6975	Returns true if the timer has no timers attached .
6976	Returns the set of timers associated with this node .
6977	Adds a name bound to the namespace .
6978	Remove a named name from this namespace .
6979	Returns true if this node has no names bound .
6980	Returns the names bound to this node .
6981	Sets a comparison attribute .
6982	Get the compare attribute value .
6983	Returns a copy of the cmp attributes map .
6984	Initialize the notification information .
6985	Send usage notification
6986	Download a local DU from a remote URL
6987	Update all registered components .
6988	Install a deployment unit
6989	Uninstalls the specified deployment unit .
6990	This method is used to process internal undeploys .
6991	Show the status of the dialog .
6992	Determines if the specified log record should be logged .
6993	Get the logger for the given record .
6994	Returns the set of components that refer to the given component .
6995	Retrieves all the SbbEntity objects associated with this node .
6996	Get the permissions for the current policy .
6997	Returns the list of code sources
6998	Checks if the given profile exists in the table .
6999	Remove the profile table .
7000	Update the configuration properties
7001	Starts the slee server .
7002	This method is called when the application is stopping
7003	Activates this entity .
7004	Deactivate this entity .
7005	Schedule all active activities end
7006	Remove this entity .
7007	Returns the resource adaptor interface for the given resource type .
7008	Called when a service is active .
7009	Determines the ActivityHandle for the given ActivityHandle .
7010	documentation inherited from ActivityHandle
7011	This method is used to update the configuration object
7012	Verify the configuration properties .
7013	This method is called when the object is stopping .
7014	This method is called when the object is active .
7015	Unconfigure the resource adapter
7016	Unbinding resource adaptorContext
7017	Declarative Services method for unsetting the FaultTolerantResourceAdaptor .
7018	Build profile attribute map .
7019	Resume the stream .
7020	Returns the activity context handles .
7021	Remove the mbean
7022	Returns the usage mbean with the given name .
7023	Decorate the abstract class .
7024	Fires an event
7025	Fires an event
7026	Gets the profile cmp method .
7027	Gets the service usage parameter set .
7028	Get the methods from a class
7029	Gets the methods from the given interface .
7030	Creates the object pool for the given profile table .
7031	Removes the object pool for the given profile table .
7032	Checks if the given notification source is the owner of the given notification source .
7033	Issues an alarm .
7034	Returns the usage parameter set for the given profile object .
7035	Gets the event type descriptor .
7036	Return true if the given URL is accepted .
7037	Initialize the deployment .
7038	Start the deployment .
7039	Stop the deployment
7040	Show the status of the deployment .
7041	Execute after commit actions .
7042	Executes after commit priority actions .
7043	Execute after rollback actions .
7044	Execute before commit actions .
7045	Execute before commit priority actions .
7046	Get the names of the tracer level .
7047	Creates a tracer with the given name .
7048	Removes the replication data .
7049	Registers the PropertyEditor .
7050	Process the usage parameters interface .
7051	Returns the object pool for the given service ID .
7052	Create the object pool
7053	Execute an activity .
7054	Start an activity .
7055	Ends an activity
7056	Checks if the given event type is valid .
7057	Fires an event
7058	Generate the class for this object .
7059	Make the getter .
7060	Convert a String to an Object
7061	Sets the profile ID .
7062	Extract the message from the result .
7063	Returns true if the given object contains the given object .
7064	Returns true if the given collection contains all elements in the child relation .
7065	Removes all elements from the given collection .
7066	Returns true if this level is higher than the other .
7067	Resolve the message .
7068	Remove all classes from the pool
7069	Adds a profile call to the profile .
7070	Returns the profile object associated with the given name .
7071	Passivate a profile object from the transaction .
7072	Set the value as text .
7073	Generate an activity context interface .
7074	Generate concrete methods .
7075	Set a data attribute .
7076	Add a name binding .
7077	Removes all naming bindings from the context .
7078	Remove a name binding
7079	Attach a timer to the cache .
7080	Removes the timer from timers .
7081	Attaches the given SbbEntity to the ActivityContext .
7082	Detach a SBB entity from the activity context .
7083	Gets the set of Sbb attachments that are not excluded .
7084	Ends the activity context
7085	Adds a component to the deployment .
7086	Returns the set of external dependencies .
7087	Returns true if the dependency has been satisfied .
7088	Returns true if the list contains duplicates .
7089	Gets the install actions .
7090	Gets the uninstallActions property .
7091	Checks to see if there is a reference DU .
7092	Close a profile table
7093	Returns the object name for the profile table name
7094	Marks write mode as read - write mode .
7095	Before setCmpField .
7096	Invoked after setCmpField is set .
7097	Before getCmpField
7098	Invoked after getCmp field .
7099	Call before management method invocation .
7100	Invoked after management method invocation .
7101	Deletes a path .
7102	Creates the default constructor .
7103	Create the default usage parameter setter .
7104	Creates the getter and setter for the SbbEntity .
7105	Create the fire event methods .
7106	Create the getSbbActivityContextInterface .
7107	Adds an expression to the query .
7108	Binds the given key to the given object .
7109	Binding a name .
7110	Decorate the abstract class .
7111	Invokes a method with the given arguments and returns the result .
7112	Get the real field name
7113	Set the value of this field .
7114	Gets the value of a field .
7115	Sets the profile context .
7116	Initialize the profile .
7117	Unset the profile context
7118	Gets the profile local object .
7119	Fires the update or updated event if there is a changed event .
7120	Gets the profile cppers .
7121	Creates a new class with the given name and interfaces .
7122	Creates an inheritance link .
7123	Add an annotation to this class .
7124	Add member values to the ConstPool .
7125	Returns the ActivityContextInterface for the given activity .
7126	Get the class pool
7127	Sets the deployment unit .
7128	Undeploys the classloader .
7129	Executes an activity .
7130	Checks if the given class or interfaces are identical .
7131	Returns a map of all methods from the given class .
7132	Resolve an entity .
7133	Checks the given tracer name .
7134	Handle a single profile query .
7135	Checks the dependencies for the deployment .
7136	Creates a temporary DU deployment directory for the deployment .
7137	Gets the entity manager .
7138	Starts the server .
7139	Switch a class loader
7140	Makes a proxy call to the proxy .
7141	Checks if the transaction is the same .
7142	Converts the given time to a TTL .
7143	Is the profile class visible?
7144	Gets the profile object valid in current transaction .
7145	Get list of logger names
7146	Reset the logger levels .
7147	Clear all loggers
7148	Add a new logger .
7149	Add socket handler
7150	Remove a handler
7151	Convert tracer name to log4j logger name
7152	Updates the log4j to the log4j .
7153	Determines the log4j level .
7154	Reset the cache flags .
7155	Sends a trace notification .
7156	Validates a tracer name .
7157	Write an object to the stream .
7158	Read an object from an input stream .
7159	Adds a domain to this class loader .
7160	Returns a list of all the classes in this loader .
7161	Find a class by its name .
7162	Finds a resource in the server .
7163	Returns an enumeration of all resources located on the given name .
7164	Creates and registers a profile mbean .
7165	Resume a transaction .
7166	Returns the set of SbbIDs contained in this descriptor .
7167	Returns the set of resource adaptor entities for the given component .
7168	Initialize the Slee .
7169	Shutdown the Slee .
7170	validate state transition
7171	Generate the named usage parameter setter .
7172	Sets the value of the update field .
7173	Build the pojo .
7174	Add a value to the query .
7175	Run a transaction .
7176	Create a new RegionRequest object from a string
7177	Returns the region of this rectangle .
7178	Resolves the image with the specified dimensions .
7179	Get on type .
7180	Sets the viewing hints .
7181	Adds views to the resource .
7182	Sets the renderings .
7183	Adds renderingings to the resource .
7184	Merge a list of profiles .
7185	Merges two ImageApiProfile into one .
7186	Create a new RotationRequest object from a string
7187	Create a size request from a string
7188	Initialize the ADB connection .
7189	Get the dump of a file
7190	handlePopBox
7191	Push a handle to a device
7192	Clean up temporary files .
7193	Download dump dump to pc
7194	Get the crash log file
7195	Removes tabs from text editor .
7196	Indent spaces .
7197	Tokenize HTML .
7198	Marks the given text .
7199	Escape special characters in HTML .
7200	Add an exception to the pool .
7201	Closes the cache .
7202	Find the package name of the given type .
7203	Writes the target class to the given file .
7204	Writes a BitVector1Divider .
7205	Append bit strings to a BitVector
7206	Reads this object from an input stream .
7207	Get a list of JsonObject
7208	Retrieves a list of objects from the path
7209	Set the KOV report
7210	Add screen capture from current path
7211	Sets system info .
7212	Creates a Selector that selects a property
7213	Creates a Selector that selects a property
7214	Extract validation annotation data .
7215	Extract all annotation for a property
7216	Find properties for a property .
7217	Gets the property descriptor for the given name .
7218	Lookup an object .
7219	Converts a Map into a Map .
7220	Creates a new object from the given map .
7221	Deserialize a value map .
7222	To map .
7223	To map .
7224	Get values for an annotation .
7225	Creates the validator .
7226	Lookup the list of validators .
7227	Lookup a validator in the registry .
7228	Apply validation metadata properties to a validator .
7229	Remove a property from a map
7230	Sets the time .
7231	Returns the number of entries in this cache .
7232	Returns the hash of the given object .
7233	Returns the default options .
7234	Open the database .
7235	Write multiple values to the database .
7236	Removes multiple keys from the database .
7237	Returns a key value iterable .
7238	Load all data from the database .
7239	Closes the database .
7240	Performs the reduction by the given double array .
7241	Helper method to reduce a double array
7242	Calculates the variance of an array .
7243	Returns the mean of a long array .
7244	Invoke a method from an object .
7245	implements the reduction by reduceBy
7246	Converts a timestamp to a UTC date string .
7247	Returns true if the object matches the criteria .
7248	Creates a criterion that is not in the given list .
7249	Creates a criteria from a list of objects .
7250	Creates a criteria object from a json string .
7251	Adds integers to the end of the array .
7252	Returns the maximum element of the given array .
7253	Returns the first element of the list
7254	Returns the last element of the list
7255	Returns the last element of the list
7256	Returns the first element of the list
7257	Returns the minimum element of the list .
7258	Returns the minimum element of the array
7259	Process an array of maps .
7260	Handles a collection of maps .
7261	Converts a Map to an Object
7262	Get the value associated with the key
7263	Creates the tool tip with the given name and field name .
7264	Generate label value .
7265	Adds a hex encoded hex value to the buffer .
7266	Process read queue .
7267	Process write queue .
7268	Starts the write queue .
7269	Support the subscript operator
7270	Translates a String to a String
7271	Return true if the given string is in the given string .
7272	Adds a character to a string
7273	Add objects to a string .
7274	Compacts a string to a String
7275	Splits a string into an array of strings .
7276	Split a string by space .
7277	Splits a string by a delimiter .
7278	Converts a char array to a String array .
7279	Convert a string to a camel case .
7280	Checks if the specified string is inside of the specified string .
7281	Convert a string to under bar case
7282	Returns a string representation of a number .
7283	Creates a new Sort .
7284	Sort a list of fields
7285	Returns a comparator for this field .
7286	Gets the child comparators .
7287	Checks if the given value is in the given map .
7288	Checks if two integers are equal
7289	Checks if two arrays are equal
7290	Returns the sum of the elements in the array .
7291	Rounds a number to a power of 2 .
7292	Sorts a list by a field .
7293	Sorts a list by its fields
7294	Set field value from map .
7295	To list .
7296	Create the SQL statement to load all the versions of the given table .
7297	Implementation of deep copy .
7298	Checks if the value is a string field .
7299	Checks if a class has a string field
7300	Checks if a class has the given name .
7301	Gets the first generic name of the given class .
7302	Get sortable field name
7303	Compares this CacheEntry .
7304	Compares the time in the cache .
7305	Sorts a list by a list of sorts .
7306	Sorts a list by its name .
7307	Sorts the entries in a Map .
7308	Sorts the values in the given map by the given component type .
7309	Sorts the keys in the given map .
7310	Sorts an array of objects .
7311	Returns a comparator for the given field access .
7312	Returns a comparator that can be used to sort the objects .
7313	Get the value associated with the given key
7314	Gets a value from the cache .
7315	Increment the order .
7316	Evicts the cache if necessary .
7317	Dynamically initialize the value if necessary .
7318	Allocate a buffer by size
7319	Determines if the processing loop should be interrupted .
7320	Manage the input writer channel .
7321	Checks if there is a flush to disk
7322	Start the monitor
7323	Starts the timer .
7324	Returns the object associated with the given key
7325	Generate the main query plan .
7326	Filter group .
7327	Sets the time spent .
7328	Sync the buffer to disk
7329	Close the output stream
7330	Write the next buffer to the output stream
7331	Write a buffer to disk .
7332	Initialize the output stream
7333	Stores all entries in the given map .
7334	Returns the key bytes for the given key .
7335	Reads a validator meta data from a property file .
7336	Extract validator meta data from string .
7337	Reads all validator meta data for a given property .
7338	Extract validator meta data .
7339	Extract validator metadata from annotations .
7340	Convert an annotation data to a validator meta data .
7341	Split a string into an array of strings .
7342	Split a string by whitespace .
7343	Split a string by delimiters
7344	Removes all characters from a string .
7345	Splits a string by delimiters .
7346	Parse a double from a buffer .
7347	Parse an int from a buffer .
7348	Parse a long from a buffer .
7349	Get property by path
7350	Get fields from an object .
7351	Returns the type of the given property .
7352	Injects a property path into an object .
7353	Writes the given property path to the given class .
7354	Gets a collection property .
7355	Get a property from an object
7356	Gets the int value of a property .
7357	Initialize the message .
7358	Creates a message for the given key and key
7359	Creates the validation message .
7360	Convert keys to values
7361	Gets the subject .
7362	Parses a text into an object .
7363	Sends an HTTP request .
7364	Delete a database .
7365	Create a database .
7366	Returns a list of UUIDs .
7367	List all resources in the given directory .
7368	Trigger a replication .
7369	Queries the document and returns the result .
7370	Sets the descending view .
7371	Synchronize all documents in the database .
7372	Retrieves a design document from the database .
7373	Gets all design documents from the system .
7374	Gets a design document from the puzzle .
7375	Saves the replicator document .
7376	Find the replicator document .
7377	Find all replicator documents .
7378	Remove a replicator document .
7379	Find documents by id and id .
7380	Find documents by query .
7381	Checks if the document contains a document .
7382	Execute multiple documents .
7383	Performs a PUT request .
7384	Performs an HTTP PUT request .
7385	Perform a POST request .
7386	Performs a DELETE request .
7387	Validates the response .
7388	Sets the entity to the HTTP request .
7389	Adds an attachment .
7390	Returns the changes for the feed .
7391	Read next row .
7392	Convert a double to a human readable string .
7393	Shuts down the lock .
7394	Writes an observable to the output stream
7395	Add tags to a metric .
7396	Verify and create temporary tables .
7397	Gets namespace id .
7398	Returns true if the given server is a query .
7399	Send authentication request .
7400	Gets the server response .
7401	Generates the subject access review .
7402	Handles a request result .
7403	Handles a request failure .
7404	Initialize the session .
7405	Find all scheduled jobs .
7406	Transform a map into a list of buckets .
7407	Ends the exchange .
7408	Find all data from a bucket .
7409	Creates buckets from start and end .
7410	send message
7411	send one message
7412	Send a delay msg to a topic
7413	Scan the specified cursor .
7414	Sets the value for the given property .
7415	Adds a file to the zip archive .
7416	Replaces the contents of a file with the given file .
7417	Build the configuration file
7418	Generates the metrics for the given component and product .
7419	Fetches content .
7420	Retrieves the content of an order item .
7421	Upload a transformation to a stylesheet .
7422	Generates a file for the given components .
7423	Creates a new directory in the given parent directory .
7424	Ends the child .
7425	Registers an adaptor for the given type .
7426	Registers an attribute renderer .
7427	Prepare the template .
7428	Adds a domain object to the stream .
7429	Sets a property .
7430	Adds a child object .
7431	Creates a file from a directory .
7432	Copies the given input stream to the given output stream .
7433	Parse the given file .
7434	Parse an XML document from a reader .
7435	Returns all elements in the given parent .
7436	Returns a stream of all child nodes in the given parent .
7437	Gets the first child element .
7438	Returns a stream of named elements .
7439	Validate an XML Schema .
7440	Main entry point .
7441	Creates a builder from an input stream .
7442	Loads a resource from a resource .
7443	Iterates through the ZIP file and processes the given entry .
7444	Encodes the given string ascii characters .
7445	Sets the signature header .
7446	Removes whitespace from the input data .
7447	Sign the callback .
7448	Sets the object data .
7449	Complete multipart upload .
7450	Invokes the target .
7451	Add a new entry state .
7452	Returns true if the cache has expired .
7453	Get notification by id
7454	Retrieves the addressees for a notification
7455	Get the Addresse details
7456	List events for a notification
7457	Get an event
7458	Get a single notification URL
7459	Returns the entry with the given id .
7460	Get the SSP token .
7461	Returns the size of the notification .
7462	Add new categories to the list .
7463	Retrieves the notification for the SSP notification .
7464	Creates a notification response
7465	Maps the portlet response to a notification response .
7466	Maps a notification entry .
7467	Attaches the actions to the notification .
7468	Normalize a link .
7469	Returns the notification category for the preference .
7470	Returns the source for the notification source .
7471	Invokes the target .
7472	Read the notification response from a file
7473	Determines the order id for the current user .
7474	Extract the user id from the response
7475	Invokes the notification .
7476	Get attributes map .
7477	Normalize a point vector
7478	Checks if the specified box is contained within the box B .
7479	Finds the closest point in the image
7480	Computes the sign of a point
7481	Sets the values of this Se3
7482	Sets the elements of the euler
7483	Converts an input polygon to a polygon .
7484	Converts a polygon to a quadrilateral .
7485	Returns the bounding box of the quadrilateral
7486	Bounds the specified polygon to the specified rectangle .
7487	Returns the center of the quadrilateral
7488	Computes the average of a polygon .
7489	Compute the convex hull
7490	Removes a polygon from a polygon .
7491	Returns the average distance between the two points
7492	Computes the area of the polygon
7493	Returns true if the quadrilateral contains the specified point .
7494	Checks to see if a triangle is inside a triangle .
7495	Returns the intersection of two lines .
7496	Returns the intersection of two lines .
7497	Returns the intersection of two lines
7498	Returns the intersection between target and target
7499	Returns the intersection of two polygons
7500	Returns true if the specified ellipse contains the specified location .
7501	Computes the intersection of two rectangles
7502	Returns the element at the given index
7503	Transform a matrix into a quaternion .
7504	Sets the X rotation matrix for the specified angle .
7505	Sets the X rotation matrix .
7506	Calculates the Y matrix for the given angle .
7507	Computes the rotation matrix for the given angle .
7508	Sets the rotation matrix .
7509	Calculates the matrix for the Euler type
7510	Computes the rotation matrix for the specified axis .
7511	Sets the slope .
7512	Extracts a twist coordinate from a motion matrix .
7513	Sets the transform for the initial and end and end .
7514	Applies the interpolation of the surface to the output .
7515	Compute SVD
7516	Solve a point on a plane
7517	Returns the length of the side at the given index
7518	Returns true if this image is inside the given point .
7519	Convert a ConicGeneral into a matrix .
7520	Convert a ConicGeneral into a matrix .
7521	Convert a conicola to a Parabola general image .
7522	Convert a Parabola to another .
7523	Divide by v
7524	Transform a GeoTuple3 into a matrix
7525	Transform a matrix into a GeoTuple3 .
7526	Sets the parameter vector .
7527	Distance between two angles
7528	Computes the intersection of two lines .
7529	Checks to see if a point is inside a plane .
7530	Returns true if the line is intersect .
7531	Applies the interpolation of two segments .
7532	Extract the quaternion from the q
7533	Computes the polygon .
7534	Sets to no motion matrix
7535	Transform a Se3 into a homography matrix .
7536	Transform a Segment into a homography matrix
7537	Creates a new Se3 shape for the specified axis .
7538	Checks if two segments are identical .
7539	Transform a latitude to a unit vector .
7540	Returns true if the specified point is a circle
7541	Calculates the radius of a circle
7542	Finds the closest point in the line
7543	Finds the closest point in the line
7544	Find the closest point in the plane
7545	Finds the closest point in the line
7546	Finds the closest point from the two points
7547	Transforms the transformation to the original point .
7548	Transform the transform of a Segment .
7549	Returns true if the specified quadrilateral is equal to the given tolerance .
7550	Computes the acute angle between two lines .
7551	Convert a linetric vector to a line parametric2 .
7552	Convert a LineGeneral to a LinePolar2 .
7553	Convert src to a line parametric2 image .
7554	Converts a LineSegment2 into a LineGeneral2 image .
7555	Convert two points to a line .
7556	Convert two points to a line parametric .
7557	Convert a LineParametric2 to a LinePolar2 .
7558	Convert a line parameteretric to a line .
7559	Convert the source to a line parametric2 .
7560	Converts the input to a PlaneGeneral3D .
7561	Convert the input to a plane normal .
7562	Converts a view to a plane normal .
7563	Transform a point 2D to a 3D matrix
7564	Converts the given plane to world coordinates
7565	Returns true if the given t is identical to the given tolerance .
7566	Creates a copy of this matrix .
7567	Returns the norm of the vector
7568	Compute the t - coordinate of a line
7569	Returns true if the matrix is uncountable .
7570	Returns true if the parameters are identical to the given parabola .
7571	Compute the center of a point
7572	Computes the acute angle between two lines .
7573	Checks to see if the given point is an infinite value .
7574	Generate random points from a center point .
7575	Transform a point to a point 3D point .
7576	Computes the product of two points .
7577	Checks to see if two lines are identical .
7578	Sets this rectangle .
7579	Convert an ellipse to an ellipse quadratic matrix .
7580	Compute a point from the specified ellipse
7581	Compute the angle of a point .
7582	Compute the tangent of the ellipse
7583	Selects a tangent from an ellipse
7584	Returns the corner at the specified index
7585	Returns the distance between two lines .
7586	Compute the distance between two lines
7587	Calculates the distance between the line and p
7588	Returns the distance between the plane and the given point .
7589	Returns the distance between the specified point and point .
7590	Returns the Euclidean distance between two lines .
7591	Returns the Euclidean distance between two lines .
7592	Returns the Euclidean distance between the quadrilateral and p
7593	Returns the Euclidean distance between the specified quadrilateral and p .
7594	Returns the Euclidean distance between the polygon and p
7595	Returns the Euclidean distance between a polygon and a point .
7596	Returns the distance between the line and the line .
7597	Returns the distance between the ellipse and p
7598	Returns the distance between the ellipse and p
7599	Adds a transform to the path
7600	Finds the closest point in the line
7601	Returns the closest point in the ellipse
7602	Computes the polynomial coefficients
7603	Creates a random vector .
7604	Computes the perpendicular vector between the two vectors
7605	Checks if two vectors are identical .
7606	Normalize a vector
7607	Creates a new matrix with the given parameters .
7608	Convert a matrix to a real vector .
7609	Returns the Euclidean distance between the specified coordinates .
7610	Sets the ellipse
7611	Normalize the vector .
7612	Calculates the triangle of the triangle
7613	Computes the angle of a quadrilateral .
7614	Calculates the sum of a polygon
7615	Computes the mean of a list of points
7616	Sort a list of points
7617	Computes the normal from a list of points
7618	Returns true if polygon is convex
7619	Multiply this matrix .
7620	Returns the maximum absolute value .
7621	Calculates the Euclidean distance from the specified coordinates .
7622	Returns the squared Euclidean distance between the two points .
7623	Generate random points from a plane .
7624	Generate random points
7625	Generate random points from the mean
7626	Returns the mean of a list of points
7627	Returns the mean of the points
7628	Invalidates all cached credentials .
7629	Invalidates all caches that match the given condition .
7630	Combines multiple collections into a set .
7631	Get the list of server features for the server . xml
7632	Retrieves the list of dropins .
7633	Get the list of features from the original XML file .
7634	Parse an include node .
7635	Parse feature manager node .
7636	Download the jsons
7637	Get the Liberty feature set from a set of files .
7638	Checks if the given list of Open Liberty features are installed .
7639	Returns true if the collection contains all the elements in the collection ignoring case .
7640	Get the next product version
7641	Extract the symbolic name from a jar file .
7642	Gets the map based on the given directory .
7643	Checks if a file is a replacement jar .
7644	Extract the version from the file name
7645	Compare two strings
7646	Returns the product info for the specified action .
7647	Checks to see if the given file is a Spring Boot Uber application jar .
7648	Retrieves the value of an Arquillian property .
7649	Checks if the file is working in the same environment .
7650	Moves back to center .
7651	Compares two objects .
7652	Loads an integer from a string
7653	This method is used to throw an exception
7654	Verify the TURLE
7655	Swaps the contents of this puzzle with the given target
7656	Returns the distance between two cells .
7657	Prints a formatted message to the console .
7658	Prints a formatted message to the console .
7659	Makes sure that the given number of votes can be accepted .
7660	Print a variable .
7661	Generate a uniform random number
7662	Generate a uniform random number
7663	Returns the probability of the given lambda
7664	Returns the number of elements in the array
7665	Demonstrates how to print a random number
7666	Capitalizes the first character of the word .
7667	UnCapitalize the first character of the word .
7668	Fix path .
7669	Returns a string representation of the given criteria join .
7670	Get token sentence .
7671	Extract the token from the cookie list .
7672	Extract the auth token from a cookie list .
7673	Registers the Guice bound binding .
7674	Gets all permissions for the given parent .
7675	Adds a projection to the list
7676	Convert a JobInfo to a JobDetail
7677	Convert a trigger to a trigger .
7678	Sets the count interval values .
7679	Sets the start and end time .
7680	Send mail
7681	Writes the response to the output stream .
7682	Initialize the scheduler .
7683	Returns a collection of all fields in the given class .
7684	Get field map .
7685	Creates a response for the given exception .
7686	Configures the token based on the given configuration .
7687	Generate the attributes hash .
7688	Generates a token string .
7689	Sends a message .
7690	Generates a strong password for the given user .
7691	Change the password .
7692	Gets the user by its name .
7693	Hashes a password .
7694	Verify an account name .
7695	Verify the password .
7696	Provide the search model .
7697	Commit the transaction .
7698	Rollback an error .
7699	Starts the transaction .
7700	Get field by name
7701	Checks if the given token is authorized .
7702	Parse a value from a field
7703	Gets the response .
7704	Creates an equal expression .
7705	Creates a not equals expression .
7706	Creates a less than expression
7707	Creates a less than or equal to the given value .
7708	Creates a greater than expression .
7709	Creates a greater than or equal to the given value .
7710	Creates an ilike expression .
7711	Creates a new IN expression
7712	Add namespace .
7713	Returns a copy of this resource with the given content .
7714	Creates a new resource representation with the given rel .
7715	Returns a copy of this resource with the specified value .
7716	Creates a new resource representation with the given namespace .
7717	Returns true if the given byte array can be decoded .
7718	Encode a string to a byte array .
7719	Compares two buffers .
7720	Moves a file to a destination file .
7721	Creates a new file for the given files .
7722	Returns the base name of the file .
7723	Adds padding to the buffer .
7724	Returns the short name of the given class .
7725	Returns the set of super types .
7726	Verify the given hash .
7727	Reads a string from the system .
7728	Appends a byte to the buffer .
7729	Append bytes to the buffer .
7730	Creates a deep copy of the original array .
7731	Creates a new fraction with the given f .
7732	Subtract a fraction from another .
7733	Returns a new fraction with the specified f .
7734	Divides this fraction by another .
7735	Returns the maximum value of a long .
7736	Returns the minimum of a long .
7737	Checks if the condition is true .
7738	Retrieves the content of the given latitude and altitude .
7739	Fetch metadata for a given latitude and latitude
7740	Fetches the content of the specified latitude and from the specified latitude
7741	Finds the monthly point forecast from now .
7742	Finds the nearest forecast for the given date .
7743	Fetches the forecast data for the given query
7744	Create a simple long term forecast
7745	Creates and returns a TimerLongTermForecast with the given date
7746	Creates a new location from a string .
7747	Fetch the available data .
7748	Creates the name for the given point .
7749	Find the forecast level for the given forecast .
7750	Creates a URI from a string .
7751	Returns true if the current date is a Sun .
7752	Returns the point forecast for the given date .
7753	Returns the best fit period forecast for the specified date .
7754	Fetches the content for the given latitude and latitude
7755	Fetch the content of a latitude and language
7756	Update database .
7757	Invokes a string method .
7758	Acquires an object from a data source .
7759	Returns a reference to the specified class .
7760	Returns a reference to the specified object .
7761	Get the configuration for the given service .
7762	Determines if the given bootstrap configuration is enabled .
7763	Creates a class iterator for the given service .
7764	Gets the decoder .
7765	Get services for the given interface
7766	Gets a module by its name .
7767	Acquires an input stream .
7768	Returns the size of this buffer
7769	Gets the wrapped data .
7770	Gets the component index .
7771	Returns the prefix of this name .
7772	Returns true if the compiler is colored .
7773	Execute the specified regex .
7774	Loops through the DFA .
7775	Subtracts a subset of the specified subset .
7776	Computes the intersection of two subexpression
7777	Intersect two subexpression
7778	Clones outouts from two states .
7779	Optimization .
7780	Mark a subtree .
7781	Generate nfa node .
7782	Parse a binary tree .
7783	Performs a deltraverse traversal .
7784	Processes non - word sequences .
7785	Generate a word .
7786	Reads the next reference number .
7787	Parse a bracket .
7788	Scan plain text .
7789	Add a new lacon to the end
7790	Performs a single chr .
7791	Vector vector .
7792	Returns the color for the given character .
7793	Generate the pseudo color .
7794	Implementation of subrange .
7795	Determines the ok color descriptors
7796	Set the colorchain for an arc .
7797	Remove a colorchain from an Arc .
7798	Dumps the color descriptions .
7799	Start the start of the token .
7800	Parse prefixes .
7801	Performs lexnest .
7802	Returns the color for the specified codepoint .
7803	Initializes the state set .
7804	Returns the last seen record .
7805	Returns the set of classes for the given character .
7806	Returns the set for the given class name .
7807	Sorts the arcs in ascending order .
7808	Returns a string representation of this operation .
7809	Create a new state
7810	Moves the out of the arc .
7811	Moves the ins from another Arc .
7812	Copies the ins from another Arc .
7813	Copies outouts from old state to newState
7814	Drops a state .
7815	Frees a state .
7816	Create a new arc .
7817	duplicate a state
7818	Sets the special colors .
7819	Dumps information about nfa .
7820	Dumps a state .
7821	Dumps the arcs to a string buffer .
7822	Dumps the arcs of a Arc .
7823	Prints an arc .
7824	Analyzes the search .
7825	Analyzes the arc .
7826	Combines and returns the number of segments .
7827	Clean up state .
7828	Marks the given state as reachable .
7829	Marks the given state as possible .
7830	Fix empty sequences .
7831	Copies an arc from another Arc to another .
7832	Gets the rule parameters .
7833	Gets the report plugins .
7834	Get report plugins .
7835	Gets the rule selection .
7836	Main entry point .
7837	Returns the error message .
7838	Gather the standard options .
7839	Gather the tasks options .
7840	Gets task names .
7841	Interprets the command line .
7842	Get the command line .
7843	Execute a task .
7844	Read properties from the command line .
7845	Prints usage .
7846	Gets the home directory .
7847	Create the class loader .
7848	Returns the set of ids contained in the map
7849	Returns the set of ids of all cells in the map
7850	Returns the URI for the given method .
7851	Add route .
7852	Returns the number of routes .
7853	Add route to the router .
7854	Add route .
7855	Add a route to this router .
7856	Checks if any of the given request path tokens are matched .
7857	Returns a criterion that is equal to the given property .
7858	Returns the store file name .
7859	Compare folders .
7860	Compare entries .
7861	Compare two Bookmarks .
7862	Sets the last modified time of the servlet .
7863	Returns the list of dependent names .
7864	Find the class with the given name .
7865	Parse the authorization header .
7866	Get a ProtectedFunctionMapper .
7867	Maps a function .
7868	Get the map for a function .
7869	Resolve a function .
7870	Sets the values of this buffer .
7871	Resolve a variable .
7872	Parse a report file .
7873	Parse the content of a file .
7874	Parse the content of a tag file .
7875	Parse the content of a jar file .
7876	Creates a compiler
7877	Gets a resource as a stream .
7878	Calculates the last modification timestamp .
7879	Find class loaders .
7880	Checks if the given class loader is a parent classloader .
7881	Start loading .
7882	Read the stream header .
7883	Performs a pagination .
7884	Creates a MetaKey from a string .
7885	Fill the requirements .
7886	Get the TagFileInfo for the named tag .
7887	Parse an explicit tld .
7888	Get checksum for the given file name .
7889	Get size of file
7890	Validate the channel name .
7891	Seeks to the given block .
7892	Locates the block with the given position .
7893	Returns a list of artifact names for the given channel .
7894	Update the state of the opts .
7895	calculate 1 byte price
7896	Calculates the size of the long repiers
7897	Calculates the normal match rates
7898	Throws an expected byte .
7899	Throws an exception .
7900	Scan all the TLDs
7901	Scans a JAR file and returns a TLD
7902	Adds a wrapper to the servlet .
7903	Returns the parent class loader
7904	Set a bytecode .
7905	Gets the name of the given name .
7906	Save bytecode to file
7907	Checks for compile .
7908	Initialize the classpath
7909	Starts the thread .
7910	Stops the thread .
7911	Starts the server .
7912	Find by name .
7913	Finds the channel for the given By object .
7914	Update the deployment group cache
7915	Returns a list of deployments .
7916	Copies the given input stream to the given output stream .
7917	Parse the content of a JSP file .
7918	Parse attributes from a jsp reader .
7919	Parse quoted string .
7920	Adds a list of files .
7921	Parse the attribute and body .
7922	Add an attribute .
7923	Adds a child node to this node .
7924	Find attribute names .
7925	Find children .
7926	Find all children with the given name .
7927	Returns a copy of this coordinates .
7928	Find the alias for the given variable name .
7929	Sets the thread .
7930	Unset the thread
7931	Find the next stream .
7932	Write optional field .
7933	Write a value to a StringWriter .
7934	Adds an element to the document .
7935	Adds an element to the parent element .
7936	Writes the buffer to the specified writer .
7937	Sets the writer .
7938	Re - allocates the buffer .
7939	Generate a map of EL expressions .
7940	Returns the same parent with the given key .
7941	Registers a storage provider .
7942	Stream data from the underlying stream .
7943	Displays a monitor .
7944	Check if the request is authenticated .
7945	Finishes writing .
7946	Creates and returns a new Gson object .
7947	Encode LZMA 2
7948	Union the provided metadata and extracted metadata .
7949	Get the throwable from the servlet request .
7950	Determines if the given coordinate is a check sum .
7951	Finishes writing the output stream .
7952	Get the exception .
7953	Evaluate an expression .
7954	Returns the prefix from OSGi properties .
7955	Checks if the given path is an XML document .
7956	Parse the content of a tag file .
7957	Load the tag file .
7958	Removes the given class file from the temp vector .
7959	Main entry point .
7960	Sets the URI root .
7961	Scans the given directory recursively .
7962	Locates the uri root .
7963	Initialize the system class loader .
7964	Moves the position of the next element .
7965	Checks if the given string matches the given string .
7966	Match optional whitespace followed by whitespace .
7967	Skips until the specified limit .
7968	Skip until EOF until EOF .
7969	Skip whitespace until EOF .
7970	Parse a token .
7971	Pop the next file .
7972	Returns a copy of this coordinates .
7973	Filters an AspectInformation by the given predicate .
7974	Gets the required ids for the AspectInformation .
7975	Sets the schema resource prefix .
7976	Sets the DTD resource prefix .
7977	Encode a prefix .
7978	Convert a tree node to a tree .
7979	Merges the errors from the given BindingResult .
7980	Initialize the binder .
7981	Scan aspect factories .
7982	Unqualify a path .
7983	Invokes a custom tag .
7984	Returns a byte array of size
7985	Returns an integer array of the specified size .
7986	Creates an instance of an artifact .
7987	Gets the resource as a stream .
7988	Validate the given page .
7989	Push a stream .
7990	Get the encoding of the file
7991	Scan XML declaration .
7992	Report a fatal error .
7993	Returns the real path of the given path .
7994	Get a resource
7995	Get a resource as a stream .
7996	Returns the paths of the given path .
7997	Log a message .
7998	Adds a filter .
7999	Gets the buffer size .
8000	Get memory usage .
8001	Sets the preset dictionary .
8002	Move the window .
8003	Fills the buffer with the specified length .
8004	Process pending bytes .
8005	Returns the length of the match in the buffer .
8006	Returns the length of the match length .
8007	Verifies that this matches the given matches .
8008	Moves the current position from the buffer .
8009	Reset the buffer .
8010	Flush the buffer .
8011	Clears the buffer .
8012	Flush the buffer .
8013	Closes the output stream .
8014	Write a string to the output stream .
8015	Allocate a char buffer .
8016	This method is called when an error occurs .
8017	Generates a key for the meta data .
8018	Generate the class .
8019	Compile the report .
8020	Remove generated files .
8021	Initialize the java compiler .
8022	Checks to see if the given path is in the web . xml .
8023	Quote a character .
8024	Generate servlet declarations .
8025	Compile the tag handler pool list .
8026	Generate the XML for the page .
8027	Generate the common postamble .
8028	Generate the postamble .
8029	Generate the report page .
8030	Generate the html handler attributes
8031	Read properties from an input stream .
8032	Export a channel to an output stream
8033	Validate XML view .
8034	Gets the handler .
8035	Parse the expression into an expression .
8036	Selects a property group from the previous one .
8037	Checks if the given URI is a Jsp page .
8038	Prints a comment .
8039	Prints a string .
8040	Prints a string .
8041	Print a single line .
8042	Escape an expression .
8043	Checks the scope .
8044	Escape a string .
8045	Validate the expression
8046	Get the tag handler class name
8047	Returns the package name for the given path .
8048	Splits a path string into an array of strings .
8049	Makes a java identifier .
8050	Mangles the given character .
8051	Checks if the given key is a Java keyword .
8052	Add a property to a map .
8053	Returns a string representation of a modifier .
8054	Returns a sorted set of metadata .
8055	Run the update .
8056	Returns the basename of the given name .
8057	Put a value in the cache .
8058	Load the metadata from the cache .
8059	Build a collection of metrics from an aggregated payload .
8060	Resolves a number .
8061	Write object to output stream .
8062	Returns the TTL for the given locator .
8063	Creates the statement statements .
8064	Track delayed metrics for a tenant
8065	Track delayed aggregated metrics .
8066	Read an unversioned double from the input stream .
8067	Write unversioned double .
8068	Get all properties
8069	Create the container
8070	Schedules eligible slots to be able to roll up slots .
8071	Removes the given slot from the running slots .
8072	Registers a listener for the given event .
8073	Adds an event to the emitter .
8074	Unregister event listener
8075	Emit an event .
8076	Returns the list of listeners for the given event .
8077	Gets the remote name .
8078	Append a RollupEvent to the output stream .
8079	Parse timestamp from file name .
8080	Starts the server .
8081	Gets the rollup type from the given type .
8082	Creates IO container from configuration .
8083	Puts the granularity value for the given granularity .
8084	Compute maximum lengths for each output form .
8085	Returns a string representation of the given headers .
8086	Returns a string representation of the given outputs .
8087	Register metrics for the given object name .
8088	Returns a new thread pool name .
8089	Add a metric index .
8090	Returns the set of metric names .
8091	Get tokens from locator .
8092	Puts a collection into a ResultSetFuture .
8093	Calculates a granularity from an interval .
8094	Calculates the granularity from the requested duration .
8095	Sets the server time .
8096	Get unique host names .
8097	Get the maximum number of connections per host .
8098	Returns an iterator of the metric column family names .
8099	Insert a collection of metrics .
8100	Insert a collection of metrics .
8101	Returns all locators for the given execution context .
8102	Get metric names from Elasticsearch .
8103	Gets the current level to the next level .
8104	Starts the storage manager .
8105	Stop the uploader .
8106	Checks if locator is current in batch layer .
8107	Check if locator is currently active in discovery layer
8108	Returns true if locator is current in token discovery layer .
8109	Returns true if the specified slot is a delayed locator for the specified slot .
8110	Set a delayed locator for a particular slot .
8111	Maps a range to an iterable .
8112	Get ranges for a granularity .
8113	Insert a collection of metrics .
8114	Insert metrics .
8115	Checks if the given metric is delayed .
8116	Returns the bound statement for the given metric if it is a delay .
8117	Gets metadata values .
8118	Returns the serializer for the given type .
8119	Checks if the given headers are valid .
8120	Checks if accept is valid .
8121	Insert discovery .
8122	Validates the aggregated gauges .
8123	Check the file manager .
8124	Creates a new extractor .
8125	Checks if the given OS name and version prefix matches .
8126	Starts the exchange .
8127	Shutdown the RabbitMQ process
8128	Gets the default instance .
8129	Add ICE servers .
8130	Add ICE servers .
8131	 transmit a message
8132	send all peers
8133	Gets the value of the eiterese property .
8134	Gets the value of the userDefinedSimpleField property .
8135	Gets the value of the userDefinedAnyfield property .
8136	Gets the value of the apiSupplier property .
8137	Gets the value of the multimediaAnhang property .
8138	Gets the statusVBM .
8139	Gets the status variable .
8140	Gets the statusHP property .
8141	Gets the importmodus property .
8142	Gets the addruck property .
8143	Gets the wehrung property .
8144	Gets the bodenbelag property .
8145	Sets the region property .
8146	Sets the area property .
8147	Sets the address property .
8148	Sets the value of the JAXB RI property .
8149	Sets the value of the reserveCollection property .
8150	Sets the value of the Furnace property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the main email address .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the external id property .
8158	Sets the value of the agentId property .
8159	Sets the value of the epart property .
8160	Sets the value of the jahrang property .
8161	Sets the value of the gabaeude property .
8162	Sets the value of the bbox property .
8163	Checks if string is a numeric value .
8164	Sets the value of the gebiete property .
8165	Sets the value of the grouppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property property .
8168	Sets the stand property .
8169	Gets the value of the userDefinedExtension property .
8170	Sets the value of the zeiteinheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haus property .
8173	Gets the value of the borp property .
8174	Gets the value of the placeholder property .
8175	Gets the value of the landUndentcha property .
8176	Gets the value of the Sonstige property .
8177	Gets the value of the zinshausRenderer .
8178	Gets the value of the terrain property .
8179	Sets the value of the umfang property .
8180	Sets the value of the wtnungtype property .
8181	Get the ISO2 code for the given country .
8182	Get the country code from an ISO3 code .
8183	Get the ISO3 code for the given country .
8184	Extracts the country code from an ISO2 ISO2 code .
8185	Returns the name of the given country
8186	Translate a country name to a name
8187	Gets the value of the annotation .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the AktionArt property .
8191	Sets the value of the realestateitems property .
8192	Gets the value of the pacht property .
8193	Downdates the document to the given document .
8194	This method is used to upgrade a document from another document to another version .
8195	Gets the value of the content property .
8196	Returns the list of field names .
8197	Sets the value of the blick property .
8198	Sets the value of the pausliete property .
8199	Sets the value of the monatsmiete property .
8200	Gets the parkplatorType property .
8201	Sets the value of the lastenaufug property .
8202	Sets the value of the zustandArt property .
8203	Gets the value of the feld property .
8204	Handle validation event .
8205	Dumps the record to a writer .
8206	Returns the value at the specified position .
8207	Print the contents of this row to an iterable .
8208	Sets the value at the given position .
8209	Sets the value of the ctype property .
8210	Sets the value of the haustyp property .
8211	Gets the value of the energiepass property .
8212	Sets the value of the keller property .
8213	Sets the value of the groundst property .
8214	Sets the value of the geschl attribute .
8215	Sets the value of thehallenTyp property .
8216	Gets the wieserHeadermin .
8217	Gets the teilungsert .
8218	Updates the document version from the previous version .
8219	Gets the value of the bvorzugt property .
8220	Gets the value of the wunsch property .
8221	Sets the value of the JAXB property .
8222	Sets the value of the modifier property .
8223	Gets the value of the emailSonstige property .
8224	Gets the value of the telSonstige property .
8225	Sets the value of the handel type property .
8226	Downdates the document to the previous version .
8227	Sets the value of the apiTrust1 property .
8228	Sets the value of the apiTrust2 property .
8229	Sets the value of the apiTrust3 property .
8230	Gets the value of the row property .
8231	Sets the value of the Drainzipping .
8232	Gets the value of the annotation property .
8233	Gets the objectekt kategorie2 .
8234	Gets the objectekt .
8235	Gets the HausKategorie property .
8236	Gets the value of the uusstattings property .
8237	Gets the value of the vermarktungtung property .
8238	Gets the value of the interessent property .
8239	Sets the value of the wert property .
8240	Sets the value of the Ackerland property .
8241	Sets the value of the bumperiefert .
8242	Gets the value of the bootstraende property .
8243	Sets the value of the property .
8244	Sets the value of the packaging property .
8245	Sets the value of the property .
8246	Sets the value of the eInfamiliencher property .
8247	Sets the value of the einHandles property .
8248	Sets the value of the EinzelHandlers property .
8249	Sets the value of the caragen property .
8250	Sets the value of the gara property .
8251	Sets the value of the granularity property .
8252	Sets the value of the gewer property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industry property .
8255	Sets the value of the eineBundle property .
8256	Sets the value of the kleingewer property .
8257	Sets the value of the lager property .
8258	Sets the value of the mehrfamilies property .
8259	Gets the value of the object property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the producer property .
8262	Sets the value of the reihenhaus property .
8263	Sets the value of the stellplaetze property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the annotation property .
8267	Gets the value of the wtnung property .
8268	Gets the value of the grundstueck property .
8269	Gets the value of the einzelhandel property .
8270	Gets the value of the hallenLagerProperties property .
8271	Gets the value of the parken property .
8272	Gets the value of the freizeitmail property .
8273	Gets the value of the objectektaternion property .
8274	Gets the value of the stellplatart property .
8275	Sets the maximum durations property .
8276	Gets the value of the feature property .
8277	Sets the zimmertype property .
8278	Updates the document version from previous version .
8279	Sets the value of the keine angle property .
8280	Sets the value of the edwaerme property .
8281	Sets the value of the solarheizung property .
8282	Gets the value of the pellestung property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernwaerme property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Generate random string .
8289	Generate random letters .
8290	Generates a random number of random numbers .
8291	Gets the wennungunger .
8292	Sets the value of the binder property .
8293	Sets the value of the object property .
8294	Gets the value of the feed property .
8295	Sets the value of the mob property .
8296	Gets the value of the serviceleistungen property .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city property .
8299	Sets the value of the locality property .
8300	Downgrades the document to another version .
8301	Convert document version to document version
8302	Sets the value of the LandTyp property .
8303	Gets the value of the field property .
8304	Updates the document version from previous version .
8305	Gets the value of the ad property .
8306	Sets the value of the expandgewidth property .
8307	Sets the value of the Placement property .
8308	Gets the daten vender .
8309	Gets the kliminlage .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of theDevelopment availability property .
8313	Sets the directions .
8314	Sets the value of the CO2Rating property .
8315	Sets the energy rate property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the baubar attribute .
8320	This method is used to upgrade the document from another version .
8321	Sets theParkenType property .
8322	Sets the value of the alter attribute property .
8323	Sets the value of the freizeitype property .
8324	Sets the value of the telefonart property .
8325	Sets the value of the EmailPart property .
8326	Sets the value of the departmentasSales property .
8327	Sets the value of the tunnel .
8328	Create a simple simple simple field .
8329	Gets the value of the fehler property .
8330	Sets the value of the erpacht property .
8331	Gets the value of the stpSonstige property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minDauer property .
8334	Sets the value of the zinsType property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the value of the properties property .
8339	Downgrades the given document to another version .
8340	This method is used to upgrade the document from another version
8341	Gets the value of the immobilie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehlerliste property .
8344	Gets the value of the status property .
8345	Sets the value of the SonstigeType property .
8346	Sets the value of the daminz property .
8347	Gets the value of the distainzen property .
8348	Gets the value of the distanzen property .
8349	Checks if the given exception is compatible with the given declared exceptions .
8350	Set bindings .
8351	Binds a namespace URI .
8352	Remove a binding .
8353	Checks if the given string is an opening tag .
8354	Consumes comments from a comment line .
8355	Consume the next comment .
8356	Returns the index of the given token .
8357	Initialize logging .
8358	Start a namespace mapping .
8359	Adds an iterator to the composite iterator .
8360	Adds an option .
8361	Adds a string option .
8362	Adds an integer option .
8363	Adds a long option .
8364	Adds a double option .
8365	Adds a boolean option .
8366	Parse the command line arguments .
8367	Create a new instance of the given class
8368	Invoked after the access .
8369	Sets the target object .
8370	Prepares the static method .
8371	Finds the matching method for the target method .
8372	Convert an integer to a string .
8373	Serialize an object to a byte array .
8374	Deserialize an object from a byte array .
8375	Returns the first child element with the given name .
8376	Gets the value of a child element .
8377	Returns the child elements of the given element .
8378	Returns true if the node s name matches the desiredName .
8379	Checks if a node matches the desired names .
8380	Sets the length of the string .
8381	Monitor the release .
8382	Adds a release listener to the registry .
8383	Keep track monitor thread
8384	Calculate the phone number for a mobile phone number
8385	Start a prefix mapping .
8386	Ends a namespace mapping .
8387	Adds a callback .
8388	Parse the jar file .
8389	Get the color of the item
8390	Sets the values of the preference .
8391	Get the color of the item
8392	Sets the text size
8393	Get the x value in the bounds
8394	Gets the intro .
8395	Returns the names of the keywords .
8396	Returns the arguments for the given keyword .
8397	Returns the documentation for a keyword .
8398	Main entry point .
8399	Stops the remote server .
8400	Starts the remote server .
8401	Convert a file to json
8402	Convert a file to json
8403	Convert input stream to json
8404	Convert properties to json string
8405	Convert properties to json
8406	Convert a map of properties to a JSON object
8407	Convert properties to object map
8408	Convert properties to json
8409	Returns the radius of a shadow .
8410	Creates an Apache OcspFetcher .
8411	Find the intermediate certificate .
8412	Execute the command .
8413	Preprocess all files in the given directory .
8414	Substitute variables in a template .
8415	Get the title from a list of lines
8416	Adds the title to the HTML file .
8417	Replace variables in the initial content .
8418	Updates the relative paths in the HTML page .
8419	Copies all files from one directory to another .
8420	Check path .
8421	Wrap a slider content .
8422	Starts up the animation .
8423	Smoothly fades down .
8424	Calculates the percentage of the view
8425	Overlay the view with the specified width .
8426	Creates an Intent to launch an Activity .
8427	Launch an activity
8428	Get Todo list
8429	Get Fact sheets .
8430	Download file from response
8431	Build the http client .
8432	Create an Access ControlEntity object .
8433	Update data model
8434	Create a full export
8435	Get the export list
8436	Sets the token provider host .
8437	Sets the client credentials .
8438	Process a GraphQL request
8439	Get a bookmark list
8440	Adds permissions to a graph .
8441	Write permissions for a graph .
8442	Sets rulesets .
8443	Closes the writer .
8444	Execute a SELECT statement
8445	Create a MarkLogic DatasetGraph from the given host and password .
8446	Limit threads per process .
8447	Resample the geometry .
8448	Rotate the process by an annotation
8449	Sets the gravity .
8450	Strip profiles from the command line
8451	Set text font .
8452	Adds an image to the image .
8453	Adds an image to the command line .
8454	Parses a list of property descriptors .
8455	Prints the usage of the given object .
8456	Extract the time unit from a string .
8457	Parses the target and populates the target object .
8458	Execute the specified URL .
8459	Execute a slide .
8460	Interprets a slide file .
8461	Sorts a list by size
8462	Renders the given template text .
8463	Gets the rel for a slide .
8464	Checks if the given mouse event is in the window .
8465	Selects an element that overlaps the given element .
8466	Execute outbound operation .
8467	Execute outbound operation .
8468	Load a file .
8469	Get or create a temporary directory
8470	Creates a new log value map .
8471	Log a message at TRACE level .
8472	Log a message at trace level .
8473	Log a message at debug level .
8474	Log a message at debug level .
8475	Log a message at the INFO level .
8476	Log a message at the INFO level .
8477	Log an informational message .
8478	Log a message at the WARN level .
8479	Log a message at the WARN level .
8480	Log a message at the ERROR level .
8481	Log a message at the ERROR level .
8482	Add to context line and method line .
8483	Write steno wrapper for StenoEvent
8484	Write key value pairs .
8485	Serialize a throwable to a JSON stream .
8486	Creates a log value .
8487	Extract the caller data from the logging event .
8488	Encode value .
8489	Creates a database .
8490	Removes all mappings for the given position
8491	Parse the save attribute of a cell .
8492	Save data to object in context .
8493	refresh sheet row from context
8494	Parse the save attribute string .
8495	Gets the save attribute list from a row
8496	Get save attr from list
8497	Sets the saveObjects in hidden column
8498	Sets the save attributes for the given sheet .
8499	Set save attributes for a row
8500	Get the data context and attributes for a cell .
8501	Format a number .
8502	Put attributes for the shift range .
8503	Set the workbook
8504	Replies the wrapper for the workbook .
8505	Gets the formula evaluator .
8506	Recalculate max col counts .
8507	Load a WebSheet
8508	Load a WebSheet
8509	Load worksheet by tab name
8510	Do export .
8511	Do save .
8512	Do submit .
8513	Populate the component .
8514	Gets the current sheet configuration .
8515	Read the serialized workbook .
8516	Get the locale for the given component .
8517	Get the picture .
8518	Gets the cell helper .
8519	Get the picture helper .
8520	Gets validation handler .
8521	Gets the chart helper .
8522	Convert shared formulas to a list of formal formulas .
8523	Converts a Ptg into a list of formal parameters .
8524	This method converts a list of ptg for a watch list .
8525	Creates a single ptg for the given type .
8526	Returns a list of serialized rows
8527	Creates a list of rows from the current row mapping
8528	Fix a refRelative row
8529	Build a dynamic row for a reference ptg
8530	Creates a dynamic row for a rectangular area .
8531	Get the background color for a plot area
8532	Get the GeColor from a Spatial shape .
8533	Determines the automatic fill color for the specified theme .
8534	Get the XColor from the scheme sheet
8535	Get XColor from ctr color
8536	Gets the XColor with the specified index .
8537	Convert an XSSF color to a Color
8538	Extract a tuple from a XSSF color
8539	Get the background color from a cell
8540	Find a component name from a class
8541	Populates the input attributes .
8542	Match para m .
8543	Sets object property .
8544	Get object property value
8545	Sets the control attributes .
8546	Find validate attributes .
8547	Setup the cells for a cell .
8548	Sets the cells for the given cell .
8549	Sets the picture .
8550	Initialize the charts map .
8551	Get the title of the chart
8552	Sets the style of a chart
8553	Create a 3D chart
8554	Setup the bar style
8555	Initialize the map for the charts .
8556	Gets the id from parent .
8557	Initialize the anchor map
8558	Generate a single XSSF chart .
8559	Transforms the expression to a collection object .
8560	Get full name from a row
8561	Rebuild the upper level formula .
8562	Setup the upper level formula .
8563	Build the cell formula for a shift formula .
8564	Gets rows mapping by full name .
8565	Changes the index number in the shift map .
8566	Change the final length of the upper level .
8567	Change index number in hidden column
8568	Set full name in hidden column
8569	Get original row number in hidden column
8570	Sets the original row number in hidden row .
8571	Finds the parent rows mapping from a map .
8572	Returns a list of rows mapping from a reverse name .
8573	Find an item in a collection
8574	Builds the current configuration .
8575	Checks if the given row is a static row .
8576	Returns true if the given row is a static row reference .
8577	Replace an expression with a cell value
8578	Index merged region .
8579	Gets the skipped region names from a sheet .
8580	Add skip cell to the list .
8581	Build a sheet comment from a sheet
8582	Build a comment from a cell
8583	Build the sheet configuration .
8584	Gets the sheet configuration .
8585	Build the form command from a sheet configuration .
8586	Verify last cell .
8587	Build the sheet .
8588	Checks to see if the last row is valid .
8589	Build the command list from a sheet comment .
8590	Set the parent for a child command .
8591	Checks if the list contains all command in the list
8592	Assigns a command to a sheet configuration
8593	Copy the template for the Tie commands .
8594	Build the command list from a cell .
8595	Process a method line .
8596	Process a command line .
8597	Move comment to map .
8598	Create a config command .
8599	Build the attribute map from the command line .
8600	Gets the sheet configuration from the form command .
8601	Sets the footer of the sheet configuration .
8602	Sets the body of a sheet configuration .
8603	Sets header of a sheet configuration .
8604	Delete a row .
8605	Removes ranges from the map .
8606	Find full name list .
8607	Gets the single command from a variable name .
8608	Insert an empty object in the context .
8609	Delete object in context .
8610	Prepare collection data in context .
8611	Index a config range .
8612	Checks to see if a row is allowed
8613	Inserts a template .
8614	Evaluate the normal cell .
8615	Evaluate user formula .
8616	Checks if string is a user formula .
8617	Create a comment for a cell .
8618	Evaluate a boolean expression
8619	Remove all rows in a sheet .
8620	Removes a single row from a sheet .
8621	Removes the cached cell for the given row .
8622	Removes rows in the body .
8623	Loads a picture from the current row and returns it .
8624	Load the chart with the specified row and column index
8625	Assembles a new value .
8626	Get the value of a poi cell .
8627	Get the value of a poi cell without formatting .
8628	Get the string value of a poi cell and cell type
8629	Returns the cell string value with numeric type
8630	set cell value
8631	Sets the value of a cell .
8632	Sets the boolean value of a cell .
8633	Sets the value of a cell .
8634	Sets the numeric value of a cell .
8635	Copy rows from source sheet to dest sheet .
8636	Copy a single row .
8637	Copies a cell to another sheet .
8638	Copies the value of a cell to a new cell .
8639	Copies the style from source cell to another cell .
8640	Clones a comment .
8641	Creates the anchor for a comment .
8642	Create or insert a comment .
8643	Match comment settings .
8644	Get the VML drawing from a cell
8645	Get the CT shape from a cell
8646	Get the cell style for the source cell
8647	Convert a cell to a cell .
8648	Gets the row and column index from the component attributes .
8649	Gets the number of initial rows from configuration .
8650	Get a FacesRow from a body row
8651	Get the FacesCell from the body and column
8652	Get a POI cell from a sheet1
8653	Get Skey from a POI cell
8654	Get or add a tie cell in the map
8655	Gets the current data context name .
8656	Evaluate the expression using the given context .
8657	Evaluate the expression
8658	Custom deserialization .
8659	Remove a row from the source row
8660	Merges a map with a serialized Map .
8661	Recover all the rows in the table
8662	Get the type of the chart
8663	Convert a string to a stroke object
8664	Initialize the chart data
8665	Sets up the chart data .
8666	Initialize the anchor map for the sheet .
8667	Initializes the AnchorsMap for a sheet
8668	Gets the chart id from the chart .
8669	Extract the id from child node attributes .
8670	Build all objects .
8671	Save the data in the context .
8672	Recalculate the formula .
8673	Gets the POI cell with the specified row and column index .
8674	Gets the cell with the specified row from current page .
8675	Restore data context .
8676	Gets the last collection object .
8677	Determines if the name of the data context is needed .
8678	Restore data context .
8679	Shift a row ref .
8680	Sets the first row reference .
8681	Set the last row .
8682	Build cells for a row .
8683	Build a single cell .
8684	Deserialize an object from an input stream .
8685	Build the category list
8686	Build the series list
8687	Build the chart series in a list
8688	Get the color list from a list of values
8689	Gets the dpt from a list .
8690	Sets the command index map .
8691	Extracts the picture from a workbook .
8692	This method is used to get the picture from a sheet
8693	Index a picture in a map
8694	Generate the style for a picture .
8695	Generate the style for the chart .
8696	Determines the size of an anchor .
8697	Gets the pattern .
8698	Get the chart .
8699	Recover the data from a sheet .
8700	Get the row style
8701	Get the font s font style
8702	Get cell font color
8703	Returns the cell font decoration .
8704	Get the cell style for a poi cell
8705	Returns the column style for the given cell .
8706	Get the alignment for a poi cell
8707	Get vertical alignment from cell style
8708	Calculates total height of all rows
8709	Setup the cell style
8710	Get input type from cell
8711	Gets the paths for the given path .
8712	Gets a resource as a stream .
8713	Removes prefix from resource .
8714	Evaluate input type .
8715	Find the bean with the given name .
8716	Joins a short array into a String
8717	Rounds the given double to the specified places .
8718	Returns the tab type
8719	Returns the style of the tab .
8720	Gets the default date pattern .
8721	Get decimal separator by default locale
8722	Gets the thousand separator by default locale .
8723	Sets the tie command aliases list
8724	Build the form watch list .
8725	Build the watch list for a cell .
8726	Add a new row to the watch list
8727	Checks if string is a command string .
8728	Parse widget attributes .
8729	Get attribute key in map .
8730	Parse attributes from a cell .
8731	Find the position of a pair bracket .
8732	Parse command attributes .
8733	Parse input attributes .
8734	Parse control attributes .
8735	Splits the attribute data .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process select items .
8739	Gather special attributes .
8740	Parse comment to map .
8741	Find the position of the first non - cell name .
8742	Removes chars from a string .
8743	Returns the column name for the given number .
8744	Convert col to int
8745	Get cell by reference
8746	Convert height units to pixel
8747	Checks if a string is a valid date .
8748	Parse a date string .
8749	Checks if string is numeric .
8750	Checks if the given character is continue .
8751	Sets a property on an object .
8752	Compare two cells .
8753	Checks if the given range is inside the given range .
8754	Clear hidden columns from a sheet
8755	Delete hidden columns from row
8756	Deletes a cell from a row .
8757	Invoked when an event is received .
8758	Refresh the status of the grid .
8759	Validate with row and column in current page
8760	Validate the validation bean .
8761	Checks the error message from the object in the context .
8762	Validate all rules for a single cell .
8763	Do validation .
8764	Validate the target cell .
8765	Validate current page .
8766	Validate the current row in current tab .
8767	Validate the row .
8768	Refresh cells in current page .
8769	Refresh cached cells in the row .
8770	Sets the submit mode in view .
8771	Pre - validation .
8772	Clear the contents of this cell .
8773	Load header rows .
8774	Load the header row without the configuration tab .
8775	Fills the list of header cells .
8776	Returns the column style for the given cell .
8777	Returns the width style for the cell .
8778	Loads header row with configuration tab .
8779	Get the width of a cell .
8780	Clear the workbook .
8781	Initialize the tabs .
8782	Load the data .
8783	Refresh the data .
8784	Refresh data for a row
8785	refresh data for cell
8786	Find the tab index with the given name .
8787	Load a work sheet .
8788	Prepare a work sheet .
8789	Sets the page page .
8790	Saves the object to the view map
8791	Sets the origin and height of the row .
8792	Load the body rows
8793	Build the body row for the given row .
8794	Refresh a cell .
8795	Process refresh cell .
8796	Create dynamic columns .
8797	Add a repeat row .
8798	Refresh the body rows in the parent body .
8799	Sets the unsaved status flag .
8800	Returns true if the current state of the view is saved .
8801	Returns the common constructor for the given type .
8802	Write an input stream to an output stream .
8803	Write a long .
8804	Write a string to a writer .
8805	Sets the traffic stats tag .
8806	Adds a bitmap .
8807	Adds a file descriptor .
8808	Removes the parameter with the given name .
8809	Add a header .
8810	Clears the request description .
8811	Call playback .
8812	Call stop service .
8813	Binds the stream .
8814	Unbinds the radio button .
8815	Drop listener .
8816	Store the image to disk
8817	Transforms a stream to a string using the specified charset .
8818	Converts an input stream to a string .
8819	Sends data to the output stream .
8820	Returns the number of bytes available in the input stream .
8821	Closes the buffer .
8822	Reads a byte from the input stream .
8823	Reset the stream .
8824	Send start part boundary .
8825	Sends the content disposition header .
8826	Sends the content type header .
8827	Sends the transfer encoding header .
8828	Send end of header
8829	Send end .
8830	Sends multiple parts to the output stream .
8831	Returns the length of the multipart parts .
8832	Checks if the given URL is a redirect .
8833	Sends not modified response .
8834	Sets the date header .
8835	Sets the date and cache headers .
8836	Sets the content type header .
8837	Closes the channel .
8838	Sends the content disposition header .
8839	Sends data to the output stream .
8840	Install cache .
8841	Creates the working directory .
8842	Get a cache response .
8843	Creates an input stream for the entry body .
8844	Reset the bitmap .
8845	Get the singleton SSL context .
8846	Validate a keystore .
8847	Replace the current scale type .
8848	Stop listening to the location manager .
8849	Gets a PendingIntent for the request .
8850	Disconnect the given URL connection .
8851	Binds the context .
8852	Unbinds this object .
8853	Notifies about view changes .
8854	Handles the channel open .
8855	On accept data .
8856	Reset the response .
8857	Waits for a loader to complete .
8858	Set text or hidden
8859	Hide soft input from textView
8860	Show soft input .
8861	Toggles soft input from textView
8862	Calculate pixels width
8863	Called when an exception occurs .
8864	Removes the cache for the given url .
8865	Populates an image .
8866	Cancel image loading
8867	Create an image consumer
8868	Sets the image to the image
8869	Sets the loading image
8870	Start an image loader task .
8871	MemCache for the specified URL .
8872	Releases a buffer .
8873	On URL connection prepared .
8874	Adds a simple parameter to the request .
8875	Attempt to connect to the core .
8876	Returns the MD5 hash of a string .
8877	Returns the String identifying the given CUBLAS_GID
8878	Returns the String identifying the given CUblas .
8879	Checks the given result .
8880	Checks if the result is a CUBL exception .
8881	Adds a lexeme to the dictionary .
8882	Adds a new ending id .
8883	Returns the estimated estimate for the given wordform .
8884	Prints a long description of this token .
8885	Verify and set kamols attribute .
8886	Generate kamols markup for attribute values .
8887	Verify and set an attribute .
8888	Removes kamols markup from a string .
8889	Gets the metrics .
8890	Returns the query string .
8891	Process metric data .
8892	Returns a list of appInfo objects
8893	Get the connection configuration
8894	Performs a data request .
8895	Create a GC - code list .
8896	Create a GC04 code list set document .
8897	Create a gc4 column set document .
8898	Create a GC10 code list .
8899	Create a GC10 code list set document .
8900	Create a GC10 column set document .
8901	Get the ID of the passed column element .
8902	Get the value of the passed row .
8903	Get the column with the passed ID .
8904	Get all key IDs from the passed column set .
8905	Get the key with the passed ID
8906	Check if the passed column ID is a key .
8907	Create a new column
8908	Create a key from the passed column ID .
8909	Set the number of lines to skip .
8910	Add a column at the specified index .
8911	Create a new empty code list .
8912	Create a new GC04 code list document .
8913	Create a gc4 column set document .
8914	Create a new GC10 code list .
8915	Create a new GC10 code list document .
8916	Create a new GC10 column set document .
8917	Create a GC - code list .
8918	Create a GC4 code list set .
8919	Create a GC4 column set document .
8920	Create a GC10 code list .
8921	Get the GC10 code list set .
8922	Create a GC10 column set document .
8923	Sends logs to the server
8924	Sets the context .
8925	Get the current level .
8926	Wait for capture .
8927	Sets the maximum number of bytes .
8928	Prepend metadata .
8929	Append stack metadata
8930	Creates a json object for the given level and message .
8931	Log location .
8932	Sets the user identity .
8933	Get a byte array from a file
8934	Start location updates .
8935	Size the specified region .
8936	Size of a region .
8937	Size of a region .
8938	Reads a snapshot record .
8939	Dumps the statistics to a PrintWriter .
8940	Returns the time values at the specified index .
8941	Convert a file to a chart .
8942	Get a pool for the given server name
8943	Returns the pool for the specified locator .
8944	Checks if a region is already in the server .
8945	Get a member by its name
8946	Retrieves the host names of the member .
8947	Looks up a network host .
8948	Returns true if the given data is an error and false otherwise .
8949	Executes the given execution and returns the result .
8950	Flatten the input collection into a collection .
8951	Executes a query on the specified region .
8952	Creates a cache listener that will be executed after the specified consumer .
8953	Creates a cache listener for the delete event .
8954	Handle exception .
8955	Gets on region filters .
8956	Execute the given function
8957	Returns a set of host names
8958	Execute the cache
8959	Get the name of the application .
8960	Initialize the security client .
8961	Gets a region by name .
8962	Gets a region by name .
8963	Constructs a comparison between two checksums .
8964	Checks to see if the value is inserted into the nextIdx .
8965	Close the input stream .
8966	Writes the gfs files to a directory .
8967	Writes a stats file to a CSV file .
8968	Attempt to reconnect the JMX server .
8969	Stop members on a host .
8970	Shutdown a member .
8971	shutdown all members
8972	Shutdown a member .
8973	Store pagination map .
8974	Reads results by page .
8975	Imports a region .
8976	Checks that the remote locators and locators are valid .
8977	Execute the check sum map
8978	Builds the check sum map .
8979	Get the value of the given column
8980	Returns true if the given type is a type of the given type .
8981	Serialize an object to a byte array .
8982	Deserialize an object from a byte array .
8983	Create an instance of the given class .
8984	Check for table id
8985	Check for fields
8986	Checks if the given element is a super type .
8987	Returns the schema of the table
8988	Appends the Java code to the given writer .
8989	Generate getId method .
8990	Converts the query to an Observable
8991	Checks that the given column name is equal to the given column name .
8992	Returns the value of the given string or the default if not null .
8993	Capitalizes the given string .
8994	Returns true if the given type is a type of the given type .
8995	Creates a builder for descending query .
8996	Read the current temperature
8997	Returns the string representation of the given type .
8998	Prints a message .
8999	print error message
9000	Gets the icon fonts .
9001	Returns the icon codes .
9002	Creates the layout for the SLD editor .
9003	Get the background decoration
9004	Raises the given double to the specified power .
9005	Set the array of values .
9006	Returns the power of the specified power using the specified scale and scale .
9007	Calculate the root of the given integer .
9008	Multiplies x by x .
9009	Return a BigDecimal that is less than the given scale .
9010	Calculate a new BigDecimal .
9011	Calculate the arctan of a BigDecimal .
9012	Approximates a BigDecimal to a BigDecimal
9013	Calculate the square of a BigDecimal
9014	Prints a pi string .
9015	Returns the timestamp for the given time .
9016	Sets the limits .
9017	Inserts the specified value into this buffer
9018	Prints out the page .
9019	Adds two complex numbers .
9020	Subtract a complex number from another
9021	Multiplies two complex values
9022	Divides a complex number by another
9023	Set the values from a matrix
9024	Get the row at the specified index .
9025	Returns the column at the specified index .
9026	Sets this matrix to the specified values .
9027	Returns the transpose of this matrix .
9028	Add a matrix to this matrix .
9029	Subtract this matrix from another matrix .
9030	Multiply this matrix by another .
9031	Multiply this matrix by another .
9032	Prints the values of this matrix to the provided output stream .
9033	Sets the image resource .
9034	Validate coefficients .
9035	Compute the next position
9036	Clears this object .
9037	Converts a SpldLayerDescriptor into an XML document .
9038	Convert a SLD layer descriptor to a Sld .
9039	Validate the layer descriptor .
9040	Validate the given Sld .
9041	Compute area of a rectangle
9042	Set this matrix from another matrix .
9043	Sets the elements of this matrix .
9044	Returns the inverse matrix .
9045	Returns the determinant of this matrix .
9046	Returns the norm of this matrix
9047	Solve A or B
9048	Prints the matrix to the output stream
9049	Performs forward elimination .
9050	Performs forward substitution .
9051	Performs back substitution .
9052	Implements the improvement .
9053	Convert a square matrix to a value
9054	Returns the next NONN neuron .
9055	Do iteration procedure .
9056	Compute the next position
9057	Check position .
9058	Compute the next position
9059	Check an interval .
9060	Adds a new value to the end of the list .
9061	Multiply two numbers .
9062	Raises the power of the given base .
9063	Do iteration procedure .
9064	Gets the SldManager .
9065	Convert a long value to a char array .
9066	Decompose the bits .
9067	Prints the page to the passed output stream .
9068	Validate that the bias exponent is valid .
9069	Validate the exponent value .
9070	Validate a double biased exponent .
9071	Validate the exponent value .
9072	Create the SldGwtServiceAsync
9073	Returns the next random point .
9074	Generate the next random number from the curve
9075	Compute the next ratio
9076	Generate the prime sieve .
9077	Returns the factors of the given pn .
9078	Do iteration procedure .
9079	Compute the next position
9080	Check position .
9081	Set the JavaFX application
9082	Sets the configuration from the given XML file .
9083	Set the default configuration
9084	Initialize the FXML Loader
9085	Set the lat lng
9086	Extract host and port from service .
9087	Returns an attribute definition that matches the given UUID .
9088	Evaluate an attribute filter .
9089	Sanitizes a string .
9090	Sets the address
9091	Sets the components to be used for the search .
9092	Query names .
9093	Query for instances by name .
9094	Gets all collaboration objects .
9095	Get the meta data for decimalAs .
9096	Changes the password for a logged in user .
9097	Get all users
9098	Get the gravatar for an email
9099	Get the gravatar for a user
9100	Populate from Elasticsearch .
9101	Returns the Elasticsearch field type .
9102	Create a flow step
9103	Update a flow step .
9104	Get a FlowStep by id
9105	Get FlowStep by step
9106	Get all steps by flow
9107	Delete a flow step
9108	Delete a flow step
9109	Populate the table records .
9110	Close a connection .
9111	This method is called when a message is received from the client .
9112	Closes the connection .
9113	Gets the echo messages from the return value .
9114	Get all personal inventory items
9115	Create a new table record .
9116	Delete a form container
9117	Gets the form flow item history .
9118	Gets the form and field history .
9119	Get the most recent form and field historical data
9120	Locks the form container .
9121	Unlock the container .
9122	Unlock the form container
9123	Maps the form container to a Form object .
9124	Convert a string to a list of roles .
9125	Create a form definition
9126	Update the form definition
9127	Get the form definition by id
9128	Get form definition by name
9129	Gets all records for the logged in user .
9130	Delete a form definition
9131	Gets the storage key from the form .
9132	Initializes the memcached client .
9133	Shutdown the memcached client .
9134	Converts a string to a long value .
9135	Convert document to PDF
9136	Gets the value of the form from cache .
9137	Create flow step entry rule .
9138	Create flow step exit rule .
9139	Create flow step rule view .
9140	Update the flow step rule .
9141	Update the flow step rule .
9142	Update flow rule .
9143	Moves the flow entry rule up .
9144	Moves the flow entry rule down .
9145	Delete a flow step rule .
9146	Delete flow step rule .
9147	Delete the flow step rule
9148	Initialize the session .
9149	Get all user queries
9150	Get all roles
9151	Get the service ticket as uppercase .
9152	Creates a text field from a form field .
9153	Creates a text field from a form field
9154	Create decimal spinner .
9155	Create a decimal slider .
9156	Create a table .
9157	Updates a text field with a mask .
9158	Updates the text field with the given value
9159	Update decimal spinner .
9160	Update decimal slider .
9161	Update the form field .
9162	Get a field by its name
9163	Gets a FormFieldListing by formName and logged in user .
9164	Get a FormFieldListing by form type id and id .
9165	Delete a field .
9166	Force delete field .
9167	Returns the meta data for a table field .
9168	Update a field value .
9169	Get or create an existing index .
9170	Create a flow
9171	Update a flow
9172	Get flow by id
9173	Get flow by name
9174	Delete a flow
9175	Delete a flow
9176	Updates the global field value .
9177	Get all global field values
9178	Gets the form definition id and title .
9179	Decrypt init packet .
9180	Closes the connection and cleans it .
9181	Initialize a new request
9182	Returns the exception message message .
9183	Create admin user
9184	Get an access token .
9185	Get user profile information
9186	Execute json response
9187	Execute form .
9188	Gets the json response handler .
9189	Returns true if the connection is valid .
9190	Gets the closeable http client .
9191	Determines the path to a file which is stored in the system property .
9192	Closes the connection .
9193	Get the Fluid items for a given job view
9194	Send a form to Flow
9195	On close .
9196	On message handler .
9197	Sends a message to the client .
9198	Sends a message .
9199	Closes the session .
9200	Execute a native SQL query
9201	Request a license request
9202	Apply a license
9203	Create a text plain text field .
9204	Creates a simple paragraph text for the given field .
9205	Creates a Field for Paragraph text .
9206	Creates a field with multiple values .
9207	Creates a date time date .
9208	Updates a text field .
9209	Update a field s paragraph text
9210	Updates a field date and time date .
9211	Update decimal value
9212	Update field value .
9213	Creates the value for the route field value .
9214	Get configuration by key
9215	Get all configurations
9216	Create an attachment
9217	Get an attachment by id
9218	Delete an attachment
9219	Delete an attachment
9220	Parse the jar file .
9221	Set the class loader
9222	Rule 2 .
9223	Rule 3 .
9224	Rule 3 .
9225	Returns the schema node for the given file path .
9226	Rule 7 .
9227	Rule 3 .
9228	Convert the given value to the given type .
9229	Creates a new cli .
9230	Create a new cli using the instance .
9231	Parse the command line arguments .
9232	Parse the command line arguments using an instance .
9233	Returns a builder for the URL builder .
9234	Remove a footer view
9235	Returns the value at the specified point
9236	Returns the 3D gradient of the image
9237	Calculate the 32 - bit 32 - bit value
9238	Calculate the value of a 3D value
9239	Calculate a cubic interpolation between two numbers .
9240	Calculate the s curve of a 2 - curve .
9241	Sets the bounds .
9242	Process the given event .
9243	Process the event .
9244	Retrieves the account id for the given event .
9245	Apply rules to rule entity .
9246	Get the event serializer
9247	Creates a file with the given name .
9248	Creates a directory .
9249	Restore all properties from the map .
9250	Creates the implementation of the delegate .
9251	Adds an object to the collection .
9252	Sets a property .
9253	Get array property .
9254	Get the next state from the current state
9255	Removes the objects from the GC .
9256	Gets the value for the given type .
9257	Gets the parameterized type .
9258	Gets the type variable .
9259	Print the stack trace .
9260	Print the stack trace .
9261	Replace an object .
9262	Starts the server .
9263	Sets the task .
9264	Indicates whether the task is accepted .
9265	Determines whether the task is rejected .
9266	Is the task started .
9267	Called when the task has completed .
9268	Stop the task .
9269	Gets the job executor .
9270	Put a job in the queue
9271	Convert a name to a BlockingMode
9272	Deserialize this object .
9273	Sets up the SAX parser .
9274	Adds a reader to the catalog .
9275	Copies the readers from another catalog to another .
9276	Creates a new catalog .
9277	Load the system catalog files .
9278	Parse a catalog file .
9279	Parse pending catalog files .
9280	Parse a catalog file .
9281	Reports an unknown entry .
9282	Parses all catalog files .
9283	Resolve a document name and system identifier .
9284	Resolves the document .
9285	Resolves a system identifier .
9286	Resolves a local URI .
9287	Resolves all subordinate catalogs .
9288	Converts a system identifier to an absolute URL .
9289	Normalize a URI .
9290	Encodes a byte into a hexadecimal string .
9291	Add a delegate entry .
9292	Creates a new SoftValueRef .
9293	Fired on throwable
9294	Adds an exception to the stack .
9295	Creates the implementation of the delegate .
9296	Compare this task to another .
9297	Gets the value of the option .
9298	Returns the object at the specified index .
9299	Sets the object at the specified index .
9300	Removes the object from the queue .
9301	Add entry type .
9302	Returns the type of an entry .
9303	Returns the number of arguments for the given type .
9304	Gets the entry argument .
9305	Set the context class loader
9306	Swap two elements
9307	Removes the node at the specified index .
9308	Clean up a timeout extension .
9309	Load a class .
9310	Preload protocol .
9311	Creates a URL stream handler .
9312	Check the handler packages .
9313	Gets the value of the property .
9314	Creates the set implementation .
9315	Makes a synchronized long counter .
9316	Makes a counter around a long counter .
9317	Checks if the current namespace is in an extension namespace .
9318	Checks that a notification has been received .
9319	Replace the given name with the given name .
9320	Returns an object instance for the specified name .
9321	Substitute a string .
9322	Split a string by delimiter .
9323	Joins a byte array into a string .
9324	Encode the object to a StringBuilder
9325	Gets the value of the property .
9326	Creates the entry map .
9327	Returns the value associated with the specified key .
9328	Returns the value associated with the specified key .
9329	Removes the specified entry from the map .
9330	Flush the cache .
9331	Returns all valid keys .
9332	Sets the resolution .
9333	Returns the entry for the specified key .
9334	Gets the children with the given tag name .
9335	Gets the unique child with the given name .
9336	Get an optional child element by its name .
9337	Get the content of the element
9338	Gets the unique child content of the given element .
9339	Retrieves the value of an optional child .
9340	Sets the maximum queue size .
9341	Sets the blocking mode .
9342	Set blocking mode .
9343	Execute the specified work .
9344	Resolves a system .
9345	Resolve the public URL of the catalog .
9346	Resolve an external system .
9347	Resolve a public key
9348	Execute a query resolver
9349	Append a vector to another vector .
9350	Resolves all system paths in the given system .
9351	Resolve a system id .
9352	Retrieves all known resolution for a given system ID .
9353	Resolves all local systems with the given name .
9354	Resolve all subordinate catalogs .
9355	Read a catalog file .
9356	Read a catalog from an input stream .
9357	Connect to the server .
9358	Gets the output stream .
9359	Atomically sets the next value to the next node .
9360	Deletes a node .
9361	Returns the value of this header .
9362	Creates a snapshot entry .
9363	Atomically sets the right value .
9364	Creates a new logger .
9365	Generate a list of objects .
9366	Gets the class name .
9367	Returns the string representation of this object .
9368	Returns the names of the system properties .
9369	Returns the property group for the given basename .
9370	Returns a compatible constructor for the given type .
9371	Copies the object to an object .
9372	Dereference object .
9373	Initialize the context .
9374	Update the jndi cache .
9375	Returns a set of keys .
9376	Returns the set of entries .
9377	Removes a bound property listener .
9378	Fires a property added event .
9379	Fires a property removed event .
9380	Fires a property changed event .
9381	Fire a property changed event .
9382	Creates a property name .
9383	Load properties from a property reader .
9384	Loads properties from the given class name .
9385	Returns the property group for the given basename and index .
9386	Returns true if the entity was resolved .
9387	Resolve a system ID .
9388	Resolves the system ID as a URL .
9389	Resolves the classpath name for the given system id .
9390	Sets the value as text .
9391	Normalize a public id .
9392	Encodes the given public ID .
9393	Decode an ID from an identifier .
9394	Replace a string in a string
9395	Starts the timer .
9396	Stop the timer .
9397	Makes a StopWatch .
9398	Compares two hash codes .
9399	Generates a hashcode from a byte array .
9400	Generates a hashcode for an array of objects .
9401	Initialize the Map .
9402	Set field value .
9403	Returns the next token .
9404	Initialize the default formats .
9405	Adds a vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth - first search on the graph .
9409	Performs a depth - first traversal .
9410	Finds a vertex by its data .
9411	Finds cycles .
9412	Normalize a string .
9413	Parse the given XML string .
9414	Parse an XML document from an XML stream .
9415	Parse the given input source .
9416	Create an element from the current thread .
9417	Resolve qualified name .
9418	Copies attributes from srcElement to destElement .
9419	Checks if a node has a child element .
9420	Get child elements from a node
9421	Get the text content of a node
9422	Get the child elements of the given node .
9423	Returns the parent element of the given node .
9424	Add a resource to the list
9425	Read a catalog from an input stream .
9426	Read a catalog file .
9427	Get the host address .
9428	Resolves an entity from the URL .
9429	Sets the value of the system property .
9430	Displays a class .
9431	Describe a class .
9432	Strip package name .
9433	Get package name .
9434	Loads a class .
9435	Returns the primitive wrapper for the given class .
9436	Get all interfaces from the given class
9437	Returns an array of all the interfaces of the given class .
9438	Is the given class a primitive wrapper?
9439	Instantiates an object from an expected class .
9440	Gets the getter for an attribute .
9441	Gets attribute setter .
9442	Convert a name to a java class .
9443	Retrieves a system property .
9444	Returns the filenames for the given property name .
9445	Removes the specified weak object from the set .
9446	Returns an iterator over this set .
9447	Creates a new URL lister for the given protocol .
9448	Returns the set of entries in this map .
9449	Add a bound property listener .
9450	Removes a bound property listener .
9451	Returns true if the value is null or empty .
9452	Finds a property editor for the given type name .
9453	Registers an editor for the given type name .
9454	Convert a string value to an object .
9455	Get the context class loader
9456	Returns an ApplicationDeadlockException from the Throwable .
9457	Schedule the given time to the given target .
9458	Do the work .
9459	Create a new context with the given name .
9460	Lookup an object by its name .
9461	Checks that the given object is an instance of the given class .
9462	Append class information .
9463	Get a transition by its name
9464	Read properties .
9465	Returns the verbosity .
9466	Query to see if this is a relative catalog .
9467	Get the catalog files
9468	Get the catalog files .
9469	Query whether or not the server is preferred .
9470	Queries the default static catalog
9471	Resolves the given entity from the system .
9472	Resolve an href .
9473	Makes an absolute path to an absolute path .
9474	Resolves an object stream class .
9475	Invokes the setter method .
9476	Returns the local name of the element .
9477	Returns the namespace URI of the given node .
9478	Returns the namespace URI for the given element .
9479	Creates a list from an enumeration .
9480	Returns an input stream for the given filename .
9481	Load properties from a file .
9482	Read properties .
9483	Adds an edge to this node .
9484	Adds an outgoing edge to this vertex .
9485	Adds an incoming edge to this vertex .
9486	Checks if an edge is present in this graph .
9487	Removes an edge from the graph .
9488	Finds the edge with the given destination .
9489	Finds an edge from the graph .
9490	Returns the cost of this vertex .
9491	Writes a jar file to the output stream .
9492	Returns true if there is no more elements .
9493	Fire an event
9494	Install the JVM type provider .
9495	Clean the contents of a folder recursively .
9496	Dispatches an action on the FX thread
9497	Gets the action stream of the given action type .
9498	Creates the fxml path for the given view type .
9499	Converts a collection of rights to many records .
9500	Creates a stream of many rights to one .
9501	Converts a collection of rights to one - to - one .
9502	Converts a collection of rights to one - to - one stream .
9503	Returns true if all robots are allowed .
9504	Checks to see if the given command is generated
9505	Runs the analysis .
9506	Main entry point .
9507	Returns the sum degree .
9508	Convert superclass arguments to superclass arguments .
9509	Initialize the JDBC resource loader
9510	Checks that the datasource is valid .
9511	Returns an iterable of the specified type .
9512	Returns an array of the given class .
9513	Returns a list of the specified type .
9514	Creates a collection of the specified type .
9515	Returns a list of the given type .
9516	Create an instance with the left type .
9517	Create an instance with the right type .
9518	Throws an exception if the given type is not a parameter .
9519	Validates that the given type is an instance of the given type .
9520	Creates a Try with the given type .
9521	Connect Jdbc with the given url and username and password .
9522	Execute the given SQL statement
9523	Query in with SQL
9524	Returns the boolean array as a boolean array .
9525	Query by example
9526	On upgrade .
9527	Back the table
9528	Restore table .
9529	Sets the empty text .
9530	Write the table to a CSV file
9531	Unescapes a string .
9532	Returns a list of values from a CSV row .
9533	Converts a comma delimited string into a Map .
9534	Convert map to CSV
9535	Joins a list of strings .
9536	Joins a list of strings .
9537	Read a database model from the index file .
9538	Write to index file
9539	Inspect the id field .
9540	Gets the base DAO model .
9541	Gets the bind type .
9542	Import from csv file .
9543	Backup all tables .
9544	Restore all tables from CSV file .
9545	Write the index file .
9546	Creates the query .
9547	Creates a typed query .
9548	Render the query .
9549	Delete a record from the database
9550	Saves an object in the index .
9551	Update an object .
9552	Add a NOT IN clause that is not in the array
9553	Add a sub - query to the query .
9554	Returns the next active stack .
9555	Returns an empty intention stack .
9556	Adds a plan to the tree .
9557	Select a plan based on the given policy
9558	Select a plan at random .
9559	Sets the variables for a given statement .
9560	Returns the result at the given index .
9561	Returns the list of parents .
9562	Returns the children .
9563	Grows the byte array by the given amount .
9564	Creates a new logger .
9565	Sets the next element .
9566	Sets the goals
9567	Pause for user input .
9568	Initialize the intention selection pools
9569	Initialize intention selection threads
9570	Starts the intention selection threads .
9571	Shuts down the intention selection threads .
9572	Register an extension
9573	Reset the catalog .
9574	Load an agent .
9575	Process all plans for a given goal .
9576	Create agents in the catalog .
9577	Loads a class from the given class and returns it .
9578	Load an extension .
9579	Checks if two objects are equal
9580	Returns the usage .
9581	Parse the command line arguments .
9582	Parse an argument with an option value .
9583	Evaluate a query .
9584	Returns the object at the specified index .
9585	Find an object by its name
9586	Push an object onto the stack .
9587	Returns the object at the specified index .
9588	Push an object onto the stack .
9589	Removes the first element from the stack .
9590	Get the type of the object
9591	Returns true if the given query matches the given query .
9592	Runs the search .
9593	Converts a String to a byte array .
9594	Posts a goal to the stack .
9595	Sends a message to the agent
9596	Sends a message to the agent
9597	Gets the goals .
9598	Creates a new belief set .
9599	Adds a new belief to this node .
9600	Execute a query .
9601	Suspend the agent .
9602	Gets a field by its name .
9603	Registers the neighborhoods with the given number of individuals .
9604	Generate random name
9605	Starts the timer .
9606	Checks if the execution stack is valid .
9607	Removes all agents from the set .
9608	Manage a goal .
9609	Shutdown the pool .
9610	Marks the given agent as idle .
9611	Moves the input image from the input stream .
9612	Initialize the config
9613	Blocks until the thread is idle .
9614	Stops the server .
9615	Returns true if all pools are idle .
9616	Returns the pool id for the given agent id .
9617	Select the next expression .
9618	Sets the expression .
9619	Creates a JPA join expression
9620	Joins a join recursively .
9621	Find or create a join for the given property .
9622	Checks to see if the source is reached .
9623	Gets the upload stream .
9624	Handle a REST request .
9625	Checks if a parameter with the given name and value is equal to the given value .
9626	Returns the value of the named parameter .
9627	Parse the query parameters into a Map .
9628	Configure transaction manager .
9629	Get target file
9630	Writes the given artifact .
9631	Sets the instance field on the managed class .
9632	Gets the declared constructor .
9633	Returns a string representation of the descriptor .
9634	Returns the method for the given method .
9635	Returns the type of the field .
9636	Get the dependency value for the given type
9637	Saves the object to disk .
9638	Sets the default link .
9639	Sets the default link template .
9640	Handle links .
9641	Handle header links .
9642	Process links .
9643	Parse a link object .
9644	Get or add or add or create a new map .
9645	Handle capabilities .
9646	Checks if the given method is allowed .
9647	Registers instance processor .
9648	Register the instance factory .
9649	Register a new instance processor .
9650	Register a class processor
9651	Returns an instance of the specified interface .
9652	Adds an argument .
9653	Creates a list of target files .
9654	Returns the XML representation of the message .
9655	Initialize the template .
9656	Checks if the given file has a reference to the given template .
9657	Create a parameterized template model from a reader .
9658	Create a parameterized template model from a file .
9659	Sets the request path .
9660	Gets an observable starting at the specified index .
9661	Converts a string into an instance scope .
9662	Sets a field .
9663	Adds a capture appender to the given appender .
9664	Removes the given appender from the given appender .
9665	Clear the contents of an appender by appender name .
9666	Read arguments from the request .
9667	Parse the model file .
9668	Resolve all proxies .
9669	Returns all the files in the given directory .
9670	Parse the contents of a directory .
9671	Checks if the model is fully resolved .
9672	Find all EObjects in the given ResourceSet .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Read the next record .
9677	Sets the designated parameter to the SQL statement .
9678	Sets the designated parameter to the designated parameter .
9679	Execute a long update statement and return the number of results .
9680	Convert a string to an instance type
9681	Merges the given file with the given filename into the target file .
9682	Gets the model directory .
9683	Gets the template directory .
9684	Writes the value to the response .
9685	Starts the UI .
9686	Configures the window .
9687	Prints a view .
9688	Writes the contents of an input stream to the output stream .
9689	Invokes a method on the interface
9690	Attaches the response to the response .
9691	Detaches the context .
9692	Gets the cookies .
9693	Print out the request context
9694	Gets the invocation meters .
9695	Sets the event stream configuration .
9696	Sets the remote host .
9697	Get parameter from event stream .
9698	Removes a prefix from a path .
9699	Returns the common directory between two directories .
9700	Convert absolute path to relative path
9701	Convert a relative path to an absolute path .
9702	Returns the depth of the directory
9703	Dumps an error .
9704	Sends json object .
9705	Adds a parameterized template model .
9706	Adds a list of param templates .
9707	Initialize the template .
9708	Find parameterized template model .
9709	Enable or disable the save button .
9710	Deletes the user .
9711	Deletes the file .
9712	Creates a new instance of the managed class .
9713	Gets the files .
9714	Returns the summary of all files
9715	Generate the summary row .
9716	Get sub summary row
9717	Creates an instance of a managed class .
9718	Gets the setup class .
9719	Replies the model directories .
9720	Gets model resources .
9721	Sets the candidates .
9722	Load xml .
9723	Displays an error .
9724	Checks to see if the given parameter is an object .
9725	Parse the request and return an array of objects .
9726	Reads a JSON document from an input stream .
9727	Extract the parameter from the fit value .
9728	Gets the value of the hints property .
9729	Checks if the given HTTP request is an XHR request .
9730	Checks to see if the request is an Android browser .
9731	Handle an entity event .
9732	Gets all properties with the given annotation .
9733	Gets an annotation on a property .
9734	Formats a message with the SEVERE .
9735	Lookup a particular domain .
9736	Checks to see if there is a parser for the given node .
9737	Get the managed class .
9738	Gets the managed method .
9739	Process an exception .
9740	Checks to see if there is a cell in the cell .
9741	Read a boolean value as a boolean .
9742	Returns true if the statement is a wrapper for the given class .
9743	Serialize the response to an output stream .
9744	Gets the value of a cookie .
9745	Add a cookie .
9746	Removes a cookie by its name
9747	Returns an iterator over all cookies .
9748	Gets the target file list producer .
9749	Adds a field .
9750	Compile the class .
9751	Verifies that the token has the given token .
9752	Gets the value of the file .
9753	Ensure trailing slash .
9754	Logs the given username and password .
9755	Gets the http servlet request .
9756	Invoke the method .
9757	Executes a transaction .
9758	Execute an immutable method .
9759	Gets the list of files .
9760	Gets the last file .
9761	Extracts the concrete configuration for the given parser .
9762	Checks if the request path starts with the given path component .
9763	Gets the factories for the given model type .
9764	Gets the session .
9765	Serialize the file to the output stream .
9766	Reads the meta data .
9767	Handle a request .
9768	Close the statement .
9769	PreDestroy the event stream .
9770	Handle allowed methods .
9771	Upload the blob .
9772	Deletes the data from the server .
9773	Extract the column parameters from a fit row
9774	Returns the argument names .
9775	Schedule a periodic task .
9776	Schedule a timeout task .
9777	Configure repository .
9778	Returns the next file .
9779	Configures the application .
9780	Print banner .
9781	Print the stopped banner .
9782	Create a chameleon .
9783	Register a shutdown hook .
9784	Triggers the trigger .
9785	Trigger file .
9786	Insert and replace a new row .
9787	Returns the counts of all files .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uri - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswer - gets an indexed value -
9815	indexed setter for candidateAnswer - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triples - gets
9838	setter for triples - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRel - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjectUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviations - gets
9859	setter for abbreviations - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for conceptss - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Find the next clear bit .
9878	Sets the bit at the given index .
9879	Frees the mapped buffer .
9880	Creates a cache value .
9881	Rehash the array .
9882	Returns a HELM 2 HELM 2 HELM2 HELM2 HELM2 HELM 2 .
9883	Check brackets .
9884	Add details for the given string .
9885	Generate a HELM 2 string representation
9886	Add an element to the Notation
9887	method to convert HELM1 to HELM2
9888	Checks if the given polymer ID is valid
9889	Checks if the given polymer id is valid
9890	Checks the connection s details .
9891	Checks if the given string is a valid group ID .
9892	Checks if a string is a repeating pattern .
9893	method to check for peptide or RNA
9894	Serialize the notation container
9895	Gets the simple polymer with the given ID
9896	Returns the current groupingNotation
9897	Generate a HELM 2 HELM 2 . 2 HELM 2
9898	method to convert the HELM2 to HELM2 format
9899	Returns a HELM2 HELM2 string representation of the connection .
9900	Returns a HELM2 representation of the grouping .
9901	Convert an annotation section to a HELM2 document .
9902	method to get all polymer and group ids
9903	Returns the polymerNotation with the given id
9904	method to set the polymer elements
9905	Convert a string to a string .
9906	Sets the annotation .
9907	set the value count
9908	method to get the monomerNotation for the given string
9909	method to get the MonomerNotationGroupElement
9910	method to get the entity from a string
9911	Gets the value .
9912	method to parse the HELM2 string
9913	Sets the nucleotide contents for the nucleotide string .
9914	Define ambiguity
9915	Get the statistics for this worker thread .
9916	Creates an ADI graph .
9917	Creates an ADI graph .
9918	Initialize the paths internal structures .
9919	Sort nodes by reachability .
9920	Subscribe to a pattern
9921	Count the subscribe_count pattern .
9922	Unsubscribe a pattern .
9923	Execute a return operation .
9924	Send a return_sync message .
9925	Poll the input stream .
9926	Shutdown this stream .
9927	Throws an exception if the exception is not local .
9928	Unlock the run state
9929	Creates a worker .
9930	Try to add a worker .
9931	Register a worker .
9932	De - registers a worker .
9933	Signal work to work
9934	Run a worker .
9935	Waits for a work to complete .
9936	Returns the number ofSurplus queued tasks .
9937	Returns the common submitter queue .
9938	Performs an external help complete .
9939	Submit a task to the executor .
9940	Creates a new ForkJoinPool .
9941	Waits until the specified timeout expires .
9942	Build a string from a statement
9943	Get statistics about all local queues .
9944	Creates a new List from the given elements .
9945	Returns the reverse list .
9946	Iterates over all elements of the iterable returning true if the predicate evaluates to true .
9947	Applies a function to the left value of the given Iterable .
9948	Folds the right value of the given List by applying the given function to the given startValue .
9949	Push a task to the stack .
9950	Converts nullable into an AOption object .
9951	Creates a map from keys and values .
9952	Creates an empty list map .
9953	Creates a new AListMap from the given elements .
9954	Creates an AListMap from the given keys and values .
9955	Returns a set of keys .
9956	Normalize a resource name .
9957	Marshals a bound value .
9958	Returns a copy of this string .
9959	Creates a binary search for the given list .
9960	Creates a binary search for the given list .
9961	Sends an email .
9962	Sends a message .
9963	Binds a route binding .
9964	Binds a filter binding .
9965	Returns true if the given role is present .
9966	Gets the int value .
9967	Removes duplicate strings from an array .
9968	Like string .
9969	Do the run .
9970	Login a user .
9971	Gets the login with the database .
9972	Gets the login user .
9973	Checks if the given salt is a valid password .
9974	Saves the member in the cookie .
9975	Returns the key for the login key .
9976	Returns the user for the given cookie .
9977	Forward to the web context .
9978	Appends the separator to the given path .
9979	Get parameter from request .
9980	Log a message at the current level .
9981	Get the caller information for the current thread .
9982	Converts a char array to a byte array .
9983	Converts a CharSequence to a byte array .
9984	Converts a byte array to a simple char array .
9985	Converts a CharSequence to an ASCII byte array .
9986	Lookup a locale data .
9987	Execute the next job in seconds
9988	Crop the image at the specified coordinates .
9989	Executes the given invocation with the specified delay .
9990	Invokes a directInvocation in a thread .
9991	Gets the REST operations .
9992	Renders an error message
9993	Render forbidden message .
9994	Generate the template for the given view .
9995	Parse path .
9996	Renders the data tables
9997	Render empty data tables
9998	Sets the items .
9999	Sends the response to the page .
10000	Returns the list of bindings for the given injector .
10001	Get the current method name
10002	Compact memory .
10003	Propagate the given MetricsCollection to the current thread .
10004	Encode a String to a String
10005	Get the file s charset
10006	Copies the input stream to the output stream .
10007	Copies bytes from an input stream to the output stream .
10008	Copies the content of the given input stream to the given output stream using the default encoding encoding .
10009	Copies the contents of the specified Reader into a Writer .
10010	Copies the specified character count from the specified reader to the output writer .
10011	Copies the content of the reader to the output stream using the default encoding .
10012	Copies the content from the reader to the output stream .
10013	Compare two input streams .
10014	Compare two readers .
10015	Execute the pipeline
10016	Returns the SQL statement for the groupName and sqlId .
10017	Unmarshals a string to a given class .
10018	Unzip a file to a destination directory
10019	Create an instance of a PermissionDialogFragment .
10020	Resume the dialog .
10021	Add core value type .
10022	Matches a value against a regular expression .
10023	Checks if the given string is a mobile device .
10024	Checks if a string is a phone number .
10025	Checks if the value is a birth day .
10026	Checks if the given string is a valid URL .
10027	Checks if the value is a date time .
10028	Apply filter .
10029	Encodes the given string using UTF - 8 encoding .
10030	Decode a string to a byte array .
10031	Decode a hex string to a byte array .
10032	Read UTF8 properties from an input stream .
10033	Reads the content of the stream as a String .
10034	Reads the content of the file as a String .
10035	Write a byte array to a file
10036	Copies the given directory to the given target file .
10037	Serialize a document to a String .
10038	Get document from xml file
10039	Get document from xml
10040	Get document from stream
10041	Validates an XML signature .
10042	Sign the document using the public key and private key .
10043	Checks if the given class is cacheable .
10044	Returns true if the given class is a primitive array .
10045	Returns true if the given class is a primitive wrapper array .
10046	Resolve the given class if necessary .
10047	Checks to see if the right side type is assignable from the right side .
10048	Returns true if the given value is assignable to the given type .
10049	Returns all interfaces implemented by the given instance .
10050	Returns all interfaces implemented by the given instance .
10051	Write properties to a temporary file
10052	Extract variables from a URI .
10053	Put a permission .
10054	Retrieves a DruidPlugin for the given properties .
10055	Bind the given extension point to the extension loader
10056	Gets the builtin object .
10057	Convert a primitive type to a primitive type .
10058	Convert the given object to the given type .
10059	Convert a user defined value to a given type .
10060	Execute a query parameter .
10061	Retrieves a cookie .
10062	Gets session attribute .
10063	Initialize the datasource .
10064	Sets the ftl shared variable .
10065	Sets a parameter .
10066	Sets the parameter to the given value .
10067	Show a permission dialog .
10068	Checks if all values are granted .
10069	Checks if any of the given values are denied .
10070	Find by query .
10071	Finds the first record matching the query .
10072	Checks if the given model is a new model .
10073	Determines whether the given method declares an exception .
10074	Removes all elements from the queue .
10075	Put a value into the hashmap
10076	Returns true if the given string matches the given pattern .
10077	Reads an argument from an interface .
10078	Get protobuf entity
10079	Checks if the given class is a protobuf entity .
10080	Gets all protobuf fields from a class .
10081	Returns the getter for the given field .
10082	Returns the setter for the field .
10083	Gets the object mapper .
10084	Get the JsonFactory
10085	Serialize object to json string
10086	Sets the border .
10087	Get a user record from the database
10088	Copies the attributes from the object to the target object .
10089	Copy the attributes to the target object .
10090	Get a property .
10091	Sets a property .
10092	Adds the app to the frame
10093	Saves a token .
10094	Gets the token .
10095	Gets the default class loader .
10096	Gets the resource with the specified name .
10097	Get a resource as a stream .
10098	Returns a stream of the specified class .
10099	Initialize this URI from another URI .
10100	Initialize the scheme from a URI .
10101	Initialize the path .
10102	Sets the scheme .
10103	Sets the userinfo .
10104	Sets the host .
10105	Sets the port .
10106	Append a path .
10107	Sets the query string .
10108	Sets the fragment .
10109	Returns the URI string .
10110	Creates a PreparedStatement from an iterator .
10111	Initialize the service .
10112	Get the suffix .
10113	Set the suffix .
10114	Gets the clipboard contents .
10115	Sets the clipboard contents .
10116	Open a file stream .
10117	Load services by type .
10118	Sets the service parameters .
10119	Extract service parameters from an operation .
10120	Find parametrized service by id .
10121	Find by class
10122	Parse a query response .
10123	Returns an iterator over the elements in this buffer .
10124	Extract the encoding from the xml string .
10125	Gets the parent logger .
10126	Creates a new connection instance .
10127	Get authorization code
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit a ExecutableDeclaration .
10131	Gets an option .
10132	Returns a DeclarationFilter that matches the given modifiers .
10133	Returns a filter filter for the given class .
10134	Returns a new DeclarationFilter that matches the given Filter .
10135	Creates a filter that matches the given filter .
10136	Gets the value as a Map .
10137	Marks the given constructor as accessible .
10138	Prepares an object query .
10139	Replace slashes with hyphen .
10140	Converts a byte array to a String
10141	Returns the indexes for the named parameter .
10142	Parse SQL statement .
10143	Converts a collection of objects to a Protobuf object .
10144	Sets the field value .
10145	Sets the value of a POJO field .
10146	Is this file?
10147	Create a new ResultSet for the given ResultSet .
10148	Maps a list of expected state labels to a map .
10149	Extract the expected values from the expected values .
10150	Gets the generic supertype at the specified index .
10151	Polls from the queue .
10152	This method is called when an object is polled .
10153	Gets the declared field by name .
10154	Returns all methods declared in the given class or recursively .
10155	Gets the declared method .
10156	Gets the declared methods from the given class .
10157	Returns all constructors that are annotated with the given annotation .
10158	Dumps a byte .
10159	Returns the index of the first occurrence of the specified substring ignoring case .
10160	Removes all characters from a string .
10161	Clean up state .
10162	Initialize audit .
10163	Initialize the message queue
10164	Initialize the password validator .
10165	Initialize the password authenticator .
10166	Resolves a locale code .
10167	Lookup a locale code .
10168	Creates a Statement for the given statement .
10169	clear all elements
10170	Push an element onto the stack .
10171	Removes the first element from the stack .
10172	Returns an input stream for the scan .
10173	Parses the arguments to a Properties object .
10174	Match tokens .
10175	Moves the element at the specified location .
10176	Returns true if the specified rectangle is enclosed by this rectangle .
10177	Returns true if the specified point is contained within this rectangle .
10178	Returns the intersection of this rectangle
10179	Returns the union of this rectangle .
10180	Returns a copy of this rectangle .
10181	Returns a copy of this rectangle .
10182	Returns the position of the specified column .
10183	Gets the row of the specified row .
10184	Returns the bounding rectangle relative to this cell .
10185	Calculates the set of columns
10186	Calculates the number of rows
10187	Unwraps the given throwable .
10188	Main entry point .
10189	Called when the code has changed .
10190	Copies and resizes the code buffer .
10191	Renders the instructions .
10192	Initialize the server .
10193	Creates a partial copy of this parameter .
10194	Adds a child to this node .
10195	clear all children
10196	Returns the next element .
10197	Add instructions to the body .
10198	Add instructions to the parent .
10199	Process a property change event .
10200	Register a work panel
10201	Updates the flags for the present component .
10202	Creates a type .
10203	Evaluates a term .
10204	Optimize the given list of instructions .
10205	Compare two collections
10206	Invokes the service .
10207	Sets the start tag .
10208	Renders the button .
10209	Resets the state of the model .
10210	Initialize the model
10211	Returns the value associated with the specified key .
10212	Returns the index of the specified key
10213	Sets the value at the specified index .
10214	Removes the specified key from the map .
10215	Removes the element at the specified index .
10216	Returns true if the property has been set .
10217	Set property .
10218	Gets the property for the specified property .
10219	Checks if the given primitive type is assignable from the given primitive type .
10220	Initialize the object .
10221	Returns the decision tree .
10222	Initialize the lookup table .
10223	Unify the given query .
10224	Unify two terms .
10225	Unify the left and right term .
10226	Compile a query .
10227	Find the maximum arguments in a clause
10228	Allocate permanent query registers .
10229	Gather position and occurrence information from a clause .
10230	Displays the compiled predicate .
10231	Displays the compiled query .
10232	Puts a 32 - bit 32 bit integer into a buffer .
10233	Returns the length of the given buffer as a String .
10234	Get the value of this field .
10235	Set a string value .
10236	Reads a term .
10237	Checks if the given class exists and returns true .
10238	Checks if the given class is a subtype of the given class .
10239	Checks if parent class is a subtype of another class .
10240	Checks if parent class is a subtype of another class .
10241	Returns the class for the given name .
10242	Create a new instance of the given class .
10243	Create an instance of the given constructor with the given arguments .
10244	Calls the given method on the given object .
10245	Call method
10246	Call a static method .
10247	Gets the constructor with the given arguments .
10248	Find the setters for the given property name .
10249	Get transactional Queue .
10250	Factory method for transactional re - queues .
10251	Extract the type from an object .
10252	Reset the iterator .
10253	Returns the current node .
10254	Creates a type .
10255	Adds a supported TZ name to the endpoint .
10256	Adds an alternate dimension to the table .
10257	Add a dimension table
10258	Returns the set of free variables found in the query .
10259	Returns the set of non - anonymous variables .
10260	Compares two heap nodes .
10261	Write object to file
10262	Reads the stream as a String .
10263	Creates a search node .
10264	Generate the indent for the trace .
10265	Allocate the argument registers for the given function
10266	Returns true if the last argument is in the argument list .
10267	Returns the overall classification for the given property .
10268	Returns true if all examples have the same classification
10269	Selects the best decision on the output property .
10270	Creates a Functor with the given name and arguments .
10271	Returns a variable .
10272	Execute the action with error handling .
10273	Gets the element at the specified index .
10274	Sets the paint .
10275	Override this method to paint a double buffer .
10276	Create a buffered image
10277	Creates a graphics2D from the given image .
10278	Creates a binary image for the given pixel bits .
10279	Creates an image of the SISurface
10280	Sets the queue search algorithm .
10281	Performs a search .
10282	Performs a search .
10283	Main entry point .
10284	Returns the next clause .
10285	Reads a list of terms .
10286	Creates a FUNctor
10287	List the functor
10288	Returns the argument list .
10289	Variable
10290	Matches an integer literal .
10291	a double literal
10292	Reads a string literal
10293	Peek and consume a Directive .
10294	Intern an operator name .
10295	Initialize the built ins .
10296	Consumes the next token .
10297	Consume and consume the next token .
10298	Binds the socket .
10299	Rollback the transaction .
10300	Collect the iterator into the target collection
10301	Reserves a call point .
10302	Convert time to milliseconds
10303	Returns the number of years to years .
10304	Returns the tick with the specified hours set to the specified hours .
10305	Returns a new tick with the specified number of minutes .
10306	Returns a new tick with the specified seconds .
10307	Calculates the tick with the given year to the given year .
10308	Calculates the tick with the given month set to the given month .
10309	Returns the tick with the given date set to the given date .
10310	Returns the millis from the specified year .
10311	Get month of year
10312	Read bytes from the input stream .
10313	Applies the given entry with the given entry .
10314	Returns the entry for the given key
10315	Returns the next entry in the cache .
10316	Rehash the hash table .
10317	Invoked when an action is pressed .
10318	Sets whether the buffer is available .
10319	Sets if the previous available .
10320	Mark the stream as finished .
10321	Returns a new instance of the native library .
10322	Returns an iterator over the set of variables .
10323	Returns the expected I for the given probabilities .
10324	Returns the probability for the distribution
10325	Sets the tick values .
10326	Performs the action forward .
10327	Creates a new URL .
10328	Returns the request information
10329	Returns the headers for the request .
10330	Returns the set of cookies .
10331	Get the request parameters .
10332	Returns the request scope .
10333	Returns the page scope .
10334	Returns the session scope .
10335	Returns the application scope .
10336	Gets the user principal .
10337	Render the start tag .
10338	Generate a table for a map of properties .
10339	Performs a search .
10340	Set the current screen state
10341	Walk a term tree .
10342	Compares two trees .
10343	Updates the given WAM internal registers .
10344	Notifies all registered listeners .
10345	Terminate a clause .
10346	Returns true if the context is in a top level function .
10347	Copies this Iterable into an array .
10348	Sets the arguments .
10349	Gets the fixity .
10350	Checks to see if this is an Infix .
10351	Compares the given op symbol .
10352	Process a property change event .
10353	Registers a workflow controller .
10354	Returns an EnumAttributeFactory for the given class .
10355	Create a component factory for the given class name .
10356	Returns the storage cell for the given variable .
10357	Returns true if this variable is bound .
10358	Sets the attribute for the given column .
10359	Sets the attribute for the row .
10360	Returns the attribute for the given column .
10361	Returns the attribute at the specified position .
10362	Internal insert method .
10363	Creates a new instance with the specified name .
10364	Creates a new type .
10365	Returns true if the value is an instance of the given value .
10366	Creates the initial context for the given term .
10367	Update registers .
10368	Returns the name of this scope .
10369	Find the goal path .
10370	Joins two search nodes .
10371	Cache a block .
10372	Get the properties for a resource .
10373	Sets the rate .
10374	Read bytes from the input stream .
10375	Skip n bytes .
10376	Gets the conjunction of the given disjunction .
10377	Get an int from the buffer starting at the given offset .
10378	Write an int to the buffer at the given offset .
10379	Write a 24 bit integer to a byte array .
10380	Gets a 24 - bit integer from the buffer at the given offset .
10381	Get a short from the given byte array .
10382	Writes a short to the given byte array starting at the given offset .
10383	Returns the child state for the given operator .
10384	Returns an iterator over all operators in this tree .
10385	Returns the id of this node .
10386	Returns the value associated with this field .
10387	Sets the attribute value .
10388	Converts a comma delimited string to an array of strings .
10389	Convert an array to a list
10390	Convert name to camel case
10391	Convert a String to a String .
10392	Get the current configuration
10393	List handlers .
10394	Resolve a function name by its name .
10395	Set code point .
10396	Returns true if this category is a sub - category .
10397	Returns the id of this node .
10398	Returns the value at the specified level .
10399	Gets the last value .
10400	Serialize this object to an output stream .
10401	Read an object from an input stream .
10402	Compute the height of the triples
10403	Returns the modulus of the given c .
10404	Adds an error message .
10405	Handle exceptions .
10406	Write a string to the output stream .
10407	Classify the given state .
10408	Compares two objects
10409	Returns an iterator that iterates over this object .
10410	Returns the log base base of the given value .
10411	Returns the base 64 - bit version of the given int .
10412	Returns the base 10 base 10 of the given value .
10413	Returns the base 10 version of the given value .
10414	Returns the base 10 base 10 base 10 .
10415	Returns the base 10 version of the given value .
10416	Returns the number of characters for a given integer .
10417	Returns the number of characters in the given long .
10418	Returns the number of characters rounded to the given integer value .
10419	Sets the head .
10420	Emits code to the given buffer .
10421	Set the current screen .
10422	Evaluate the predicate .
10423	Returns the property associated with the given key
10424	Get the properties for the given key
10425	Get key iterator .
10426	Create the array properties .
10427	Sets the rate .
10428	Evaluate and return a NumericType .
10429	Find the properties that should be used for parsing .
10430	Get the properties from the system properties .
10431	Load properties from classpath .
10432	Gets the properties from the working directory .
10433	Removes the given functor .
10434	Returns the value associated with this term .
10435	Sets the substitution .
10436	Creates a priority queue .
10437	Closes the connection .
10438	Append an event to the output stream .
10439	Start the connector .
10440	Initialize the print table .
10441	Commits the transaction .
10442	Rollback the transaction .
10443	Request a write operation
10444	Adds a cached operation to the cache .
10445	Acquires a global write lock .
10446	Releases the global write lock .
10447	Enlist the transaction with the current transaction .
10448	Enter a rule set .
10449	Inserts the specified element at the end of the queue .
10450	Retrieves the next element from the queue .
10451	Puts an element into the buffer .
10452	Inserts the specified element into this queue .
10453	Returns the next object .
10454	Get property as boolean .
10455	Gets property as integer .
10456	Gets the property as long .
10457	Call a mixin function .
10458	Sets the visitVisitor .
10459	Backtrack the traversal .
10460	Retrieves the code for the given call point .
10461	Execute and extract bindings .
10462	Decode the heap .
10463	Capture the stack trace .
10464	Restore this object from the given object .
10465	Gets the attribute for the given attribute .
10466	Adds an attribute to the cache .
10467	Returns all field names of the given class .
10468	Execute the command .
10469	Inserts the specified element into this queue .
10470	Removes the first element from the queue .
10471	Creates a search node .
10472	Creates a priority queue .
10473	Creates a simple walker .
10474	Creates a goal walker .
10475	Creates a new term walker .
10476	Creates a new TermWalker for the given unary predicate .
10477	Creates a new postfix walker .
10478	Read properties from an input stream .
10479	Get a Properties object from a file
10480	Get the properties for the given URL .
10481	Get a Properties object from a pathname
10482	Compute the size of the grid .
10483	Initialize the font metrics
10484	Adds a PropertyChangeListener to this Bean .
10485	Adds a PropertyChangeListener to this Bean .
10486	Remove a property change listener
10487	Fire a property change event .
10488	Creates a type .
10489	Says the specified group to the specified target .
10490	Show the horizontal bar .
10491	Shows the left bar .
10492	Shows the right bar .
10493	Sanitizes all radio controls in the form .
10494	Waits until the specified value is reached .
10495	Waits until the specified element is complete .
10496	Execute the command .
10497	Append the classpath to the given command line .
10498	Create a new instance .
10499	Prints an introduction to the console .
10500	Initialize the command line reader .
10501	Evaluate a sentence .
10502	Evaluate the query
10503	Gets the multi type data .
10504	Get the multi type data for the given byte
10505	Get the multi type data for the given character
10506	Returns the multi - type data for a short short .
10507	Get the multi type data
10508	Returns the multi type data for the given long
10509	Get the multi - type data for a given float
10510	Convert a double value to a MultiTypeData object
10511	Get a multi type data from a string
10512	Gets the multi type data .
10513	Convert the data structure to the specified class .
10514	Put a value in the page context .
10515	Clears up the specified key up to the specified key .
10516	Recursively expand a key .
10517	Internal insert method .
10518	Compare two nodes .
10519	Parse the given terms .
10520	Returns the operators that match the given fixity .
10521	Checks to see if there is a fixable operator .
10522	Creates a new search node .
10523	Right pad to a string .
10524	Returns the list of errors .
10525	Get the options in force .
10526	Returns the usage string .
10527	Adds trailing pairs to a Properties object .
10528	Add options to the properties .
10529	Add an option .
10530	Takes the given number of free arguments and converts them to a Properties object .
10531	Checks that the argument is valid .
10532	Compare two iterators .
10533	Returns an enumeration of the named entities .
10534	Returns the command line options
10535	Sets the stemmer
10536	Returns the actual stemmer .
10537	Attempt to stem a word .
10538	Main entry point .
10539	Creates a type .
10540	Reset the iterator .
10541	Trace environment frame .
10542	This method is used to format a trace choice choice choice sequence
10543	Call internal function .
10544	Get the next stack frame .
10545	Performs backtracking on the current thread .
10546	Traverses the specified address .
10547	Unwraps the trie
10548	Fix the trail .
10549	Combines two hashes .
10550	Unify a constant .
10551	Prints a slot .
10552	Get random start state
10553	Checks if the given state is solvable .
10554	Get the child state for the given operator
10555	Returns an iterator over all operators in the list .
10556	Pretty print the board
10557	Swaps the tile at the specified location .
10558	Swaps the specified tiles .
10559	Converts a string to a list of characters .
10560	Converts a list of characters to a state
10561	Converts a log record to a log4j message .
10562	Converts a log4j level to a log4j .
10563	Requeue an element .
10564	Requeue an element .
10565	Increment the size and count
10566	Decrement the size and count for the specified record .
10567	If the old size is greater than the lowWaterSizeThreshold threshold this will signal to the new size .
10568	Returns an enumeration of the specified name .
10569	Returns an enumeration of all bindings in the given name .
10570	Add a property to the environment .
10571	Remove a property from the environment .
10572	Demonstrates how to run a GCTillable .
10573	minimal
10574	Resolve a mixin reference .
10575	Push a variable reference .
10576	Sets the maximum height for the given row .
10577	Updates the maximum size for the given column
10578	Execute the action with an error handling .
10579	Creates a new heuristic search node .
10580	Execute the ActionForward .
10581	Substitute builtin variables .
10582	Initialise the symbol table .
10583	Process top level check .
10584	Returns a string representation of the list .
10585	Evaluate two numbers
10586	Marks the thread as running .
10587	Signal that the thread is terminating .
10588	Signal that the thread is terminated .
10589	Inserts the specified element into this queue .
10590	Return the nearest power of n .
10591	Update minimum .
10592	Compare two nodes .
10593	Inserts a new node into the tree .
10594	Restart the server .
10595	Returns the set of elements that match the given search method .
10596	Gets the bag of the result .
10597	Find all solutions .
10598	Returns the next element in the sequence .
10599	Restore the values from the given map .
10600	Get property value
10601	Put a property value .
10602	Sets the property value .
10603	Capture the current value .
10604	Removes the first element from the queue .
10605	Convert modifiers to string .
10606	Convert a string to an integer .
10607	Convert string to Date
10608	Checks if string is a date
10609	Checks if string is a time .
10610	Checks if string is a date time .
10611	Returns a token source for the given string .
10612	Returns a token source for the given file .
10613	Returns a token source for the given input stream .
10614	Returns true if the given instruction is a constant .
10615	Returns true if the given instruction is a void variable .
10616	Returns true if the given instruction is a non - argument .
10617	Get the children of this node .
10618	Returns the argument at the given index .
10619	Returns the children of this function .
10620	Returns the argument arguments .
10621	Retrieves the summary for the given query parameter
10622	Retrieves a list of measures from the given schema .
10623	Execute the query .
10624	Emits code .
10625	Sets the type of the given class .
10626	Read the contents of the input stream .
10627	Prints a variable binding .
10628	Returns a map of variables to a map of variables .
10629	Read the input stream .
10630	Reads the stream .
10631	Generates a random time .
10632	Generates a unique unique identifier for the current thread .
10633	Update the specified playlist .
10634	Updates the specified playlist .
10635	Handle final output .
10636	Handle resource request .
10637	Handle event request .
10638	Fire start music request .
10639	Initialize the reader .
10640	Starts the reader .
10641	Shutdown the server .
10642	Reset the parser .
10643	Parse the XML stream .
10644	Process a packet .
10645	Sets the CLI option .
10646	Create a new Chat object .
10647	Internal initialization .
10648	Resets the content to a new Map .
10649	Sets a property .
10650	Adds a filter to the packet .
10651	Process the request .
10652	Clears all stored properties .
10653	Initialize the writer .
10654	Sends a packet .
10655	Returns the next packet .
10656	Open stream .
10657	Returns information about the type descriptors .
10658	Returns true if the descriptor contains the given descriptor .
10659	Add event lifecycle listener
10660	Shutdown the timer .
10661	Compares two files .
10662	Clean a direct byte buffer
10663	Checks if the given entry is valid .
10664	Returns null if null .
10665	Compares two objects
10666	Returns the entry for the given key .
10667	Resizes the table to a new capacity .
10668	Copies all entries from the given map to the specified capacity .
10669	Removes an entry from the map .
10670	Removes the entry for the given key .
10671	Removes a mapping from the map .
10672	Adds an entry to the table .
10673	Creates a delegate delegating to the given keys .
10674	Encode binary value .
10675	Encode a byte array to a hexadecimal string .
10676	Encode a string to Base64 .
10677	Encode a byte array .
10678	Iterate over the collection .
10679	Sets the controller that will be notified when the player is selected .
10680	Sets the controller that will be used to show the progress bar .
10681	Sets the controller that will be used to change the playback .
10682	Sets the volume changeable controller .
10683	Broadcasts the available playlists
10684	Handle command resources .
10685	Handle volume .
10686	Handle jump .
10687	Select a track .
10688	Get the cached thread cache for the given name .
10689	Get request cache .
10690	Gets the alt field .
10691	Filters the given map .
10692	Returns the shard path .
10693	Adapts the given object to a session .
10694	Invokes a method on the target object .
10695	Deletes the content of the given path .
10696	Update an entity .
10697	Sets the ping interval .
10698	Schedules ping task .
10699	Add all options .
10700	Returns true if the option has been set .
10701	Parse the command line .
10702	Prints usage .
10703	Parse the command line .
10704	Initialize the connection .
10705	Invoked when the server is started .
10706	Returns the compression handler .
10707	Request stream compression
10708	Start stream compression
10709	Called when a connection error occurs .
10710	Called when a reconnect occurs .
10711	Register a SASL mechanism .
10712	Returns a list of registered SASLMechanism .
10713	Returns the outputPluginBehavior for the given identifiers .
10714	Log an info message .
10715	Log an error message .
10716	Log a stack trace message .
10717	Creates a start event for the given Identification object .
10718	Creates a start event for the given Identification object .
10719	Notifies listeners that a string has been written .
10720	Returns true if the given resource has the given resource ID .
10721	Returns true if the given source has the given source ID .
10722	Checks if there is a resource with the given IDs .
10723	Provides a list of resources with the given IDs .
10724	Get the cached value .
10725	Get cache key
10726	Remove a cached value .
10727	Put a cached value in the cache .
10728	Returns a map of all the locations in the classpath .
10729	Includes a jar file .
10730	Includes a jar file .
10731	Adds a SASL mechanism .
10732	Adds a set of SASL mechs .
10733	Creates debug information .
10734	Activate the secure post processor .
10735	Register standard events .
10736	Register an event listener .
10737	Registers an event ID .
10738	Performs an action on the given channel .
10739	Unregister an event ID
10740	Checks to see if the event should be executed .
10741	Creates a new DSE session .
10742	Create a music player error
10743	Start music .
10744	Stop music .
10745	Add a command to the player .
10746	Create a playlist request
10747	Create a playlist answer
10748	Append post fix .
10749	Add a query param .
10750	Add a query parameter .
10751	Add query param .
10752	Add a query parameter .
10753	Get the playlist from an event model
10754	Called when launch button is pressed .
10755	Check if the localhost is already started .
10756	Checks if the given url exists .
10757	Handle the browser button pressed .
10758	Create an ImageIcon from the given path .
10759	Main entry point .
10760	Returns a copy of this array with the specified values .
10761	Export the properties to a HashMap .
10762	Get the value at the given index
10763	Get the value associated with a key
10764	Get the value as an int .
10765	Get the value as a double .
10766	Get the value as a string
10767	Create a command resource .
10768	Checks if the given command is a valid command .
10769	Verify the capabilities for the given command .
10770	Verify a command .
10771	Execute a batch of statements .
10772	Returns all subclasses of the given class .
10773	Returns all subclasses of the given class .
10774	Searches all the classes in the given directory recursively .
10775	Searches the directory for the given class and returns a map of class names .
10776	Search all classes in a jar file .
10777	Returns a list of resources .
10778	Returns the number of elements .
10779	Process a packet .
10780	Get volume from event model
10781	Error response .
10782	Creates an error response .
10783	Checks if an event model is a target
10784	Sets whether or not the day is enabled .
10785	Decorate the given set .
10786	Sets the name .
10787	Update state .
10788	Gets the roster groups .
10789	Append RSM element to an RSM .
10790	Parse RSM .
10791	Filters the objects from the RSM .
10792	Create a leave event
10793	Reload the roster .
10794	Create a roster entry .
10795	Returns the roster entries .
10796	Get the presence of a user
10797	Sets offline presence notification .
10798	Fires roster changed event .
10799	Sets the digest for the given connection ID and password .
10800	Generate the resource model .
10801	Create a player request .
10802	Gets the time passed to the event model .
10803	Register a listener to update the properties assistant .
10804	Initialize the properties file
10805	Reloads the properties file .
10806	Parse StreamError element
10807	Parse a list of mechanisms .
10808	Parse the compression methods .
10809	Parse a Packet extension element .
10810	Decode a String to a Class
10811	Verify an event model .
10812	Extract the play state from a resource model .
10813	Returns the secret key for the given subdomain .
10814	Returns true if the specified subdomain is allowed .
10815	Adds the specified value to the map .
10816	Returns a set of keys .
10817	Gets the values for this map .
10818	Purges the specified reference .
10819	Gets the entry for the specified key .
10820	Returns the hash code for the given key and value .
10821	Creates a new reference entry .
10822	Control events .
10823	Sets whether the element is present or not .
10824	Updates the presence of the presence .
10825	Send a message to the client .
10826	Generate the run script
10827	Initialize the output directory
10828	Load a properties file .
10829	Write file to file
10830	Get the progress from an event model
10831	Decorate the given Collection .
10832	Discover service resolver .
10833	Get configuration .
10834	Gets the thread pool .
10835	Create stop music
10836	Verify if the event model is a stop music .
10837	Gets a DSE cluster .
10838	Adds a connection listener .
10839	Add a packet listener .
10840	Adds a packet listener that will be notified when the packet is sent .
10841	Notify listeners that a packet has been sent .
10842	Adds a packet interceptor .
10843	Fires all interceptors associated with a packet .
10844	Convert an object to a value .
10845	Called when a connection loses lost .
10846	Gets the current thread id .
10847	Validates a node .
10848	Gets the key for the given value .
10849	Gets the object at the specified index .
10850	Looks up a node in the cache .
10851	Lookup the node at the given index .
10852	Compare two objects
10853	Returns the least node at the specified index .
10854	Returns the most node at the specified index .
10855	Returns the next greater than the given node .
10856	Returns the most valid node for the given node .
10857	Returns the least valid node for the given node .
10858	Copies a color from one color to another .
10859	Checks if the given node is a red .
10860	Checks if the node is black .
10861	Gets the grand parent .
10862	Returns the parent node with the given index .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotates a node at the specified index .
10866	Rotates the right child at the specified index .
10867	Performs a redBlack insert .
10868	Deletes a node .
10869	Checks that the given object is non - null .
10870	Insert a new value .
10871	Returns true if the specified key is a valid key .
10872	Checks if the value is a valid value .
10873	Gets the value associated with the specified key .
10874	Removes the specified key from the map .
10875	Removes all nodes from the tree .
10876	Returns the set of keys .
10877	Returns a collection of all values in this map .
10878	Returns a set of all entries in this map .
10879	Copies all entries from this map to another .
10880	Deletes expired entries .
10881	Closes the cache .
10882	Activates this component .
10883	Gets a player request for the specified playlist .
10884	Initialize the roster store .
10885	Open a roster store .
10886	Returns a collection of local host addresses .
10887	Given an address returns an IPv4 address .
10888	Exports this object to a HashMap .
10889	Import a track info from a hashmap .
10890	Add all application classes .
10891	Execute application .
10892	Print the list .
10893	Prints usage .
10894	Main entry point .
10895	Create a MuteEvent for the source and target Identification
10896	Creates a mute event for the given identification .
10897	Gets the schema for the given schema name .
10898	Write lines to a file
10899	Checks to see if the file is in a jar .
10900	Adds an option .
10901	Gets the schema fields .
10902	Gets the field by its name .
10903	Extract the package name from a JarEntry .
10904	Maps the content to the base .
10905	Create an event listener
10906	Sets the state of this Iterative .
10907	Iterate over the elements in the collection .
10908	Iterates over the iterator .
10909	Get track info from event model
10910	Exports this object to a HashMap .
10911	Imports a resource .
10912	Creates a buffered image with the given lines .
10913	Get image .
10914	Get a JSON response from a URL
10915	Reverses a map from source to target map .
10916	Compute the multiplication of two values .
10917	Starts the server .
10918	Return the object to the pool .
10919	Creates a END event for the given Identification .
10920	Returns the current track .
10921	Updates the specified track with the specified new one .
10922	Randomly shuffle the queue
10923	Verify if the capabilities can be played .
10924	Export the data to a HashMap
10925	Escape a string .
10926	Process a challenge .
10927	Serialize to json
10928	Runs the event loop .
10929	Handle event .
10930	Join all queues .
10931	Sets a property .
10932	Remove a property .
10933	Adds a principal .
10934	Removes a principal .
10935	Called when the root window is closed .
10936	This method is called when the user has started .
10937	Fires a presence event .
10938	Checks if the resource model is permanent .
10939	Sets the name of the group .
10940	Checks if the specified key is present in the hash table .
10941	Returns true if the hash table contains the specified value .
10942	Adds the specified value to the map .
10943	Clears the hash table .
10944	Returns the hash for the given key .
10945	Checks if two keys are equal .
10946	Checks if two values are equal .
10947	Ensure that the capacity is larger than the specified capacity .
10948	Calculate new capacity .
10949	Creates an iterator over the entries in this map .
10950	Load a row from a binary stream
10951	Register the content generator .
10952	Initialize the addOn
10953	Notifies all connection listeners that a connection failed .
10954	Notifies the connection listeners that the connection has been reconnect .
