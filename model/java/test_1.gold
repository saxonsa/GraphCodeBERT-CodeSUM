0	Makes sure the fast - path emits in order .
1	Wraps an ObservableSource into an Observable if not already an Observable .
2	Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
3	Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
4	Creates an UnicastProcessor with the given internal buffer capacity hint .
5	Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
6	Tries to subscribe to a possibly Callable source s mapped Publisher .
7	Maps a scalar value into a Publisher and emits its values .
8	Removes all handlers and resets to default behavior .
9	Wraps a CompletableSource into a Maybe .
10	Wraps a SingleSource into a Maybe .
11	Retries at most times or until the predicate returns false whichever happens first .
12	Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
13	Returns an identity function that simply returns its argument .
14	Returns a Callable that returns the given value .
15	Returns a Function that ignores its parameter and returns the given value .
16	Returns a function that cast the incoming values via a Class object .
17	Creates an UnicastSubject with an internal buffer capacity hint 16 .
18	Creates an UnicastSubject with the given internal buffer capacity hint .
19	Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
20	Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
21	Block until the latch is counted down and return the error received or null if no error happened .
22	Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
23	Block until the observer terminates and return true ; return false if the wait times out .
24	Drain the queue but give up with an error if there aren t enough requests .
25	Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
26	Signals the completion of the main sequence and switches to post - completion replay mode .
27	Signals the given value and an onComplete if the downstream is ready to receive the final value .
28	Returns the contained value if this notification is an onNext signal null otherwise .
29	Returns the container Throwable error if this notification is an onError signal null otherwise .
30	Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
31	Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
32	Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
33	Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
34	Adds two long values and caps the sum at Long . MAX_VALUE .
35	Multiplies two long values and caps the product at Long . MAX_VALUE .
36	Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
37	Creates a NullPointerException instance and sets the given Throwable as its initial cause .
38	Adds a new element to this list .
39	Stops the purge thread .
40	Creates a ScheduledExecutorService with the given factory .
41	Atomically sets a new subscription .
42	Loops until all notifications in the queue has been processed .
43	If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
44	Returns a flattened list of Throwables from tree - like CompositeException chain .
45	Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
46	Atomically clears the container then disposes all the previously contained Disposables .
47	Returns the number of currently held Disposables .
48	Tries to subscribe to a possibly Callable source s mapped ObservableSource .
49	Maps a scalar value into an Observable and emits its values .
50	Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
51	Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
52	Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
53	Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
54	Tries to offer an item into the internal queue and returns false if the queue is full .
55	Returns the currently contained Disposable or null if this container is empty .
56	Complete the target with a single value or indicate there is a value available in fusion mode .
57	Complete the target with an error signal .
58	Complete the target without any value .
59	Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
60	Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
61	Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
62	Wait for the terminal signal .
63	Requests from the upstream Subscription .
64	Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
65	Atomically removes the given subscriber if it is subscribed to the subject .
66	Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
67	Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
68	Set the network round trip delay .
69	The HTTP error to be used when an error is triggered .
70	Get the delay that should be used for delaying a response in accordance with configured behavior .
71	Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
72	Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
73	Return the LdapUserDetails containing the user s information
74	Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
75	Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
76	Perform version checks with specific min Spring Version
77	Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
78	Loads the spring version or null if it cannot be found .
79	Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
80	Configures OAuth 2 . 0 Client support .
81	Configures OAuth 2 . 0 Resource Server support .
82	Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
83	Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
84	Composes an object from the attributes of the given DN .
85	Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
86	Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
87	Internal method extracted to avoid code duplication in AD search .
88	We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
89	Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
90	Builds the authentication details object .
91	Will be called if no url attribute is supplied .
92	Adds the servlet - api integration filter if required
93	Adds the jaas - api integration filter if required
94	Creates a TypeResolverBuilder that performs whitelisting .
95	Registers the springSecurityFilterChain
96	Loads the token data for the supplied series identifier .
97	Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
98	Constructs a new Cipher .
99	Check whether all required properties have been set .
100	Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
101	Determines if the current principal has changed . The default implementation tries
102	Do the actual authentication for a pre - authenticated user .
103	Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
104	Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
105	Specifies the URL to validate the credentials .
106	Updates the default values for authentication .
107	Updates the default values for access .
108	Extension point to allow customized creation of the user s password from the attribute stored in the directory .
109	Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
110	Inverse operation of decodeCookie .
111	Sets the cookie on the response .
112	resolve the argument to inject into the controller parameter .
113	If present removes the artifactParameterName and the corresponding value from the query String .
114	Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
115	Get the principals of the logged in user in this case the distinguished name .
116	Requires the request to be passed in .
117	Attempts to login the user given the Authentication objects principal and credential
118	Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
119	Allows a custom environment properties to be used to create initial LDAP context .
120	Indicates the URL that the user agent used for this request .
121	Default processing of the end tag returning EVAL_PAGE .
122	Populates the users that have been added .
123	Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
124	Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
125	Overridden to provide proxying capabilities .
126	Indicates if the request is elgible to process a service ticket . This method exists for readability .
127	Indicates if the request is elgible to process a proxy ticket .
128	Determines if a user is already authenticated .
129	Indicates if the request is elgible to be processed as the proxy receptor .
130	Creates the root object for expression evaluation .
131	Updates the cached JWK set from the configured URL .
132	Performs URL encoding with UTF - 8
133	Get a list of Granted Authorities based on the current user s WebSphere groups .
134	Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
135	Return the WebSphere user name .
136	Combine the individual byte arrays into one array .
137	Extract a sub array of bytes out of the byte array .
138	Map the given array of attributes to Spring Security GrantedAuthorities .
139	Preprocess the given map to convert all the values to GrantedAuthority collections
140	Convert the given value to a collection of Granted Authorities
141	Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
142	Return the J2EE user name .
143	Gets a shared Object . Note that object heirarchies are not considered .
144	Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
145	Method that is suitable for user with traditional AspectJ - code aspects .
146	Creates a String for specifying a user requires a role .
147	Creates a String for specifying that a user requires one of many roles .
148	Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
149	Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
150	Attempt to switch to another user . If the user does not exist or is not active return null .
151	Attempt to exit from an already switched user .
152	Set the URL to respond to exit user processing .
153	The public index page used for unauthenticated users .
154	Creates the Spring Security Filter Chain
155	Decode and validate the JWT from its compact claims representation format
156	Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
157	Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
158	Extracts the authorities
159	Generates a new token
160	Displays the permission admin page for a particular contact .
161	Displays the add permission page for a contact .
162	Handles submission of the add permission form .
163	Deletes a permission
164	Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
165	Creates a UserDetailsResourceFactoryBean with a resource from the provided String
166	Returns the values for a specific attribute
167	Returns the first attribute value for a specified attribute
168	Get the bytes of the String in UTF - 8 encoded form .
169	Decode the bytes in UTF - 8 form into a String .
170	Gets the parameter names or null if not found .
171	Handles the submission of the contact form creating a new instance if the username and email are valid .
172	Will walk the method inheritance tree to find the most specific declaration applicable .
173	Add configuration attributes for a secure method .
174	Obtains the configuration attributes explicitly defined against this bean .
175	Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
176	Maps any request .
177	Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
178	This is a public method .
179	Removes temporary authentication - related data which may have been stored in the session during the authentication process .
180	Attempts to locate the specified field on the class .
181	Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
182	Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
183	Returns the hash prefix or null if there isn t one .
184	Always returns a 403 error code to the client .
185	Checks the filter list for possible errors and logs them
186	Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
187	Extracts the cause of the given throwable using an appropriate extractor .
188	Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
189	Converts an array of GrantedAuthority objects to a Set .
190	Constant time comparison to prevent against timing attacks .
191	The URL which will be used as the failure destination .
192	Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
193	Obtains the web application - specific fragment of the URL .
194	Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
195	Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
196	Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
197	Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
198	Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
199	Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
200	Stores the current request provided the configuration properties allow it .
201	Creates a matcher that matches on the specific method and any of the provided patterns .
202	Matches any exchange
203	Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
204	Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
205	Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
206	Writes the X - Frame - Options header value overwritting any previous value .
207	Builds the target URL according to the logic defined in the main class Javadoc
208	Builds the target URL according to the logic defined in the main class Javadoc .
209	If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
210	Executes recursive SQL as needed to build a full Directory hierarchy of objects
211	Assembles the Distinguished Name that should be used the given username .
212	Creates the shared objects
213	Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
214	Gets the current date in HTTP format .
215	Parses date with given formatters .
216	Updates cache .
217	Provided so that subclasses may configure what is put into the authentication request s details property .
218	Get the security name for the given subject .
219	Get the WebSphere group names for the given security name .
220	Changes the password for the current user . The username is obtained from the security context .
221	Creates a DN from a group name .
222	Allows subclasses to customise behaviour when too many sessions are detected .
223	Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
224	Returns the first filter chain matching the supplied URL .
225	Convenience method mainly for testing .
226	Allows test cases to override where application context obtained from .
227	Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
228	Set session attributes .
229	Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
230	Add default filters that will be applied to each request .
231	Add default filters to apply to each request .
232	Create a http basic authentication scheme .
233	Create a NTLM authentication scheme .
234	Use form authentication with the supplied configuration .
235	Instruct REST Assured to connect to a proxy using a URI .
236	Prints the response to the print stream
237	Set the redirect config .
238	Specify the default charset for query parameters
239	Creates an object mapper configuration that uses the specified object mapper as default .
240	Specify a custom JAXB object mapper factory .
241	Set the Log config .
242	Set the session config .
243	Set the object mapper config .
244	Set the Json config .
245	Set the Xml config .
246	Set the encoder config
247	Set the header config
248	Set the async config
249	Set the MockMVC config
250	Set the multi - part config
251	Set the parameter config
252	Set the matcher config
253	Configure the CertificateAuthSettings to allow all host names .
254	Specify declared namespaces that will be used when parsing XML .
255	Declares a namespace .
256	Make an HTTP request to the default URI and parse using the default content - type .
257	Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
258	Set the default HTTP proxy to be used for all requests .
259	Specify the control name of this multi - part .
260	Add a header to this multipart specification .
261	Set authentication credentials to be used for the given host and port .
262	Set NTLM authentication credentials to be used for the given host and port .
263	An alternative way to create a Headers object from the constructor .
264	Reset all static configurations to their default values .
265	Set a specific header
266	Build the actual response
267	Verifies whether value of cookie satisfies specified matcher .
268	Verifies whether comment of cookie satisfies specified matcher .
269	Verifies whether expiry date of cookie satisfies specified matcher .
270	Verifies whether domain of cookie satisfies specified matcher .
271	Verifies whether path of cookie satisfies specified matcher .
272	Verifies whether secured property of cookie satisfies specified matcher .
273	Verifies whether http - only property of cookie satisfies specified matcher .
274	Verifies whether version of cookie satisfies specified matcher .
275	Verifies whether max age of cookie satisfies specified matcher .
276	Expect that a response header matches the supplied header name and hamcrest matcher .
277	Expect that a response header matches the supplied name and value .
278	Expect that a response cookie matches the supplied name and value .
279	Specify the hostname of the proxy .
280	Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
281	Creates an json path configuration that uses the specified parser type as default .
282	Specify a new default stream to the print to .
283	Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
284	Get the HttpRequest class that represents this request type .
285	Specify an explicit default multipart boundary to use when sending multi - part data .
286	Add request attribute
287	Add a header to be sent with the request
288	Specify a string to send to the server using multi - part form data with a specific mime - type .
289	Add a result handler
290	Set a http client parameter .
291	Add the given parameters to an already configured number of parameters .
292	Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
293	Specify the HTTP Multipart mode when sending multi - part data .
294	Get the result of an Object path expression as a boolean .
295	Get the result of an Object path expression as an int .
296	Get the result of an Object path expression as a byte .
297	Get the result of an Object path expression as a short .
298	Get the result of an Object path expression as a float .
299	Get the result of an Object path expression as a double .
300	Get the result of an Object path expression as a long .
301	Get the result of an Object path expression as a list .
302	Get the result of an Object path expression as a map .
303	Get an XML document as a Java Object .
304	Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
305	Add a cookie to be sent with the request .
306	Add a parameter to be sent with the request .
307	Add a multi - value parameter to be sent with the request .
308	Set form parameter update strategy to the given value .
309	Create a new logging filter without using the new operator . Will make the DSL look nicer .
310	An alternative way to create a Cookies object from the constructor .
311	There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
312	Indexes bindings by type .
313	Gets a binding implementation . First it check to see if the parent has a binding . If the parent has a binding and the binding is scoped it will use that binding . Otherwise this checks for an explicit binding . If no explicit binding is found it looks for a just - in - time binding .
314	Converts a constant string binding to the required type .
315	Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
316	Cleans up any state that may have been cached when constructing the JIT binding .
317	Safely gets the dependencies of possibly not initialized bindings .
318	Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
319	Returns an array of parameter values .
320	The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
321	The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
322	Returns true if the binding annotation is in the wrong place .
323	Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
324	Sets the actual members injector .
325	Gets the type of this type s provider .
326	Returns an immutable list of the resolved types .
327	Returns an type that s appropriate for use in a key .
328	Installs default converters for primitives enums and class literals .
329	Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
330	Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
331	Returns true if the member can be called by a fast class generated in a different classloader .
332	Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
333	Registers an instance for member injection when that step is performed .
334	Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
335	Returns an instance of T constructed using this constructor with the supplied arguments .
336	Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
337	Scopes an internal factory .
338	Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
339	Normalizes a path by unescaping all safe percent encoded characters .
340	Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
341	Returns true if the given annotation is retained at runtime .
342	Returns the scoping annotation or null if there isn t one .
343	Gets a key for the given type member and annotations .
344	Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
345	Sets the actual provider .
346	Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
347	Returns a new complete constructor injector with injection listeners registered .
348	Returns true if the given class has a scope annotation .
349	since it s an easy way to group a type and an optional annotation type or instance .
350	Adds a binding to the map for the given key .
351	Provisions a new T .
352	When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
353	Returns a module which creates bindings for provider methods from the given module .
354	the collection is immutable .
355	Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
356	Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
357	Calculates all dependencies required by the implementation and constructor .
358	Return all non - assisted dependencies .
359	Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
360	Creates a child injector that binds the args and returns the binding for the method s result .
361	When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
362	Within guice s core allow for better missing binding messages
363	Implementation of newSetBinder .
364	Adds a new entry to the set and returns the key for it .
365	Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
366	Returns true if the inject annotation is on the constructor .
367	Returns an injection point that can be used to clean up the constructor store .
368	Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
369	Returns a module which creates bindings methods in the module that match the scanner .
370	Returns the annotation that is claimed by the scanner or null if there is none .
371	Get the line number associated with the given member .
372	Initialize the specified lookups either immediately or when the injector is created .
373	Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
374	Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
375	Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
376	Returns a new complete members injector with injection listeners registered .
377	Creates a new members injector and attaches both injection listeners and method aspects .
378	Returns the injectors for the specified injection points .
379	Gets a key for an injection type and an annotation strategy .
380	Gets the strategy for an annotation .
381	Gets the strategy for an annotation type .
382	Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
383	Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
384	Returns the formatted message for an exception with the specified messages .
385	Creates a new Message without a cause .
386	Creates a new Message with the given cause .
387	Creates a new Message with the given cause and a binding source stack .
388	Formats an object in a user friendly way .
389	Returns true if the className should be skipped .
390	Returns the non - skipped module class name .
391	Run with no arguments for usage instructions .
392	Sets the new current dependency & adds it to the state .
393	Adds to the state without setting the dependency .
394	Returns an initializable for an instance that requires no initialization .
395	Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
396	Dispatch events .
397	Add event processor .
398	get the result of a future task
399	launder the throwable
400	Register processor to process command that has the command code of cmdCode .
401	Register the default processor to process command with no specific processor registered .
402	Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
403	try get from cache
404	decode the protocol code
405	Get all connections of all poolKey .
406	in case of cache pollution and connection leak to do schedule scan
407	If no task cached create one and initialize the connections .
408	If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
409	remove task and remove all connections
410	execute heal connection tasks if the actual number of connections in pool is less than expected
411	do create connections
412	Close all connections of a address
413	Do something when closing .
414	Close the connection .
415	set attribute if key absent .
416	Help register single - interest user processor .
417	Help register multi - interest user processor .
418	dispatch request command to user processor
419	deserialize request command
420	pre process remoting context initial some useful infos and pass to biz
421	print some log when request timeout and discarded in io thread .
422	print some debug log when receive request
423	Process the remoting command with its own executor or with the defaultExecutor if its own if null .
424	Invocation with callback .
425	Oneway invocation .
426	from bit set to byte
427	from byte to bit set
428	add reconnect task
429	stop reconnect thread
430	Convert application request object to remoting request command .
431	Filter connections to monitor
432	Monitor connections and close connections with status is off
433	close the connection of the fresh select connections
434	~~~ public helper methods to retrieve system property
435	print info log
436	whether this request already timeout
437	Get user processor for class name .
438	get one connection randomly
439	get and use default if not found
440	Get property value according to property key
441	Analyze the response command and generate the response object .
442	Convert remoting response command to application response object .
443	Convert remoting response command to throwable if it is a throwable otherwise return null .
444	Detail your error msg with the error msg returned from response command
445	create server exception using error msg and fill the stack trace using the stack trace of throwable .
446	print trace log
447	Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
448	Parse the remote address of the channel .
449	Parse the local address of the channel .
450	Parse the remote host ip of the channel .
451	Parse the remote hostname of the channel .
452	Parse the local host ip of the channel .
453	Parse the remote host port of the channel .
454	Parse the local host port of the channel .
455	Parse the host ip of socket address .
456	add a connection
457	removeAndTryClose a connection
458	get a connection
459	Register custom serializer for class name .
460	Get the custom serializer for class name .
461	Register custom serializer for command code .
462	Get the custom serializer for command code .
463	Start schedule task
464	check whether a client address connected
465	init netty write buffer water mark
466	Get a frame with a specific opcode
467	Returns whether the whole outQueue has been flushed
468	Set the close code for this close frame
469	Validate the payload to valid utf8
470	Update the payload to represent the close code and the reason
471	Check if the requested protocol is part of this draft
472	Check if the frame size exceeds the allowed limit
473	Check if the max packet size is smaller than the real packet size
474	Generate a final key from a input string
475	Process the frame if it is a continuous frame or the fin bit is not set
476	Process the frame if it is a binary frame
477	Log the runtime exception to the specific WebSocketImpl
478	Process the frame if it is a text frame
479	Process the frame if it is the last frame
480	Process the frame if it is not the last frame
481	Process the frame if it is a closing frame
482	Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
483	Method to generate a full bytebuffer out of all the fragmented frame payload
484	Get the current size of the resulting bytebuffer in the bytebuffer list
485	Checking the handshake for the role as server
486	Checking the handshake for the role as client
487	Method to decode the provided ByteBuffer
488	Close the connection if the received handshake was not correct
489	Close the connection if there was a server error by a RuntimeException
490	Generate a simple response for the corresponding endpoint to indicate some error
491	Send Text data to the other end .
492	Reset everything relevant to allow a reconnect
493	Initiates the websocket connection . This method does not block .
494	Extract the specified port
495	Create and send the handshake to the other endpoint
496	Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
497	Stop the connection lost timer
498	Start the connection lost timer
499	This methods allows the reset of the connection lost timer in case of a changed parameter
500	Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
501	Cancel any running timer for the connection lost detection
502	This default implementation does not do anything . Go ahead and overwrite it .
503	This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
504	Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
505	Gets the port number that this server listens on .
506	Do an additional read
507	Execute a accept operation
508	Execute a read operation
509	Execute a write operation
510	Setup the selector thread as well as basic server settings
511	The websocket server can only be started once
512	Clean up everything after a shutdown
513	Getter to return the socket used by this specific connection
514	Send a byte array to a specific collection of websocket connections
515	Send a text to a specific collection of websocket connections
516	Private method to cache all the frames to improve memory footprint and conversion time
517	Fills the draftFrames with new data for the broadcast
518	Transfer from one ByteBuffer to another ByteBuffer
519	Initialise JPA entity manager factories .
520	Get a newly created EntityManager for the specified persistence unit name .
521	Run a block of code with a newly created EntityManager for the default Persistence Unit .
522	Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
523	Wraps arguments passed into a list if necessary .
524	Translates a message .
525	Translates the first defined message .
526	Check if a message key is defined .
527	Get a messages context appropriate for the given candidates .
528	Get a messages context appropriate for the given request .
529	Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
530	Add bindings from guiceable modules .
531	Add bindings from Play modules .
532	Add Play bindings .
533	Override bindings using guiceable modules .
534	Override bindings using Play modules .
535	Override bindings using Play bindings .
536	Disable modules by class .
537	Executes this action with the given HTTP context and returns the result .
538	Executes this action with the given HTTP request and returns the result .
539	Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
540	Configure the scope for this binding .
541	Constructs a tuple of A B
542	Constructs a tuple of A B C D E
543	Converts the execution context to an executor preparing it first .
544	Create a default JPA configuration with the given name and unit name .
545	Create a default JPA configuration with the given names and unit names .
546	Create a default JPA configuration from a map of names to unit names .
547	Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
548	Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
549	Adds validator as a singleton .
550	need to do so .
551	Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
552	Invoked when a client error occurs that is an error in the 4xx series .
553	Invoked when a client makes a bad request .
554	Invoked when a client makes a request that was forbidden .
555	Invoked when a handler or resource is not found .
556	Invoked when a server error occurs .
557	Responsible for logging server errors .
558	Convert the given exception to an exception that Play can report more information about .
559	Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
560	Invoked in prod mode when a server error occurs .
561	Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
562	Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
563	Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
564	Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
565	Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
566	Consumes the data .
567	Create an entity from the given content .
568	Create an entity from the given String .
569	Convert the given source of ByteStrings to a chunked entity .
570	Generates a simple result with json content and UTF8 encoding .
571	Generates a simple result with json content .
572	Generates a simple result with byte - array content .
573	Generates a chunked result .
574	Generates a result with file contents .
575	designed to be lightweight operation
576	Select a preferred language given the list of candidates .
577	Append a unique identifier to the URL .
578	Returns a new Call with the given fragment .
579	Transform this call to an absolute URL .
580	Transform this call to an WebSocket URL .
581	Create a Scala function wrapper for ConnectionRunnable .
582	Create a Scala function wrapper for ConnectionCallable .
583	Create a server for the router returned by the given block .
584	Converts an object to JsonNode .
585	Converts a JsonNode to a Java value
586	Parses a String representing a json and return it as a JsonNode .
587	Parses a InputStream representing a json and return it as a JsonNode .
588	Create a path to targetPath that s relative to the given startPath .
589	Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
590	Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
591	Converts a constraint to a human - readable value .
592	Creates a CompletionStage that returns either the input stage or a futures .
593	Checks if an array of Classes can be assigned to another array of Classes .
594	Parses a CRON expression .
595	Compute the number of milliseconds between the next valid date and the one after .
596	Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
597	Construct a builder to use for loading the given context .
598	Generates a 501 NOT_IMPLEMENTED simple result .
599	Puts a new value into the current session .
600	Puts a new value into the flash scope .
601	Qualify this binding key with the given instance of an annotation .
602	Qualify this binding key with the given annotation .
603	Bind this binding key to the given implementation class .
604	Bind this binding key to the given provider instance .
605	Bind this binding key to the given instance .
606	Bind this binding key to another binding key .
607	Bind this binding key to the given provider class .
608	Retrieve Lang availables from the application configuration .
609	Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
610	Create an evolutions reader based on a simple map of database names to evolutions .
611	Create an evolutions reader for the default database from a list of evolutions .
612	Cleanup evolutions for the given database .
613	Set the initial configuration loader . Overrides the default or any previously configured values .
614	Set the module loader . Overrides the default or any previously configured values .
615	Override the module loader with the given guiceable modules .
616	Override the module loader with the given Guice modules .
617	Override the module loader with the given Play modules .
618	Override the module loader with the given Play bindings .
619	Implementation of Self creation for GuiceBuilder .
620	Encodes the specified cookie into a Cookie header value .
621	Get the default EntityManager for this thread .
622	Get the EntityManager stack .
623	Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
624	Bypass the given flow using the given splitter function .
625	Using the given splitter flow allow messages to bypass a flow .
626	Create a flow that is handled by an actor .
627	Convert the error arguments .
628	Populates this form with an existing value used for edit forms .
629	Retrieve all global errors - errors without a key .
630	Returns the form errors serialized as Json using the given Lang .
631	Gets the concrete value
632	Fills the form with existing data .
633	Parses this string as instance of the given class .
634	Parses this string as instance of a specific field
635	Computes the display string for any value .
636	Computes the display string for any value for a specific field .
637	Computes the display string for any value for a specific type .
638	Converter for String - > Optional and Optional - > String
639	Registers a simple formatter .
640	Registers an annotation - based formatter .
641	Encodes the specified cookie into a Set - Cookie header value .
642	Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
643	Converts a Java List to Scala Seq .
644	Converts a Java Array to Scala Seq .
645	Converts a Java varargs to Scala varargs .
646	Acceptor for JSON WebSockets .
647	Helper to create handlers for WebSockets .
648	XXX Default access superclass workaround .
649	Gets the number of steps required to promote a primitive number to another type .
650	Returns the sum of the object transformation cost for each class in the source argument list .
651	Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
652	Get the message at the given key .
653	Get the message at the first defined key .
654	Create a pooled database named default with the given configuration .
655	Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
656	Sort the arrays using the quicksort algorithm .
657	Sort the arrays using an in - place merge sort .
658	Invoke the original method on a different object of the same type .
659	Casts from one primitive numeric type to another
660	Pushes the specified argument of the current method onto the stack .
661	package - protected for EmitUtils try to fix
662	Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
663	Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
664	Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
665	If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
666	Finds all bridge methods that are being called with invokespecial & returns them .
667	Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
668	Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
669	Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
670	to avoid JVM hashcode implementation incompatibilities
671	Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
672	If bit 31 is set then this method results in an infinite loop .
673	Override the default naming policy .
674	used by MethodInterceptorGenerated generated code
675	Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
676	Reads path content .
677	Sets request host name .
678	Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
679	Builds a CONNECT request .
680	Builds a GET request .
681	Builds a POST request .
682	Builds a PUT request .
683	Builds a PATCH request .
684	Builds a DELETE request .
685	Builds a HEAD request .
686	Builds a TRACE request .
687	Builds an OPTIONS request .
688	Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
689	Sets cookies to the request .
690	Adds many query parameters at once . Although it accepts objects each value will be converted to string .
691	Adds all parameters from the provided map .
692	Sets query from provided query string . Previous query values are discarded .
693	Generates query string . All values are URL encoded .
694	Returns just host url without path and query .
695	Enables basic authentication by adding required header .
696	Sets Host header from current host and port .
697	Prepares the request buffer .
698	Syntax sugar .
699	Removes the range between start and end from the Handler list that begins with the given element .
700	Returns the number of elements of the Handler list that begins with the given element .
701	Collects all interceptors .
702	Collects all filters .
703	Collects all action results .
704	Collects all action runtime configurations .
705	Sets a value of simple property .
706	Returns value of bean s property .
707	Extract the first name of this reference .
708	Returns buffered writer . Buffer will be created if not already used .
709	Saves object reference .
710	Returns object reference .
711	Lookups for object reference and throws an exception if reference doesn t exist .
712	Returns entity descriptor for provided table reference .
713	Finds entity descriptor of a table that contains provided column reference .
714	Returns table alias for provided table reference .
715	Registers table reference for provided entity .
716	Lookups for table reference and throws an exception if table reference not found .
717	Registers a hint .
718	Detects circular dependencies and pushes value as current type context .
719	Injects request attributes .
720	Inject request parameters .
721	Inject uploaded files from multipart request parameters .
722	Converts property name to column name .
723	Converts column name to property name .
724	Applies column naming strategy to given column name hint . Returns full column name .
725	Stores value in database . Value is casted to sql type .
726	Once when value is read from result set prepare it to match destination type .
727	Returns all action wrappers . Returns a copy in new set .
728	Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
729	Creates new wrapper .
730	Converts all separators to the system separator .
731	Does the work of getting the path .
732	Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
733	Calculates relative path of target path on base path .
734	Registers additional Madvoc components after the registration of default components .
735	Configures the action configurations .
736	Initializes and starts web application .
737	Configure defaults .
738	Registers default Madvoc components .
739	Specify excluded jars .
740	Specify included jars .
741	Sets included set of names that will be considered during configuration .
742	Sets excluded names that narrows included set of packages .
743	Scans classes inside single JAR archive . Archive is scanned as a zip file .
744	Scans single classpath directory .
745	Returns type signature bytes used for searching in class file .
746	Scans provided paths .
747	Starts with the scanner .
748	Builds new transaction instance .
749	Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
750	Performs search for the scope class and returns it s instance .
751	Finds a given scope and consumes it .
752	Decodes a BASE64 encoded char array .
753	Generates new CSRF token and puts it in the session . Returns generated token value .
754	Removes expired tokens if token set is full .
755	Checks token value . C
756	Defines source detects a map .
757	Performs the copying .
758	Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
759	Resolves and registers table references .
760	Resolves and registers scope from a scope type .
761	Registers or defines a bean .
762	Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
763	Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
764	Resolves bean names for give type .
765	Registers constructor injection point .
766	Registers property injection point .
767	Registers set injection point .
768	Registers method injection point .
769	Registers init method .
770	Registers destroy method .
771	Registers instance method provider .
772	Registers static method provider .
773	Iterates all beans that are of given type .
774	Defines many parameters at once .
775	Measure action invocation time .
776	Resolves Java version from current version .
777	Pushes int value in an optimal way .
778	Validates argument index .
779	Builds advice field name .
780	Builds advice method name .
781	Loads all method arguments before INVOKESPECIAL call .
782	Loads all method arguments before INVOKESTATIC call .
783	Loads all method arguments before INVOKEVIRTUAL call .
784	Loads one argument . Index is 1 - based . No conversion occurs .
785	Stores one argument . Index is 1 - based . No conversion occurs .
786	Prepares return value .
787	Creates unique key for method signatures map .
788	Creates new array .
789	Stores element on stack into an array .
790	Extracts encoding from a given content type .
791	Check whether flags is a empty flags
792	Returns Bearer token .
793	Sends correct headers to require basic authentication for the given realm .
794	Prepares response for file download with provided mime type .
795	Prepares response for various provided data .
796	Returns all cookies from client that matches provided name .
797	Reads HTTP request body using the request reader . Once body is read it cannot be read again!
798	Reads HTTP request body using the request stream . Once body is read it cannot be read again!
799	Stores context path in server context and request scope .
800	Stores context path in page context and request scope .
801	Checks if some parameter is in GET parameters .
802	Prepares parameters for further processing .
803	Copies all request parameters to attributes .
804	Invokes tag body .
805	Renders tag body to char array .
806	Renders tag body to string .
807	Invokes init methods .
808	Calls destroy methods on given BeanData . Destroy methods are called without any order .
809	Creates a new instance .
810	Injects all parameters .
811	Rewrites action path .
812	Adds new header value . If existing value exist it will be removed so the store the new key value .
813	Puts key - value pair into the map with respect of appending duplicate properties
814	Adds base property .
815	Adds profile property .
816	Returns profile property .
817	Resolves all macros in this props set . Called on property lookup .
818	Extracts props to target map . This is all - in - one method that does many things at once .
819	Cycically extract a word of key material .
820	Hash a password using the OpenBSD bcrypt scheme .
821	Check that a plaintext password matches a previously hashed one .
822	Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
823	Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
824	Parses java action method annotation and returns its action runtime .
825	Resolves action config .
826	Detects if alias is defined in annotation and registers it if so .
827	Reads class or method annotation for action interceptors .
828	Reads class or method annotation for action filters .
829	Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
830	Reads action path from the action method .
831	Reads method s alias value .
832	Creates new instance of action runtime configuration . Initialize caches .
833	todo move to BufferResponseWrapper ?
834	Applies advice on given target class and returns proxy instance .
835	Injects target into proxy .
836	Visits an annotation of the field .
837	Resolves real name from JSON name .
838	Resolves JSON name from real name .
839	Returns all includes for given type . Returns an empty array when no includes are defined .
840	Lookups type data and creates one if missing .
841	Finds type data of first annotated superclass or interface .
842	Returns different name of a property if set by annotation .
843	Returns real property name for given JSON property .
844	Returns the content of file upload item .
845	Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
846	Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
847	Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
848	Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
849	Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
850	Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
851	Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
852	Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
853	Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
854	Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
855	Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
856	Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
857	Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
858	Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
859	Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
860	Adds a new CONSTANT_String_info to the constant pool of this symbol table .
861	Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
862	Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
863	Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
864	Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
865	Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
866	Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
867	Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
868	Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
869	Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
870	Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
871	Calculates hash value of the input string .
872	Clears the map .
873	Returns all values associated with the name .
874	Returns iterator of all entries .
875	Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
876	Grows the buffer .
877	Appends character sequence to buffer .
878	Copies target method annotations .
879	Finally builds proxy methods if applied to current method .
880	Starts creation of first chain delegate .
881	Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
882	Parses input dot - separated string that represents a path .
883	Push element to the path .
884	Configures servlet context .
885	Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
886	Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
887	Applies proxetta on bean class before bean registration .
888	Converter JTX transaction mode to DB transaction mode .
889	Reads property using property descriptor .
890	Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
891	Appends other buffer to this one .
892	Writes content to the writer .
893	Writes content to the output stream .
894	Writes content to the output stream using progress listener to track the sending progress .
895	Returns the string value with the specified key .
896	returns the integer value with the specified key .
897	Returns the long value with the specified key .
898	Returns the double value with the specified key .
899	Returns the float value with the specified key .
900	Returns the value with the specified key as an object .
901	Puts a string into the JSON object with the specified key .
902	Opens new folder and closes previously opened folder .
903	The main email receiving method .
904	Updates the email flags on the server .
905	Closes folder if opened and expunge deleted messages .
906	Lookup for named parameter .
907	Creates alias .
908	Validates action . Profiles are reset after the invocation .
909	Adds action violation .
910	Defines mime type by providing real mime type or just extension!
911	Defines download file name and mime type from the name extension .
912	Defines class input stream as a target .
913	Defines class name as a target . Class will not be loaded by classloader!
914	Defines class as a target .
915	Reads the target and creates destination class .
916	Returns byte array of created class .
917	Defines class .
918	Creates new instance of created class . Assumes default no - arg constructor .
919	Writes created class content to output folder for debugging purposes .
920	Sets the FROM address by providing personal name and address .
921	Appends TO address .
922	Appends TO address by personal name and email address .
923	Appends REPLY - TO addresses .
924	Appends CC addresses .
925	Adds plain message text .
926	Adds HTML message .
927	Sets header value .
928	Returns system property . If key is not available returns the default value .
929	Returns system property as boolean .
930	Returns system property as an int .
931	Returns system property as a long .
932	Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
933	Serializes key and a value .
934	Lookups value as an alias and if not found as a default alias .
935	Returns resolved alias result value or passed on if alias doesn t exist .
936	Resolves result path .
937	Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
938	Locates last dot after the last slash or just slash .
939	Locates last index of dot after the optional last slash .
940	Locates first dot after the last slash .
941	Removes last CamelWord
942	Resolves schema name from a type . Uses default schema name if not specified .
943	Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
944	Initialize the cipher using the key and the tweak value .
945	Implementation of the MIX function .
946	Implementation of the un - MIX function .
947	Creates the subkeys .
948	Initializes cipher in a simple way .
949	Encrypts a block .
950	Converts segment of byte array into long array .
951	If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
952	Returns path value .
953	Compresses a file into zlib archive .
954	Compresses a file into gzip archive .
955	Decompress gzip archive .
956	Lists zip content .
957	Extracts zip file content to the target directory .
958	Adds single entry to ZIP output stream .
959	Adds byte content into the zip as a file .
960	Returns field descriptor .
961	Returns property descriptor . Declared flag is matched on both read and write methods .
962	Sets bundle name for provided servlet request .
963	Saves Locale to HTTP session .
964	Returns current locale from session . s
965	Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
966	Enables profiles to iterate .
967	Gets a long from a byte buffer in little endian byte order .
968	Reads the given input stream and returns its content as a byte array .
969	Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
970	Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
971	Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
972	Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
973	Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
974	Inspects all declared constructors of a target type .
975	Finds constructor description that matches given argument types .
976	Returns instance map from http request .
977	Creates instance map and stores it in the request .
978	Converts array value to array .
979	Initializes Decora filter . Loads manager and parser from init parameters .
980	Registers file consumer
981	Specifies the search path . Throws an exception if URI is invalid .
982	Specifies the search path . Throws an exception if URL is invalid .
983	Defines include patterns .
984	Defines exclude patterns .
985	Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
986	Finds all files and returns list of founded files .
987	Initializes file walking . Separates input files and folders .
988	Returns file walking iterator .
989	Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
990	Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
991	Returns a writer .
992	Returns a servlet output stream .
993	Returns the binary name of the class corresponding to this type . This method must not be used on method types .
994	Returns the descriptor corresponding to the given constructor .
995	Returns the descriptor corresponding to the given argument and return types .
996	Returns the descriptor corresponding to the given method .
997	Appends the descriptor corresponding to this type to the given string buffer .
998	Returns the size of values of this type . This method must not be used for method types .
999	Computes the size of the arguments and of the return value of a method .
1000	Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
1001	Performs either commit or rollback on all transaction resources .
1002	Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
1003	Requests a resource . If resource is not found it will be created and new transaction will be started on it .
1004	Writes stored name to JSON string . Cleans storage .
1005	Write a quoted and escaped value to the output .
1006	Writes unicode representation of a character .
1007	Appends char sequence to the buffer . Used for numbers nulls booleans etc .
1008	Sets parsing error log level as a name .
1009	Starts defining region by setting the start index and reset region length to zero .
1010	Returns true if attribute is containing some value .
1011	Registers pseudo function .
1012	Lookups pseudo function for given pseudo function name .
1013	Creates destination subclass header from current target class . Destination name is created from targets by adding a suffix and optionally a number . Destination extends the target .
1014	Copies all destination type annotations to the target .
1015	Creates static initialization block that simply calls all advice static init methods in correct order .
1016	Creates init method that simply calls all advice constructor methods in correct order . This created init method is called from each destination s constructor .
1017	Checks for all public super methods that are not overridden .
1018	Finds very last index of given element in inclusive index range . Returns negative value if element is not found .
1019	Returns chalked string .
1020	Returns the equivalent of the given class file with the ASM specific instructions replaced with standard ones . This is done with a ClassReader - &gt ; ClassWriter round trip .
1021	Returns the prototypes of the attributes used by this class its fields and its methods .
1022	Registers default set of SQL types .
1023	Registers sql type for provided type .
1024	Retrieves SQL type for provided type . All subclasses and interfaces are examined for matching sql type .
1025	Returns sql type instance . Instances are stored for better performances .
1026	Creates SOCKS4 proxy .
1027	Creates SOCKS5 proxy .
1028	Creates HTTP proxy .
1029	Returns total number of transactions associated with current thread .
1030	Returns total number of transactions of the specified status associated with current thread .
1031	Associate transaction to current thread .
1032	Check if propagation of a transaction is possible due to source and destination transaction modes .
1033	Lookups resource manager for provided type . Throws an exception if provider doesn t exists .
1034	Creates proxy object .
1035	Appends method name to existing path .
1036	Puts the text to the left and pads with spaces until the size is reached .
1037	Converts object into pretty string . All arrays are iterated .
1038	Converts separated string value to CamelCase .
1039	Formats provided string as paragraph .
1040	Converts all tabs on a line to spaces according to the provided tab width . This is not a simple tab to spaces replacement since the resulting indentation remains the same .
1041	Escapes a string using java rules .
1042	Unescapes a string using java rules .
1043	Returns Petite bean instance . Bean name will be resolved from provided type .
1044	Returns Petite bean instance . Petite container will find the bean in corresponding scope and all its dependencies either by constructor or property injection . When using constructor injection cyclic dependencies can not be prevented but at least they are detected .
1045	Resolves and initializes bean definition . May be called multiple times .
1046	Invokes provider to get a bean .
1047	Adds object instance to the container as singleton bean .
1048	Sets petite bean property .
1049	Returns petite bean property value .
1050	Shutdowns container . After container is down it can t be used anymore .
1051	Resolves method parameters from a method or constructor . Returns an empty array when target does not contain any parameter . No caching is involved in this process i . e . class bytecode is examined every time this method is called .
1052	Performs smart form population .
1053	Returns the property value with replaced macros .
1054	Finishes the tree building . Closes unclosed tags .
1055	Creates new element with correct configuration .
1056	Visits tags .
1057	Removes last child node if contains just empty text .
1058	Returns the query string .
1059	Returns correct action class name . Detects Proxetta classes .
1060	Calculates TO .
1061	Iterates collection .
1062	Iterates arrays .
1063	Replaces all occurrences of a certain pattern in a string with a replacement string . This is the fastest replace function known to author .
1064	Replaces all occurrences of a character in a string .
1065	Replaces all occurrences of a characters in a string .
1066	Replaces the very first occurrence of a substring with supplied string .
1067	Replaces the very first occurrence of a character in a string .
1068	Replaces the very last occurrence of a substring with supplied string .
1069	Replaces the very last occurrence of a character in a string .
1070	Removes all substring occurrences from the string .
1071	Removes a single character from string .
1072	Determines if string array contains empty strings .
1073	Determines if string array contains just blank strings .
1074	Converts an array object to array of strings where every element of input array is converted to a string . If input is not an array the result will still be an array with one element .
1075	Internal method for changing the first character case .
1076	Makes a title - cased string from given input .
1077	Compress multiple occurrences of given char into one appearance .
1078	Tests if this string starts with the specified prefix with ignored case and with the specified prefix beginning a specified index .
1079	Returns if string ends with provided character .
1080	Count substring occurrences in a source string ignoring case .
1081	Compares two string arrays .
1082	Returns first index of a whitespace character starting from specified index offset .
1083	Strips leading char if string starts with one .
1084	Strips trailing char if string ends with one .
1085	Strips leading and trailing char from given string .
1086	Strips everything up to the first appearance of given char . Character IS included in the returned string .
1087	Strips everything from the first appearance of given char . Character IS NOT included in the returned string .
1088	Crops all elements of string array .
1089	Trim whitespaces from the left .
1090	Trim whitespaces from the right .
1091	Returns indexes of the first region without escaping character .
1092	Joins an collection of objects into one string with separator .
1093	Joins an array of objects into one string with separator .
1094	Converts string charset . If charset names are the same the same string is returned .
1095	Safely compares provided char with char on given location .
1096	Surrounds the string with provided prefix and suffix if such missing from string .
1097	Inserts prefix if doesn t exist .
1098	Appends suffix if doesn t exist .
1099	Cuts the string from beginning to the first index of provided substring .
1100	Cuts the string from the first index of provided substring to the end .
1101	Cuts prefix if exists .
1102	Cuts sufix if exists .
1103	Removes surrounding prefix and suffixes .
1104	Inserts a string on provided offset .
1105	Creates a new string that contains the provided string a number of times .
1106	Reverse a string .
1107	Returns max common prefix of two strings .
1108	Finds common prefix for several strings . Returns an empty string if arguments do not have a common prefix .
1109	Shorten string to given length .
1110	Converts all of the characters in the string to upper case based on the locale .
1111	Removes starting and ending single or double quotes .
1112	Converts bytes to hex string .
1113	Returns String bytes using Jodds default encoding .
1114	Detects quote character or return 0 .
1115	Visits a primitive value of the annotation .
1116	Visits an enumeration value of the annotation .
1117	Visits a nested annotation value of the annotation .
1118	Registers just type and entity names . Enough for most usages .
1119	Registers entity . Existing entity will be removed if exist so no exception will be thrown .
1120	Removes entity and returns removed descriptor .
1121	Creates new entity instances .
1122	Defines the interface of the resulting class .
1123	Injects target into wrapper .
1124	Lookups for annotated properties . Caches all annotated properties on the first action class scan .
1125	Detects database and configure DbOom engine .
1126	Closes this output stream causing any buffered data to be flushed and any further output data to throw an IOException .
1127	Writes the specified byte to our output stream .
1128	Filters requests to remove URL - based session identifiers .
1129	Returns encoded attachment name .
1130	Returns byte content of the attachment .
1131	Saves attachment to a file .
1132	Saves attachment to the output stream .
1133	Appends argument to the existing description .
1134	Prepends argument to the existing description .
1135	Changes return type .
1136	Cleans unnecessary whitespaces .
1137	Registers a converter for specified type . User must register converter for all super - classes as well .
1138	Retrieves converter for provided type . Only registered types are matched therefore subclasses must be also registered .
1139	Selects nodes using CSS3 selector query .
1140	Selected nodes using pre - parsed CSS selectors . Take in consideration collection type for results grouping order .
1141	Process selectors and keep adding results .
1142	Selects nodes using CSS3 selector query and returns the very first one .
1143	Walks over the child notes maintaining the tree order and not using recursion .
1144	Finds nodes in the tree that matches single selector .
1145	Selects single node for single selector and appends it to the results .
1146	Filter nodes .
1147	Unpacks the compressed character translation table .
1148	Refills the input buffer .
1149	Pages given page .
1150	Removes the first select from the sql query .
1151	Removes the first part of the sql up to the relevant from . Tries to detect sub - queries in the select part .
1152	Removes everything from last order by .
1153	Decodes HTML text . Assumes that all character references are properly closed with semi - colon .
1154	Detects the longest character reference name on given position in char array .
1155	Appends ORDER BY keyword .
1156	Builds page sql using LIMIT keyword after the SELECT .
1157	Resolves list of all columns and properties .
1158	Finds column descriptor by column name . Case is ignored .
1159	Finds column descriptor by property name .
1160	Returns property name for specified column name .
1161	Returns column name for specified property name ..
1162	Returns ID value for given entity instance .
1163	Sets ID value for given entity .
1164	Returns unique key for this entity . Returned key is built from entity class and id value .
1165	Appends a string .
1166	Specifies the new index .
1167	Expands internal string array by multiplying its size by 2 .
1168	Calculates string length .
1169	Creates mixed scope message .
1170	Creates scoped proxy bean for given bean definition .
1171	Loops body .
1172	Initializes dir watcher by reading all files from watched folder .
1173	Accepts if a file is going to be watched .
1174	Enables usage of provided watch file .
1175	Starts the watcher .
1176	Triggers listeners on file change .
1177	Adds an enumeration to this composite .
1178	Returns the size of the field_info JVMS structure generated by this FieldWriter . Also adds the names of the attributes of this field in the constant pool .
1179	Puts the content of the field_info JVMS structure generated by this FieldWriter into the given ByteVector .
1180	Creates a common target over a value with known scope data .
1181	Writes value to this target . Depending on a flag writing the value can be completely silent when no exception is thrown and with top performances . Otherwise an exception is thrown on a failure .
1182	Decorates page content with decorator template and outputs the result .
1183	Parses target page and extracts Decora regions for replacements .
1184	Writes decorated content .
1185	Writes region to output but extracts all inner regions .
1186	Starts HTTP tunnel . Method ends when the tunnel is stopped .
1187	Executes a process and returns the process output and exit code .
1188	Returns email store .
1189	Creates and returns a ServletOutputStream to write the content associated with this Response .
1190	Counts actual real hints .
1191	Appends alias .
1192	Simply appends column name with optional table reference and alias .
1193	Adds a rule . Duplicates are not allowed and will be ignored .
1194	Applies rules on given flag . Flag is only changed if at least one rule matched . Otherwise the same value is returned . This way you can chain several rules and have the rule engine change the flag only when a rule is matched .
1195	Process includes rules .
1196	Process excludes rules .
1197	Returns pseudo - class name from simple class name .
1198	Add all of the elements in the given collection to this list .
1199	Conducts a binary search to find the index where Object should be inserted .
1200	Binds action annotation and the action config . This can overwrite the default annotation configuration of an annotation .
1201	Registers action configuration for given type .
1202	Lookup for the action configuration . Typically the input argument is either the action type or annotation type .
1203	Fetch some action config and consumes it .
1204	Setups the system email properties .
1205	Validates provided context and value withing this constraint content .
1206	Finds the last table in stack of open elements .
1207	Performs the fix for elements .
1208	Registers new session destroy callback if not already registered .
1209	Returns instance map from http session .
1210	Work data initialization .
1211	Saves used constructors of advices .
1212	Called on end of parsing .
1213	Adds accumulated value to key and current section .
1214	Extracts profiles from the key name and adds key - value to them .
1215	Core key - value addition .
1216	Converts bytecode - like description to java class name that can be loaded with a classloader . Uses less - known feature of class loaders for loading array classes .
1217	Converts type reference to java - name .
1218	Returns java - like signature of a bytecode - like description . Only first description is parsed .
1219	Converts type to byteccode type ref .
1220	Registers additional consumers .
1221	Creates new collection of target component type . Default implementation uses reflection to create an collection of target type . Override it for better performances .
1222	Creates a collection with single element .
1223	Converts non - collection value to collection .
1224	Converts collection value to target collection . Each element is converted to target component type .
1225	Converts primitive array to target collection .
1226	Adds a source line number corresponding to this label .
1227	Makes the given visitor visit this label and its source line numbers if applicable .
1228	Puts a reference to this label in the bytecode of a method . If the bytecode offset of the label is known the relative bytecode offset between the label and the instruction referencing it is computed and written directly . Otherwise a null relative offset is written and a new forward reference is declared for this label .
1229	Adds a forward reference to this label . This method must be called only for a true forward reference i . e . only if this label is not resolved yet . For backward references the relative bytecode offset of the reference can be and must be computed and stored directly .
1230	Sets the bytecode offset of this label to the given value and resolves the forward references to this label if any . This method must be called when this label is added to the bytecode of the method i . e . when its bytecode offset becomes known . This method fills in the blanks that where left in the bytecode by each forward reference previously added to this label .
1231	Finds the basic blocks that belong to the subroutine starting with the basic block corresponding to this label and marks these blocks as belonging to this subroutine . This method follows the control flow graph to find all the blocks that are reachable from the current basic block WITHOUT following any jsr target .
1232	Finds the basic blocks that end a subroutine starting with the basic block corresponding to this label and for each one of them adds an outgoing edge to the basic block following the given subroutine call . In other words completes the control flow graph by adding the edges corresponding to the return from this subroutine when called from the given caller basic block .
1233	Compare digits at certain position in two strings . The longest run of digits wins . That aside the greatest value wins .
1234	Fixes accent char .
1235	Puts a byte into this byte vector . The byte vector is automatically enlarged if necessary .
1236	Puts two bytes into this byte vector . The byte vector is automatically enlarged if necessary .
1237	Puts a short into this byte vector . The byte vector is automatically enlarged if necessary .
1238	Puts a byte and a short into this byte vector . The byte vector is automatically enlarged if necessary .
1239	Puts two bytes and a short into this byte vector . The byte vector is automatically enlarged if necessary .
1240	Puts an int into this byte vector . The byte vector is automatically enlarged if necessary .
1241	Puts one byte and two shorts into this byte vector . The byte vector is automatically enlarged if necessary .
1242	Puts a long into this byte vector . The byte vector is automatically enlarged if necessary .
1243	Puts an array of bytes into this byte vector . The byte vector is automatically enlarged if necessary .
1244	Enlarges this byte vector so that it can receive size more bytes .
1245	Tries to authenticate user via HTTP session . Returns the token if user is authenticated . Returned token may be rotated .
1246	Tries to authenticate user via token . Returns the token if user is authenticated . Returned token may be rotated .
1247	Tires to authenticate user via the basic authentication . Returns the token if user is authenticated .
1248	Finds message in default bundles only starting from fallback bundlename .
1249	Returns specified bundle . Invoked every time if cache is disabled . Input arguments are always valid .
1250	Returns array s element at given index .
1251	Sets new ID value for entity .
1252	Simply inserts object into the database .
1253	Updates single entity .
1254	Updates single property in database and in the bean .
1255	Updates property in the database by storing the current property value .
1256	Finds single entity by its id .
1257	Finds single entity by matching property .
1258	Finds one entity for given criteria .
1259	Deleted single entity by its id .
1260	Delete single object by its id . Resets ID value .
1261	Counts number of all entities .
1262	Increases a property .
1263	Decreases a property .
1264	Finds related entity .
1265	List all entities .
1266	Removes all attributes from the request as well as clears entries in this map .
1267	Returns a Set of attributes from the http request .
1268	Saves an attribute in the request .
1269	Removes the specified request attribute .
1270	Returns current stack trace in form of array of stack trace elements . First stack trace element is removed . Since an exception is thrown internally this method is slow .
1271	Returns stack trace filtered by class names .
1272	Returns stack trace chain filtered by class names .
1273	Returns exception chain starting from top up to root cause .
1274	Prints stack trace into a String .
1275	Prints full exception stack trace from top to root cause into a String .
1276	Build a message for the given base message and its cause .
1277	Unwraps invocation and undeclared exceptions to real cause .
1278	Parses class name that matches madvoc - related names .
1279	Registers new Madvoc component .
1280	Returns system class loader .
1281	Opens a resource of the specified name for reading .
1282	Opens a resource of the specified name for reading . Controls caching that is important when the same jar is reloaded using custom classloader .
1283	Opens a class of the specified name for reading using class classloader .
1284	Opens a class of the specified name for reading using provided class loader .
1285	Adds a new child to the tree .
1286	Finds existing chunk or creates a new one if does not exist .
1287	Checks if request if multi - part and parse it . If request is not multi - part it copies all parameters to make usage the same in both cases .
1288	Converter to collection .
1289	Invokes setter but first converts type to match the setter type .
1290	Sets the array element forced . If index is greater then arrays length array will be expanded to the index . If speed is critical it is better to allocate an array with proper size before using this method .
1291	Creates new instance for current property name through its setter . It uses default constructor!
1292	Extracts type of current property .
1293	Stops the user session by removing it from the http session and invalidating the cookie .
1294	Starts new user session .
1295	Converts local date to Date .
1296	Converts local date time to Calendar .
1297	Generates new class .
1298	Adds validation checks .
1299	Resolve validation context for provided target class .
1300	Parses class annotations and adds all checks .
1301	Process all annotations of provided properties .
1302	Collect annotations for some target .
1303	Copies default properties from annotation to the check .
1304	Encodes single URI component .
1305	Encodes string using default RFCP rules .
1306	Encodes the given URI scheme with the given encoding .
1307	Encodes the given URI host with the given encoding .
1308	Encodes the given URI port with the given encoding .
1309	Encodes the given URI path with the given encoding .
1310	Encodes the given URI query with the given encoding .
1311	Encodes the given URI query parameter with the given encoding .
1312	Encodes the given URI fragment with the given encoding .
1313	Inspects all properties of target type .
1314	Returns all property descriptors . Properties are sorted by name .
1315	Returns list of valid cookies sent from server . If no cookie found returns an empty array . Invalid cookies are ignored .
1316	Unzips GZip - ed body content removes the content - encoding header and sets the new content - length value .
1317	Closes requests connection if it was open . Should be called when using keep - alive connections . Otherwise connection will be already closed .
1318	Defines allowed referenced scopes that can be injected into the thread - local scoped bean .
1319	Prints routes to console .
1320	Encrypts complete content block by block .
1321	Decrypts the whole content block by block .
1322	Converts map to target type .
1323	Converts type of all list elements to match the component type .
1324	Sets the property value .
1325	Change map elements to match key and value types .
1326	Compares two column descriptors . Identity columns should be the first on the list . Each group then will be sorted by column name .
1327	Adds default header to all requests .
1328	Sends new request as a browser . Before sending all browser cookies are added to the request . After sending the cookies are read from the response . Moreover status codes 301 and 302 are automatically handled . Returns very last response .
1329	Opens connection and sends a response .
1330	Add default headers to the request . If request already has a header set default header will be ignored .
1331	Reads cookies from response and adds to cookies list .
1332	Add cookies to the request .
1333	Prepares message and sends it . Returns Message ID of sent email .
1334	Sets subject in msgToSet from subject in emailWithData .
1335	Sets sent date in msgToSet with sent date from emailWithData .
1336	Sets headers in msgToSet with headers from emailWithData .
1337	Sets FROM REPLY - TO and recipients .
1338	Sets TO CC and BCC in msgToSet with TO CC and BCC from emailWithData .
1339	Adds message data and attachments .
1340	Sets emailWithData content into msgToSet .
1341	Creates attachment body part . Handles regular and inline attachments .
1342	Strips content type information from requests data header .
1343	Stores result set .
1344	Closes all result sets created by this query . Query remains active .
1345	Closes all assigned result sets and then closes the query . Query becomes closed .
1346	Closes the query and all created results sets and detaches itself from the session .
1347	Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed . The number of rows specified affects only result sets created using this statement . If the value specified is zero then the hint is ignored . The default value is zero .
1348	Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number . If the limit is exceeded the excess rows are silently dropped . Zero means there is no limit .
1349	Executes UPDATE INSERT or DELETE queries and optionally closes the query .
1350	Executes count queries and optionally closes query afterwards .
1351	Returns generated columns .
1352	Returns query SQL string . For prepared statements returned sql string with quick - and - dirty replaced values .
1353	Creates a proxy of given target and the aspect .
1354	Returns a collection containing all elements of the iterator .
1355	Converts iterator to a stream .
1356	Compares two objects starting with first comparator ; if they are equals proceeds to the next comparator and so on .
1357	Specifies default wiring mode .
1358	Prints error message if level is enabled .
1359	Returns called class .
1360	Returns shorten class name .
1361	Excludes types . Supports interfaces and subclasses as well .
1362	Serializes object into provided appendable .
1363	Serializes object into source .
1364	Create object copy using serialization mechanism .
1365	Writes serializable object to a file . Existing file will be overwritten .
1366	Reads serialized object from the file .
1367	Serialize an object to byte array .
1368	De - serialize an object from byte array .
1369	Resolved mapped type names for each type .
1370	Creates table names for given types .
1371	Reads column value from result set . Since this method may be called more then once for the same column it caches column values .
1372	Caches returned entities . Replaces new instances with existing ones .
1373	Resolves all providers in the class
1374	Applies table naming strategy to given table name hint . Returns full table name .
1375	Checks if existing connection is valid and available . It may happens that if connection is not used for a while it becomes inactive although not technically closed .
1376	Renders the view by dispatching to the target JSP .
1377	Locates target using path with various extensions appended .
1378	Returns buffered writer if buffering is enabled otherwise returns the original writer .
1379	Returns buffered output stream if buffering is enabled otherwise returns the original stream .
1380	Writes content to original output stream using either output stream or writer depending on how the content was buffered . It is assumed that provided content is a modified wrapped content .
1381	Sets the content type and enables or disables buffering .
1382	Appends string to the buffer .
1383	Authenticate user and start user session .
1384	Prepares the JSON payload that carries on the token value .
1385	Tries to login user with basic authentication .
1386	Logout hook .
1387	Returns a file of either a folder or a containing archive .
1388	Creates all directories at once .
1389	Creates single directory .
1390	Internal file copy when most of the pre - checking has passed .
1391	Copies directory with specified copy params .
1392	Moves a file to a directory .
1393	Moves a directory .
1394	Cleans a directory without deleting it .
1395	Reads UTF file content as char array .
1396	Reads file content as char array .
1397	Write characters . append = false
1398	Writes String . append = false
1399	Appends String . append = true
1400	Read file and returns byte array with contents .
1401	Write bytes . append = false
1402	Appends bytes . append = true
1403	Smart copy . If source is a directory copy it to destination . Otherwise if destination is directory copy source file to it . Otherwise try to copy source file to destination file .
1404	Smart delete of destination file or directory .
1405	Creates temporary directory .
1406	Checks the start of the file for ASCII control characters
1407	Checks that srcDir exists that it is a directory and if srcDir and destDir are not equal .
1408	Checks that file copy can occur .
1409	Prints the usage line .
1410	Resolves action method for given action class ane method name .
1411	Registers action with provided action class and method name .
1412	Registers new path alias .
1413	Iterates to next value at the beginning of the loop .
1414	Static constructor that creates a char sequence by making a copy of provided char array .
1415	Looks up for method in target object and invokes it using reflection .
1416	Matches char buffer given in uppercase with content at current location that will be converted to upper case to make case - insensitive matching .
1417	Creates char sub - sequence from the input .
1418	Returns urls for the classloader .
1419	Appends one or more BCC addresses .
1420	Registers new serializer .
1421	Get type serializer from map . First the current map is used . If element is missing default map will be used if exist .
1422	Extracts uploaded files and parameters from the request data .
1423	Returns single value of a parameter . If parameter name is used for more then one parameter only the first one will be returned .
1424	Returns all values all of the values the given request parameter has .
1425	Returns uploaded file .
1426	Returns all uploaded files the given request parameter has .
1427	Place this filter into service .
1428	Parses template and returns generated sql builder .
1429	Finds macros end .
1430	Count escapes to the left .
1431	Builds a query string from given query map .
1432	Parses query from give query string . Values are optionally decoded .
1433	Makes nice header names .
1434	Extracts media - type from value of Content Type header .
1435	Renders node to appendable .
1436	Renders node children to appendable .
1437	Configures Madvoc by reading context init parameters .
1438	Resets JSON parser so it can be reused .
1439	Defines how JSON parser works . In non - lazy mode the whole JSON is parsed as it is . In the lazy mode not everything is parsed but some things are left lazy . This way we gain performance especially on partial usage of the whole JSON . However be aware that parser holds the input memory until the returned objects are disposed .
1440	Replaces type with mapped type for current path .
1441	Parses input JSON to a list with specified component type .
1442	Parses input JSON to a list with specified key and value types .
1443	Resolves lazy value during the parsing runtime .
1444	Skips over complete object . It is not parsed just skipped . It will be parsed later but only if required .
1445	Parses a string .
1446	Parses string content once when starting quote has been consumed .
1447	Parses 4 characters and returns unicode character .
1448	Parses un - quoted string content .
1449	Parses JSON numbers .
1450	Parses arrays once when open bracket has been consumed .
1451	Created empty default constructor .
1452	Creates simple method wrapper without proxy .
1453	Resolves raw type name using the generics information from the class or method information .
1454	Resolves reference from given values . Returns bean reference of given value or defaults if given name is blank .
1455	Takes given parameters references and returns reference set for given method or constructor .
1456	Extracts references from method or constructor annotation .
1457	Builds default method references .
1458	Builds default field references .
1459	Removes duplicate names from bean references .
1460	Converts single string array to an array of bean references .
1461	Converts comma - separated string into array of Bean references .
1462	Runs JOY in standalone mode with only backend .
1463	Returns method from an object matched by name . This may be considered as a slow operation since methods are matched one by one . Returns only accessible methods . Only first method is matched .
1464	Finds constructor with given parameter types . First matched ctor is returned .
1465	Resolves all interfaces of a type . No duplicates are returned . Direct interfaces are prior the interfaces of subclasses in the returned array .
1466	Compares classes usually method or ctor parameters .
1467	Suppress access check against a reflection object . SecurityException is silently ignored . Checks first if the object is already accessible .
1468	Creates new instance of given class with given optional arguments .
1469	Returns all superclasses .
1470	Returns the class of the immediate subclass of the given parent class for the given object instance ; or null if such immediate subclass cannot be uniquely identified for the given object instance .
1471	Returns the jar file from which the given class is loaded ; or null if no such jar file can be located .
1472	Puts a thread to sleep without throwing an InterruptedException .
1473	Puts a thread to sleep forever .
1474	Waits for a object for synchronization purposes .
1475	Creates new daemon thread factory .
1476	Returns the value . Value will be computed on first call .
1477	Visits a parameter of this method .
1478	Visits an annotation of this method .
1479	Visits an annotation on a type in the method signature .
1480	Visits an annotation of a parameter this method .
1481	Visits a field instruction . A field instruction is an instruction that loads or stores the value of a field of an object .
1482	Visits a method instruction . A method instruction is an instruction that invokes a method .
1483	Visits an invokedynamic instruction .
1484	Visits a jump instruction . A jump instruction is an instruction that may jump to another instruction .
1485	Visits a MULTIANEWARRAY instruction .
1486	Visits a try catch block .
1487	Visits an annotation on a local variable type .
1488	Convert Java Properties to Jodd Props format
1489	Reads data from input stream into byte array and stores file size .
1490	Returns next mapped object .
1491	Moves to next element .
1492	Joins arrays . Component type is resolved from the array argument .
1493	Joins arrays using provided component type .
1494	Resizes an array .
1495	Appends an element to array .
1496	Removes sub - array .
1497	Finds the first occurrence of an element in an array .
1498	Finds the first occurrence in an array .
1499	Finds the first occurrence in an array from specified given position .
1500	Enables XHTML mode .
1501	Creates DOM tree from provided content .
1502	Parses the content using provided lagarto parser .
1503	Computes the maximum stack size of the method .
1504	Ends the current basic block . This method must be used in the case where the current basic block does not have any successor .
1505	Collects the attributes of this method into the given set of attribute prototypes .
1506	Inject context into target .
1507	Registers pseudo class .
1508	Lookups pseudo class for given pseudo class name .
1509	Invokes an action asynchronously by submitting it to the thread pool .
1510	Returns all bean property names .
1511	Starts visiting properties .
1512	Compares property name to the rules .
1513	Resolve method injection points in given class .
1514	Reads filter config parameters and set into destination target .
1515	Outputs bundle file to the response .
1516	Lookups for bundle file .
1517	Locates gzipped version of bundle file . If gzip file does not exist it will be created .
1518	Registers new bundle that consist of provided list of source paths . Returns the real bundle id as provided one is just a temporary bundle id .
1519	Creates digest i . e . bundle id from given string . Returned digest must be filename safe for all platforms .
1520	Creates bundle file by loading resource files content . If bundle file already exist it will not be recreated!
1521	Clears all settings and removes all created bundle files from file system .
1522	Returns the content with all relative URLs fixed .
1523	Reads property value and updates the DB .
1524	Creates table reference name from entity type . Always appends an underscore to reference name in order to circumvent SQL compatibility issues when entity class name equals to a reserved word .
1525	Returns session from JTX transaction manager and started transaction .
1526	Creates an array with single element .
1527	Parses signature for generic information and returns a map where key is generic name and value is raw type . Returns an empty map if signature does not define any generics .
1528	Resolves all collections for given type .
1529	Matches property types that are ignored by default .
1530	Opens connection in auto - commit mode if already not opened .
1531	Opens a transaction .
1532	Closes current transaction .
1533	Commit the current transaction writing any unflushed changes to the database . Transaction mode is closed .
1534	Roll back the current transaction . Transaction mode is closed .
1535	Create properties from the file .
1536	Creates properties from string .
1537	Loads properties from string .
1538	Creates new Properties object from the original one by copying those properties that have specified first part of the key name . Prefix may be optionally stripped during this process .
1539	Creates properties from classpath .
1540	Returns String property from a map .
1541	Resolves all variables .
1542	Returns property with resolved variables .
1543	Resolves tx scope from scope pattern .
1544	Reads transaction mode from method annotation . Annotations are cached for better performances .
1545	Registers new TX annotations .
1546	Finds TX annotation .
1547	Accepts single node .
1548	Matches element to css selector . All non - element types are ignored .
1549	Accepts node within current results .
1550	Unescapes CSS string by removing all backslash characters from it .
1551	Builds a set of java core packages .
1552	Copies all non - final values to the empty cloned object . Cache - related values are not copied .
1553	Removes this node from DOM tree .
1554	Appends several child nodes at once . Reindex is done only once after all children are added .
1555	Inserts node at given index .
1556	Inserts node before provided node .
1557	Inserts several child nodes before provided node .
1558	Inserts node after provided node .
1559	Inserts several child nodes after referent node .
1560	Removes all child nodes . Each child node will be detached from this parent .
1561	Finds the first child node with given node name .
1562	Filters child nodes .
1563	Checks the health of child nodes . Useful during complex tree manipulation to check if everything is OK . Not optimized for speed should be used just for testing purposes .
1564	Initializes list of child elements .
1565	Initializes siblings elements of the same name .
1566	Initializes child nodes list when needed . Also fix owner document for new node if needed .
1567	Changes owner document for given node and all its children .
1568	Returns this node s previous sibling element with the same name .
1569	Returns the text content of this node and its descendants .
1570	Generates HTML .
1571	Generates inner HTML .
1572	Visits children nodes .
1573	Returns CSS path to this node from document root .
1574	Handle Decora tags .
1575	Handle open and empty ID attribute tags .
1576	Defines Decora tag position inside decorator content . Resets current Decora tag tracking .
1577	Adds a proxy aspect .
1578	Adds root package and its path mapping . Duplicate root packages are ignored if mapping path is equals otherwise exception is thrown .
1579	Sets root package to package of given class .
1580	Finds closest root package for the given action path .
1581	Prepares validation messages . Key is either validation constraint class name or violation name .
1582	Removes later duplicated references in an array . Returns new instance of BeanReferences if there was changes otherwise returns the same instance .
1583	Adds props files or patterns .
1584	Iterates all targets .
1585	Iterates all targets and for each target iterates all IN injection points of given scope .
1586	Iterates all targets and for each target iterates all OUT injection points of given scope .
1587	Collects all parameters from target into an array .
1588	Joins action and parameters into one single array of Targets .
1589	Creates action method arguments .
1590	Stores session in map and broadcasts event to registered listeners .
1591	Removes session from a map and broadcasts event to registered listeners .
1592	Adds an object to the JSON array .
1593	Appends all of the elements in the specified array to the end of this JSON array .
1594	Removes the value at the specified position in the JSON array .
1595	Locates the target file from action path and the result value .
1596	Called when target not found . By default sends 404 to the response .
1597	Converts value to a string .
1598	Returns action filter instance for further configuration .
1599	Returns pseudo - function name .
1600	Resolves all properties for given type .
1601	Connects to the SOCKS4 proxy and returns proxified socket .
1602	Returns the number of attributes of the attribute list that begins with this attribute .
1603	Returns all action results as new set .
1604	Match if one character equals to any of the given character .
1605	Finds index of the first character in given charsequence the matches any from the given set of characters .
1606	Finds index of the first character in given array the matches any from the given set of characters .
1607	Adds several arguments .
1608	Sets environment variable .
1609	Runs command and returns process result .
1610	Invoke the listener based on type . Not very OOP but works .
1611	Sets this frame to the value of the given frame .
1612	Returns the abstract type corresponding to the given public API frame element type .
1613	Returns the abstract type corresponding to the given type descriptor .
1614	Sets the input frame from the given public API frame description .
1615	Returns the abstract type stored at the given local variable index in the output frame .
1616	Replaces the abstract type stored at the given local variable index in the output frame .
1617	Pushes the given abstract type on the output frame stack .
1618	Pushes the abstract type corresponding to the given descriptor on the output frame stack .
1619	Pops the given number of abstract types from the output frame stack .
1620	Pops as many abstract types from the output frame stack as described by the given descriptor .
1621	Adds an abstract type to the list of types on which a constructor is invoked in the basic block .
1622	Returns the initialized abstract type corresponding to the given abstract type .
1623	Put the given abstract type in the given ByteVector using the JVMS verification_type_info format used in StackMapTable attributes .
1624	Prunes expired elements from the cache . Returns the number of removed objects .
1625	Schedules prune .
1626	Visit the module corresponding to the class .
1627	Visits the nest host class of the class . A nest is a set of classes of the same package that share access to their private members . One of these classes called the host lists the other members of the nest which in turn should link to the host of their nest . This method must be called only once and only if the visited class is a non - host member of a nest . A class is implicitly its own nest so it s invalid to call this method with the visited class name as argument .
1628	Visits the enclosing class of the class . This method must be called only if the class has an enclosing class .
1629	Visits an annotation of the class .
1630	Visits a member of the nest . A nest is a set of classes of the same package that share access to their private members . One of these classes called the host lists the other members of the nest which in turn should link to the host of their nest . This method must be called only if the visited class is the host of a nest . A nest host is implicitly a member of its own nest so it s invalid to call this method with the visited class name as argument .
1631	Visits information about an inner class . This inner class is not necessarily a member of the class being visited .
1632	Visits a field of the class .
1633	Returns existing thread session or new one if already not exist . If session doesn t exist it will be created using default connection provider .
1634	Closes thread session .
1635	Creates execution array that will invoke all filters actions and results in correct order .
1636	Invokes action method after starting all interceptors . After method invocation all interceptors will finish in opposite order .
1637	Reads request body only once and returns it to user .
1638	Calculates the first item index of requested page .
1639	Calculates first item index of the page .
1640	Matches expression with the value .
1641	Converts char array into byte array by replacing each character with two bytes .
1642	Finds index of the first character in given array the differs from the given set of characters .
1643	Renders node name .
1644	Renders attribute name .
1645	Renders attribute .
1646	Loads props from the file . Assumes UTF8 encoding unless the file ends with . properties than it uses ISO 8859 - 1 .
1647	Loads properties from the file in provided encoding .
1648	Loads properties from input stream . Stream is not closed at the end .
1649	Loads base properties from the provided java properties . Null values are ignored .
1650	Loads base properties from java Map using provided prefix . Null values are ignored .
1651	Loads props and properties from the classpath .
1652	Returns value of property using active profiles or default value if not found .
1653	Sets value on some profile .
1654	Extracts props belonging to active profiles .
1655	Extract props of given profiles .
1656	Extracts subset of properties that matches given wildcards .
1657	Returns inner map from the props with given prefix . Keys in returned map will not have the prefix .
1658	Adds child map to the props on given prefix .
1659	Resolves active profiles from special property . This property can be only a base property! If default active property is not defined nothing happens . Otherwise it will replace currently active profiles .
1660	Returns all profiles names .
1661	Returns all the profiles that define certain prop s key name . Key name is given as a wildcard or it can be matched fully .
1662	Adds property injection point .
1663	Adds set injection point .
1664	Adds method injection point .
1665	Adds init methods .
1666	Adds destroy methods .
1667	Returns target class if proxetta applied on given class . If not returns given class as result .
1668	Injects target instance into proxy using default target field name .
1669	Returns wrapper target type .
1670	Locates property field . Field is being searched also in all superclasses of current class .
1671	Returns property type . Raw types are detected .
1672	Resolves key type for given property descriptor .
1673	Resolves component type for given property descriptor .
1674	Creates JSON result from given object . The object will be serialized to JSON .
1675	Creates a JSON response from an exception . Response body will have information about the exception and response status will be set to 500 .
1676	Resolves HTTP method name from method name . If method name or first camel - case word of a method equals to a HTTP method it will be used as that HTTP methods .
1677	Internal matching recursive function .
1678	Resolves loading rules .
1679	Resolves resources .
1680	Loads class using parent - first or parent - last strategy .
1681	Returns a resource using parent - first or parent - last strategy .
1682	Waits for gobbler to end .
1683	Scans annotation and returns type of Madvoc annotations .
1684	Builds injection point .
1685	Visits a type .
1686	Returns urls for the classloader
1687	Sets new bean instance .
1688	Updates the bean . Detects special case of suppliers .
1689	Loads property descriptor if property was updated .
1690	Returns getter .
1691	Returns setter .
1692	Initializes the DbOom by connecting to the database . Database will be detected and DbOom will be configured to match it .
1693	Adds an iterator to this composite .
1694	Prints a logo .
1695	Stops the Joy .
1696	Creates a socket using socket factory .
1697	Creates a SSL socket . Enables default secure enabled protocols if specified .
1698	Returns default SSL socket factory allowing setting trust managers .
1699	Returns socket factory based on proxy type and SSL requirements .
1700	Creates random string whose length is the number of characters specified . Characters are chosen from the set of characters specified .
1701	Creates random string whose length is the number of characters specified . Characters are chosen from the provided range .
1702	Creates random string whose length is the number of characters specified . Characters are chosen from the multiple sets defined by range pairs . All ranges must be in acceding order .
1703	Creates new type for JSON array objects . It returns a collection . Later the collection will be converted into the target type .
1704	Injects value into the targets property .
1705	Converts type of the given value .
1706	Visit an implementation of a service .
1707	Creates default implementation of the type cache .
1708	Add values to the map .
1709	Returns all methods . Cached . Lazy .
1710	Resolves IP address from a hostname .
1711	Returns IP address as integer .
1712	Checks given string against IP address v4 format .
1713	Resolves host name from IP address bytes .
1714	Downloads resource as byte array .
1715	Downloads resource as String .
1716	Downloads resource to a file potentially very efficiently .
1717	Performs injection .
1718	Performs outjection .
1719	Creates a socket .
1720	Creates a socket with a timeout .
1721	Detects if provided class name is a primitive type . Returns > = 0 number if so .
1722	Loads class by name .
1723	Loads array class using component type .
1724	Iterate all beans and invokes registered destroy methods .
1725	Creates binary search wrapper over an array .
1726	Creates binary search wrapper over an array with given comparator .
1727	Defines excluded property names .
1728	Defines included property names .
1729	Defines included property names as public properties of given template class . Sets to black list mode .
1730	Starts the tag with the index of first < . Resets all tag data .
1731	Registers Madvoc component with given name .
1732	Resolves column db sql type and populates it in column descriptor if missing .
1733	Pre - process SQL before using it . If string starts with a non - ascii char or it has no spaces it will be loaded from the query map .
1734	Factory for result sets mapper .
1735	Finds generated key column of given type .
1736	Populates entity with generated column values from executed query .
1737	Acquires interceptor from Petite container .
1738	Sets bean parameters from bean . Non - existing bean properties are ignored .
1739	Sets properties from the map .
1740	Sets an array of objects parameters in given order .
1741	Appends chunk to previous one and maintains the double - linked list of the previous chunk . Current surrounding connections of this chunk will be cut - off .
1742	Lookups for entity name and throws an exception if entity type is invalid .
1743	Finds a table that contains given column .
1744	Resolves table name or alias that will be used in the query .
1745	Resolves object to a class .
1746	Appends missing space if the output doesn t end with whitespace .
1747	Get an enumeration of the parameter names for uploaded files
1748	Include page which path is relative to the current HTTP request .
1749	Returns url without context path convenient for request dispatcher .
1750	Get current request uri .
1751	Returns method parameter names .
1752	Creates and initializes Petite container . It will be auto - magically configured by scanning the classpath .
1753	Stops Petite container .
1754	Defines filter for SUBJECT field .
1755	Defines filter for message id .
1756	Defines filter for FROM field .
1757	Defines filter for TO field .
1758	Defines filter for CC field .
1759	Defines filter for BCC field .
1760	Defines filter for many flags at once .
1761	Defines filter for single flag .
1762	Defines filter for received date .
1763	Defines filter for sent date .
1764	Defines filter for message size .
1765	Defines AND group of filters .
1766	Defines OR group of filters .
1767	Appends single filter as NOT .
1768	Concatenates last search term with new one .
1769	Encode an array of binary bytes into a Base32 string .
1770	Converts non - array value to array . Detects various types and collections iterates them to make conversion and to create target array .
1771	Determine if request is eligible for GZipping .
1772	Validate object using context from the annotations .
1773	Performs validation of provided validation context and appends violations .
1774	Enables single profile .
1775	Enables list of profiles .
1776	Determine if any of checks profiles is among enabled profiles .
1777	Parses request body into the target type .
1778	Converts to milliseconds .
1779	Adds a JD to current instance .
1780	Subtracts a JD from current instance .
1781	Sets integer and fractional part with normalization . Normalization means that if double is out of range values will be correctly fixed .
1782	Initializes parser .
1783	Emits a comment . Also checks for conditional comments!
1784	Prepares error message and reports it to the visitor .
1785	Returns a salted PBKDF2 hash of the password .
1786	Computes the PBKDF2 hash of a password .
1787	Converts a string of hexadecimal characters into a byte array .
1788	Resolves provider definition defined in a bean .
1789	Sets file name .
1790	Set content ID if it is missing .
1791	Resolves content type from all data .
1792	Parses a JavaTypeSignature and makes the given visitor visit it .
1793	Returns the size of the Module ModulePackages and ModuleMainClass attributes generated by this ModuleWriter . Also add the names of these attributes in the constant pool .
1794	Puts the Module ModulePackages and ModuleMainClass attributes generated by this ModuleWriter in the given ByteVector .
1795	Decodes URL elements . This method may be used for all parts of URL except for the query parts since it does not decode the + character .
1796	Decodes query name or value .
1797	Initializes database . First creates connection pool . and transaction manager . Then Jodds DbEntityManager is configured . It is also configured automagically by scanning the class path for entities .
1798	Checks if connection provider can return a connection .
1799	Stores method signature for target method .
1800	Stores signatures for all super public methods not already overridden by target class . All this methods will be accepted for proxyfication .
1801	Creates method signature from method name .
1802	Parse fields as csv string
1803	Converts CSV line to string array .
1804	Resolves constructor injection point from type . Looks for single annotated constructor . If no annotated constructors found the total number of constructors will be checked . If there is only one constructor that one will be used as injection point . If more constructors exist the default one will be used as injection point . Otherwise exception is thrown .
1805	Creates advice s class reader .
1806	Returns class reader for advice .
1807	Symmetrically encrypts the string .
1808	Symmetrically decrypts the string .
1809	Returns logger for given name . Repeated calls to this method with the same argument should return the very same instance of the logger .
1810	Sets the cookie name and checks for validity .
1811	Creates new action request .
1812	Acquires filter from Petite container .
1813	Removes destroyable bean from the list and calls it destroy methods . If bean is not destroyable does nothing . Bean gets destroyed only once .
1814	Shutdowns the scope and calls all collected destroyable beans .
1815	Receives the emails as specified by the builder .
1816	Launch the clustered service container and await a shutdown signal .
1817	Run loop for the rate reporter
1818	Generic error handler that just prints message to stdout .
1819	Print the rates to stdout
1820	Map an existing file as a read only buffer .
1821	Close the merge and stop any active replay . Will remove the replay destination from the subscription . Will NOT remove the live destination if it has been added .
1822	Process the operation of the merge . Do not call the processing of fragments on the subscription .
1823	Get the current position to which the publication has advanced for this stream .
1824	Non - blocking publish by gathering buffer vectors into a message .
1825	Append a padding record log of a given length to make up the log to a position .
1826	Notify the archive that this control session is closed so it can promptly release resources then close the local resources associated with the client .
1827	Poll the response stream once for an error . If another message is present then it will be skipped over so only call when not expecting another response .
1828	Stop a replay session .
1829	Print the information for an available image to stdout .
1830	This handler is called when image is unavailable
1831	Return the read - only status indicator for the given send channel URI .
1832	Return the read - only status indicator for the given receive channel URI .
1833	Set this limit for this buffer as the position at which the next append operation will occur .
1834	Append a source buffer to the end of the internal buffer resizing the internal buffer as required .
1835	Poll for control response events .
1836	Map a new loss report in the Aeron directory for a given length .
1837	Take a snapshot of all the counters and group them by streams .
1838	Return an initialised default Data Frame Header .
1839	Fill the key buffer .
1840	Fill the label buffer .
1841	Connect to an archive on its control interface providing the response stream details .
1842	Try Connect to an archive on its control interface providing the response stream details . Only one attempt will be made to offer the request .
1843	Close this control session with the archive .
1844	Start recording streams for a given channel and stream id pairing .
1845	Stop an active recording .
1846	Replay a recording from a given position .
1847	Stop an existing replay session .
1848	List a range of recording descriptors .
1849	List a range of recording descriptors which match a channel URI fragment and stream id .
1850	List a recording descriptor for a given recording id .
1851	Extend an existing non - active recorded stream for a the same channel and stream id .
1852	Get the recorded position of an active recording .
1853	Get the stop position of a recording .
1854	List registered subscriptions in the archive which have been used to record streams .
1855	Does this channel have a tag match to another channel including endpoints .
1856	Get the endpoint address from the URI .
1857	Used for debugging to get a human readable description of the channel .
1858	Add a destination to this image so it can merge streams .
1859	Insert frame into term buffer .
1860	Find the control toggle counter or return null if not found .
1861	Put a key and value pair in the map of params .
1862	Get the channel tag if it exists that refers to an another channel .
1863	Get the entity tag if it exists that refers to an entity such as subscription or publication .
1864	Add a sessionId to a given channel .
1865	Get the value of the tag from a given parameter value .
1866	Pad a length of the term buffer with a padding record .
1867	Update the publishers limit for flow control as part of the conductor duty cycle .
1868	Allocate a counter for tracking a position on a stream of messages .
1869	Return the label name for a counter type identifier .
1870	Scan the term buffer for availability of new message fragments from a given offset up to a maxLength of bytes .
1871	Clear out all the values thus setting back to the initial state .
1872	Validates that the collection of set parameters are valid together .
1873	Set the prefix for taking an addition action such as spying on an outgoing publication with aeron - spy .
1874	Set the media for this channel . Valid values are udp and ipc .
1875	Set the control mode for multi - destination - cast . Set to manual for allowing control from the publication API .
1876	Set the length of buffer used for each term of the log . Valid values are powers of 2 in the 64K - 1G range .
1877	Set the offset within a term at which a publication will start . This when combined with the term id can establish a starting position .
1878	Set the time a network publication will linger in nanoseconds after being drained . This time is so that tail loss can be recovered .
1879	Create the underlying channel for reading and writing .
1880	Close transport canceling any pending read operations and closing channel
1881	Is the received frame valid . This method will do some basic checks on the header and can be overridden in a subclass for further validation .
1882	Receive a datagram from the media layer .
1883	Called on reception of a NAK to start retransmits handling .
1884	Called to process any outstanding timeouts .
1885	String representation of the channel status .
1886	Allocate an indicator for tracking the status of a channel endpoint .
1887	Reset the values .
1888	Ensure the vector is valid for the buffer .
1889	Validate an array of vectors to make up a message and compute the total length .
1890	How far ahead a producer can get from a consumer position .
1891	Validate that the socket buffer lengths are sufficient for the media driver configuration .
1892	Validate that page size is valid and alignment is valid .
1893	Validate the range of session ids based on a high and low value provided which accounts for the values wrapping .
1894	Validate that the timeouts for unblocking publications from a client are valid .
1895	Set the error code for the command .
1896	Reset the state of a cluster member so it can be canvassed and reestablished .
1897	Encode member details from a cluster members array to a string .
1898	Add the publications for sending status messages to the other members of the cluster .
1899	Close the publications associated with members of the cluster .
1900	Check if the cluster leader has an active quorum of cluster followers .
1901	Calculate the position reached by a quorum of cluster members .
1902	Reset the log position of all the members to the provided value .
1903	Has the members of the cluster the voted reached the provided position in their log .
1904	Has the candidate got unanimous support of the cluster?
1905	Has sufficient votes being counted for a majority?
1906	Determine which member of a cluster this is and check endpoints .
1907	Check the member with the memberEndpoints
1908	Are two cluster members using the same endpoints?
1909	Has the member achieved a unanimous view to be a suitable candidate in an election .
1910	Has the member achieved a quorum view to be a suitable candidate in an election .
1911	Is the string of member endpoints not duplicated in the members .
1912	Find the index at which a member id is present .
1913	Remove a member from an array if found otherwise return the array unmodified .
1914	Find the highest member id in an array of members .
1915	Map the CnC file if it exists .
1916	Is a media driver active in the given directory?
1917	Is a media driver active in the current Aeron directory?
1918	Is a media driver active in the current mapped CnC buffer? If the driver is mid start then it will wait for up to the driverTimeoutMs by checking for the cncVersion being set .
1919	Request a driver to run its termination hook .
1920	Get the length of a frame from the header as a volatile read .
1921	Write the length header for a frame in a memory ordered fashion .
1922	Write the type field for a frame .
1923	Write the flags field for a frame .
1924	Write the term offset field for a frame .
1925	Write the term id field for a frame .
1926	Find the active counter id for a stream based on the recording id .
1927	Find the active counter id for a stream based on the session id .
1928	Get the recording id for a given counter id .
1929	Is the recording counter still active .
1930	Set the Application Specific Feedback for the Status Message .
1931	Reload the log from disk .
1932	Find the last leadership term in the recording log .
1933	Create a recovery plan for the cluster that when the steps are replayed will bring the cluster back to the latest stable state .
1934	Create a recovery plan that has only snapshots . Used for dynamicJoin snapshot load .
1935	Append a log entry for a leadership term .
1936	Append a log entry for a snapshot .
1937	Commit the position reached in a leadership term before a clean shutdown .
1938	Tombstone an entry in the log so it is no longer valid .
1939	Close session and release associated resources .
1940	Non - blocking publish by gathering buffer vectors into a message . The first vector will be replaced by the cluster ingress header so must be left unused .
1941	Attempt to unblock a log buffer at given position
1942	Get the channel field as ASCII
1943	Set the channel field as ASCII
1944	Check that term length is valid and alignment is valid .
1945	Check that page size is valid and alignment is valid .
1946	Compare and set the value of the current active term count .
1947	Compute the current position in absolute number of bytes .
1948	Compute the total length of a log file given the term length .
1949	Store the default frame header to the log meta data buffer .
1950	Apply the default header for a message in a term .
1951	Rotate the log and update the tail counter for the new term .
1952	Set the initial value for the termId in the upper bits of the tail counter .
1953	Read the termOffset from a packed raw tail value .
1954	Get the raw value of the tail for the current active partition .
1955	Compare and set the raw value of the tail for the given partition .
1956	Fill the token buffer .
1957	Allocate a counter to represent the snapshot services should load on start .
1958	Find the active counter id for recovery state .
1959	Has the recovery process got a log to replay?
1960	Get the recording id of the snapshot for a service .
1961	Convert header flags to an array of chars to be human readable .
1962	Set the channel field in ASCII
1963	Non - blocking publish of a partial buffer containing a message to a cluster .
1964	Wrap a region of an underlying log buffer so can can represent a claimed space for use by a publisher .
1965	Commit the message to the log buffer so that is it available to subscribers .
1966	Abort a claim of the message space to the log buffer so that the log can progress by ignoring this claim .
1967	Start Media Driver as a stand - alone process .
1968	Shutdown the media driver by stopping all threads and freeing resources .
1969	Get the current position to which the image has advanced on reading this message .
1970	Allocate a counter to represent the heartbeat of a clustered service .
1971	Find the active counter id for heartbeat of a given service id .
1972	Take a snapshot of all the backlog information and group by stream .
1973	Allocate a counter for tracking the last heartbeat of an entity .
1974	Clean up all resources that the client uses to communicate with the Media Driver .
1975	Dispatch a descriptor message to a consumer by reading the fields in the correct order .
1976	the new slab is guaranteed to be at least minimumSize
1977	Replace the byte stored at position index in this stream with value
1978	Adds the data from the specified statistics to this builder
1979	Calculates the row ranges containing the indexes of the rows might match the specified filter .
1980	1 anonymous element array_element
1981	An optional group containing multiple elements
1982	for pretty printing which character had the error
1983	If we are currently writing a bit - packed - run update the bit - packed - header and consider this run to be over
1984	reads one record from in and writes it to out exceptions are not recoverable as record might be halfway written
1985	this always returns the row groups
1986	Specifically reads a given summary file
1987	Reads the meta data block in the footer of the file using provided input stream
1988	Reads all the columns requested from the row group at the current file position .
1989	Reads all the columns requested from the row group at the current file position . It may skip specific pages based on the column indexes according to the actual filter . As the rows are not aligned among the pages of the different columns row synchronization might be required . See the documentation of the class SynchronizingColumnReader for details .
1990	Reads and decompresses a dictionary page for the given column chunk .
1991	Add a new writer and its memory allocation to the memory manager .
1992	Remove the given writer from the memory manager .
1993	Update the allocated size of each writer based on the current allocations and pool size .
1994	Register callback and deduplicate it if any .
1995	start the file
1996	start a block
1997	start a column inside a block
1998	writes a dictionary page page
1999	Writes a single page
2000	Writes a column chunk at once
2001	ends a block once all column chunks have been written
2002	Copy from a FS input stream to an output stream . Thread - safe
2003	ends a file once all blocks have been written . closes the file .
2004	Given a list of metadata files merge them into a single ParquetMetadata Requires that the schemas be compatible and the extraMetadata be exactly equal .
2005	Given a list of metadata files merge them into a single metadata file . Requires that the schemas be compatible and the extraMetaData be exactly equal . This is useful when merging 2 directories of parquet files into a single directory as long as both directories were written with compatible schemas and equal extraMetaData .
2006	writes a _metadata and _common_metadata file
2007	Will return the result of merging toMerge into mergedMetadata
2008	Reads the value into the binding .
2009	Returns whether null is allowed by the schema .
2010	Returns the first non - null object that is passed in .
2011	Returns a the value as the first matching schema type or null .
2012	Reads ThriftMetadata from the parquet file footer .
2013	Creates ThriftMetaData from a Thrift - generated class .
2014	generates a map of key values to store in the footer
2015	Writes the current null value
2016	Writes the current data to a new page in the page store
2017	eagerly loads all the data into memory
2018	the value buffer is allocated so that the size of it is multiple of mini block because when writing data is flushed on a mini block basis
2019	In thrift enum values are written as ints this method checks if the enum index is defined .
2020	iterate through values in each mini block and calculate the bitWidths of max values .
2021	If the given throwable is an instance of E throw it as an E .
2022	Returns the typed statistics object based on the passed type parameter
2023	Returns a builder to create new statistics object . Used to read the statistics from the parquet file .
2024	Method to merge this statistics object with the object passed as parameter . Merging keeps the smallest of min values largest of max values and combines the number of null counts .
2025	Given a schema check to see if it is a union of a null type and a regular schema and then return the non - null sub - schema . Otherwise return the given schema .
2026	Creates TaskAttemptContext from a JobConf and jobId using the correct constructor for based on Hadoop version .
2027	Invokes a method and rethrows any exception as runtime exceptions .
2028	appends a display string for of the members of this group to sb
2029	produces the list of fields resulting from merging toMerge into the fields of this
2030	Init counters in hadoop s mapred API which is used by cascading and Hive .
2031	Returns a non - null Filter which is a wrapper around either a FilterPredicate an UnboundRecordFilter or a no - op filter .
2032	the footers for the files
2033	groups together all the data blocks for the same HDFS block
2034	Writes Protocol buffer to parquet file .
2035	validates mapping between protobuffer fields and parquet fields .
2036	Returns message descriptor as JSON String
2037	Create a codec factory that will provide compressors and decompressors that will work natively with ByteBuffers backed by direct memory .
2038	Given a thrift definition protocols events it checks all the required fields and create default value if a required field is missing
2039	check each element of the Set make sure all the element contain required fields
2040	reads the meta data from the stream
2041	close the file
2042	set the schema being written to the job conf
2043	set up the mapping in both directions
2044	Asserts that foundColumn was declared as a type that is compatible with the type for this column found in the schema of the parquet file .
2045	Cast value to a an int or throw an exception if there is an overflow .
2046	Creates a Parquet Schema from an Arrow one and returns the mapping
2047	Creates an Arrow Schema from an Parquet one and returns the mapping
2048	Maps a Parquet and Arrow Schema For now does not validate primitive type compatibility
2049	Statistics are no longer saved in page headers
2050	Skips forwards until the filter finds the first match . Returns false if none found .
2051	Writes an object to a configuration .
2052	Removes the mapping for the specified key from this cache if present .
2053	Associates the specified value with the specified key in this cache . The value is only inserted if it is not null and it is considered current . If the cache previously contained a mapping for the key the old value is replaced only if the new value is newer than the old one .
2054	Returns the value to which the specified key is mapped or null if 1 ) the value is not current or 2 ) this cache contains no mapping for the key .
2055	Calls an appropriate write method based on the value . Value MUST not be null .
2056	Calls an appropriate write method based on the value . Value must not be null and the schema must not be nullable .
2057	Set and compile a glob pattern
2058	Output content to the console or a file .
2059	Opens an existing file or resource .
2060	Factory method for record filter which applies the supplied predicate to the specified column . Note that if searching for a repeated sub - attribute it will only ever match against the first instance of it in the object .
2061	struct is assumed to contain valid structOrUnionType metadata when used with this method . This method may throw if structOrUnionType is unknown .
2062	to preserve the difference between empty list and null when optional
2063	Creates a 3 - level list structure annotated with LIST with elements of the given elementType . The repeated level is inserted automatically and the elementType s repetition should be the correct repetition of the elements required for non - null and optional for nullable .
2064	If there is a conflicting value when reading from multiple files an exception will be thrown
2065	gets a ParquetInputSplit corresponding to a split given by Hive
2066	this was taken from Avro s ReflectData
2067	Determine the file column names based on the position within the requested columns and use that as the requested schema .
2068	Get all input files .
2069	Check input files basically . ParquetFileReader will throw exception when reading an illegal parquet file .
2070	Get all parquet files under partition directory .
2071	Returns builder for creating a paged query .
2072	To consume a list of elements
2073	Initialize the mrwork variable in order to get all the partition and start to update the jobconf
2074	the input tuple contains a bag of string representations of TupleSummaryData
2075	The input tuple contains a bag of Tuples to sum up
2076	reads a Struct from the underlying protocol and passes the field events to the FieldConsumer
2077	reads a key - value pair
2078	writes an int using the requested number of bits . accepts only values less than 2^bitWidth
2079	reads an int in little endian at the given position
2080	Set the Avro schema to use for writing . The schema is translated into a Parquet schema so that the records can be written in Parquet format . It is also stored in the Parquet metadata so that records can be reconstructed as Avro objects at read time without specifying a read schema .
2081	Should be called only by MapR Streams Producer . It creates a topic using KafkaProducer .
2082	Creates additional PipelineStageBeans for additional runners . Stages will share stage definition and thus class loader with the first given runner . That includes stages with private class loader as well .
2083	Create new instance of StageBean .
2084	Create interceptors for given stage .
2085	Create a default interceptor for given InterceptorDefinition . This method might return null as the underlying interface for default creation allows it as well - in such case no interceptor is needed .
2086	Parse JSON representation of Avro schema to Avro s Schema JAVA object
2087	Return number of days since the unix epoch .
2088	Retrieves avro schema from given header . Throws an exception if the header is missing or is empty .
2089	Migrating to service for data format library .
2090	buffer size .
2091	Copy BlobStore resources to data directory
2092	Reset the listener to use with the next statement . All column information is cleared .
2093	Updates gauge for the registered thread with the given details . Note that the value of the threadName argument must match the one used to register .
2094	Creates and registers a Gauge with the given thread name . The same name must be used to report health .
2095	Store configuration from control hub in persistent manner inside data directory . This configuration will be loaded on data collector start and will override any configuration from sdc . properties .
2096	password supplied authentication check
2097	Upgrade whole pipeline at once and return updated variant .
2098	Upgrade whole Stage configuration including all services if needed . Convenience method that will lookup stage definition from the library .
2099	Upgrade whole Stage configuration including all services if needed .
2100	Internal method that will upgrade service configuration if needed .
2101	Internal method that will upgrade only Stage configuration - not the associated services - and only if needed .
2102	should be replaced by null .
2103	Checks if a class should be included as a system class .
2104	Adds the given element to this queue . If the queue is currently full the element at the head of the queue is evicted to make room .
2105	Adds the given element to this queue . If the queue is currently full the element at the head of the queue is evicted to make room and returns the evicted element .
2106	Internal method to ensure that we return and not cache the default value if needed
2107	Preview only returns data associated with batches however errors are reported outside of batch context for multi - threaded pipelines . Thus we emulate the behavior by simply adding into the current batch all so - far reported errors .
2108	Returns a protobuf descriptor instance from the provided descriptor file .
2109	Loads a Protobuf file descriptor set into an ubermap of file descriptors .
2110	Populates a map of protobuf extensions and map with the default values for each message field from a map of file descriptors .
2111	Generates a protobuf descriptor instance from a FileDescriptor set .
2112	Converts a protobuf message to an SDC Record Field .
2113	Serializes a record to a protobuf message using the specified descriptor .
2114	Serializes a field path in a record to a protobuf message using the specified descriptor .
2115	Helper method to upgrade both HTTP stages to the JerseyConfigBean
2116	Check network connection to the kudu master .
2117	Convert from Kudu type to SDC Field type
2118	Create a field and assign a value off of RowResult .
2119	Intercept given records with all the interceptors .
2120	Returns the text of the line .
2121	Add any missing configs to the stage configuration .
2122	Parses the HTTP response text from a request into SDC Records
2123	Populates HTTP response headers to the configured location
2124	Writes HTTP response headers to the SDC Record at the configured field path .
2125	Writes HTTP response headers to the SDC Record header with the configured optional prefix .
2126	Commit metadata content to a file to disk .
2127	Helper method to apply Jersey client configuration properties .
2128	Used only for HEAD requests . Sets up a record for output based on headers only with an empty body .
2129	Increments the current source offset s startAt portion by the specified amount . This is the number of records parsed when paging BY_OFFSET or 1 if incrementing BY_PAGE .
2130	Parses a paginated result from the configured field .
2131	Adds the HTTP response headers to the record header .
2132	Resolves any expressions in the Header value entries of the request .
2133	Verifies that the response was a successful one and has data and continues to parse the response .
2134	Return true if and only if given property is defined with non empty non default value
2135	Change package name for DataParserException .
2136	Change package name for DataGeneratorException .
2137	Reads a JSON credentials file for a service account from and returns any errors .
2138	Run Pipeline preview
2139	we use this to trim the output in case of overruns
2140	Traverses sorted list of packages and removes logical duplicates . For example if the set contains akka . akka . io . and akka . util . only akka . will remain . Note that if the set contains only akka . io . and akka . util . both will remain . Otherwise all of the org . apache . would devolve to org .
2141	new data .
2142	finds the first main line in the chunk from the specified index position onwards
2143	it there is an incomplete multiline from a previous chunk it starts from it .
2144	Close the current thread s connection
2145	Add backslash to escape the | character within quoted sections of the input string . This prevents the | from being processed as part of a regex .
2146	Returns a flow control setting such that a subscriber will block if it has buffered more messages than can be processed in a single batch times the number of record processors . Since the flow control settings are per subscriber we should divide by the number of subscribers to avoid buffering too much data in each subscriber .
2147	Creates a channel provider shared by each subscriber . It is basically the default ChannelProvider with the exception that it can be configured with a custom endpoint for example when running against the PubSub Emulator .
2148	Queues the batch for the consumer and waits until the consumer successfully commits the batch . While waiting processes any control messages from the consumer . Throws an exception when the consumer has indicated it encountered an error .
2149	Compiles the expression into a pattern
2150	Digests the original expression into a pure named regex
2151	Loads dictionary from an input stream
2152	Adds a dictionary entry via a Reader object
2153	Stops the AggregatorDataProvider instance .
2154	Atomically rolls the DataWindow of all aggregators associated with the AggregatorDataProvider .
2155	Serialize the given Java object into JSON string .
2156	Deserialize the given JSON string to Java object .
2157	Deserialize the given File to Java object .
2158	Writes a single record to the destination .
2159	Resolve expression from record
2160	Opposite operation of extractInnerMapFromTheList . It takes LinkedHashMap and generate a Field that contains the list . This is to send metadata record to HMS target . This function is called to for partition type list and partition value list .
2161	Get Table Name from the metadata record .
2162	Get Database Name from the metadata record .
2163	Get internal field from the metadata record .
2164	Get Location from the metadata record .
2165	Get the customLocation flag from the metadata record . This flag marks whether or not the Hive database object is stored into a custom path on the Hadoop filesystem . In both cases the path is stored in the location field of the metadata record .
2166	Get Avro Schema from Metadata Record .
2167	Get DataFormat from Metadata Record .
2168	Fill in metadata to Record . This is for new schema creation .
2169	Checks whether the number of partition columns and names match w . r . t hive .
2170	Build a partition path for the external table .
2171	Returns the hdfs paths where the avro schema is stored after serializing . Path is appended with current time so as to have an ordering .
2172	Set parameters and primary keys in query .
2173	Returns ALL SDC Configuration
2174	Parse the RFC3164 date format . This is trickier than it sounds because this format does not specify a year so we get weird edge cases at year boundaries . This implementation tries to do what I mean .
2175	no escaping is supported no array content printing either .
2176	For all PushSource callbacks we have to make sure that we get back to a security context of SDC container module otherwise we won t be able to update state files with new offsets and other stuff .
2177	Checks whether the record contains solr fields in solrFieldsMap or not .
2178	Filter auto - generated fields from the list passed as argument .
2179	Send exception ex to errorRecordHandler in order to let the handler process it .
2180	Generate dependency from a jar file name .
2181	Generate dependency from a URL .
2182	Maintains a singleton instance of the CouchbaseConnector object per pipeline
2183	Disconnects from Couchbase and releases all resources
2184	Validates connection configurations that don t require runtime exception handling
2185	Convert from code in String type to label
2186	Verify that the config definition s dependency actually maps to a valid config definition
2187	Reads a secret from the local cache if it hasn t expired and returns the value for the specified key . If the secret isn t cached or has expired it requests it from Vault again .
2188	Evaluates the sdc . operation . type header for a record and returns the equivalent Couchbase write operation type .
2189	Executes a document write operation .
2190	Applies standard options to sub - document mutations
2191	H2 wants an ALTER TABLE command per column
2192	Login constructor . The constructor starts the thread used to periodically re - login to the Kerberos Ticket Granting Server .
2193	Consumes messages off the queue . Returns null when the producer has indicated it is complete and throws an exception when the consumer producer has indicated it is in error .
2194	Commit the offset . Required after take has returned a non - null value .
2195	Send a control message indicating the consumer has encountered an error .
2196	Inject config values to given Stage .
2197	Returns pipeline &amp ; stage configuration definitions This will fetch defintions based on the hideStage filter
2198	Parse given configuration declaration of lineage plugin and return appropriate definition .
2199	Format column names based on whether they are case - sensitive
2200	Unescapes strings and returns them .
2201	Find Pipeline Configuration by name and revision
2202	Add a new Pipeline Fragment Configuration to the store
2203	Returns all Pipeline Configuration Info
2204	Import Pipeline Fragment Configuration & Rules
2205	Returns the temp file path to write records to
2206	Get the numeric operation code from record header . The default code is used if the operation code is not found in the header . This can be overwritten in inherited classes .
2207	This function simply returns field path in record for the corresponding column name . This is needed because records generated by CDC origins store data in different location for different operation . Subclasses will override this function and implement special handling .
2208	Read next event from buffer with respect to maximum timeout .
2209	Get exclusive runner for use .
2210	Return a runner that haven t been used at least for the configured number of milliseconds .
2211	Return given runner back to the pool .
2212	Destroy only the pool itself - not the individual pipe runners .
2213	Throw an exception if the runner was already destroyed .
2214	Checks for existence of the requested stream and adds any configuration issues to the list .
2215	Get the last shard Id in the given stream In preview mode kinesis source uses the last Shard Id to get records from kinesis
2216	Process all records in queue . All records have same operation to same table . Generate a query and set parameters from each record . INSERT and DELETE can be multi - row operation but UPDATE is single - row operation . If maxStatement
2217	Handle SQLException in a smart way detecting if the exception is data oriented or not .
2218	Generates a hash for the fields present in a record and their mappings . A specific implementation of the hash function is not guaranteed .
2219	True if f1 is newer than f2 .
2220	Attempts to retrieve PID from internal JVM classes . This method is not guaranteed to work as JVM is free to change their implementation at will . Hence the return value should be only used for troubleshooting or debug and not for main functionality .
2221	Basically throw out map list map list and null values fields .
2222	Return UGI object that should be used for any remote operation .
2223	returns fresh bean with same UsageTimers just reset to zero accumulated time to be used as the new live stats
2224	returns a snapshot for persistency
2225	Ensure that given directory exists .
2226	Write records to potentially different schemas and tables using EL expressions and handle errors .
2227	Write records to the evaluated tables and handle errors .
2228	Write records to a JDBC destination using the recordWriter specified by key and handle errors
2229	Generates the no - more - data event
2230	Using partition name and value that were obtained from record compare them with cached partition .
2231	Add header information to send to HDFS
2232	Processes the given value into the corresponding group - by element of the aggregator .
2233	Returns if and only if both stage classes have defined the same version .
2234	Bootstrapping the Driver which starts a Spark job on Mesos
2235	Helper to apply authentication properties to Jersey client .
2236	Evaluates any EL expressions in the headers section of the stage configuration .
2237	Determines the HTTP method to use for the next request . It may include an EL expression to evaluate .
2238	Add each object of typed null to SimpleBindings so that script languages can use constants such as NULL_INTEGER NULL_LONG without importing other files .
2239	Receive record and fieldPath from scripting processor . It resolves type of the field and if value is null it returns one of the NULL_XXX objects defined in this class . If field value is not null it returns the value stored in the field .
2240	Parses and returns an Avro schema loaded from the schema registry using the provided schema ID if available or the latest version of a schema for the specified subject .
2241	Registers a parsed schema with the schema registry under the specified subject .
2242	Loads and parses a schema for the specified subject from the schema registry
2243	Looks up schema id for the specified subject from the schema registry
2244	Loads and parses a schema for the specified schema ID from the schema registry
2245	Writes the magic byte and schema ID to an output stream replicating the functionality of the Confluent Kafka Avro Serializer
2246	Checks for a magic byte in the data and if present extracts the schemaId
2247	Helper method to extract default values from a Schema . This is normally done in DataGeneratorFormat validation however we have to do it at runtime for Schema Registry .
2248	Convenience method to parse all available records in given payload . This method assumes that the stage already depends on DataFormatParserService service and loads the service instance from Stage . Context .
2249	Generate small report into log .
2250	Generate list of error records from the error sink . What precise records will be returned depends on the error record policy configuration .
2251	Initialize the schema generator
2252	Returns the outward flowing edge vertices .
2253	Returns the inward flowing edge vertices .
2254	Serialize the Map of table to offset to a String
2255	Deserialize String offset to Map of table to offset
2256	Queue a report using the Report . Queue method . This will post a request with the report description to the Omniture API and return a report ID that can be used to retrieve the report once it s ready .
2257	Posts a request to the Omniture API to get a report back . Reports may take a while to generate so this will loop on the Report . Get request and ignore any errors indicating that the report is not yet ready .
2258	This tell us SDC is check pointing
2259	Or if the file is corrupted we want to update the right offsets to the main offset file .
2260	Delete a blob for gcs
2261	Handle error Blob
2262	Archive the blob
2263	prepares and gets the reader if available before a read .
2264	updates reader and offsets after a read .
2265	Helper method to set dpmBaseURL for the first HTTP DPM authentication .
2266	Add a default header .
2267	Parse the given string into Date object .
2268	Escape the given string to be used as URL query value .
2269	Get an existing client or create a new client to handle HTTP request .
2270	Connect to the database
2271	Get metadata for the table
2272	Create a BulkInserter
2273	Create new event record according for this stage context and event context .
2274	Build a schema with type record . This will be the top level schema and contains fields
2275	This is called when JDBC target didn t find sdc . operation . code in record header but found oracle . cdc . operation . Since oracle . cdc . operation contains Oracle specific operation code we need to convert to SDC operation code .
2276	Add jars containing the following classes to the job s classpath .
2277	Add jars whose names contain the given patterns to the job s classpath .
2278	Returns true if the first ORDER BY field matches fieldName
2279	Returns true if any of the nested conditions contains fieldName
2280	If passed a valid fileOffsetString it will return what is the offset lag in the file .
2281	Visible due to JVM requirements only
2282	This API is being used by ClusterKafkaSource
2283	Executes a query request and returns the results . A timeout is required to avoid waiting for an indeterminate amount of time . If the query fails to complete within the timeout it is aborted .
2284	Converts a list of BigQuery fields to SDC Record fields . The provided parameters must have matching lengths .
2285	Get the table description from the ShowTableResponse
2286	if it is not
2287	Get the Class for the column type
2288	the Avro type field )
2289	Get the table s schema as a JSON Object
2290	Get the table s extended column properties
2291	Get the Java type for a type name
2292	initialize and validate configuration options
2293	Returns the topic given the record .
2294	Transition to services
2295	Returns an input stream for the requested file .
2296	Returns an output stream for the requested file .
2297	Check if the DataStore exists and contains data . This method will check for the presence of the set of files that can be used to read data from the store .
2298	Parse String representation of permissions into HDFS FsPermission class .
2299	Validate service dependencies .
2300	Creates a simple Aggregator .
2301	Returns the unit type of an aggregator value . Typically Long or Double .
2302	Creates an AggregatorData .
2303	Creates a group - by Agregator .
2304	Starts the Aggregators instance .
2305	Stops the Aggregators instance .
2306	Atomically rolls the DataWindow of all aggregators associated with the Aggregators instance .
2307	Returns an instance of LoginManager and increases its reference count .
2308	Decrease the reference count for this instance and release resources if it reaches 0 .
2309	Convert a limited file glob into a simple regex .
2310	Lists objects from AmazonS3 in lexicographical order
2311	Stops execution of the pipeline after the current batch completes
2312	This method should be called periodically from a scheduler if the pipeline should not allow runners to be idle for more then idleTime .
2313	Create special batch by salvaging memory structures when pipelines gets into un - recoverable error .
2314	Convert a Record into a fully - bound statement .
2315	Set multiple configs at once .
2316	Create a map of keyColumn - value to lookup in cache .
2317	Checks whether any tables have had partitioning turned off or not and updates the partition map appropriately
2318	returns the reader line length the StringBuilder has up to maxObjectLen chars
2319	returns fresh UsageTimer just reset to zero accumulated time
2320	Enable Control Hub on this Data Collector .
2321	Disable Control Hub on this Data Collector - with explicit login .
2322	Normalize Control Hub URL - primarily drop training slash .
2323	Login user and retrieve authentication token .
2324	Logout given token .
2325	Update token file with the SDC access token .
2326	Update dpm . properties file with new configuration .
2327	Generate schema for given field and optionally wrap it in union with null if configured .
2328	Generates complex schema for given field that will include optional union with null and potentially default value as well . Particularly useful to generate nested structures .
2329	Resolve parameters of decimal type .
2330	Returns default value for given field or null if no default value should be used .
2331	Creates a gauge if it is already not . This is done only once for the stage
2332	This method is a simple wrapper that lets us find the NoSuchFileException if that was the cause .
2333	Gets the group index of a named capture group at the specified index . If only one instance of the named group exists use index 0 .
2334	Gets the names of all capture groups
2335	Determines if the character at the specified position of a string is escaped
2336	Determines if the character at the specified position of a string is escaped with a backslash
2337	Determines if a string s character is within a regex character class
2338	Counts the open - parentheses to the left of a string position excluding escaped parentheses
2339	Parses info on named capture groups from a pattern
2340	Replaces strings matching a pattern with another string . If the string to be replaced is escaped with a slash it is skipped .
2341	Process a GET request for the specified resource .
2342	Refresh the schema for the table if the last update of this table was before the given SCN . Returns true if it was updated else returns false .
2343	An element is expired if the transaction started before the current window being processed and if no records have actually been sent to the pipeline . If a record has been sent then a commit was seen so it is not expired .
2344	offset will be negative if we are in truncate mode .
2345	returns true if still in truncate mode false otherwise
2346	Detached stage APIs
2347	We need to support Strings as some information that user might need to deal with is inherently stored in String variables - for example header values or CSV files .
2348	Parses a collectd packet part .
2349	Parses the value part of the packet where metrics are located
2350	Access the database obtain a list of primary key columns and store them in primaryKeyColumns . If table has no primary keys primaryKeyColumns stays empty .
2351	Use Field to Column Mapping option obtained from configuration and update columnsToFields and columnsToParameters .
2352	spec requires a string name for a data type rather than just an enum .
2353	Table this writer will write to .
2354	Set primary key values to query . This is called only for UPDATE and DELETE operations . If primary key value is missing in record it throws OnRecordErrorException .
2355	This is an error that is not due to bad input record and should throw a StageException once we format the error .
2356	Process method for Push source that will give control of the execution to the origin .
2357	Called by PipelineRunner when push origin started a new batch to prepare context for it .
2358	Finish batch from the origin s perspective .
2359	Flatten the entire record to one giant map
2360	Create new instance of detached stage runtime .
2361	Executes an action for given record .
2362	Records from MySQL BinLog origin have a bit unique structure .
2363	Builds parts of the query in the where clause for the the partitition column .
2364	Validates whether offset names match in the stored offset with respect to table configuration
2365	Orchestrate what definitions should be used for this bundle .
2366	If there is a RecordEL then an arg could eval to empty string . This method returns args that are not null or empty .
2367	Return Operation based on the operation code . If the code has a number that Kudu destination doesn t support it throws UnsupportedOperationException .
2368	Convert the bytes to a human readable format upto 2 decimal places The maximum unit is TB so anything exceeding 1024 TB will be shown with TB unit .
2369	Scans the directory of for the next file .
2370	Scans the directory for number of files yet to be processed .
2371	Return true if this dependency and given set of versions is whitelisted .
2372	Compare expected versions with given versions to see if they are the same or not .
2373	Bootstrapping the Driver which starts a Spark job on cluster
2374	We have special type of a ConfigDef called RUNTIME . This config is never displayed in UI and instead it s values are supplied at runtime . This method is the runtime method that propagates them .
2375	Validate Ominture Report Description .
2376	Called by JdbcTarget
2377	Called by JdbcTeeProcessor
2378	Remove implicit field mapping
2379	Extracts named groups from the raw data
2380	If a null value is passed to this method it s replaced with a dummy due to the fact the payload for each message is wrapped in an Optional .
2381	Creates an instance of SDC and adds to pool
2382	Set the lookup reuslt in the result field
2383	Returns info about remote pipelines that have changed since the last sending of events
2384	Creates a future ack result from the given parameter . It is expected that the caller will eventually wait for the future ack result that is returned .
2385	Kept for backward compatibility with runtime stats to be removed in future
2386	Records from MongoDB Oplog origin have a bit unique structure .
2387	Generate the Header attributes
2388	Validate the record is a whole file record
2389	Delete temporary parquet file
2390	Return the Avro file input stream
2391	Return the Avro file reader
2392	Convert Avro record to Parquet
2393	Checks that the encryption input is a supported type otherwise sends the record to error .
2394	Checks that the encryption input is a supported type otherwise sends the record to StageException .
2395	Checks that the decryption input is a valid type otherwise sends the record to error .
2396	Checks that the decryption input is a valid type otherwise sends the record to StageException .
2397	Does data type conversions in preparation for encryption .
2398	Changes the Pattern that this Matcher uses to find matches with
2399	Implements a non - terminal append - and - replace step .
2400	Finds all named groups that exist in the input string . This resets the matcher and attempts to match the input against the pre - specified pattern .
2401	Replaces every subsequence of the input sequence that matches the pattern with the given replacement string .
2402	There is a problem with some older stages that originally were not using our data parser library as the upgrade on those stages does not create all the properties that were introduced by the data parser library . For example File Tail origin doesn t support avro so the upgrade procedure doesn t use create the avro specific properties . This is normally not a problem as post - upgrade SDC will create all missing properties with default values . However this particular upgrade will fail if the property avroSchema is missing .
2403	Get global variable value .
2404	Create pipeline start event .
2405	Create pipeline stop event .
2406	since Salesforce doesn t like scientific notation in queries
2407	RUNTIME supports only Numeric types and String at the moment
2408	Add a new partition to the given table with optional custom location .
2409	Execute Alter Table set Table Properties
2410	Returns location for given database .
2411	Execute given query .
2412	Execute given query and process it s result set .
2413	Run batch with given consumer for each pipe .
2414	Execute given consumer for each pipe rethrowing usual exceptions as RuntimeException .
2415	Retrieve OffsetCommitTrigger pipe .
2416	Return true if at least one stage is configured with STOP_PIPELINE for OnRecordError policy .
2417	Accept given consumer and proper log context of any exception .
2418	Evaluate and obtain the row id if the expression is present or return null .
2419	Convert the sdc Field to an object for row content
2420	Writes sub - document lookup values to the record
2421	Writes full document lookup values to the record
2422	Writes N1QL query result rows to the record
2423	as the record is just the metadata along with file ref .
2424	Check if given gtid + seqNo pair is contained in this incomplete transactions .
2425	Internal version of the wrapping function that will simply propagate all exceptions up .
2426	HeaderImpl setter methods
2427	Logs out . If Keberos is enabled it logs out from the KDC otherwise is a NOP .
2428	This method should be called only once and before any stages are loaded .
2429	Replace variables to internal SDC directories so that users don t have to be entering FQDN .
2430	Make sure that the active code have proper rights to access the file inside protected directory .
2431	Bootstrapping the Driver which starts a EMR job on cluster
2432	Returns directory path for given record and date .
2433	This method should be called every time we finish writing into a file and consider it done .
2434	Return true if this record should be written into a new file regardless whether we have a file for the record currently opened or not .
2435	Test whether or not a string matches against a pattern .
2436	Returns the current file offsets . The returned offsets should be set before the next read .
2437	remaining time till timeout return zero if already in timeout
2438	Determines the offset lag for each active file being read .
2439	Create and initialize new delegate .
2440	Create new instance of the delegator from given stage library .
2441	Create actual instance of delegator .
2442	Get metric value for given rule evaluation .
2443	Find byte index separating header from body . It must be the last byte of the first two sequential new lines .
2444	Deduce body length in bytes . Either from content - length header or read bytes .
2445	Retrieves the content of a sent file and saves it to a temporary file . The full path to the saved file is returned .
2446	Creates an SSLSocketFactory for HTTPS . Pass a KeyStore resource with your certificate and passphrase
2447	Get MIME type from file name extension if possible
2448	This is the master method that delegates requests to handlers and makes sure there is a response to every request . You are not supposed to call or override this method in any circumstances . But no one will stop you if you do . I m a Javadoc not Code Police .
2449	Stop the server .
2450	default routings they are over writable .
2451	Sends given response to the socket .
2452	Sends the body to the specified OutputStream . The pending parameter limits the maximum amounts of bytes sent unless it is - 1 in which case everything is sent .
2453	Create a response with known length .
2454	Else decide whether or not to use Gzip .
2455	Sets a cookie .
2456	Internally used by the webserver to add all queued cookies into the Response s HTTP Headers .
2457	Decode the value using Base64 .
2458	Encode the value using Base64 .
2459	Set the name of database table used to store sessions .
2460	Derives a String name for the given principal .
2461	Registers the springSessionRepositoryFilter .
2462	Tries to determine the principal s name from the given Session .
2463	Gets the session .
2464	Extracts the raw JNDI_NAME value from the given model node and depending on the value and the value of any USE_JAVA_CONTEXT child node converts the raw name into a compliant jndi name .
2465	This method returns the class names of the parameters of the given method in canonical form . In case of a method without parameters it will return an empty array .
2466	This is only allowed at various points of the transaction lifecycle .
2467	Exceptions from Synchronizations that are registered with this TSR are not trapped for before completion . This is because an error in a Sync here should result in the transaction rolling back .
2468	Returns the transaction associated with the transaction propagation context that arrived in the current IIOP request .
2469	Add POJO module if we have any bean factories .
2470	determine if management console can display the second level cache entries
2471	Process the model to figure out the name of the services the server config service has to depend on
2472	Decrements the read lock count held by the thread
2473	Increments the read lock count held by the thread
2474	Adds a service to all bean deployment archives in the module
2475	Makes sure that the timer is only run once after being restored .
2476	if set to auto will behave like not having set the property
2477	Adds additional edges to the accessibility graph that allow static CDI - enabled modules to inject beans from top - level deployment units
2478	Builds universal JSE meta data model that is AS agnostic .
2479	Sets config name and config file .
2480	Builds security meta data .
2481	Returns servlet name to url pattern mappings .
2482	Returns servlet name to servlet class mappings .
2483	Checks if this ejb injection has been resolved yet and if not resolves it .
2484	FIXME use capabilities & requirements
2485	Handle the core - environment element and children
2486	Handle the process - id child elements
2487	Returns the address of the specified operation
2488	Sets the address of the specified operation .
2489	Returns the attribute value of the specified operation
2490	Indicates whether or not this operation expects to include default values .
2491	Creates a composite operation using the specified operation steps .
2492	Creates an add operation using the specified address and parameters
2493	Creates an indexed add operation using the specified address and index
2494	Creates a read - attribute operation using the specified address and name .
2495	Creates a write - attribute operation using the specified address name and value .
2496	Creates an undefine - attribute operation using the specified address and name .
2497	Lookup the value from the naming context .
2498	Add an ObjectFactory to handle requests for a specific URL scheme .
2499	Remove an ObjectFactory from the map of registered ones . To make sure that not anybody can remove an ObjectFactory both the scheme as well as the actual object factory itself need to be supplied . So you can only remove the factory if you have the factory object .
2500	Retrieves the providers from the given loader using the service loader mechanism .
2501	Modifies web meta data to configure webservice stack transport and properties .
2502	Configures transport servlet class for every found webservice endpoint .
2503	Modifies context root .
2504	Returns stack specific transport class name .
2505	Sets the run as identity
2506	Removes the run as identity
2507	todo move to UndertowDeploymentService and use all registered servlets from Deployment instead of just one found by metadata
2508	Inject a value into an object property
2509	Compare the type of a class with the actual value
2510	Find a method
2511	Find a field
2512	Build options for non - interactive VaultTool usage scenario .
2513	Obtain debug information from the servlet request object
2514	Collect a JDR report when run outside the Application Server .
2515	Collect a JDR report .
2516	Register a resource adapter deployment
2517	Unregister a resource adapter deployment
2518	Register the transformers for the 1 . 3 . 0 version .
2519	Marshals the sequence of method parameters into an output stream .
2520	Unmarshals from an input stream an exception thrown by the method .
2521	Use either the active transaction or the current thread as the lock owner
2522	Releases the lock held by this thread on the stateful component instance .
2523	Adds content to the zipfile in a file named logName
2524	a CDI ViewHandler .
2525	Gets endpoint container lazily .
2526	Invokes WS endpoint .
2527	Translates SEI method to component view method .
2528	Compares two methods if they are identical .
2529	Create single instance of management statistics resource per managementAdaptor version .
2530	Gets EJB security meta data if associated with EJB endpoint .
2531	Returns security domain value . This method checks domain is the same for every EJB 3 endpoint .
2532	This method ensures both passed domains contain the same value .
2533	Set my unqualified IDL name . This also sets the names of the associated operations .
2534	Get the absolute JNDI name as a string .
2535	Create a new instance of the JndiName by breaking the provided string format into a JndiName parts .
2536	Process a deployment for iron - jacamar . xml files . Will parse the xml file and attach metadata discovered during processing .
2537	Increments the counter and registers a listener to decrement the counter upon exchange complete event .
2538	check whether there is an active transaction .
2539	lookup the transactionSynchronizationRegistry and cache it .
2540	lookup the connectionFactory and cache it .
2541	Get the last component of a name .
2542	Determine if a name is empty or if ot contains only one component which is the empty string .
2543	Create a name - not - found exception .
2544	Return a general naming exception with a root cause .
2545	Return a general naming exception with a root cause and a remaining name field .
2546	Return a cannot - proceed exception .
2547	Return a naming enumeration over a collection .
2548	Rebind val to name in ctx and make sure that all intermediate contexts exist
2549	Gets the runtime ActiveMQ control object that can help service this request .
2550	Parses connection attributes for version 5 . 0
2551	Wraps an existing object instance in a ComponentInstance and run the post construct interceptor chain on it .
2552	Lookup Seam integration resource loader .
2553	Resolves runtime name of model resource .
2554	Registers attributes common across listener types
2555	Get a singleton instance representing one of the primitive types .
2556	Upon calling this method the EJB will be set to a shutdown state and no further invocations will be allowed . It will then wait for all active invocation to finish and then return .
2557	Creates URL pattern list from passed string .
2558	Gets servlets meta data from jboss web meta data . If not found it creates new servlets meta data and associates them with jboss web meta data .
2559	Gets servlet mappings meta data from jboss web meta data . If not found it creates new servlet mappings meta data and associates them with jboss web meta data .
2560	Gets security constraints meta data from jboss web meta data . If not found it creates new security constraints meta data and associates them with jboss web meta data .
2561	Gets login config meta data from jboss web meta data . If not found it creates new login config meta data and associates them with jboss web meta data .
2562	Gets context parameters meta data from jboss web meta data . If not found it creates new context parameters meta data and associates them with jboss web meta data .
2563	Gets web resource collections meta data from security constraint meta data . If not found it creates new web resource collections meta data and associates them with security constraint meta data .
2564	Gets init parameters meta data from servlet meta data . If not found it creates new init parameters meta data and associates them with servlet meta data .
2565	Creates new security constraint meta data and associates them with security constraints meta data .
2566	Creates new web resource collection meta data and associates them with web resource collections meta data .
2567	Creates new servlet meta data and associates them with servlets meta data .
2568	Creates new servlet mapping meta data and associates them with servlet mappings meta data .
2569	Creates new authentication constraint and associates it with security constraint meta data .
2570	Creates new user constraint meta data and associates it with security constraint meta data .
2571	Creates new parameter meta data and associates it with parameters meta data .
2572	Creates new parameter with specified key and value .
2573	Register our listeners on SFSB that will be created
2574	Processes the injection targets of a resource binding
2575	Stops the container Executed in WeldStartService to shutdown the runtime before NamingService is closed .
2576	Extracts the raw JNDINAME value from the given model node and depending on the value and the value of any USE_JAVA_CONTEXT child node converts the raw name into a compliant jndi name .
2577	Return null if the resolved attribute is not defined
2578	Determine the url - pattern type
2579	Return whether the definition targets an existing pooled connection factory or use a JCA - based ConnectionFactory .
2580	Return whether the definition targets an existing external pooled connection factory .
2581	The JMS connection factory can specify another server to deploy its destinations by passing a property server = &lt ; name of the server > . Otherwise default is used by default .
2582	if no persistence unit name is specified return name of default persistence unit
2583	Starts the service . Registers server activity sets transaction listener on local transaction context and creates and installs deployment controller service .
2584	Stops the service . Unregisters service activity and clears transaction listener .
2585	Notifies local transaction context that server is suspended and only completes suspension if there are no active invocations nor transactions .
2586	Notifies local transaction context that server is resumed and restarts deployment controller .
2587	Notifies handler that an active invocation is complete .
2588	Notifies handler that a new transaction has been created .
2589	Bind the entry into the injected context .
2590	Unbind the entry from the injected context .
2591	Determines a ServiceName from a capability name . Only supported for use by services installed by this subsystem ; will not function reliably until the subsystem has begun adding runtime services .
2592	Create the resource roots for a . war deployment
2593	returns the toplevel deployment module classloader and all subdeployment classloaders
2594	Determine if class file transformer is needed for the specified persistence unit
2595	Determine if two phase persistence unit start is allowed
2596	Determine if the default data - source should be used
2597	Allow the mixed synchronization checking to be skipped for backward compatibility with WildFly 10 . 1 . 0
2598	Get ORB using given server and port number and properties from environment .
2599	This method returns a new ORB instance for the given applet without creating a static dependency on java . applet .
2600	Initializes reflection method handles for RMI - IIOP .
2601	Set the active naming store
2602	Process all parameter DefaulValue objects . Flag all parameters with missing and invalid converters .
2603	Take steps to properly identify the parameter s data type
2604	Extract a DefaultValue annotation from the list of parameter annotations
2605	Confirm the method can handle the default value without throwing and exception .
2606	Called by postconstruct interceptor
2607	Converts a tx Status index to a String
2608	add cache dependencies
2609	Read the properties from the timer - sql and extract the database dialects .
2610	Check the connection MetaData and driver name to guess which database dialect to use .
2611	Use the given name and check for different database types to have a unified identifier for the dialect
2612	Checks whether the database transaction configuration is appropriate and create the timer table if necessary .
2613	Convert the stored date - string from database back to Date
2614	Set the node name for persistence if the state is IN_TIMEOUT or RETRY_TIMEOUT to show which node is current active for the timer .
2615	Mark this deployment and the top level deployment as being a weld deployment .
2616	Unmarshals the sequence of method parameters from an input stream .
2617	Marshals into an output stream the return value of the method .
2618	Marshals into an output stream an exception thrown by the method .
2619	Do lazy lookup .
2620	called from SFSBPreCreateInterceptor before bean creation
2621	called from SFSBPreCreateInterceptor after bean creation
2622	return for just the current entity manager invocation
2623	Push the passed SFSB context handle onto the invocation call stack
2624	Pops the current SFSB invocation off the invocation call stack
2625	gets the current SFSB invocation off the invocation call stack
2626	Add dependencies for modules required for weld deployments if managed weld configurations are attached to the deployment
2627	Parse the faces config files looking for managed bean classes . The parser is quite simplistic as the only information we need is the managed - bean - class element
2628	WFLY - 6617 According to JSF 2 . 2 spec it should be possible to inject beans using
2629	Return the IDL type name for the given class . Here we use the mapping for parameter types and return values .
2630	Insert a java primitive into an Any . The primitive is assumed to be wrapped in one of the primitive wrapper classes .
2631	Map Java name to IDL name as per sections 1 . 3 . 2 . 3 1 . 3 . 2 . 4 and 1 . 3 . 2 . 2 . This only works for a single name component without a qualifying dot .
2632	Determine if the argument is a reserved IDL keyword .
2633	Calculate the signature of a class according to the Java VM specification section 4 . 3 . 2 .
2634	Calculate the signature of a method according to the Java VM specification section 4 . 3 . 3 .
2635	Handle mappings for primitive types as per section 1 . 3 . 3 .
2636	Get the permission with the given name .
2637	get or create a Transactional entity manager . Only call while a transaction is active in the current thread .
2638	Maps the specified key to the specified value in this table . Neither the key nor the value can be null .
2639	Utility for converting camel case based ActiveMQ formats to WildFly standards .
2640	Returns either the loaded entity or the most recent version of the entity that has been persisted in this transaction .
2641	Gets the timer map loading from the persistent store if necessary . Should be called under lock
2642	Gets the directory for a given timed object making sure it exists .
2643	Add a listener to the coordinator with a given target name and event scope . This information is used when an event is fired to determine whether or not to fire this listener .
2644	Remove a listener . Will remove it from all target mappings . Once this method returns the listener will no longer receive any events .
2645	Fire a naming event . An event will be created with the provided information and sent to each listener that matches the target and scope information .
2646	Returns a consumer that closes its input .
2647	Add the specified credential to the subject s private credentials set .
2648	Create an object instance .
2649	Sets up the transaction management interceptor for all methods of the passed view .
2650	Substitute sub - strings inside of a string .
2651	The XmlDataImporter requires a connector to connect to the artemis broker .
2652	adds ear prefix to configured adapter name if it is specified in relative form
2653	Returns the parent of the given deployment unit if such a parent exists . If the given deployment unit is the parent deployment unit it is returned .
2654	Get the service name for this view .
2655	Creates view configuration . Allows for extensibility in EE sub components .
2656	Create the injection source
2657	Get the view interceptors for a method . These interceptors are run sequentially on the server side of an invocation . The interceptor factories are used every time a new view instance is constructed called with a new factory context each time . The factory may return the same interceptor instance or a new interceptor instance as appropriate .
2658	Adds an interceptor factory to all methods of a view
2659	Adds a view interceptor to the given method
2660	Get the client interceptors for a method . These interceptors are run sequentially on the client side of an invocation . The interceptor factories are used every time a new client proxy instance is constructed called with a new factory context each time . The factory may return the same interceptor instance or a new interceptor instance as appropriate .
2661	Adds a client interceptor factory to all methods of a view
2662	Adds a client interceptor to the given method
2663	Attaches arbitrary private data to this view instance
2664	Throws a XMLStreamException for the unexpected element that was encountered during the parse
2665	Gets list of JAXWS EJBs meta data .
2666	Gets list of JAXWS POJOs meta data .
2667	Returns endpoint name .
2668	Returns endpoint class name .
2669	Returns servlet meta data for requested servlet name .
2670	Returns required attachment value from deployment unit .
2671	Returns optional attachment value from deployment unit or null if not bound .
2672	Gets the JBossWebMetaData from the WarMetaData attached to the provided deployment unit if any .
2673	Return a named port - component from the jboss - webservices . xml
2674	Returns an EJBEndpoint based upon fully qualified classname .
2675	Returns context root associated with webservice deployment .
2676	If the class name is found in additionalClasses then return it .
2677	Loads a resource from the module class loader
2678	Loads resources from the module class loader
2679	Lists all children of a particular path taking overlays into account
2680	current session bean invocation is ending close any transactional entity managers created without a JTA transaction .
2681	Return the transactional entity manager for the specified scoped persistence unit name
2682	Closing of transaction scoped JMSContext is executed through Synchronization listener . This method registers listener which takes care of closing JMSContext .
2683	Process web annotations .
2684	Returns true if the update operation succeeds in modifying the runtime false otherwise .
2685	Checks whether all the fields in the class are declared as public .
2686	Creates new Http Web Service endpoint .
2687	Creates new Web Service deployment .
2688	JAX - RS annotations are found in the deployment especially if it s an EAR one )
2689	Sets the next timeout of this timer
2690	Sets the state and timer task executing thread of this timer
2691	Merges a list of additional JAX - RS deployment data with this lot of deployment data .
2692	Add the EE APIs as a dependency to all deployments
2693	Adds a dependency for the ComponentConfiguration on the remote transaction service if the EJB exposes at least one remote view
2694	Returns a combined map of class and method level container interceptors
2695	Returns true if the given transaction specification was expliitly specified at a method level returns false if it was inherited from the default
2696	Check one and only one of the 2 elements has been defined
2697	Load class .
2698	Get component type .
2699	Defines a resource that represents an Elytron - compatible key store that can be exported by a JSSE - enabled domain in the legacy security subsystem .
2700	Defines a resource that represents Elytron - compatible key managers that can be exported by a JSSE - enabled domain in the legacy security subsystem .
2701	Defines a resource that represents Elytron - compatible trust managers that can be exported by a JSSE - enabled domain in the legacy security subsystem .
2702	Returns a CompoundName given a string in INS syntax .
2703	Converts an INS - syntax string name into a Vector in which each element of the vector contains a stringified form of a NameComponent .
2704	Return a NameComponent given its stringified form .
2705	Unexport this object .
2706	Convert a servant to a reference .
2707	Attempt to authenticate and authorize an username with the specified password evidence .
2708	Check whether the types that JCA Injection knows .
2709	SPI contract for this method
2710	Unbind the resource and wait until the corresponding binding service is effectively removed .
2711	Instantiate bean .
2712	Configure bean .
2713	Dispatch lifecycle joinpoint .
2714	Get the current context selector for the current thread .
2715	Get MC bean name .
2716	To instances name .
2717	Look for a class description in all available modules .
2718	Process annotations and merge any available metadata at the same time .
2719	Some of this might need to move to the install phase
2720	performs basic validation on a descriptor
2721	Creates web meta data for EJB deployments .
2722	Creates web . xml descriptor meta data .
2723	Returns deployment authentication method .
2724	Process a deployment for jboss - service . xml files . Will parse the xml file and attach a configuration discovered during processing .
2725	Handles setting up the ejbCreate and ejbRemove methods for stateless session beans and MDB s
2726	Makes a dynamic stub class if it does not already exist .
2727	Generate the ID of the n - th anonymous object created in this IR .
2728	Return a new instance of each persistence provider class
2729	Cleared at application undeployment time to remove any persistence providers that were deployed with the application
2730	Set at application deployment time to the persistence providers packaged in the application
2731	If a custom CL is in use we want to get the module CL it delegates to
2732	Add dependencies for modules required for manged bean deployments if managed bean configurations are attached to the deployment .
2733	Add one PU service per top level deployment that represents
2734	Setup the annotation index map
2735	Get the persistence provider adaptor . Will load the adapter module if needed .
2736	Will save the PersistenceProviderAdaptor at the top level application deployment unit level for sharing with other persistence units
2737	Look up the persistence provider
2738	use a plain Set and it should work for both versions .
2739	Builds universal EJB meta data model that is AS agnostic .
2740	Builds JBoss agnostic EJB meta data .
2741	refresh the attributes of this participant ( the status attribute should have changed to PREPARED
2742	Returns an analysis . If the calling thread is currently doing an analysis of this class an unfinished analysis is returned .
2743	Lookup an analysis in the fully done map .
2744	Create new work - in - progress .
2745	Return the fully qualified IDL module name that this analysis should be placed in .
2746	Convert an integer to a 16 - digit hex string .
2747	Convert a long to a 16 - digit hex string .
2748	Check if a method is an accessor .
2749	Check if a method is a mutator .
2750	Check if a method throws anything checked other than java . rmi . RemoteException and its subclasses .
2751	Convert an attribute read method name in Java format to an attribute name in Java format .
2752	Convert an attribute write method name in Java format to an attribute name in Java format .
2753	Fixup overloaded operation names . As specified in section 1 . 3 . 2 . 6 .
2754	Fixup names differing only in case . As specified in section 1 . 3 . 2 . 7 .
2755	Escape non - ISO characters for an IR name .
2756	Handle the xts - environment element
2757	Handle the enable - client - handler element .
2758	Iterating over all attributes got from the reader parameter .
2759	Loads the specified JPA persistence provider module
2760	Create an ADD operation that can check that there is no other sibling when the resource is added .
2761	Adds Java EE module as a dependency to any deployment unit which is an EJB deployment
2762	todo attribute . marshallAsAttribute should return boolean
2763	centralize this hack
2764	creates a session using the global request controller .
2765	Infer the name of the JMS destination based on the queue s address .
2766	Registers endpoint and its associated WS handlers .
2767	Returns the job XML file names which contain the job name .
2768	Initializes the state of an instance
2769	Get the canonical request URI from the request mapping data requestPath
2770	This method is used by the iiop and iiopname URL Context factories .
2771	Converts the String name into a CompositeName returns the object resolved by the COS Naming api resolve . Returns the current context if the name is empty . Returns either an org . omg . CORBA . Object or javax . naming . Context object .
2772	Converts the String name into a CompositeName object and performs the bind operation . Uses callBindOrRebind . Throws an invalid name exception if the name is empty .
2773	Calls the unbind api of COS Naming and uses the exception mapper class to map the exceptions
2774	Returns a BindingEnumeration object which has a list of name class pairs . Lists the current context if the name is empty .
2775	Calls the destroy on the COS Naming Server
2776	Uses the callDestroy function to destroy the context . Destroys the current context if name is empty .
2777	Calls the bind_new_context COS naming api to create a new subcontext .
2778	Uses the callBindNewContext convenience function to create a new context . Throws an invalid name exception if the name is empty .
2779	Is mapped to resolve in the COS Naming api .
2780	Adds to the environment for the current context . Record change but do not reinitialize ORB .
2781	Record change but do not reinitialize ORB
2782	Builds transformations common to both stack protocols and transport .
2783	parse credential tag
2784	Removes one security domain from the maps
2785	Lookup a context in JNDI
2786	Create a ModuleReference from a target type and factory class .
2787	Create a ModuleReference from a target class name and factory class .
2788	Create a ModuleReference from a target type reference address and factory class .
2789	Return the LocalIDLType for the given TypeCode .
2790	Wait for the required service to start up and fail otherwise . This method is necessary when a runtime operation uses a service that might have been created within a composite operation .
2791	Method to compute masked password based on class attributes .
2792	Initialize the underlying vault .
2793	Start the vault with given alias .
2794	Display info about stored secured attribute .
2795	Display info about vault itself in form of AS7 configuration file .
2796	Returns vault configuration string in user readable form .
2797	convenient method to check notNull of value
2798	resource - adapter DMR resource
2799	Insert the constant value into the argument Any .
2800	Determine if this permission implies the other permission .
2801	Get the actions string . The actions string will be a canonical version of the one passed in at construction .
2802	Use the short class name as the default for the service name .
2803	Helper for sending out state change notifications
2804	Returns the CORBA object for a Remote object . If input is not a Remote object or if Remote object uses JRMP return null . If the RMI - IIOP library is not available throw ConfigurationException .
2805	Get value .
2806	Get the context service name .
2807	Returns a combined map of class and method level interceptors
2808	Add a method interceptor class name .
2809	Add a dependency to this component . If the same dependency is added multiple times only the first will take effect .
2810	Gets the interceptor list for a given method . This should not be called until all interceptors have been added .
2811	Gets the around timeout interceptor list for a given method . This should not be called until all interceptors have been added .
2812	Adds a timeout interceptor factory to every method on the component .
2813	Adds an around - construct interceptor
2814	Adds a post construct interceptor
2815	Adds a pre destroy interceptor
2816	Adds a pre passivate interceptor
2817	Adds a post activate interceptor
2818	Set the component create service factory for this component .
2819	Remove JNDI alias binder services .
2820	Perform the configuration of the transport provider .
2821	Get the base service name of a component s JNDI namespace .
2822	Get the base service name of a module s JNDI namespace .
2823	Get the service name of an environment entry
2824	Get the service name of a NamingStore
2825	Returns a default cache implementation
2826	Create the valueMembers array and return it .
2827	Create a valueMembers array for TypeCode creation only and return it .
2828	Creates the root subsystem s root address .
2829	Reads a element from the stream considering the parameters .
2830	Creates a new NamingServer and sets the naming context to use the naming server .
2831	As the weld based instantiator needs access to the bean manager it is installed as a service .
2832	Creates the service name used for the job operator registered for the deployment .
2833	Add a component to this application .
2834	Add a message destination to the application
2835	Get all views that have the given type in the application
2836	Get all components in the application that have the given name
2837	Get all views in the application that have the given name and view type
2838	Resolves a message destination name into a JNDI name
2839	Transformation for WildFly 8 . 1 . 0 . Final
2840	Reject the attributes if they are defined or discard them if they are undefined or set to their default value .
2841	Rename an attribute
2842	Pop the identity previously associated and restore internal state to it s previous value .
2843	just provide the default implementations
2844	make sure that each version has api impl and injection
2845	If needed convert old JSFVersionMarker values to slot values .
2846	Returns the TypeCode suitable for an IDL constant .
2847	Add a new IDL TypeCode for a mapped class .
2848	Ensure that a package exists in the IR . This will create modules in the IR as needed .
2849	Add a set of interfaces to the IR .
2850	Add a set of abstract valuetypes to the IR .
2851	Map the class and add its IIOP mapping to the repository .
2852	Add an interface .
2853	Add a value type .
2854	Add an exception type .
2855	Based on the the annotation type its either entitymanager or entitymanagerfactory
2856	not necessary .
2857	Creates the naming store if not provided by the constructor .
2858	Destroys the naming store .
2859	Checks that the current method
2860	transaction sync is not affected by the current invocation as multiple ejb methods may be invoked from afterCompletion
2861	Gets all classes that are eligible for injection etc
2862	Returns an unmodifiable view of timers in the current transaction that are waiting for the transaction to finish
2863	Extract extra parameters from the map of parameters .
2864	Get the parameters .
2865	Turn type into class .
2866	Convert a value
2867	Get types from values .
2868	A simple null and length check .
2869	Returns the next binding in the list .
2870	Get the next batch using _bindingIter . Update the more field .
2871	Constructs a JNDI Binding object from the COS Naming binding object .
2872	Discover all classes that implements HealthCheckProcedure
2873	Called when the deployment is undeployed .
2874	Returns a corba reference for the given locator
2875	Gets a handle for the given ejb locator .
2876	Returns the value of the node as an Enum value .
2877	Ensure InputStream actually skips ahead the required number of bytes
2878	Check that not both elements have been defined
2879	Add a component to this module .
2880	Maps a top level class loader to all CL s in the deployment
2881	Unbind the entry in the provided location . This will remove the node in the tree and no longer manage it .
2882	Lookup the object value of a binding node in the tree .
2883	List all NameClassPair instances at a given location in the tree .
2884	List all the Binding instances at a given location in the tree .
2885	Adds a new factory .
2886	Saves the current invocation context on a chained context handle .
2887	We need to create the IO subsystem if it does not already exist
2888	create a handler for serving welcome content
2889	Get an instance without identity . Can be used by finders create - methods and activation
2890	Calculate the map that maps IDL operation names to operation analyses . Besides mapped operations this map also contains the attribute accessor and mutator operations .
2891	collect metrics from the resources
2892	Prepare the ws Deployment and return a DeploymentUnit containing it
2893	Triggers the WS deployment aspects which process the deployment and install the endpoint services .
2894	Publish the webapp for the WS deployment unit
2895	Stops the webapp serving the provided ws deployment
2896	Starts the weld container
2897	Registers endpoint and its config .
2898	After a timeout failed the timer need to retried . The method must lock the timer for state check and update but not during callTimeout run .
2899	After running the timer calculate the new state or expire the timer and persist it if changed . The method must lock the timer for state check and updates if overridden .
2900	Get the declared methods
2901	Get the declared fields
2902	Get the constructor
2903	Get the method
2904	It s possible that the extension is already present . In that case this method does nothing .
2905	Check if the name of the parameter is allowed for the given resourceType .
2906	For generic acceptor and connectors migrate their factory - class attribute if they are using the default Netty ones .
2907	Attempt to cancel the corresponding invocation .
2908	Attempt to determine whether the invocation should proceed or whether it should be cancelled . This method should only be called once per flag instance .
2909	Change the type . It checks for compatibility between the change of type .
2910	tests if current expression is an indexed funciton AND that function can also be executed without using the index
2911	estimates how many items of this class will be returned applying this filter
2912	Recursive method used to find all classes in a given directory and subdirs .
2913	Filters discovered classes to see if they implement a given interface .
2914	Returns the generic class of multi - value objects .
2915	This is executed on non - indexed fields .
2916	Derives the type of a field in a document .
2917	Pushes record to cache . Identifier of record used as access key
2918	Looks up for record in cache by it s identifier . Optionally look up in secondary cache and update primary with found record
2919	given a cluster map and a set of clusters involved in a query tries to calculate the minimum number of nodes that will have to be involved in the query execution with clusters involved for each node .
2920	re - writes a list of flat AND conditions moving left all the equality operations
2921	creates additional projections for ORDER BY
2922	translates subqueries to LET statements
2923	checks if this RID is from one of these clusters
2924	tries to use an index for sorting only . Also adds the fetch step to the execution plan
2925	checks if a class is the top of a diamond hierarchy
2926	returns TRUE if all the order clauses are ASC FALSE if all are DESC null otherwise
2927	checks whether the condition has CONTAINSANY or similar expressions that require multiple index evaluations
2928	given a flat AND block and a set of indexes returns the best index to be used to process it with the complete description on how to use it
2929	given a full text index and a flat AND block returns a descriptor on how to process it with an index ( index index key and additional filters to apply after index fetch
2930	aggregates multiple index conditions that refer to the same key search
2931	Creates a new instance of the requested strategy . Since strategies are stateless if an existing instance already exists then it s returned .
2932	Checks if the user has the permission to access to the requested resource for the requested operation .
2933	Checks if a rule was defined for the user .
2934	Create a compact string with all the relevant information .
2935	Protecte system database from being replicated
2936	Initializes all the available server s databases as distributed .
2937	Removes the node map entry .
2938	Elects a new server as coordinator . The election browse the ordered server list .
2939	ASSIGN THE LOCK MANAGER AT STARTUP
2940	Commits the micro - transaction if it s a top - level micro - transaction .
2941	Rollbacks the micro - transaction if it s a top - level micro - transaction .
2942	Updates the record identity after its successful commit .
2943	Updates the record cache after unsuccessful micro - transaction commit .
2944	Prepares the path for a file creation or replacement . If the file pointed by the path already exists it will be deleted a warning will be emitted to the log in this case . All absent directories along the path will be created .
2945	Tries to move a file from the source to the target atomically . If atomic move is not possible falls back to regular move .
2946	splits this pattern into multiple
2947	Only idempotent commands that don t involve any other node can be executed locally .
2948	Collect up the characters as element s characters may be split across multiple calls . Isn t SAX lovely ...
2949	Tells if the channel is connected .
2950	Merge short value from two byte buffer . First byte of short will be extracted from first byte buffer and second from second one .
2951	Split short value into two byte buffer . First byte of short will be written to first byte buffer and second to second one .
2952	Execute the CREATE PROPERTY .
2953	Indexes a value and save the index . Splits the value in single words and index each one . Save of the index is responsibility of the caller .
2954	Splits passed in key on several words and remove records with keys equals to any item of split result and values equals to passed in value .
2955	Delegates to the OQueryExecutor the query execution .
2956	Returns only the first record if any .
2957	Creates the file .
2958	ALWAYS ADD THE HEADER SIZE BECAUSE ON THIS TYPE IS ALWAYS NEEDED
2959	Replaces the file content with the content of the provided file .
2960	Execute the command remotely and get the results back .
2961	Ends the request and unlock the write lock
2962	Registers the remote server with port .
2963	Acquire a network channel from the pool . Don t lock the write stream since the connection usage is exclusive .
2964	Gets the current thread database as a ODatabasePojoAbstract wrapping it where necessary .
2965	Retrieves the connection by id .
2966	Disconnects and kill the associated network manager .
2967	Interrupt the associated network manager .
2968	Disconnects a client connections
2969	Pushes the distributed configuration to all the connected clients .
2970	for internal use only
2971	Closes the transaction and releases all the acquired locks .
2972	Checks if all registered entities has schema generated if not it generates it
2973	Updates the metric metadata .
2974	Move the iterator to the end of the range . If no range was specified move to the last record of the cluster .
2975	Returns the next character from the input stream . Handles Unicode decoding .
2976	Execute the FIND REFERENCES .
2977	Defines a callback to call in case of error during the asynchronous replication .
2978	Registers a stateless implementations the same instance will be shared on all the storages .
2979	Detects limit of limit of open files .
2980	tests if current expression is an indexed function AND that function can be used on this target
2981	Move bytes left or right of an offset .
2982	Fills the stream from current position writing iLength times the iFiller byte
2983	executes all the script and returns last statement execution step so that it can be executed from outside
2984	executes the whole script and returns last statement ONLY if it s a RETURN otherwise it returns null ;
2985	At run - time the evaluation per record must return always true since the recordset are filtered at the beginning unless an operator can work in both modes . In this case sub - class must extend it .
2986	Executes the command and return the ODocument object created .
2987	This method load the record information by the internal cluster segment . It s for compatibility with older database than 0 . 9 . 25 .
2988	this method parses the statement
2989	this method works statefully using request and context variables from current Match statement . This method will be deprecated in next releases
2990	Start a depth - first traversal from the starting node adding all viable unscheduled edges and vertices .
2991	Add new indexDefinition in current composite .
2992	INTERNAL USE ONLY this has to be invoked ONLY if the item is aggregate!!!
2993	choosing return type is based on existence of
2994	get the collate of this expression based on the fully evaluated field chain starting from the passed object .
2995	returns the plain string representation of this identifier with quoting removed from back - ticks
2996	Pseudo - randomly advances and records the given probe value for the given thread .
2997	Execute the DROP CLUSTER .
2998	It returns a ODocument starting from a json file .
2999	Checks if an hash string matches a password based on the algorithm found on hash string .
3000	Hashes the input string .
3001	Returns true if the algorithm is supported by the current version of Java
3002	Creates the index .
3003	Returns the result set of the query as iterable vertices .
3004	Returns the result set of the query as iterable edges .
3005	Return the partition keys of all the sub - tasks .
3006	Computes the timeout according to the transaction size .
3007	Returns the current Graph settings .
3008	This check if a file was trimmed or trunked in the current atomic operation .
3009	Parses the timeout keyword if found .
3010	Parses the lock keyword if found .
3011	Adds the specified cluster to the class if it doesn t already exist .
3012	Remove all records belonging to specified cluster
3013	All operations running at cache initialization stage
3014	All operations running at cache destruction stage
3015	Result set with a single result ;
3016	Grant a permission to the resource .
3017	Revoke a permission to the resource .
3018	Deletes the current record .
3019	Binds parameters .
3020	Reduces every counter by half of its original value .
3021	Returns the table index for the counter at the specified depth .
3022	Applies a supplemental hash function to a given hashCode which defends against poor quality hash functions .
3023	Creates an index on this property . Indexes speed up queries but slow down insert and update operations . For massive inserts we suggest to remove the index make the massive insert and recreate it .
3024	Remove the index on property
3025	Returns the first index defined for the property .
3026	Returns the linked class in lazy mode because while unmarshalling the class could be not loaded yet .
3027	Binds POJO to ODocument .
3028	Remove the current event listener .
3029	Creates a distributed database instance if not defined yet .
3030	Removes a response manager because in timeout .
3031	Returns a copy of current database if it s open . The returned instance can be used by another thread without affecting current instance . The database copy is not set in thread local .
3032	IMPORTANT! Only for internal usage .
3033	Silently replace delegate by tree implementation .
3034	Manages cross compiler compatibility issues .
3035	Execute the CREATE CLUSTER .
3036	Closes all the databases .
3037	Removes from memory the pool associated to the closed storage . This avoids pool open against closed storages .
3038	Iterates on all factories and append all function names .
3039	Iterates on all factories and append all collate names .
3040	Iterates on all factories and append all command names .
3041	use only for named fields
3042	Sets the response s status as HTTP code and reason .
3043	Sets the response s headers specifying when using the keep - alive or not .
3044	Writes records as response specifying a fetch - plan to serialize nested records . The records are serialized in JSON format .
3045	Writes a record as response . The record is serialized in JSON format .
3046	Sends the complete HTTP response in one call .
3047	Sends the complete HTTP response in one call specifying a stream as content .
3048	Open a database specified by name using the username and password if needed
3049	Avoid to close it but rather release itself to the owner pool .
3050	Change UUID to null to prevent its serialization to disk .
3051	Indicates that the most earliest component in stack of components has completed it s operation so performance data for this component is stopped to be gathered .
3052	Takes performance data are split by components from last snapshot and aggregates them with data passed inside method as parameter . Result of aggregation of performance data is returned inside of passed in performance data .
3053	Takes write cache performance data from last snapshot and aggregates them with data passed inside method as parameter . Result of aggregation of performance data is returned inside of passed in performance data and as result of this method call .
3054	Takes storage performance data from last snapshot and aggregates them with data passed inside method as parameter . Result of aggregation of performance data is returned inside of passed in performance data and as result of this method call .
3055	Takes write ahead log data from last snapshot and aggregates them with data passed inside method as parameter . Result of aggregation of performance data is returned inside of passed in performance data and as result of this method call .
3056	Takes performance data for component from last snapshot and aggregates them with data passed inside method as parameter . Result of aggregation of performance data is returned inside of passed in performance data .
3057	Stops and records results of timer which counts how much time was spent on operation of flush pages in write cache .
3058	Stops and records results of timer which counts how much time was spent on fuzzy checkpoint operation .
3059	Stops and records results of timer which counts how much time was spent on full checkpoint operation .
3060	Stops and records results of timer which counts how much time was spent on atomic operation commit .
3061	Stops and records results of timer which counts how much time was spent on logging of single write ahead log record .
3062	Stops timer and records how much time was spent on flushing of data from write ahead log cache .
3063	parses an SQL statement and returns the corresponding executor
3064	inits the procedure that listens to pings from other servers eg . that discovers other nodes in the network
3065	inits the procedure that checks if a server is no longer available ie . if he did not ping for a long time
3066	Removes the Element from the Graph . In case the element is a Vertex all the incoming and outgoing edges are automatically removed too .
3067	Sets a Property value .
3068	Removes a Property .
3069	Check if a class already exists otherwise create it at the fly . If a transaction is running commit changes create the class and begin a new transaction .
3070	Wraps courser only if it is not already wrapped .
3071	Define custom strategy to use for vertex attribute .
3072	Define custom strategy to use for edge attribute .
3073	Called by class iterator .
3074	Called by cluster iterator .
3075	Bufferizes index changes to be flushed at commit time .
3076	Merge the two set try to use the optimum case
3077	Update current record .
3078	tests if current function is an indexed function AND that function can also be executed without using the index
3079	Make type conversion of keys for specific index .
3080	Writes page with given page index to the cache and eventually writes it to the file .
3081	Read page content with given index from cache or file .
3082	Flushes all buffered pages and truncates file till passed in page index
3083	Initializes cache and opens underlying file .
3084	Returns true if the replication is active otherwise false .
3085	Returns the new node strategy between dynamic and static . If static the node is registered under the server tag .
3086	Returns the execution mode if synchronous .
3087	Reads your writes .
3088	Returns the list of servers that can manage a list of clusters . The algorithm makes its best to involve the less servers as it can .
3089	Returns the set of server names involved on the passed cluster collection .
3090	Returns true if the local server has all the requested clusters .
3091	Returns true if the local server has the requested cluster .
3092	Returns an ordered list of master server . The first in the list is the first found in configuration . This is used to determine the cluster leader .
3093	Returns the complete list of servers found in configuration .
3094	Returns the set of clusters managed by a server .
3095	Returns the set of clusters where server is the owner .
3096	Returns the owner server for the given cluster excluding the passed node . The Owner server is the first in server list .
3097	Returns the static owner server for the given cluster .
3098	Returns the configured server list for the requested cluster .
3099	Returns the registered servers .
3100	Returns all the configured data centers names if any .
3101	Returns the data center write quorum .
3102	Returns true if the database is sharded across servers . False if it s completely replicated .
3103	Returns the list of servers in a data center .
3104	Returns the data center where the server belongs .
3105	Returns the global read quorum .
3106	Returns the write quorum .
3107	Gets the document representing the cluster configuration .
3108	Gets the document representing the dc configuration .
3109	Internal use only .
3110	Returns an index by name and class
3111	Drops an index by name .
3112	Creates a new unconnected vertex with no fields in the Graph .
3113	Creates an edge between a source Vertex and a destination Vertex setting label as Edge s label .
3114	Returns a vertex by an ID .
3115	Get all the Vertices in Graph of a specific vertex class and all sub - classes only if iPolymorphic is true .
3116	Get all the Edges in Graph of a specific edges class and all sub - classes only if iPolymorphic is true .
3117	Returns a edge by an ID .
3118	Reuses the underlying database avoiding to create and open it every time .
3119	Closes the Graph . After closing the Graph cannot be used .
3120	Returns the V persistent class as OrientVertexType instance .
3121	Returns the persistent class for type iTypeName as OrientVertexType instance .
3122	Creates a new Vertex persistent class .
3123	Drop a vertex class .
3124	Returns the persistent class for type iTypeName as OrientEdgeType instance .
3125	Creates a new Edge persistent class .
3126	Returns a graph element vertex or edge starting from an ID .
3127	Drops the index against a field name .
3128	Creates an automatic indexing structure for indexing provided key for element class .
3129	Removes listener which is triggered if exception is cast inside background flush data thread .
3130	Fires event about exception is thrown in data flush thread
3131	Stops monitoring of performance statistic for whole system .
3132	Registers JMX bean for current manager .
3133	Deregisters JMX bean for current manager .
3134	Iterates over all live threads and accumulates write performance statics gathered form threads also accumulates statistic from dead threads which were alive when when gathering of performance measurements is started .
3135	Iterates over all live threads and accumulates performance statics gathered form threads on system level also accumulates statistic from dead threads which were alive when when gathering of performance measurements is started .
3136	Iterates over all live threads and accumulates performance statics gathered form threads for provided component also accumulates statistic from dead threads which were alive when when gathering of performance measurements is started .
3137	Compress content string
3138	Returns the property value configured if any .
3139	Method that detaches all fields contained in the document to the given object .
3140	Returns the version number of the object . Version starts from 0 assigned on creation .
3141	Returns a wrapped OCommandRequest instance to catch the result - set by converting it before to return to the user application .
3142	Sets as dirty a POJO . This is useful when you change the object and need to tell to the engine to treat as dirty .
3143	Sets as not dirty a POJO . This is useful when you change some other object and need to tell to the engine to treat this one as not dirty .
3144	Iterates on all factories and append all index types .
3145	Iterates on all factories and append all index engines .
3146	Returns the list of node names that didn t provide a response .
3147	Returns all the responses in conflict .
3148	Returns the biggest response group .
3149	Computes the quorum response if possible by returning true and setting the field quorumResponse with the ODistributedResponse .
3150	Returns the received response objects .
3151	returns an already prepared SQL execution plan taking it from the cache if it exists or creating a new one if it doesn t
3152	tests if current expression involves an indexed function AND that function can be used on this target
3153	Formats the library of functions for a language .
3154	Acquires a database engine from the pool . Once finished using it the instance MUST be returned in the pool by calling the method
3155	Returns the next position available .
3156	Recalculates real bag size .
3157	Obtains the value stored under the given index in this bucket .
3158	checks if given a list of = conditions and a set of ORDER BY fields
3159	Finds a character inside a string specyfing the limits and direction . If iFrom is minor than iTo then it moves forward otherwise backward .
3160	Jump white spaces .
3161	Jump some characters reading from an offset of a String .
3162	Sets the fetch plan to use .
3163	Adds the record to repair int the map of records and cluster . The decision about repairing is taken by the timer task .
3164	Cancel the repair against a record because the update succeed .
3165	Enqueues the request to repair a cluster . The decision about repairing is taken by the timer task .
3166	Calculate the set of dependency aliases for each alias in the pattern .
3167	Create a POJO by its class name .
3168	Registers provided classes
3169	Scans all classes accessible from the context class loader which belong to the given class and all it s attributes - classes .
3170	Sets the received handler as default and merges the classes all together .
3171	Acquires a connection from the pool . If the pool is empty then the caller thread will wait for it .
3172	Returns amount of available connections which you can acquire for given source and user name . Source id is consist of source name and source user name .
3173	Acquires a connection from the pool specifying options . If the pool is empty then the caller thread will wait for it .
3174	Execute the SYNC CLUSTER .
3175	Switch to the OrientDb classloader before lookups on ServiceRegistry for implementation of the given Class . Useful under OSGI and generally under applications where jars are loaded by another class loader
3176	Checks the OrientDB cache memory configuration and emits a warning if configuration is invalid .
3177	Reads an individual Vertex from JSON . The vertex must match the accepted GraphSON format .
3178	Reads an individual Edge from JSON . The edge must match the accepted GraphSON format .
3179	Creates a Jettison JSONObject from a graph element .
3180	Creates a Jackson ObjectNode from a graph element .
3181	Executes import with configuration ;
3182	Status of the Running Jobs
3183	returns the data center map for current deploy . The keys are data center names the values are node names per data center
3184	Returns the secret key algorithm portion of the cipher transformation .
3185	Creates an OSymmetricKey from an OSymmetricKeyConfig interface .
3186	Creates an OSymmetricKey from a file containing a Base64 key .
3187	Creates an OSymmetricKey from an InputStream containing a Base64 key .
3188	This method encrypts an array of bytes .
3189	Saves the internal SecretKey to the specified OutputStream as a Base64 String .
3190	Saves the internal SecretKey as a KeyStore .
3191	Set the inherited context avoiding to copy all the values every time .
3192	adds an item to the unique result set
3193	OBJECT OR MAP . CHECK THE TYPE ATTRIBUTE TO KNOW IT .
3194	null is returned in all other cases and means authentication was unsuccessful .
3195	Retrieves the value crossing the map with the dotted notation
3196	Return the record to use for the operation .
3197	Read the current record and increment the counter if the record was found .
3198	Gets transactional graph with the database from pool if pool is configured . Otherwise creates a graph with new db instance . The Graph instance inherits the factory s configuration .
3199	Gets non transactional graph with the database from pool if pool is configured . Otherwise creates a graph with new db instance . The Graph instance inherits the factory s configuration .
3200	Setting up the factory to use database pool instead of creation a new instance of database connection each time .
3201	Gets the property value .
3202	Closes a transaction .
3203	Root productions .
3204	Get the next Token .
3205	Get the specific Token .
3206	Generate ParseException .
3207	Returns a lazy iterable instance against vertices .
3208	Removes the current Vertex from the Graph . all the incoming and outgoing edges are automatically removed too .
3209	Creates an edge between current Vertex and a target Vertex setting label as Edge s label .
3210	Creates an edge between current Vertex and a target Vertex setting label as Edge s label . iClassName is the Edge s class used if different by label .
3211	Used to extract the class name from the vertex s field .
3212	Determines if a field is a connections or not .
3213	just read collection so import process can continue
3214	Returns a map of all console method and the object they can be called on .
3215	Executes the request on local node . In case of error returns the Exception itself
3216	Returns the nodes with the requested status .
3217	Executes a backup of the database . During the backup the database will be frozen in read - only mode .
3218	Wait before to retry
3219	Returns the argument by position
3220	Checks how many parameters have been received .
3221	Connects to a remote server .
3222	Returns the list of databases on the connected remote server .
3223	Returns the server information in form of document .
3224	Checks if a database exists in the remote server .
3225	Drops a database from a remote server instance .
3226	Freezes the database by locking it in exclusive mode .
3227	Releases a frozen database .
3228	Gets the cluster status .
3229	Execute the CREATE INDEX .
3230	Returns a Transactional OrientGraph implementation from the current database in thread local .
3231	Parses the RETRY number of times
3232	Update the record .
3233	Deletes the record .
3234	databaseName may be null .
3235	This will authenticate username using the system database .
3236	Checks to see if a
3237	Catch the JVM exit and assure to shutdown the Orient Server .
3238	Method to adjust line and column numbers for the start of a token .
3239	Write a bucket pointer to specific location .
3240	Read bucket pointer from page .
3241	Ends the current atomic operation on this manager .
3242	Acquires exclusive lock with the given lock name in the given atomic operation .
3243	Changes amount of memory which may be used by given cache . This method may consume many resources if amount of memory provided in parameter is much less than current amount of memory .
3244	Initialize a server socket for communicating with the client .
3245	Initializes connection parameters by the reading XML configuration . If not specified get the parameters defined as global configuration .
3246	Shutdowns this log manager .
3247	Adds item to the container . Item should be in open state .
3248	Removes item associated with passed in key .
3249	Acquires item associated with passed in key in container . It is guarantied that item will not be closed if limit of open items will be exceeded and container will close rarely used items .
3250	Returns item without acquiring it . State of item is not guarantied in such case .
3251	Clears all content .
3252	Closes item related to passed in key . Item will be closed if it exists and is not acquired .
3253	Read content of all read buffers and reorder elements inside of LRU list to update internal statistic . Method has to be wrapped by LRU lock .
3254	Method is used to log operations which change content of the container . Such changes should be flushed immediately to update content of LRU list .
3255	Method is used to log operations which do not change LRU list content but affect order of items inside of LRU list . Such changes may be delayed till buffer will be full .
3256	Adds entry to the read buffer with selected index and returns amount of writes to this buffer since creation of this container .
3257	Finds closest power of two for given integer value . Idea is simple duplicate the most significant bit to the lowest bits for the smallest number of iterations possible and then increment result value by 1 .
3258	Return true if the push request require an unregister
3259	Assure that the requested key is converted .
3260	Converts all the items
3261	Obtain OBinarySerializer realization for the OType
3262	Adds shutdown handlers in order which will be used during execution of shutdown .
3263	Returns the engine by its name .
3264	new execution logic
3265	old execution logic
3266	Creates a new ReadersEntry instance for the current thread and its associated AtomicInteger to store the state of the Reader
3267	Token MUST be validated before being passed to this method .
3268	Repairs the security structure if broken by creating the ADMIN role and user with default password .
3269	Tries to acquire lock during provided interval of time and returns either if provided time interval was passed or if lock was acquired .
3270	Returns the connected incoming or outgoing vertex .
3271	Returns the Edge Id assuring to save it if it s transient yet .
3272	Set a Property value . If the edge is lightweight it s transparently transformed into a regular edge .
3273	Removed a Property .
3274	Removes all entries from bonsai tree . Put all but the root page to free list for further reuse .
3275	Deletes a whole tree . Puts all its pages to free list for further reusage .
3276	Flushes data to db and closes the db . Call this once after vertices and edges creation .
3277	Creates a new vertex
3278	Parses the strategy keyword if found .
3279	returns begin position and length for each value in embedded collection
3280	Execute the INSERT and return the ODocument object created .
3281	Checks if the link must be fixed .
3282	Internal only . Fills in one shot the record .
3283	Internal only . Sets the version .
3284	Internal only . Return the record type .
3285	Opens the database .
3286	Builds the exception stack trace and prints it according to a level passed as argument .
3287	Performs index query and returns index cursor which presents subset of index data which corresponds to result of execution of given operator .
3288	Convert the item with the received key to a record .
3289	Register all the names for the same instance .
3290	Derived implementations can override this method to provide new server user implementations .
3291	Analyzes a query filter for a possible indexation options . The results are sorted by amount of fields . So the most specific items go first .
3292	Add SQL filter field to the search candidate list .
3293	Method that attaches all data contained in the object to the associated document
3294	calculates the indexed class based on the class name
3295	first set new current value then call next
3296	Truncates all the clusters the class uses .
3297	Adds a base class to the current one . It adds also the base class cluster ids to the polymorphic cluster ids array .
3298	Add different cluster id to the polymorphic cluster ids array .
3299	Serialize the link .
3300	Put buffer which is not used any more back to the pool or frees direct memory if pool is full .
3301	Checks whether there are not released buffers in the pool
3302	Clears pool and dealocates memory .
3303	Convert the byte array to an int starting from the given offset .
3304	Auto register myself as hook .
3305	Guarantees that each class has own master cluster .
3306	Avoids to dump the same configuration twice if it s unchanged since the last time .
3307	This method is used to find an item in an array .
3308	This method is used to find a number in an array .
3309	Determine clusters that are used in select operation
3310	Handles the record in result .
3311	Returns the temporary RID counter assuring it s unique per query tree .
3312	Report the tip to the profiler and collect it in context to be reported by tools like Studio
3313	Parses the fetchplan keyword if found .
3314	Parses the NOCACHE keyword if found .
3315	Use index to order documents by provided fields .
3316	Single Job Status
3317	Delegates the execution to the configured command executor .
3318	That is internal method which is called once we encounter any error inside of JVM . In such case we need to restart JVM to avoid any data corruption . Till JVM is not restarted storage will be put in read - only state .
3319	Puts the given value under the given key into this storage for the index with the given index id . Validates the operation using the provided validator .
3320	Rollbacks the given micro - transaction .
3321	Executes the command request and return the result back .
3322	Register the cluster internally .
3323	Sets a property value
3324	Execute the CREATE CLASS .
3325	Execute the SYNC DATABASE .
3326	Deletes the record checking the version .
3327	Callback the registered hooks if any .
3328	Deletes the record without checking the version .
3329	Returns the number of the records of the class iClassName .
3330	Returns the number of the records of the class iClassName considering also sub classes if polymorphic is true .
3331	Activates current database instance on current thread .
3332	Registers a stateful implementations a new instance will be created for each storage .
3333	Calculates the index within a binary chunk corresponding to the given absolute position within this BLOB
3334	Parses the next word . It returns the word parsed if any .
3335	Parses the next word . If no word is found or the parsed word is not present in the word array received as parameter then a SyntaxError exception with the custom message received as parameter is thrown . It returns the word parsed if any .
3336	Parses the next sequence of chars .
3337	Parses optional keywords between the iWords . If a keyword is found but doesn t match with iWords then a SyntaxError is raised .
3338	Check for a separator
3339	Execute the DROP CLASS .
3340	Remove both backup and primary configuration files on delete
3341	Browse the stream but just return the begin of the byte array . This is used to lazy load the information only when needed .
3342	Extracts the token extract id the access token exists or returning an empty extract if there is no one on the context it may occasionally causes Unauthorized response since the token extract is empty .
3343	Try to acquire the token using a access token provider .
3344	Attempt to copy an access token from the security context into the oauth2 context .
3345	Checks whether no more bytes will be returned .
3346	Reads a line into the given byte array .
3347	Reads a line into the given byte - array fragment .
3348	Skips the given amount of bytes by repeated reads .
3349	Skips over and discards the given number of bytes of data from this fast buffered input stream .
3350	Ensures that a range given by an offset and a length fits an array of given length .
3351	Sorts the specified range of elements using the specified swapper and according to the order induced by the specified comparator using mergesort .
3352	Swaps two sequences of elements using a provided swapper .
3353	Sorts the specified range of elements using the specified swapper and according to the order induced by the specified comparator using a parallel quicksort .
3354	Avalanches the bits of an integer by applying the finalisation step of MurmurHash3 .
3355	Avalanches the bits of a long integer by applying the finalisation step of MurmurHash3 .
3356	Appends the content of a specified buffer to the end of the currently represented stream .
3357	Truncates the overflow file to a given size if possible .
3358	Repositions the stream .
3359	Metrics reporting implementation is provided by the extending subclass . If exceptions are not gracefully handled in the extending subclass then an exception there can fail the consumer refresh even though metrics reporting might not be mission critical . This method protects against that scenario by catching all exceptions logging that there was an exception and continuing with the consumer refresh .
3360	Await successful completion of all previously submitted tasks . Throw exception of the first failed task if 1 or more tasks failed .
3361	Finds matches for a given query .
3362	Find candidate types for compaction . No two types in the returned set will have a dependency relationship either directly or transitively .
3363	Cleans snapshot to keep the last n snapshots . Defaults to 5 .
3364	Hash a field in an OBJECT record .
3365	Determine whether two OBJECT field records are exactly equal .
3366	Remove any records from the given selection which are referenced by other records not in the selection .
3367	Reports announcement - related metrics .
3368	On cycle completion this method reports cycle metrics .
3369	Map of string header tags reading .
3370	Extracts the primary key from the specified POJO .
3371	Clear all bits to 0 .
3372	Read populated ordinals as a bit set from a stream and notify a listener for each populated ordinal .
3373	Estimate the total number of bits used to represent the integer set .
3374	Returns a String representation of the provided row s field value . If useFrom is true this will use the from value from the pair otherwise this will use the to value .
3375	Copy bytes from another ByteData to this array .
3376	copies exactly data . length bytes from this SegmentedByteArray into the provided byte array
3377	checks equality for a specified range of bytes in two arrays
3378	Copies the data from the provided source array into this array guaranteeing that if the update is seen by another thread then all other writes prior to this call are also visible to that thread .
3379	copies exactly data . length bytes from this SegmentedByteArray into the provided byte array guaranteeing that if the update is seen by another thread then all other writes prior to this call are also visible to that thread .
3380	Copy bytes from the supplied InputStream into this array .
3381	Write a portion of this data to an OutputStream .
3382	Ensures that the segment at segmentIndex exists
3383	Returns the position of a field previously added to the map or - 1 if the field has not been added to the map .
3384	Called after initial pass . Returns the sum total number of select buckets in the low 7 bytes and the bits required for the max set size in the high 1 byte .
3385	Determines whether DataSet contains any collections schema
3386	Generate files under the specified directory
3387	Generate files based on dataset schemas under the specified directory
3388	Determine whether or not the specified ordinal contains the provided primary key value .
3389	Retrieve the primary key value for the specified ordinal .
3390	Creates an object - based field path given a data set and the field path in symbolic form conforming to paths associated with a primary key .
3391	Creates a field path given a data set and the field path in symbolic form conforming to paths associated with a hash index .
3392	Creates a field path given a data set and the field path in symbolic form conforming to paths associated with a prefix index .
3393	Associating the obj with an ordinal
3394	initialize field positions and field paths .
3395	Check if the given key exists in the index .
3396	protected for tests
3397	Add an individual field from an OBJECT schema . This field will be either excluded or included depending on whether this is an exclude or include filter respectively .
3398	Dependency types come before dependent types
3399	Make it easier to automatically use defaults for next major version
3400	Get the value of the byte at the specified index .
3401	Match any records which include a field with the provided fieldName and value .
3402	Match any records of the specified type which have the specified field set to the specified value .
3403	Set the paths for which we will inspect differences across the two states
3404	Optionally specify paths for which we will match records within an individual type s hierarchy
3405	Calculate the differences
3406	Initializes the data model and restores from existing state .
3407	Runs a Hollow Cycle if successful cleans the mutations map .
3408	Exclude the record which matches the specified key .
3409	Exclude any objects which are referenced by excluded objects .
3410	Write the header to the data output stream
3411	Calculates the memory heap footprint and populated ordinals per type and total
3412	Concatenates all fields in order to the ByteDataBuffer supplied . This concatenation is the verbatim serialized representation in the FastBlob .
3413	Write 4 consecutive bytes
3414	Write 8 consecutive bytes
3415	Return an ordinal to the pool after the object to which it was assigned is discarded .
3416	Ensure that all future ordinals are returned in ascending order .
3417	Hash a key
3418	Hash a single key field
3419	Resize the underlying storage to a multiple of what it currently is . This method is not thread - safe .
3420	If the preferredOrdinal has not already been used mark it and use it . Otherwise delegate to the FreeOrdinalTracker .
3421	Create an array mapping the ordinals to pointers so that they can be easily looked up when writing to blob streams .
3422	Compare the byte sequence contained in the supplied ByteDataBuffer with the sequence contained in the map pointed to by the specified key byte by byte .
3423	Grow the key array . All of the values in the current array must be re - hashed and added to the new array .
3424	Get the hash code for the byte array pointed to by the specified key .
3425	Create an AtomicLongArray of the specified size each value in the array will be EMPTY_BUCKET_VALUE
3426	This method assumes the other traverser has the same match fields specified in the same order .
3427	Finds the unique object an instance of the unique type for a given key .
3428	Swap underlying state engines between current and pending while keeping the versions consistent ; used after delta integrity checks have altered the underlying state engines .
3429	Determine size of hash table capable of storing the specified number of elements with a load factor applied .
3430	Run a compaction cycle will produce a data state with exactly the same data as currently but reorganized so that ordinal holes are filled . This may need to be run multiple times to arrive at an optimal state .
3431	Write the current state as a snapshot blob .
3432	Serialize the changes necessary to transition a consumer from the previous state to the current state as a delta blob .
3433	Adds the schema name to the set if the schema name doesn t correspond to a Hollow primitive type . Factored out to prevent bloat in the switch statement it is called from .
3434	Convert field path into Param name
3435	Recreate the hash index entirely
3436	Query the index .
3437	Triggers async refresh after some random number of milliseconds have passed between now and the specified maximum number of milliseconds .
3438	Triggers async refresh after the specified number of milliseconds has passed .
3439	Add a type to be included in the diff report
3440	Run the diff
3441	Encode the specified long as a variable length integer into the supplied OuputStream
3442	Encode the specified int as a variable length integer into the supplied OutputStream
3443	Write the value as a VarInt into the array starting at the specified position .
3444	Read a variable length integer from the supplied InputStream
3445	Read a variable length long from the supplied InputStream .
3446	Used internally for adding view . Need because we override addView to pass - through to the Refreshable View
3447	Re - measure the Loading Views height and adjust internal padding as necessary
3448	Updates the View State when the mode has been set . This does not do any checking that the mode is different to current state so always updates .
3449	Actions a Pull Event
3450	Helper method for Overscrolling that encapsulates all of the necessary function . This is the advanced version of the call .
3451	Adds a fact to the Rule .
3452	Adds one or more facts into the Rule .
3453	Returns a new RuleBuilder for the specified Rule class .
3454	Returns a new RuleBuilder for the default Rule type .
3455	Specifies the fact type for the Rule being built .
3456	Specifies the Result type for the Rule being built .
3457	Adds a fact to the Rule using a name value pair to specify a new fact .
3458	Adds one or more facts to the Rule .
3459	Adds an action as a Consumer to the Rule .
3460	Returns a rule instance
3461	Method getAnnotatedField gets the first annotated field of the type of annotation specified .
3462	Method getAnnotatedMethod the first annotated method of the type of annotation specified .
3463	Method getAnnotation returns the annotation on a class or its parent annotation .
3464	Registers a rule to be audited .
3465	Updates the status of the rule & stores the status with the Auditor .
3466	Gets a map of each rule name with its associated status .
3467	Specifies the Result type for the RuleBook .
3468	Adds a then action into the Rule .
3469	Addds a then action into the Rule .
3470	Resets the value of the Result to its default value .
3471	Specifies the fact type
3472	Gets the POJO Rules to be used by the RuleBook via reflection of the specified package .
3473	Reads empty line or throw an exception if a none empty line was found .
3474	convert list to array never returns null .
3475	Examine images for build configuration and extract all ports
3476	Config can override ports
3477	parse config specified ports
3478	null ports can happen for ignored mappings
3479	remove first element of list or null if list is empty
3480	Merge services of same name with the default service
3481	Save the images stream to a file
3482	Returns true if the given servicePort matches the intOrString value
3483	Returns the named port for the given service name or blank
3484	Returns the service host and port for the given environment variable name .
3485	Adds the given key and value pair into the map if the map does not already contain a value for that key
3486	Add all values of a map to another map but onlfy if not already existing .
3487	Returns a new map with all the entries of map1 and any from map2 which don t override map1 .
3488	Copies all of the elements i . e . the mappings from toPut map into ret if toPut isn t null .
3489	A Simple utility function to watch over pod until it gets ready
3490	Validates that the given value is valid according to the kubernetes ID parsing rules throwing an exception if not .
3491	Loads the Kubernetes JSON and converts it to a list of entities
3492	Returns the resource version for the entity or null if it does not have one
3493	Returns true if the pod is running and ready
3494	Returns the current context in the given config
3495	Returns true if we already have a route created for the given name
3496	Returns true if any of the given resources could be found on the given class loader
3497	Read fragment and add default values
3498	Convert a map of env vars to a list of K8s EnvVar objects .
3499	Merges the given resources together into a single resource .
3500	Returns a merge of the given maps and then removes any resulting empty string values ( which is the way to remove say a label or annotation when overriding
3501	we could also use an annotation?
3502	Reads the configuration from the file .
3503	Adds a port to the list .
3504	Method used in MOJO
3505	Gets plugin configuration values . Since there can be inner values it returns a Map of Objects where an Object can be a simple type List or another Map .
3506	Gets configuration values . Since there can be inner values it returns a Map of Objects where an Object can be a simple type List or another Map .
3507	Download with showing the progress a given URL and store it in a file
3508	Compares two version strings such that 1 . 10 . 1 > 1 . 4 etc
3509	Find an enricher or generator config possibly via a profile and merge it with a given configuration .
3510	Lookup profiles from a given directory and merge it with a profile of the same name found in the classpath
3511	Read all default profiles first then merge in custom profiles found on the classpath
3512	Read all profiles found in the classpath .
3513	check for various variations of profile files
3514	prepend meta - inf location
3515	Load a profile from an input stream . This must be in YAML format
3516	This method overrides the ImagePullPolicy value by the value provided in XML config .
3517	Returns true if we are in OpenShift S2I binary building mode
3518	This method just makes sure that the replica count provided in XML config overrides the default option ; and resource fragments are always given topmost priority .
3519	Returns the first child element for the given name
3520	Installs the template into the namespace without processing it
3521	Removes all the tags with the given name
3522	Returns true if the namespace is created
3523	Creates and return a project in openshift
3524	Returns true if the ProjectRequest is created
3525	Returns the namespace defined in the entity or the configured namespace
3526	Logs an error applying some JSON to Kubernetes and optionally throws an exception
3527	This method will create a default Namespace or Project if a namespace property is specified in the xml resourceConfig or as a parameter to a mojo .
3528	This method will annotate all the items in the KubernetesListBuilder with the created new namespace or project .
3529	Hook for adding extra environment vars
3530	Parses a duration string anr returns its value in seconds .
3531	Parses a duration string anr returns its value in nanoseconds .
3532	Scan the project s output directory for certain files .
3533	Lets disable OpenShift - only features if we are not running on OpenShift
3534	Returns true if there is an existing ingress rule for the given service
3535	This method reads properties file to load custom mapping between kinds and filenames .
3536	Get generator context
3537	Get generator config
3538	Get enricher context
3539	Get enricher config
3540	Lets use the project and its classpath to try figure out what default icon to use
3541	Copies any local configuration files into the app directory
3542	Returns the given properties resource on the project classpath if found or an empty properties object if not
3543	Determine the spring - boot major version for the current project
3544	Create a list of services ordered according to the ordering given in the service descriptor files . Note that the descriptor will be looked up in the whole classpath space which can result in reading in multiple descriptors with a single path . Note that the reading order for multiple resources with the same name is not defined .
3545	Allow enricher to add Metadata to the resources .
3546	Get the raw untyped configuration or an empty map
3547	Build a flattened representation of the Yaml tree . The conversion is compliant with the thorntail spring - boot rules .
3548	Get watcher config
3549	Returns the Template if the list contains a single Template only otherwise returns null
3550	get a reference date
3551	Get a config value with a default
3552	Return full configuration as raw string - string values
3553	Order elements according to the order provided by the include statements . If no includes has been configured return the given list unaltered . Otherwise arrange the elements from the list in to the include order and return a new list .
3554	Add the base image either from configuration or from a given selector
3555	Use istag as default for redhat versions of this plugin
3556	Get Image name with a standard default
3557	Get the docker registry where the image should be located . It returns null in Openshift mode .
3558	Returns true if in offline mode false if not speciied . Can be overriden by
3559	Returns the external access to the given service name
3560	Check a global prop from the project or system props
3561	Create Jest client with URI
3562	Create internal Elasticsearch node .
3563	List all official ES plugins available on ClassPath .
3564	Used to parse a response from the Braintree Gateway to be used for American Express rewards balance .
3565	Gets the rewards balance associated with a Braintree nonce . Only for American Express cards .
3566	Create a PayPalPaymentResource from a jsonString . Checks for keys associated with Single Payment and Billing Agreement flows .
3567	Make a HTTP GET request to Braintree using the base url path and authorization provided . If the path is a full url it will be used instead of the previously provided url .
3568	Make a HTTP POST request to Braintree using the base url path and authorization provided . If the path is a full url it will be used instead of the previously provided url .
3569	Parses the Venmo configuration from json .
3570	Collect device information for fraud identification purposes .
3571	Collect device information for fraud identification purposes . This should be used in conjunction with a non - aggregate fraud id .
3572	Collect PayPal device information for fraud identification purposes .
3573	Collect device information for fraud identification purposes from PayPal only .
3574	Check if an app has the correct matching signature . Used to prevent malicious apps from impersonating other apps .
3575	Returns the value mapped by name if it exists coercing it if necessary or fallback if no such mapping exists .
3576	Parses a response from the Braintree gateway for a list of payment method nonces .
3577	Returns the browser recipe that can handle checkout or null if there is none .
3578	Returns the browser recipe that can handle billing agreement or null if there is none .
3579	Make a HTTP GET request to using the base url and path provided . If the path is a full url it will be used instead of the previously provided base url .
3580	Make a HTTP POST request using the base url and path provided . If the path is a full url it will be used instead of the previously provided url .
3581	Performs a synchronous post request .
3582	Prepares the payment flow for a specific type of local payment .
3583	Initiates the browser switch for a payment flow by opening a browser where the customer can authenticate with their bank .
3584	Adds a listener .
3585	Removes a previously added listener .
3586	Starts the Billing Agreement flow for PayPal with custom PayPal approval handler .
3587	The result from PayPal s request .
3588	Parse the PayPal response URL using OneTouchCore .
3589	Add user - defined words to the noun dictionary . Spaced words are ignored .
3590	Remove user - defined word List from the dictionary for the specified KoreanPos .
3591	Tokenize with the builder options into a String Iterable .
3592	Extract phrases from Korean input text
3593	Detokenize the input list of words .
3594	Reads size amount of bytes from ch into a new ByteBuffer allocated from a buffer buf
3595	Joins buffers containing individual NAL units into a single AnnexB delimited buffer . Each NAL unit will be separated with 00 00 00 01 markers . Allocates a new byte buffer and writes data into it .
3596	Joins buffers containing individual NAL units into a single AnnexB delimited buffer . Each NAL unit will be separated with 00 00 00 01 markers .
3597	Returns a profile instance for the given index . If the index is not between 1 and 23 inclusive UNKNOWN is returned .
3598	Converts floating point taps to fixed precision taps .
3599	Reads one full segment till the next marker . Will read as much data as the provided buffer fits if the provided buffer doesn t fit all data will return MORE_DATA .
3600	Reads one full segment till the next marker . Will allocate the necessary buffer to hold the full segment . Internally uses a growing collection of smaller buffers since the segment size is intitially unkwnown .
3601	Finds maximum frame of a sequence by bisecting the range .
3602	Tries to modify movie header in place according to what s implemented in the edit the file gets pysically modified if the operation is successful . No temporary file is created .
3603	Tries to modify movie header in place according to what s implemented in the edit . Copies modified contents to a new file .
3604	Calculates track duration considering edits
3605	Finds timevalue of a frame number
3606	Finds frame by timevalue
3607	Converts media timevalue to edited timevalue
3608	Converts edited timevalue to media timevalue
3609	Calculates frame number as it shows in quicktime player
3610	Calculates and formats standard time as in Quicktime player
3611	Converts timevalue to frame number based on timecode track
3612	Formats tape timecode based on frame counter
3613	Creates packed 4bit list with 7 values in it
3614	Sets a 4 bit value into the list
3615	Determines if two colors match . Aside from simply comparing the objects this function also takes into account lables ANY ANY_INTERLEAVED ANY PLANAR .
3616	Calculates the component size based on the fullt size and color subsampling of the given component index .
3617	does not modify packets
3618	Reads the next four bytes .
3619	Creates wav header for the specified audio format
3620	Takes single channel wavs as input produces multi channel wav
3621	Parses the input arrays as a DecoderSpecificInfo as used in MP4 containers .
3622	Encodes one symbol either 0 or 1
3623	static int i = 0 ;
3624	Splits track on the timevalue specified
3625	Decodes one frame of AAC data in frame mode and returns the raw PCM data .
3626	Sets the endianness for the data .
3627	Deblocks P - macroblock
3628	Encodes a frame into a movie .
3629	Encodes unsigned integer with given length
3630	This method is used mostly during writing EBML bitstream . It answers the following question How many bytes should be used to encode unsigned integer value
3631	Add a packet to the underlying file
3632	Searching for the next tag in a file after corrupt segment
3633	Decodes one bin from arithmetice code word
3634	Special decoding process for symbols with uniform distribution
3635	Finds next Nth MPEG bitstream marker 0x000001xx and returns the data that preceeds it as a ByteBuffer slice
3636	Returns a sample frequency instance for the given index . If the index is not between 0 and 11 inclusive SAMPLE_FREQUENCY_NONE is returned .
3637	this may be a result of color greening out in long GOPs .
3638	Starts DCT reconstruction
3639	Recalculates image based on new DCT coefficient
3640	Finalizes DCT calculation
3641	merge bits of a to b
3642	32 bit rewind and reverse
3643	64 bit rewind and reverse
3644	Seeks to a previous key frame prior or on the given frame if the track is not seekable returns 0 .
3645	Returns a pixel buffer of a suitable size to hold the given video frame . The video size is taken either from the video metadata or by analyzing the incoming video packet .
3646	transformes the exponent value of the gain to the id of the gain change point
3647	Generic byte - array to integer - array conversion
3648	Generic integer - array to byte - array conversion
3649	Converts PCM samples stored in buf and described with format to float array representation
3650	Converts float PCM samples stored in floatBuf to integer representation according to format and stores them in buf
3651	Interleaves audio samples in ins into outb using sample size from the format
3652	Deinterleaves audio samples from inb into outs using sample size from format
3653	Retrieves coded size of this video track .
3654	A boxout macroblock to slice group mapping . Only applicable when there s exactly 2 slice groups . Slice group 1 is a background while slice group 0 is a box in the middle of the frame .
3655	A macroblock to slice group map that fills frame column by column
3656	Utility method to read a batch of ULS
3657	Utility method to read a batch of int32
3658	Calculates median prediction
3659	Encode this picture into h . 264 frame . Frame type will be selected by encoder .
3660	Encode this picture as an IDR frame . IDR frame starts a new independently decodeable video sequence
3661	Encode this picture as a P - frame . P - frame is an frame predicted from one or more of the previosly decoded frame and is usually 10x less in size then the IDR frame .
3662	Returns a list of all codecs supported for this Object .
3663	Returns a list of all codec tags supported for this container .
3664	Add a reference to the set of references we ll collect .
3665	The actual GC ;
3666	Internal Only .
3667	Load the given library into the given application .
3668	Looks for a URL in a classpath and if found unpacks it
3669	Finds all . humble temp files in the temp directory and nukes them .
3670	Return default channel layout for a given number of channels .
3671	Get the channel with the given index in channel_layout .
3672	Create a new Packet
3673	Prints the version of this library to System . out along with some information on what this jar is .
3674	The default timebase used by media if not otherwise specified .
3675	Create a new Demuxer
3676	Opens a file and plays the video from it on a screen at the right rate .
3677	Takes the video picture and displays it at the right time .
3678	Get the descriptor for the given id .
3679	Print information about the property on the configurable object .
3680	Register a new protocol name for this factory that Humble . IO will use for the given protocol .
3681	Generates a unique name suitable for using in the map methods for the URL parameter .
3682	Create a new MediaAudioResampler .
3683	Returns a list of supported frame - rates this codec can encode video to .
3684	Returns a list of supported pixel formats this codec can encode video in .
3685	Returns a list of supported audio sample rates this codec can encode audio in .
3686	Returns a list of supported audio sample formats this codec can encode audio in .
3687	Returns a list of supported audio channel layouts this codec can encode audio in .
3688	Set a flag to true or false .
3689	Set a flag2 to true or false .
3690	Get the decoder that can decode the information in this Demuxer stream .
3691	Get the Demuxer this DemuxerStream belongs to .
3692	Return a collection of all output formats installed on this system .
3693	Creates a new FilterGraph .
3694	Get the type of this filter .
3695	Returns up to length bytes starting at offset in the underlying buffer we re managing .
3696	Get a connection to the speaker if available .
3697	Re - sample a picture .
3698	Test that the passed image is valid and conforms to the converters specifications .
3699	Test that the passed picture is valid and conforms to the converters specifications .
3700	Get the FilterGraph this FilterLink belongs to .
3701	Get any meta - data associated with this media item
3702	Get the CPU architecture based on the passed in javaCPUArch specifier .
3703	Return a CPUArch from parsing a GNU autoconf triple .
3704	Get the OSFamily based on the passed in osName specifier .
3705	Return an OS Family from parsing a GNU autoconf triple .
3706	Opens a file and plays the audio from it on the speakers .
3707	This is the method that actually loads the library . It maintains an object level lock and since this class only allows a singleton object that is a class - level lock . That means if you re loading a library on one thread other threads will block until it finishes .
3708	Tell the cache that we ve loaded this version .
3709	Iterates through the set of aLibCandidates until it succeeds in loading a library . If it succeeds it lets the cache know .
3710	Initialize the paths we ll search for libraries in .
3711	Checks our cache to see if we ve already loaded this library .
3712	Records the screen
3713	Explicitly deletes the underlying native storage used by the object this object references . The underlying native object is now no long valid and attempts to use it could cause unspecified behavior .
3714	Get the MuxerStream at the given position .
3715	Get the Muxer that this stream belongs to .
3716	Creates a signed SetScript object .
3717	Decodes the given base58 string into the original data bytes .
3718	Generates a 15 - word random seed . This method implements the BIP - 39 algorithm with 160 bits of entropy .
3719	Returns object by its ID .
3720	Returns transactions by address with limit .
3721	Returns transactions by address with limit after passed transaction id .
3722	Returns seq of block headers
3723	Returns block by its signature .
3724	Sends a signed object and returns its ID .
3725	Sets a validating script for an account .
3726	Compiles a script .
3727	write prim array no len no tag
3728	writes current buffer to underlying output and resets buffer .
3729	throws FSTBufferTooSmallException in case object does not fit into given range
3730	in case readClass already reads full minbin value
3731	will throw an FSTBufferTooSmallException if buffer is too small .
3732	hack to update underlying file in slices handed out to app
3733	Returns the specificity of the specified class as defined above .
3734	PRIVILEGED method . You gotta know what your doing here ..
3735	remove the key from the binary map
3736	length < 127 !!!!!
3737	if output stream is null just encode into a byte array
3738	create a json conf with given attributes . Note that shared refs = true for jason might be not as stable as for binary encodings as fst relies on stream positions to identify objects within a given input so any inbetween formatting will break proper reference resolution .
3739	special configuration used internally for struct emulation
3740	for optimization purposes do not use to benchmark processing time or in a regular program as this methods creates a temporary binaryoutputstream and serializes the object in order to measure the size .
3741	clear cached softref s and ThreadLocal .
3742	utility for thread safety and reuse . Do not close the resulting stream . However you should close the given InputStream in
3743	take the given array as input . the array is NOT copied .
3744	take the given array and copy it to input . the array IS copied
3745	utility for thread safety and reuse . Do not close the resulting stream . However you should close the given OutputStream out
3746	init right after creation of configuration not during operation as it is not threadsafe regarding mutation currently only for minbin serialization
3747	get cross platform symbolic class identifier
3748	write an int type with header
3749	encode int without header tag
3750	encode int using only as much bytes as needed to represent it
3751	write primitive array + header . no floating point or object array allowed . Just int based types
3752	allow write through to underlying byte for performance reasons
3753	avoid creation of dummy ref
3754	hook for debugging profiling . register a FSTSerialisationListener to use
3755	hook for debugging profiling . empty impl you need to subclass to make use of this hook
3756	if class is same as last referenced returned cached clzinfo else do a lookup
3757	incoming array is already registered
3758	modify content of this StructString . The length of the new String must not exceed the length of internal char array
3759	does not write class tag and length
3760	works only if change tracking is enabled
3761	collects all changes and rebases .
3762	add an object to the register return handle if already present . Called during write only
3763	throws FSTBufferTooSmallExcpetion in case object does not fit into given range Zero Copy method
3764	throws FSTBufferTooSmallExcpetion in case object does not fit into given range
3765	convenience method to read len byte array . Throws an excpetion if not enough data is present
3766	read an int . throws an exception if not enough data is present
3767	unread len bytes
3768	Set thread pool enabled . This thread pool is not for the service threads it is for the user service method . If your service method takes a long time or will be blocked please set this property to be true .
3769	Set embedded cassandra up and spawn it in a new thread .
3770	truncate data in keyspace except specified tables
3771	Copies a resource from within the jar to a directory .
3772	Print all of the thread s information and stack traces .
3773	Check if a remote port is taken
3774	Returns an empty subscriber state with - 1 as total updates master as false and server state as empty
3775	Get the onnx op descriptors by name
3776	Calculate the output shape for this op
3777	Or over the whole ndarray given some condition
3778	And over the whole ndarray given some condition
3779	And over the whole ndarray given some condition with respect to dimensions
3780	Or over the whole ndarray given some condition with respect to dimensions
3781	This method sets provided number to all elements which match specified condition
3782	This method returns first index matching given condition
3783	This method converts this FunctionProperties instance to FlatBuffers representation
3784	This method creates new FunctionProperties instance from FlatBuffers representation
3785	This method converts multiple FunctionProperties to FlatBuffers representation
3786	This method updates state with given Throwable
3787	This method updates state only if it wasn t set before
3788	This will merge the coordinates of the given coordinate system .
3789	This will partition the given whole variable data applyTransformToDestination in to the specified chunk number .
3790	Convert an onnx type to the proper nd4j type
3791	This method initiates shutdown sequence for this instance .
3792	Get the current device architecture
3793	Rearrange matrix columns into blocks
3794	Pooling 2d implementation
3795	Instantiate a compression descriptor from the given bytebuffer
3796	Helper method to create batch from list of aggregates for cases when list of aggregates is higher then batchLimit
3797	input arrays must have same number of dimensions
3798	Sets the data opType
3799	Generate a linearly spaced vector
3800	Returns a vector with all of the elements in every nd array equal to the sum of the lengths of the ndarrays
3801	Returns a column vector where each entry is the nth bilinear product of the nth slices of the two tensors .
3802	Creates an ndarray with the specified data
3803	Creates an 1 x num ndarray with the specified value
3804	Creates an shape ndarray with the specified value
3805	Returns true if the updater has accumulated enough ndarrays to replicate to the workers
3806	Subtract two complex numbers in - place
3807	Return the sin value of the given complex number
3808	Return the ceiling value of the given complex number
3809	Return the log value of the given complex number
3810	Return the absolute value of the given complex number
3811	Raise a complex number to a power
3812	get a context
3813	Binarizes the dataset such that any number greater than cutoff is 1 otherwise zero
3814	Sample a dataset
3815	This method returns memory used by this DataSet
3816	Make a string representation of the exception .
3817	Given a full hostname return the word upto the first dot .
3818	Given an array of strings return a comma - separated list of its elements .
3819	Given an array of bytes it will convert the bytes to a hex string representation of the bytes
3820	Returns an arraylist of strings .
3821	Split a string using the given separator
3822	Split a string using the given separator with no escaping performed .
3823	Finds the first occurrence of the separator character ignoring the escaped separators starting from the index . Note the substring between the index and the position of the separator is passed .
3824	Escapes HTML Special characters present in the string .
3825	Concatenates strings using a separator .
3826	Convert SOME_STUFF to SomeStuff
3827	Matches a template string against a pattern replaces matched tokens with the supplied replacements and returns the result . The regular expression must use a capturing group . The value of the first capturing group is used to look up the replacement . If no replacement is found for the token then it is replaced with the empty string .
3828	Get stack trace for a given thread .
3829	Inverts a matrix
3830	Compute the factorial of the non - negative integer .
3831	This method returns if host side has actual copy of data
3832	This method returns if device side has actual copy of data
3833	This method creates shapeInformation buffer based on shape being passed in
3834	This method creates shapeInformation buffer based on shape & order being passed in
3835	Returns whether the given shape is a vector
3836	Infer the order for the ndarray based on the array s strides
3837	Compute the offset for the given array given the indices
3838	Convert the given int indexes to nd array indexes
3839	Special method for
3840	Reallocate the native memory of the buffer
3841	Copy from the given from buffer to the to buffer at the specified offsets and strides
3842	This method returns DataBuffer with contant equal to input array .
3843	Returns a kafka connection uri
3844	Element - wise power function - x^y performed element - wise
3845	Log on arbitrary base
3846	Maximum function with a scalar
3847	Element wise maximum function between 2 INDArrays
3848	Minimum function with a scalar
3849	Element wise minimum function between 2 INDArrays
3850	Stabilize to be within a range of k
3851	Elementwise exponential - 1 function
3852	Log of x + 1 function
3853	Prepare the boundaries for processing
3854	Adjust final scheme to presence of bounds
3855	Returns the next element in the iteration .
3856	Q R DECOMP
3857	This method returns AllocationShape for the whole DataBuffer .
3858	Check if a file exists in the path
3859	Custom deserialization for Java serialization
3860	This method ensures the events in the beginning of FIFO queues are finished
3861	Create from an in memory numpy pointer
3862	Create from a given numpy file .
3863	This method does allocation from a given Workspace
3864	This method notifies locker that specific object was added to tracking list
3865	Returns true if bth the master and responder are started .
3866	This is one of the main entry points for ops that are executed without respect to dimension .
3867	This method forces all currently enqueued ops to be executed immediately
3868	Returns requested ClassPathResource as InputStream object
3869	This method returns deviceId for given thread identified by threadId
3870	This method pairs specified thread & device
3871	This method returns device id available . Round - robin balancing used here .
3872	Get the name of the os for libary discovery on the classpath
3873	Calculates the current ARCHType
3874	Publish to a kafka topic based on the connection information
3875	Start the server
3876	Create a data buffer based on the given pointer data buffer opType and length of the buffer
3877	This method checks if any Op operand has data opType of INT and throws exception if any .
3878	Add two complex numbers in - place
3879	This method assigns specific value to either specific row or whole array . Array is identified by key
3880	Avg pooling 3d operation .
3881	Depthwise Conv2d operation . This is just separable convolution with only the depth - wise weights specified .
3882	This method resets all counters
3883	This method returns op class opName
3884	Allocate and return a new array based on the vertex id and weight initialization .
3885	Returns the shape of this variable
3886	Evaluate the result of this variable
3887	This method creates compressed INDArray from Java double array skipping usual INDArray instantiation routines
3888	Returns the exponential of a complex ndarray
3889	Center an array
3890	Truncates an ndarray to the specified shape . If the shape is the same or greater it just returns the original array
3891	Pads an ndarray with zeros
3892	Find the index of the element with maximum absolute value
3893	This method duplicates array and stores it to all devices
3894	This method will be started in context of executor either Shard Client or Backup node
3895	Euler - Mascheroni constant .
3896	The square root .
3897	The cube root .
3898	The integer root .
3899	The exponential function .
3900	The base of the natural logarithm .
3901	Power function .
3902	Raise to an integer power and round .
3903	Trigonometric sine .
3904	The trigonometric tangent .
3905	The hyperbolic cosine .
3906	The hyperbolic sine .
3907	The hyperbolic tangent .
3908	The inverse hyperbolic sine .
3909	The inverse hyperbolic cosine .
3910	The Gamma function .
3911	Broadhurst ladder sequence .
3912	Append decimal zeros to the value . This returns a value which appears to have a higher precision than the input .
3913	Boost the precision by appending decimal zeros to the value . This returns a value which appears to have a higher precision than the input .
3914	Convert an absolute error to a precision .
3915	Put the function for id
3916	Returns the inputs for the given function
3917	Update the ndarray for the given vertex id .
3918	Associate a vertex id with the given shape .
3919	Associate the array with the given variable .
3920	Get the property for a given function
3921	Add a property for the given function
3922	Adds outgoing arguments to the graph . Also checks for input arguments and updates the graph adding an appropriate edge when the full graph is declared .
3923	Adds incoming args to the graph
3924	Returns true if this function already has defined arguments
3925	Evaluate the given inputs based on the current graph
3926	Variable initialization with 1 . 0
3927	Return a variable of all 1s with the same shape as the input
3928	Return a variable of all 0s with the same shape as the input
3929	Remove an argument for a function . Note that if this function does not contain the argument it will just be a no op .
3930	Assign a vertex id to a gradient
3931	Average pooling 3d operation .
3932	The gru cell
3933	Executes the list of operations . This exec method is for only invoking operations rather than creating them
3934	Creates a while statement
3935	Exec a given function
3936	Exec the given function given the ops
3937	Exec a backwards operation and return the end result
3938	Add this vertex id as a place holder
3939	This method returns Pointer to allocated memory chunk
3940	Returns the length for the given data opType
3941	Gets the name of the alocation mode
3942	get the allocation mode from the context
3943	This method returns op id number for given opName
3944	This method destroys all workspaces allocated in current thread
3945	This method prints out basic statistics for workspaces allocated in current thread
3946	trmv computes a matrix - vector product using a triangular matrix .
3947	Receive an ndarray
3948	Execute an accumulation along one or more dimensions
3949	This method decodes thresholds array and puts it into target array
3950	Map a tensorflow node name to the samediff equivalent for import
3951	ScalarOp along dimension
3952	Assert that no workspaces are currently open
3953	This method returns an array consisting of each of the training samples for each label in each sample the negative log likelihood of that value falling within the given gaussian mixtures .
3954	This method requests to change state to Tick .
3955	This method requests to change state to Toe
3956	This method requests release Toe status back to Tack .
3957	This method returns the current memory state
3958	This method build
3959	Vector aggregations are saved only by Shards started aggregation process . All other Shards are ignoring this meesage
3960	Initializes this data transform fetcher from the passed in datasets
3961	This method executes preconfigured number of host memory garbage collectors
3962	This method returns actual device pointer valid for current object
3963	This method should be called to make sure that data on host side is actualized
3964	Gets feature specific learning rates Adagrad keeps a history of gradients being passed in . Note that each gradient passed in becomes adapted over time hence the opName adagrad
3965	This method makes sure HOST memory contains latest data from GPU
3966	Create from a matrix . The rows are the indices The columns are the individual element in each ndarrayindex
3967	Returns the properties for a given function
3968	Returns true if this function has place holder inputs
3969	Perform automatic differentiation wrt the input variables
3970	Format the given ndarray as a string
3971	This method converts given TF
3972	Convert an ndarray to a blob
3973	Load a complex ndarray from a blob
3974	Save the ndarray
3975	Copy real numbers to arr
3976	Copy imaginary numbers to the given ndarray
3977	Returns an ndarray with 1 if the element is epsilon equals
3978	Assign all of the elements in the given ndarray to this ndarray
3979	Get whole rows from the passed indices .
3980	Insert a row in to this array Will throw an exception if this ndarray is not a matrix
3981	Insert a column in to this array Will throw an exception if this ndarray is not a matrix
3982	copy subtraction of two matrices
3983	copy addition of two matrices
3984	in place subtraction of two matrices
3985	in place addition of two matrices
3986	Set the value of the ndarray to the specified value
3987	Flattens the array for linear indexing
3988	Computes the eigenvalues of a general matrix .
3989	Compute generalized eigenvalues of the problem A x = L B x . The data will be unchanged no eigenvectors returned .
3990	finds the element of a vector that has the largest absolute value .
3991	copy a vector to another vector .
3992	computes a vector by a scalar product .
3993	This method calculates dot of gives rows
3994	Determine the number of weight entries that are non - zero after broadcasting
3995	Perform the final reduction on the loss function
3996	Throw an IllegalStateException if the class does not have a no - arg constructor .
3997	Gets a constructor that has the specified types of arguments . Throw an IllegalStateException if the class does not have such a constructor .
3998	Wraps any non - runtime exceptions with a runtime exception
3999	Gets the annotation that has the specified type or null if there isn t one
4000	Get the declared annotation ignoring any inherited annotations
4001	Is the declared annotation present ignoring any inherited annotations
4002	Create a ResultProxy for the given interface .
4003	Converts an entity to an object of the appropriate type for this metadata structure . Does not check that the entity is appropriate ; that should be done when choosing which EntityMetadata to call .
4004	Converts an object to a datastore Entity with the appropriate Key type .
4005	Create the proxy that does retries . Adds a strict error handler to the service .
4006	Gets metadata for the specified kind
4007	Perform a keys - only query .
4008	Perform a keys - only plus batch gets .
4009	A normal non - hybrid query
4010	A projection query . Bypasses the session entirely .
4011	The fundamental query count operation . This doesn t appear to be implemented in the new SDK so we simulate with a keys - only query .
4012	Detects Integer . MAX_VALUE and prevents OOM exceptions
4013	Loads them ; note that it s possible for some loaded results to be null
4014	Create a log a message for a given path
4015	Create a key from a registered POJO entity .
4016	I have no idea what this is about it was in the old logic
4017	Easy null - safe conversion of the raw key .
4018	Easy null - safe conversion of the typed key .
4019	Get the kind from the class if the class has an
4020	Checks if the given type is a class that is supposed to have type parameters but doesn t . In other words if it s a really raw type .
4021	Checks if the capture of subType is a subtype of superType
4022	Returns the direct supertypes of the given type . Resolves type parameters .
4023	Applies capture conversion to the given type .
4024	Get the relevant translator creating it if necessary .
4025	Get the populator for the specified class . This requires looking up the translator for that class and then getting the populator from it .
4026	Figure out if there is an index instruction for the whole class .
4027	Determine if we should create a Property for the method ( ie
4028	Get all the persistable fields and methods declared on a class . Ignores superclasses .
4029	Gets the key metadata but only if this was an
4030	Gets a result using the session cache if possible .
4031	Turn this into a result set
4032	Possibly pulls some values from the stuffed collection
4033	Recursively go through the class hierarchy adding any discriminators that are indexed
4034	Register a subclass translator with this class translator . That way if we get called upon to translate an instance of the subclass we will forward to the correct translator .
4035	Get the component type of a Collection .
4036	Get the key type of a Map .
4037	Recursive method which reverses the path into a ForwardPath .
4038	Get the complete path in this chain typically for error messages or debugging
4039	Create the full x . y . z string
4040	ROOT is 0 top level Entity properties are 1 embedded things are higher .
4041	Update a set of buckets with new values . If collisions occur resets the memcache value to null .
4042	Revert a set of keys to the empty state . Will loop on this several times just in case the memcache write fails - we don t want to leave the cache in a nasty state .
4043	Put buckets in the cache checking for cacheability and collisions .
4044	Bulk get on keys getting the raw objects
4045	Basically a list comprehension of the keys for convenience .
4046	Recursively go through the class hierarchy looking for the idMeta and parentMeta fields .
4047	Sets the key on a container from the POJO .
4048	Sets the numeric id field
4049	Get the contents of the
4050	Recursively register this subclass with all the superclass translators . This works because we cache translators uniquely in the factory .
4051	Checks if the intersection of two types is not empty .
4052	Transforms the given owner type into an appropriate one when constructing a parameterized type .
4053	Checks not only the listed annotations but also annotations on the class .
4054	Add all entries in the other session to this one
4055	Gets the result possibly from the session putting it in the session if necessary . Also will recursively prepare the session with
4056	Starts asychronous fetching of the batch .
4057	Asynchronously translate raw to processed ; might produce successive load operations as refs are filled in
4058	Fetch the keys from the async datastore using the current transaction context
4059	Converts a datastore entity into a typed pojo object
4060	Construct a Key from a Long or String id
4061	Null - safe extraction of the raw key
4062	Gets the String or Long id from the key as a Value or null if incomplete
4063	Understands both the legacy format ag1zfnZvb2Rvb2R5bmUwcgcLEgFCGAEM and new format providing the key either way .
4064	This version goes back to life without a transaction but preserves current options . We use the session from the parent ie life before transactions .
4065	We need to make sure the parentSession is the transactionless session not the session for our transaction . This gives proper transaction isolation .
4066	One attempt at executing a transaction
4067	Tests whether a set of conditions match .
4068	Get the current objectify instance associated with this ref
4069	Might produce a caching version if caching is enabled .
4070	Named differently so you don t accidentally use the Object form
4071	Allocate num copies of the incompleteKey
4072	This is only public because it is used from the impl package ; don t use this as a public API
4073	Pops context off of stack after a transaction completes . For internal housekeeping only .
4074	The datastore has a weird behavior of reordering values in a list so that indexed ones come before nonindexed ones . This can really mess up ordered lists . So if we find a heterogeneous list we need to force index everything .
4075	Creates a Ref from a registered pojo entity
4076	Obtain the entity value throwing an exception if the entity was not found .
4077	Adds a value to the set associated with the key .
4078	This version also checks to see if we are done and we still need to call the trigger . If so it calls it .
4079	Clever enough to recognize that an empty set of conditions means Always .
4080	Call this when a load process completes . Executes anything in the batch and then executes any delayed operations .
4081	Get the container object which is appropriate for the specified property . Go up the chain looking for a compatible type ; the first one found is the container . If nothing found throw an exception .
4082	We re just tracking statistics so we don t really need to worry about these stepping on each other ; if there s a hit or miss lost no big deal .
4083	Properly unwraps ExecutionException throwing the relevant original cause . Otherwise RuntimeExceptions get thrown and checked exceptions get wrapped in a RuntimeException .
4084	Obtains the Translator appropriate for this type and annotations . May be a cached translator ; if not one will be discovered and cached .
4085	Get the translator for a root entity class
4086	Create a translator from scratch by going through the discovery process .
4087	Gets the appropriate value from the container and sets it on the appropriate field of the pojo .
4088	Gets the relevant property from the container detecting alsoload collisions .
4089	Set this raw datastore value on the relevant property of the pojo doing whatever translations are necessary .
4090	Gets the appropriate field value from the pojo and puts it in the container at the appropriate prop name and with the appropriate indexing .
4091	Get the value for the property and translate it into datastore format .
4092	Write any extensions that may exist in a message .
4093	Writes a string that represents a ContentCategory s JSON name returning success status . If the factory is in strict mode the category name is validated .
4094	Writes an array of ContentCategory if not empty .
4095	Processes the raw snippet that was set by the bid making any transformations necessary .
4096	Iterates all bids .
4097	Finds a bid by ID .
4098	Updates bids from all seats .
4099	Remove bids by bid .
4100	Optimized code for most filtered lookups . This is worth the effort because bidder code may invoke these lookup methods intensely ; common cases like everything - filtered or nothing - filtered are very dominant ; and simpler code previously used needed lots of temporary collections .
4101	Read any extensions that may exist in a message .
4102	Special case for empty - string input . Returning null in non -
4103	Register an extension reader .
4104	Register an extension writer bound to a specific field name . This writer will be used in preference to a non - field - specific writer that may exist for the same class .
4105	Processes the context s response in - place modifying properties that may contain macros .
4106	Processes all fields of a bid that should support macro expansion .
4107	Updates every builder from a sequence .
4108	Runs a filter through a sequence of objects .
4109	Returns the current field name or empty string if none .
4110	Starts an Object skipping the { token and if necessary a field name before it .
4111	Starts an Array skipping the [ token and if necessary a field name before it .
4112	Skips a field name if necessary returning the current token then .
4113	Writes a boolean as int where false = 0 and true = 1 .
4114	Writes a string array if not empty .
4115	Writes an int array if not empty .
4116	Writes a long array if not empty using quotes for values that are too big .
4117	Writes a enum array if not empty .
4118	Resolve relative URL - s and fix a few java . net . URL errors in handling of URLs with embedded params and pure query targets .
4119	Handle the case in RFC3986 section 5 . 4 . 1 example 7 and similar .
4120	Partitions of the hostname of the url by .
4121	Returns the lowercased hostname for the url or null if the url is not well formed .
4122	Returns the page for the url . The page consists of the protocol host and path but does not include the query string . The host is lowercased but the path is not .
4123	Return one or more Strings regardless of whether they are represented as a single String or a list in the config or an empty List if no value could be found for that key .
4124	If the config consists of a single key config its values are used instead
4125	Returns an instance of the protocol to use for a given URL
4126	Generates a WARC info entry which can be stored at the beginning of each WARC file .
4127	Returns a normalised value of the content attribute for the refresh tag
4128	Determine which metadata should be transfered to an outlink . Adds additional metadata like the URL path .
4129	Determine which metadata should be persisted for a given document including those which are not necessarily transferred to the outlinks
4130	Add a new URL
4131	Remove the non - cloudSearch - legal characters . Note that this might convert two fields to the same name .
4132	Detects any BOMs and returns the corresponding charset
4133	Use a third party library as last resort to guess the charset from the bytes .
4134	Attempt to find a META tag in the HTML that hints at the character set used to write the document .
4135	Examines the first bytes of the content for a clue of whether this document is a sitemap based on namespaces . Works for XML and non - compressed documents only .
4136	Set the value for a given key . The value can be null .
4137	Returns the first non empty value found for the keys or null if none found .
4138	Get a list of cookies based on the cookies string taken from response header and the target url .
4139	Helper method to check if url matches a cookie domain .
4140	Compose unique key to store and access robot rules in cache for given URL
4141	Returns the robots rules from the cache or empty rules if not found
4142	called by the parser bolts
4143	Must be called by extending classes to store and collect in one go
4144	Try the rules from the hostname domain name metadata and global scopes in this order . Returns true if the URL should be removed false otherwise . The value returns the value of the first matching rule be it positive or negative .
4145	This function does the replacements by iterating through all the regex patterns . It accepts a string url as input and returns the altered string . If the normalized url is an empty string the function will return null .
4146	Reads the configuration file and populates a List of Rules .
4147	Basic filter to remove query parameters from urls so parameters that don t change the content of the page can be removed . An example would be a google analytics query parameter like utm_campaign which might have several different values for a url that points to the same content . This is also called when removing attributes where the value is a hash .
4148	Loads and configure the NavigationFilters based on the storm config if there is one otherwise returns an emptyNavigationFilters .
4149	Add an additional record format at given position
4150	Returns the amount of time to wait if the backend was queried too recently and needs throttling or - 1 if the backend can be queried straight away .
4151	Indicates whether enough time has elapsed since receiving the results of the previous query so that a new one can be sent even if the buffer is not empty . Applies to asynchronous clients only .
4152	Loads and configure the ParseFilters based on the storm config if there is one otherwise returns an emptyParseFilter .
4153	Append a node to the current container .
4154	Receive notification of ignorable whitespace in element content .
4155	Receive notification of a processing instruction .
4156	Report an XML comment anywhere in the document .
4157	Receive notification of cdata .
4158	Report the start of DTD declarations if any .
4159	Begin the scope of a prefix - URI Namespace mapping .
4160	Returns the value to be used as the URL for indexing purposes if present the canonical value is used instead
4161	Returns a trimmed string or the original one if it is below the threshold set in the configuration .
4162	Returns the first matching custom interval
4163	Loads and configure the URLFilters based on the storm config if there is one otherwise returns an empty URLFilter .
4164	Sets the number of items to be displayed on the wheel .
4165	Taken and modified from Android Source for API < 11
4166	Sets the empty item drawable that is drawn when outside of the adapter range .
4167	Set the angle of the wheel instantaneously . Note this does not animate to the provided angle .
4168	Checks to see if the selectedPosition has changed .
4169	Invalidate the drawable at the specific position so that the next Draw call will refresh the Drawable at this given position in the adapter .
4170	Converts the raw position to a position within the wheel item bounds .
4171	Estimates the wheel s new angle and angular velocity
4172	get the materials darker contrast
4173	Clamps the value to a number between 0 and the upperLimit
4174	Writes coverage data to JSON file .
4175	Trasfer data to a ByteBuffer . Note we cast char to byte discarding top byte if any . This is because CDM char is really a byte not a java char .
4176	Set the ArrayChar values from the characters in the String . Rank must be 1 . If String longer than ArrayChar ignore extra chars ; if shorter fill with 0 .
4177	Make this into the equivilent 1D ArrayObject of Strings .
4178	Create an ArrayChar from a String
4179	Create an ArrayChar from an ArrayObject of Strings .
4180	Create an ArrayChar from an ArrayObject of Strings . Inverse of make1DStringArray . Copies the data .
4181	Reference time is the start time of the first forecast other forecasts at 6 - hour intervals . Number in Ave = number of forecast used
4182	show the window .
4183	show if not iconified
4184	Compute the size of the file without writing
4185	Count the number of records in a grib1 file .
4186	Factory method for constructing a UnitName from a name and a plural form of the name .
4187	Factory method for constructing a UnitName from a name a plural form of the name and a symbol .
4188	Returns the plural form of a name . Regular rules are used to generate the plural form .
4189	Determine if the given date is included in this date range . The date range includes the start and end dates .
4190	Intersect with another date range
4191	Extend this date range by the given one .
4192	Extend this date range by the given Date .
4193	Set the starting Date . Makes useStart true . If useEnd recalculate the duration else recalculate end .
4194	Set the ending Date . Makes useEnd true . If useStart recalculate the duration else recalculate start .
4195	Set the duration of the interval . Makes useDuration true . If useStart recalculate end else recalculate start .
4196	assumes not moving
4197	add a MapBean to the User Interface
4198	Entry point for error reporting . Emits an error in a user - defined way . Part of Lexer interface .
4199	the name of the dataset is the last part of the location
4200	Create a String of the parameters .
4201	Extension to access a raw byte stream
4202	return y x ranges
4203	set values on the UI
4204	make it easy to test by using dimension list
4205	Register the given directory with the WatchService
4206	Process all events for keys queued to the watcher
4207	copy on modify
4208	Open a dataset as a FeatureDataset .
4209	Wrap a NetcdfDataset as a FeatureDataset .
4210	Determine if factory type matches wanted feature type .
4211	Try to determine the feature type of the dataset by examining its metadata .
4212	Write an Catalog to the HttpServletResponse return the size in bytes of the catalog written to the response .
4213	Write a catalog in HTML make it look like a file directory .
4214	public static final String UNIDATA_CSS
4215	public static final String UNIDATA_HEAD
4216	barfola on the return type
4217	rigamorole to modify invariant catalogs ; we may need to add global services
4218	initialize the HttpClient layer .
4219	Get the content from a url . For large returns its better to use getResponseAsStream .
4220	Put content to a url using HTTP PUT . Handles one level of 302 redirection .
4221	Isolate front page builder so we can override if desired for testing .
4222	see top javadoc for possible URLs
4223	LOOK how come we arent using MetadataExtractor ??
4224	kinda kludgey but trying not keep URLs stable
4225	cannot do approx equals and be consistent with hashCode so make seperate call
4226	Factory method for constructing an identifier from a name plural and symbol .
4227	Parse an attribute spec
4228	read the header of input file and parsing the NOWRAD part
4229	convert two short into a integer
4230	convert bytes into integer
4231	get jave date
4232	Convert a name to a legal netcdf - 3 name .
4233	Determine if the given name can be used for a Dimension Attribute or Variable name . Should match makeValidNetcdf3ObjectName .
4234	read existing file
4235	Read data from record structure . For N3 this is the only possible structure and there can be no nesting . Read all variables for each record put in ByteBuffer .
4236	Read data from record structure that has been subsetted . Read one record at at time put requested variable into ArrayStructureMA .
4237	fill buffer with fill value
4238	Make a time struct from the index .
4239	Make a GradsTimeStruct from the calendar state
4240	Does this file definition have a time template in it?
4241	Adds a function to the library . The function will be inspected to determine whether it is a boolean or BaseType function .
4242	Retrieves a boolean function from the library . If the function is not found the library will attempt to load it using the mechanism described in the class documentation .
4243	Retrieves a BaseType function from the library . If the function is not found the library will attempt to load it using the mechanism described in the class documentation .
4244	Tries to load a function with the given name .
4245	gets the LevelName .
4246	gets the LevelDescription .
4247	gets the LevelUnit .
4248	gets the ProjectionType .
4249	is this a VerticalCoordinate .
4250	Is this a layer?
4251	Make a CoordinateTransform object from the parameters in a Coordinate Transform Variable using an intrinsic or registered CoordTransBuilder .
4252	Create a dummy Coordinate Transform Variable based on the given CoordinateTransform . This creates a scalar Variable with dummy data and adds the Parameters of the CoordinateTransform as attributes .
4253	Make a CoordinateTransform object from the parameters in a GridCoordTransform using an intrinsic or registered CoordTransBuilder .
4254	Standalone application .
4255	private MetadataManager mm ;
4256	Throws UnsupportedOperationException unless the time zone is UTC
4257	Write out a prefix count
4258	Write out an array of atomic values
4259	Write out a set of bytes
4260	Deliberate choke point for debugging
4261	stuff to do after UI is complete
4262	Does not handle non - standard calendars
4263	reletive error in position - GRIB numbers sometimes miscoded
4264	Call this to parse a DDS
4265	Call this to parse a DAS
4266	Swap the grid header avoiding strings
4267	Read the grid
4268	for testing purposes
4269	Writes a constraint OWS element out .
4270	Writes headers and service sections
4271	Takes all added operations and writes an operations metadata section .
4272	Read all the files in a directory and process them . Files are sorted by filename .
4273	Read a log file .
4274	Get the grid packing type
4275	Find the first grid with this name
4276	Unpack a packed grid
4277	Read packed data
4278	Unpack grib data packed into ints
4279	Read packed Grib1 data using ucar . grib code
4280	Read packed Grib2 data
4281	Print out the grids .
4282	Get the next byte
4283	Get Calendar date from fields . Uses UTZ time zone
4284	Create CalendarDate from a java . util . Date . Uses standard Calendar .
4285	Create CalendarDate from msecs since epoch Uses standard Calendar .
4286	Create CalendarDate from msecs since epoch Uses the given Calendar .
4287	Get CalendarDate from udunit date string
4288	Get difference between two calendar dates in given Field units
4289	Create an Atomic Valued variable .
4290	Setup for each request
4291	Given a typical string insert backslashes before and \\ characters and control characters .
4292	Convert a list of ucar . ma2 . Range to a list of Slice More or less the inverst of create CDMRanges
4293	NetcdfDataset can wrap a NetcdfFile . Goal of this procedure is to get down to the lowest level NetcdfFile instance .
4294	Test if any dimension is variable length
4295	Compute the shape inferred from a set of slices . Effective means that any trailing vlen will be ignored .
4296	Add the time amount to the given Date return a new Date .
4297	Multiplies this unit by another unit .
4298	Divides this unit by another unit .
4299	Divides this unit into another unit .
4300	Raises this unit to a power .
4301	Converts a numeric value from this unit to the underlying derived unit .
4302	Converts numeric values from this unit to the underlying derived unit .
4303	Converts a numeric value from the underlying derived unit to this unit .
4304	Returns the canonical string representation of the unit .
4305	Read the section of data described by want
4306	Coordinate based subsetting for Coverage
4307	might need to override for efficiency
4308	Find the named service declared in the top level of this catalog .
4309	This method returns the gate size in meters
4310	This method returns the starting gate in meters
4311	This method returns the number of gates
4312	Write a NetcdfDataset as an NcML - G document to the specified stream .
4313	deal with having components on more than one line
4314	Return the requested dataset if it is the ancestor dataset or an allowed descendant of the ancestor dataset otherwise return null . The given filter determines whether a dataset is allowed or not .
4315	Not supported by SimpleCatalogBuilder .
4316	Create a CalendarDateUnit from a calendar name and a udunit string = unit since calendarDate
4317	Create a CalendarDateUnit from a calendar and a udunit string = unit since calendarDate
4318	Create a CalendarDateUnit from a calendar a CalendarPeriod . Field and a base date
4319	inverse of makeCalendarDate
4320	inverse of makeOffsetFromRefDate
4321	Returns the corresponding quantity dimension .
4322	Check if this is a valid SIGMET - IRIS file for this IOServiceProvider .
4323	Read StationName strings
4324	Read data from a top level Variable and return a memory resident Array .
4325	Read data from a top level Variable of INTEGER data type and return a memory resident Array .
4326	Read data from a top level Variable and send data to a WritableByteChannel .
4327	Calculate radial elevation of each ray
4328	Calculate distance between sequential bins in a ray
4329	Calculate azimuth of a ray
4330	Calculate data values from raw ingest data
4331	Calculate of Nyquist velocity
4332	Use the builder to make the Vertical Transform function
4333	Set the debug flags
4334	Set how indexes are used for both open and sync
4335	read one YX array
4336	Is this XY level missing?
4337	Get horizontal bounding box in lat lon coordinates .
4338	Call this when you have set all the sequence lengths .
4339	Blank fill sbuff with blanks until position tabStop .
4340	Create a new string by padding the existing one with blanks to specified width . Do nothing if length is already greater or equal to width .
4341	Format an integer value .
4342	Format a long value .
4343	Nicely formatted representation of bytes eg turn 5 . 636E7 into
4344	Show the value of a double to the significant figures
4345	Show the value of a double with specified number of decimal places
4346	display name plus the dimensions
4347	Perform sanity checks on a slice and repair where possible .
4348	Convert this slice to a string suitable for use in a constraint
4349	Take two slices and compose src wrt target Assume neither argument is null . This code should match ucar . ma2 . Section in thredds and dceconstraint . c in the netcdf - c library .
4350	Map ith element of one range wrt a target range
4351	Provide a simple dump of binary data
4352	Dump the contents of a buffer from 0 to position
4353	Find the EarthEllipsoid that matches this name .
4354	Find the EarthEllipsoid that matches this EPSG Id .
4355	top level vlen
4356	vlen inside a Structure
4357	Extract all A - HREF contained URLS from the given URL and return in List
4358	Extract text content from the given URL and return in String
4359	workaround for HTMLEditorKit . Parser cant deal with content - encoding
4360	LOOK DataOutputStream uses big - endian
4361	Add all ; replace old if has same name
4362	Remove an Attribute by name .
4363	Remove an Attribute by name ignoring case
4364	Get offsets from firstDate in units of timeUnit
4365	add an ActionSource listener
4366	Create a java . util . Date from this udunits String .
4367	Create a java . util . Date from a udunit or ISO String .
4368	Get the origin Date .
4369	Get the equivalent java . util . Date .
4370	Create a Date from this base unit and the given value .
4371	Create the equivalent value from this base unit and the given Date . Inverse of makeDate .
4372	Make a standard GMT string representation from this unit and given value .
4373	Get the grid spacing in kilometers
4374	Add the dimensions associated with this coord sys to the netCDF file
4375	Add a coordinate axis
4376	Make a projection and add it to the netCDF file
4377	Add the GDS params to the variable as attributes
4378	Add coordinate system variable
4379	Make a LambertConformalConic projection
4380	Make a PolarStereographic projection
4381	Make a Mercator projection
4382	Make a Eumetsat MSG Normalized Geostationary Projection projection . Fake coordinates for now then see if this can be generalized .
4383	Calculate the dx and dy from startx starty and projection .
4384	read a dataset element
4385	read a dataset scan element
4386	this is only called for ThredddsMetadata
4387	Get the type for the first level of this GridRecord
4388	Check if this is a valid file for this IOServiceProvider . You must make this method thread safe ie dont keep any state .
4389	Writes an array of bytes to the compressed output stream . This method will block until all the bytes are written .
4390	Sets the unencoded name of the class instance .
4391	Tries to find the coordinate variable of the specified type .
4392	Tries to find the coordinate variable of the specified type which has the specified dimension as its firsst dimension
4393	Convert an ErrorResponse to the equivalent XML
4394	Convert an ErrorResponse to the equivalent DapException .
4395	return the list of Dimensions that were created
4396	make a new variable out of the list in values
4397	create new variables as sections of ncVar
4398	construct time coordinate from reftime variable
4399	Shave n bits off the float
4400	Write Grib file to a netcdf4 file . Experimental .
4401	Make NetcdfFile into NetcdfDataset with given enhance mode
4402	Factory method for opening a NetcdfFile through the netCDF API .
4403	Clear Coordinate System metadata to allow them to be redone
4404	Retrieve the CoordinateAxis with the specified Axis Type .
4405	Retrieve the CoordinateAxis with the specified type .
4406	Retrieve the CoordinateSystem with the specified name .
4407	Retrieve the CoordinateTransform with the specified name .
4408	is this enhancement already done ?
4409	Generate the list of values from a starting value and an increment . Will reshape to variable if needed .
4410	Set the data values from a list of Strings .
4411	Make a 1D array from a list of strings .
4412	Compute the linear index from the current odometer indices .
4413	Make MFileOS7 if file exists otherwise return null
4414	Get a List of all the features in the shapefile that intersect the specified bounding box . This requires testing every feature in the List created at construction so it s faster to just give a bounding box o the constructor if you will only do this once .
4415	Discretize elements of array to a lower resolution . For example if resolution = 100 . the value 3 . 14159265358979 will be changed to 3 . 14 .
4416	Add all the content from another ThreddsMetadata
4417	set specified type of documentation
4418	remove all instances of specified type of documentation
4419	how many more bytes are in this segment ?
4420	Is this my file?
4421	CatalogCrawler . Listener
4422	Breakup list of Convention names in the Convention attribute in CF compliant way .
4423	Build a list of Conventions
4424	Heres where the work is to identify coordinate axes and coordinate systems .
4425	Identify coordinate axes set VarProcess . isCoordinateAxis = true . Default is to look for those referenced by _CoordinateAxes attribute . Note coordinate variables are already identified .
4426	Identify coordinate systems set VarProcess . isCoordinateSystem = true . Default is to look for those referenced by _CoordinateSystems attribute .
4427	Take all previously identified Coordinate Systems and create a CoordinateSystem object .
4428	If a variable still doesnt have a coordinate system use hueristics to try to find one that was probably forgotten . Examine existing CS . create a subset of axes that fits the variable . Choose the one with highest rank . It must have X Y or lat lon . If so add it .
4429	Does this axis fit this variable . True if all of the dimensions in the axis also appear in the variable . If char variable last dimension is left out .
4430	track coordinate variables
4431	Munge this catalog so the given dataset is the top catalog .
4432	Munge this catalog to remove any dataset that doesnt pass through the filter .
4433	unread CatalogRefs are always kept .
4434	remove marked datasets
4435	Invoked on first get so that everything is available especially Spring stuff .
4436	Add value to the named counter . Add counter if it doesnt already exist .
4437	Adds a prefix to the database .
4438	for other behavior override this ; use compareXXX routines .
4439	for use by the subclass
4440	Parser specific methods
4441	add any reserved xml attributes to a node unchanged
4442	Determine if a valid date range was specified
4443	Iterator interface extended
4444	Register a DSP using its class string name .
4445	Register a DSP class .
4446	See if a specific DSP is registered
4447	Unregister dsp .
4448	Lazy instantiation .
4449	Get interval size in units of hours . Only use in GribVariable to decide on variable identity when intvMerge = false .
4450	If this has a time interval coordinate get time interval
4451	Unit of vertical coordinate . from Grib2 code table 4 . 5 . Only levels with units get a dimension added
4452	Compute inferred information
4453	Sort the nodelist into prefix left to right order
4454	stuff for Iosp
4455	Find first variable with given attribute name
4456	Find first variable with given attribute name and value . If not found search one level into structures .
4457	Find first variable with given attribute name and value
4458	Find first member variable in this struct with given attribute name and value
4459	Find first nested structure
4460	Does this dataset have a record structure? netcdf - 3 specific
4461	Translate key to value
4462	Turn the key into a String and return the corresponding featureType if any .
4463	Find the variable pointed to by key
4464	Get the coordinate value at the i j index .
4465	larger than you would ever expect
4466	Get the coordinate values as a 1D double array in canonical order .
4467	Create a new CoordinateAxis2D as a section of this CoordinateAxis2D .
4468	return index of closest value to target
4469	getName is deprecated because as the code below shows it has no consistent meaning . Sometimes it returns the short name sometimes it returns the full name .
4470	Add an action to the popup menu . Note that the menuName is made the NAME value of the action .
4471	Find the longest match .
4472	testing 1 - 2 - 3
4473	Finds the first occurrence of match in data .
4474	store an image in the cache
4475	method to inspect the cache
4476	method to stop all background loading
4477	method to stop all background loading except the indicated file . Returns whether the image is already being loaded . True = loading in progress False = not in progress .
4478	Static factory methods for creating HTTPMethod instances
4479	Common method creation code so we can isolate mocking
4480	return a float type value
4481	Return an integer in range 1 .. max inclusive .
4482	Primary read entry point . This is the primary implementor of Variable . read .
4483	filesystem can t be re - created either .
4484	this is the old Gempak table not as precise
4485	Used by CoordinateND . makeSparseArray ; not used by CoordinateTime2D
4486	reminder for subclasses to set this
4487	convert cloud height to meters
4488	here is where agg variables get read
4489	Set the number of colors in the colorscale .
4490	map world coords to screen coords .
4491	Create an AuthScope from a URI ; remove any principal
4492	compares GDS for duplicates
4493	Indicates if this Factor is the reciprocal of another Factor .
4494	Return a catalog for the given directory .
4495	Find which index holds the value want
4496	Create an InvMetadata content object from an XML document at a named URL . The content object is an ArrayList of CatalogGenConfig instances .
4497	Create an InvMetadata content object from an org . w3c . dom . Element . The content object is an ArrayList of CatalogGenConfig instances .
4498	Serialize the InvMetadata content object to a org . w3c . dom . Element
4499	Validate the content object .
4500	Return a CatalogGenConfig when given a catalogGenConfig JDOM element .
4501	Return a DatasetSource when given a datasetSource JDOM element .
4502	Return a DatasetNamer when given a datasetNamer JDOM element .
4503	Return a DatasetFilter when given a datasetFilter JDOM element .
4504	Return a ResultService when given a resultService JDOM element .
4505	Create a catalogGenConfig JDOM element
4506	Create a DatasetSource JDOM element
4507	Create a DatasetNamer JDOM element
4508	Create a DatasetFilter JDOM element
4509	Create a ResultService JDOM element
4510	Return the value of the named flag . If it doesnt exist it will be added to the store and the menu with a value of false .
4511	Construct cascading pull - aside menus using the values of the debug flags in the Preferences object .
4512	recursive menu adding
4513	Add parameters from the table
4514	Make a parameter from the tokens
4515	Get the parameter for the given name
4516	Read in the bytes from the given InputStream and construct and return a String . Closes the InputStream argument .
4517	Read the bytes in the given input stream .
4518	Replace the ensemble template parameter in a filename
4519	Set extra information used by station obs datasets .
4520	Get current value from editComponent save to store . If different from old value fire PropertyChangeEvent . Return false if invalid format add error message to buff if not null .
4521	An integer input field with an associated CDM . UNITS label .
4522	Read the bit map array .
4523	allow calling from outside
4524	Debugging flags . This is a way to decouple setting flags from particular implementations .
4525	Utility to decompose a name
4526	make a structure into a group if its scalar and all parents are groups
4527	Checks to see if this is netcdf char array .
4528	If an equivilent shared dimension already exists use it else add d to shared dimensions . Equivilent is same name and length .
4529	construct list of dimensions to use
4530	Get whether this is an unsigned type .
4531	This does the actual connection to the opendap server and reading of the data . All data calls go through here so we can add debugging .
4532	Get a gif file make it into an ImageIcon .
4533	Get a gif file make it into an Image .
4534	Get a gif file make it into a Cursor .
4535	Read data subset from RandomAccessFile create primitive array of size Layout . getTotalNelems . Reading is controlled by the Layout object .
4536	Read data subset from PositioningDataInputStream create primitive array of size Layout . getTotalNelems . Reading is controlled by the Layout object .
4537	Read data subset from ByteBuffer create primitive array of size Layout . getTotalNelems . Reading is controlled by the Layout object .
4538	Create 1D primitive array of the given size and type
4539	convert byte array to char array assuming UTF - 8 encoding
4540	convert char array to byte array assuming UTF - 8 encoding
4541	convert byte array to char array
4542	section reading for member data
4543	LOOK could be used in createView ??
4544	Get member databuffer of type String or char .
4545	Non - atomic cases
4546	Key interface method coming in from StructureDataA .
4547	Compute the StructureMembers object from a DapStructure . May need to recurse if a field is itself a Structure
4548	Add this as a dimension to a netCDF file
4549	Construct a CrawlableDataset for the given path using the CrawlableDataset implementation indicated by the given class name .
4550	Normalize the given path so that it can be used in the creation of a CrawlableDataset . This method can be used on absolute or relative paths .
4551	Add a nested dataset specified by an explicit netcdf element . enhance is handled by the reader so its always false here .
4552	Add a dataset scan
4553	all elements are processed finish construction
4554	Make the list of Datasets from explicit and scans .
4555	Open one of the nested datasets as a template for the aggregation dataset .
4556	Dataset factory so subclasses can override
4557	This tracks Dataset elements that have resource control attributes
4558	Add a point to the end of the line .
4559	Gets the upper bounding box coordinate on the line .
4560	Gets the lower bounding box coordinate on the line .
4561	Validate this DatasetFilter object . Return true if valid false if invalid .
4562	Test whether the given dataset matches the filter criteria .
4563	fdPoint remains open .
4564	Convenience wrapper for parseConstraint .
4565	Evaluate all of the Clauses in the Clause vector .
4566	Print all of the Clauses in the Clause vector .
4567	Amend the given NetcdfFile with metadata from HDF - EOS structMetadata . All Variables named StructMetadata . n where n = 1 2 3 ... are read in and their contents concatenated to make the structMetadata String .
4568	convert to shared dimensions
4569	look if the wanted dimension is in the unknownDims list .
4570	look for a group with the given name . recurse into subgroups if needed . breadth first
4571	Get inline content as a string else null if there is none
4572	Construct the standard THREDDS access URI for this dataset access method resolve if the URI is relative .
4573	construct input fields based on Projection Class
4574	Adds the specified component to the layout using the specified constraint object .
4575	Invalidates the layout indicating that if the layout manager has cached information it should be discarded .
4576	Removes the specified component from the layout .
4577	Calculates the minimum size dimensions for the specified container given the components it contains .
4578	Lays out the specified container .
4579	Determine if this CoordinateSystem can be made into a RadialCoordSys .
4580	Get the maximum radial distance in km .
4581	Uses java . net
4582	Transform geographic Earth coordinates to satellite view angle coordinate system also known as the intermediate coordinate system in CGMS Normalized Geostationary Projection .
4583	Transform satellite view angle coordinates known as the intermeidate coordinates in the CGMS Normalized Geostationary Projection to geographic Earth coordinates .
4584	Transform view angle coordinates in the GOES scan geometry frame to view angle coordinates in the GEOS scan geometry frame .
4585	Find sweep_angle_axis associated with a scan geometry
4586	Find scan geometry associated with sweep_angle_axis
4587	set the list of runtime coordinates ; add any that are not already present and make an empty CoordinateTimeAbstract for it
4588	write data from a ucar . nc2 . dt . PointObsDataset into CF point format .
4589	Open a ucar . nc2 . ft . PointFeatureCollection write out in CF point format .
4590	Get ArraySequence for a member of type Sequence .
4591	Get the full heirarchical name of the dataset which has all parent collection names .
4592	If this dataset has an authority and an ID then the concatenation of them is the globally unique ID .
4593	Get access element of the specified service type for this dataset . If more than one get the first one .
4594	Find an immediate child dataset by its name .
4595	Get containing catalog .
4596	Get the metadata elements of the specified type .
4597	Find the named service declared in this dataset or one of its parents .
4598	get Variables from the specified vocabulary
4599	Find all catalogRef elements in the dataset tree formed by the given dataset list .
4600	Escape the characters necessary for a path to be valid for a URL
4601	Add 1 to the size of the array for the given dimension . Use linear average and interpolation to fill in the values .
4602	Add one element to the array by linear interpolation and extrapolation at the ends .
4603	Compute the RHO parameter
4604	Get the detail information
4605	Make a structure for the part
4606	Make the missing variable
4607	Make a variable from a GempakParmaeter
4608	Add on global attributes for all types
4609	Get the size of a particular station variable
4610	Get a 1DArray for the type and length
4611	Compute post - reduction state .
4612	Generate an error message .
4613	Report on the debug stream that the rule yyrule is going to be reduced .
4614	Read the DMR trimmed .
4615	Read an error chunk
4616	Reads up to len databuffer of databuffer from the input stream into an array of databuffer . An attempt is made to read as many as len databuffer but a smaller number may be read . The number of databuffer actually read is returned as an integer .
4617	Read the size + flags header from the input stream and use it to initialize the chunk state
4618	Does not handle non - standard Calendars
4619	Reads a URL or file in as a table .
4620	transfer the objects in src group to the target group
4621	stn file must be in the same directory or one up
4622	if a DAT file
4623	Gets the beginning index of a geometry s points given the index of the geometry within the array .
4624	Gets the ending index of a geometry s points given the index of the geometry within the array .
4625	creates seperate collection and index for each runtime .
4626	set current value of editComponent
4627	Return the string of entity ID for the Dorade image file
4628	comparing api to others
4629	Clean up strings to be used for unit string
4630	Clean up strings to be used in Netcdf Object names
4631	The given unit is unitless .
4632	Use a factory so we can debug constructor calls
4633	Manage the compound id for variables
4634	Parse the DAS assign attribute tables to the DodsV objects . Nested attribute tables are supposed to follow the tree we construct with dodsV so its easy to assign to correct dodsV .
4635	Search the immediate children for a BaseType with given name .
4636	find the DodsV object in the dataVlist corresponding to the ddsV
4637	Return a child by index
4638	Get the parent group .
4639	Get the ith dimension .
4640	Find the index of the named Dimension in this Variable .
4641	Get the Unit String for the Variable . Looks for the CDM . UNITS attribute value
4642	Get shape as a Section object .
4643	Create a new Variable that is a logical slice of this Variable by fixing the specified dimension at the specified index value . This reduces rank by 1 . No data is read until a read method is called on it .
4644	Public by accident .
4645	Read a section of the data for this Variable from the netcdf file and return a memory resident Array .
4646	Get the value as a String for a scalar Variable . May also be one - dimensional of length 1 . May also be one - dimensional of type CHAR which wil be turned into a scalar String .
4647	non - structure - member Variables .
4648	assume filled validated Section
4649	CDL representation of a Variable .
4650	String representation of Variable and its attributes .
4651	Set the data type
4652	Set the shape with a list of Dimensions . The Dimensions may be shared or not . Dimensions are in order slowest varying first . Send a null for a scalar . Technically you can use Dimensions from any group ; pragmatically you should only use Dimensions contained in the Variable s parent groups .
4653	Use when dimensions have changed to recalculate the shape .
4654	Set the dimensions using the dimensions names . The dimension is searched for recursively in the parent groups .
4655	Reset the dimension array . Anonymous dimensions are left alone . Shared dimensions are searched for recursively in the parent groups .
4656	Replace a dimension with an equivalent one .
4657	Set the data cache
4658	Get list of Dimensions including parents if any .
4659	you must set EarthLocation before you call this .
4660	call after adding all runs
4661	get all datasets contained directly in this catalog
4662	A path is a Synthetic path if it ends in . dmr or . syn
4663	Provide an extra API for use in testing
4664	Extract the metadata from the NetcdfDataset and build the DMR .
4665	Walk this variable including fields to construct sequence types for any contained vlen dimensions
4666	Assign dimensions to a variable
4667	Unfortunately the CDM Iosp does not actually use the declared enums . Rather for every enum type d variable a new enum decl is defined . So we need to find the original enum decl that matches the variable s enum .
4668	Strip vlen dimensions from a set of dimensions
4669	open the file and extract BUFR messages
4670	convert one message ino a NetcdfDataset and print data
4671	POST handles uploaded files
4672	Get the affine transform based on screen size and world bounding box
4673	calculate if we want to rotate based on aspect ratio
4674	Get current MapArea .
4675	convert a world coordinate to a display point
4676	call this to change the center of the screen s world coordinates . deltax deltay in display coordinates
4677	call this to zoom into a subset of the screen . startx starty are the upper left corner of the box in display coords width height the size of the box in display coords
4678	adjust bounding box to fit inside the screen size
4679	Add a listener .
4680	Remove a listener .
4681	Send an event to all registered listeners . If an exception is thrown remove the Listener from the list
4682	Send an event to all registered listeners except the named one .
4683	ncdump that parses a command string .
4684	ncdump parsing command string file already open .
4685	Print all the data of the given Variable .
4686	Print a section of the data of the given Variable .
4687	Print contents of a StructureData .
4688	Print array as undifferentiated sequence of values .
4689	Print array to PrintWriter
4690	Write the NcML representation for a file . Note that ucar . nc2 . dataset . NcMLWriter has a JDOM implementation for complete NcML . This method implements only the core NcML for plain ole netcdf files .
4691	Read a variable attribute as a double .
4692	Add a Parameter to a CoordinateTransform . Make sure that the variable exists . If readData is true read the data and use it as the value of the parameter otherwise use the variable name as the value of the parameter .
4693	try problem logs
4694	Allow specification of basetype to use ; used for enumerations
4695	is this a PositiveUp VerticalCoordinate .
4696	Indicates if numeric values in this unit are convertible with another unit .
4697	Returns a label for a quantity in this unit .
4698	Position file at bitOffset from startPos
4699	Read the next nb bits and return an Unsigned Long .
4700	Read the next nb bits and return an Signed Long .
4701	Open a connection to the DODS server .
4702	Returns the DAS object from the dataset referenced by this object s URL . The DAS object is referred to by appending . das to the end of a DODS URL .
4703	Returns the DDS object from the dataset referenced by this object s URL . The DDS object is referred to by appending . dds to the end of a OPeNDAP URL .
4704	Use some sense when assembling the CE . Since this DConnect object may have constructed using a CE any new CE will have to be integrated into it for subsequent requests . Try to do this in a sensible manner!
4705	Convert projection coordinates to a LatLonPoint
4706	This code tweaks our catalog output to match .
4707	present and 14 days .
4708	Check basic DMSP file validity of given random access file .
4709	Parse the satellite information from the header .
4710	Parse the sensor information from the header .
4711	Read an XML Document from a URL and return the root element .
4712	Make sure that text is XML safe
4713	Given a string that contains WWW escape sequences translate those escape sequences back into ASCII characters . Return the modified string .
4714	Define the DEFINITIVE URL constraint expression escape function .
4715	Define the DEFINITIVE URL constraint expression unescape function .
4716	Define the DEFINITIVE URL BACKSLASH unescape function .
4717	Define the DEFINITIVE URL BACKSLASH escape function .
4718	Add the global attributes . Specific implementations should call super and then add their own .
4719	Returns the short resulting from swapping 2 bytes at a specified offset in a byte array .
4720	Returns the int resulting from reversing 4 bytes at a specified offset in a byte array .
4721	Returns the double resulting from reversing 8 bytes at a specified offset in a byte array .
4722	Returns the float resulting from reversing 4 bytes of a specified float .
4723	Returns the double resulting from reversing 8 bytes of a specified double .
4724	Convert a short to an array of 2 bytes .
4725	Convert an int to an array of 4 bytes .
4726	Convert a long to an array of 8 bytes .
4727	Create a subset of this VerticalTransform .
4728	Write the XML representation to a String .
4729	Make the C array
4730	Initiate the response with an XML file with an XML header
4731	Write the features from the featureList . For each feature write its attributes
4732	Add levels from the GridRecords
4733	Add dimensions to the netcdf file
4734	Add this coordinate system to the netCDF file
4735	Find the coordinate transform
4736	Get the index of a particular GridRecord
4737	Be sure to call this when your application exits otherwise your process may not exit without being killed .
4738	Get the named File . If exists or isWritable return it . Otherwise get corresponding file in the cache directory .
4739	Looking for an existing file in cache or no
4740	Show cache contents for debugging .
4741	Remove any files or directories whose last modified time greater than persistMinutes
4742	Calculate the bearing between the 2 points . See calculateBearing below .
4743	Calculate the bearing between the 2 points . See calculateBearing below . Uses default Earth object .
4744	Test the calculations - forward and back
4745	Calculate a position given an azimuth and distance from another point .
4746	Calculate a position given an azimuth and distance from another point . Uses default Earth .
4747	Calculate a position given an azimuth and distance from another point . See details below . Uses default Earth .
4748	method to invoke with a filename or URL of a picture that is to be loaded a new thread . This is handy to update the screen while the loading chuggs along in the background .
4749	method to invoke with a filename or URL of a picture that is to be loaded in the main thread .
4750	loads a picture from the URL in the imageUrl object into the sourcePictureBufferedImage object and updates the status when done or failed .
4751	this method can be invoked to stop the current reader
4752	this method can be invoked to stop the current reader except if it is reading the desired file . It returns true is the desired file is being loaded . Otherwise it returns false .
4753	return the size of the image or Zero if there is none
4754	sets the buffered image . Unusual method use with care .
4755	Construct the standard THREDDS access URI for this dataset access method resolved agaisnt the parent catalog if the URI is relative .
4756	for associated fields
4757	Transfer info from the proto message to another message with the exact same structure .
4758	count the bits used by the data in this dd and its children only accurate for not compressed and not variable length
4759	LOOK need different hashCode reader assumes using object id
4760	Load the dbase file header .
4761	Load the dbase file data .
4762	Extract the data for a given field by name .
4763	Extract the double array of data for a field by Name .
4764	Extract the string array of data for a field by Name .
4765	Extract the boolean array of data for a field by Name .
4766	Get the name of a field by column number .
4767	Get a list of all the field names in the dbase file
4768	Test program dumps a Dbase file to stdout .
4769	attributes are not allowed on some node types
4770	This may occur after initial construction
4771	Used by AbstractDSP to suppress certain attributes .
4772	Closest containing group
4773	Closest containing group structure sequence
4774	Here escaped means backslash escaped short name
4775	Get the transitive list of containers Not including this node
4776	Get the transitive list of containing groups Possibly including this node
4777	Compute the FQN of this node
4778	Misc . Methods
4779	Build the data from the incoming serial data Note that some DSP s will not use
4780	Stores a Collection of beans . The beans are stored using simple bean properties . The collection of beans must all be of the same class .
4781	Get an arrayList . This returns a copy of the stored list .
4782	assume key non - null locked node
4783	Read data array
4784	Print data from a DSP - optionally constrained
4785	Print a single structure or sequence or record instance
4786	Writes an NcML element to a string .
4787	Writes an NcML element to an output file .
4788	Writes an NcML element to an output stream .
4789	Writes an NcML element to a Writer .
4790	Only for shared dimensions .
4791	Make the coordinate transform
4792	get the int array from the variable attribute
4793	Factory method for constructing a base unit .
4794	Factory method for constructing a derived unit .
4795	Returns the base unit database of the SI .
4796	Returns the derived unit database of the SI .
4797	Returns an instance of the SI system of units .
4798	Given a coordinate interval find what grid element matches it .
4799	if its a tie use the larger one
4800	look must handle discon interval different
4801	Open a FeatureDataset from an Dataset object deciding on which Access to use .
4802	Open a FeatureDataset from an Access object .
4803	Add information from the Dataset to the NetcdfDataset .
4804	Read data array by first reading in GribRecord . All sections are read in so scanMode is from the datafile not the index .
4805	Reassemble the url using the specified parts
4806	Canonicalize a part of a URL
4807	pretty much WRF specific
4808	Main entry point
4809	Finish getting the metadata if necessary . If this is an XLink this will trigger a read of the href the first time called .
4810	Returns the value to which the key is mapped in this table .
4811	Maps the specified key to the specified value in this table .
4812	Return this as a java Date object
4813	Print info from the node that needs to be in the form of xml attributes
4814	PrintXMLAttributes helper function
4815	Special here is not the same as reserved
4816	Print the dimrefs for a variable s dimensions . If the variable has a non - whole projection then use size else use the dimension name .
4817	Check to see if this is a valid AREA file .
4818	Set the area directory attributes on the variable
4819	Set the navigation block attributes on the variable
4820	Get the calibration type from the name
4821	Set the long name and units for the calibration type
4822	search for Axis by Type assign to TableConfig if found . search for Lat Lon Time Height .
4823	search for Axis by Type .
4824	Search for Axis by Type .
4825	search for Axis by Type and test against a predicate
4826	search for Dimension used by axis of given by Type .
4827	Find the CoordinateSystem with the most number of CoordinateAxes
4828	find the dependent axis that depend on independentAxis
4829	Returns the named variable in the given row of the sequence .
4830	The old deserialize protocol has a number of limitations stemming from its inability to tell when the sequence is finished . It s really only good for a Dataset containing a single sequence or where the sequence is the last thing in the dataset . To handle this we just read single instances until we get an IOException then stop .
4831	Reads a marker byte from the input stream .
4832	Writes a marker byte to the output stream .
4833	Error handling Events
4834	Creates the demo chart .
4835	Starting point for the demonstration application .
4836	LOOK can we optimize ??
4837	Get the array of available parameter names for this volume .
4838	Set the list of Stations .
4839	Looks for the station with given id . If found makes it current . Redraws .
4840	Redraw the graphics on the screen .
4841	Read the object from the input stream of the serialized object
4842	Wrtie the object to the output stream
4843	Adds all the entries in another UnitDBImpl to this database .
4844	Adds a unit to the database .
4845	Adds a symbol for a unit already in the database .
4846	Gets a unit by either name plural or symbol . Retrieving the unit by symbol is attempted before retrieving the unit by name because symbol comparisons are case sensitive and hence should be more robust .
4847	Adds a unit to the database by name .
4848	Adds a unit to the database by symbol .
4849	Adds a unique unit to a map ..
4850	Add a set of MenuItems to the given JMenu one for each possible L&F . if this platform doesnt support the L&F disable the MenuItem .
4851	tricky bit of business . recapture the entire record based on drs position . for validation .
4852	called if its scalar
4853	overrride for array of Structures
4854	Get the unpacked data values for a selected parameter .
4855	map limit circle of this radius from the origin p 173
4856	Open a FeatureDataset from an InvDataset object deciding on which InvAccess to use .
4857	Open a FeatureDataset from an InvAccess object .
4858	Try to open as a NetcdfDataset .
4859	Add information from the InvDataset to the NetcdfDataset .
4860	first one override
4861	only used by PartitionBuilder not PartitionBuilderFromIndex
4862	the children must already exist
4863	Factory method that returns a RegExpAndDurationTimeCoverageEnhancer instance that will apply the match pattern to the dataset name .
4864	Factory method that returns a RegExpAndDurationTimeCoverageEnhancer instance that will apply the match pattern to the dataset path .
4865	Write the catalog as an XML document to the specified filename .
4866	Structures must be fixed sized
4867	brings up the indicated picture on the display .
4868	sets the buffered image directly .
4869	this method sets the desired scaled size of the ScalablePicture to the size of the JPanel and fires off a createScaledPictureInThread request if the ScalablePicture has been loaded or is ready .
4870	we are overriding the default paintComponent method grabbing the Graphics handle and doing our own drawing here . Esentially this method draws a large black rectangle . A drawRenderedImage is then painted doing an affine transformation on the scaled image to position it so the the desired point is in the middle of the Graphics object . The picture is not scaled here because this is a slow operation and only needs to be done once while moving the image is something the user is likely to do more often .
4871	This subroutine converts the two integers stored in a grid file into three integers containing the date time and forecast time .
4872	This subroutine converts an integer time array containing the date time and forecast time into a GEMPAK grid time .
4873	This subroutine converts an integer time array into a standard GEMPAK time . The integers are checked for validity .
4874	This subroutine returns the number of days in the given month . The year must be a full four - digit year .
4875	This subroutine translates a numeric value for IVCORD into its character value in VCOORD .
4876	Swap the order of the integers in place .
4877	Get a name for the grid packing type
4878	Get a name for the data packing type
4879	Read the data stream from the given InputStream . In the C ++ version this code was in Connect .
4880	Dump the dataset using externalize methods . This should create a multipart Mime document with the binary representation of the DDS that is currently in memory .
4881	Find the Tag that matches the code .
4882	This assumes you have opened a file . looks in the parent directory .
4883	Conmpute the size in databuffer of the daptype wrt to a serialization ; 0 if undefined .
4884	Calculates the sum of the values in the given array .
4885	Set the grid scale .
4886	Set how much the data may overlap .
4887	clear all the grid cells
4888	Check if the given rect intersects an already drawn one . If not set the corresponding cell as marked store object return true meaning ok to draw .
4889	Check if the given rect intersects an already drawn object
4890	Check if the given point is contained in already drawn object
4891	Find the closest marked cell to the given point
4892	if out of bbox or cell not marked return MAX_DOUBLE
4893	Factory method for creating a new BaseUnit or obtaining a previously - created one .
4894	Given a location find markers indicated which protocol to use LOOK what use case is this handling ?
4895	Given a url search the path to look for protocol indicators
4896	Check path extension ; assumes no query or fragment
4897	not sure what other opendap servers do so fall back on check for dds
4898	check for dmr
4899	LOOK compression not used
4900	return last name part of an fqn ; result will be escaped .
4901	return prefix name part of an fqn ; result will be escaped .
4902	Walk the specified subtree dir tree to try to locate file|dir named filename . Use breadth first search .
4903	Walk the specified dir tree to locate file specified by relative path . Use breadth first search .
4904	Properly extract the byte contents of a ByteBuffer
4905	Given a dap variable get the path from the top - level variable to and including the given variable such that all but the last element is a structure .
4906	Convert paths to null
4907	Given an Array of Strings and a separator and a count concat the first count elements of an array with separator between them . A null string is treated like .
4908	return true if this path appears to start with a windows drive letter
4909	Return the set of leading protocols for a url ; may be more than one .
4910	Provide a helper function to convert an Index object to a slice list .
4911	Provide a helper function to convert an offset to a slice list .
4912	Test if a set of slices represent a contiguous region This is equivalent to saying all strides are one
4913	Test if a set of slices represent a single position
4914	If a set of slices refers to a single position then return the corresponding Index . Otherwise throw Exception .
4915	Read the result of a data request . Only one variable at a time .
4916	Set extra information used by station obs datasets . Use stnIdVName or stnIndexVName .
4917	access it members
4918	Read a catalog and extract a FeatureCollectionConfig from it
4919	Add single declaration
4920	We will need to re - order the groups
4921	Locate a variable in this group
4922	we assume that coordinate axes get identified by being coordinate variables
4923	The time unit statistical type derived from code table 5 )
4924	here s where to deal with crossing seam
4925	return y x range
4926	Provide defaults for a settings map
4927	Extract the sessionid cookie value
4928	Set the max number of redirects to follow
4929	Should we use sessionid s?
4930	Close the session . This implies closing any open methods .
4931	Handle authentication and Proxy ing
4932	If we are testing then track the sessions for kill
4933	Deprecated but here for back compatibility
4934	private DqcFactory dqcFactory = null ;
4935	Generate a subclass of Index optimized for this array s rank
4936	Compute standard strides based on array s shape . Ignore vlen
4937	create a new Index based on a subsection of this one with rank reduction if dimension length == 1 .
4938	Create a new Index based on current one by eliminating any dimensions with length one .
4939	Create a new Index based on current one by eliminating the specified dimension ;
4940	create a new Index based on current one except transpose two of the indices .
4941	create a new Index based on a permutation of the current indices ; vlen fails .
4942	Get an index iterator for traversing the array in canonical order .
4943	Get the current element s index into the 1D backing array . VLEN stops processing .
4944	Set the current element s index . General - rank case .
4945	set current element at dimension dim to v
4946	set current element at dimension 0 1 2 to v0 v1 v2
4947	Check if we all time intervals have the same length .
4948	Make calendar date range using the first and last ending bounds
4949	Get the list of dates
4950	Make GempakParameters from the list of
4951	Get the station list
4952	Make a station from the header info
4953	Get the station key names
4954	Get the list of dates in this file .
4955	Find the station index for the specified station id .
4956	Get the type for this file
4957	Set depth + = n
4958	Set depth = n
4959	Create a gbx9 index from a single grib1 or grib2 file . Use the existing index if it already exists .
4960	Add a directory scan to the collection
4961	Compute if synchronous scan is needed . True if recheck is true and enough time has elapsed .
4962	only called from synch methods
4963	Set debugging flags
4964	Specify which variable will get written
4965	Write the input file to the output file .
4966	Validates an xml doc . If the validation fails the exception contains a detailed list of errors .
4967	Convert this multislice to a string suitable for use in a constraint
4968	Set the Structure to wrap .
4969	regular Variables .
4970	section of regular Variable
4971	is conversion needed?
4972	3 ) variable with cached data added to StructureDS through NcML
4973	the wrapper StructureMembers must be converted to correspond to the wrapper Structure
4974	look for the top variable that has an orgVar with the wanted orgName
4975	verify that the variable has data in the data array
4976	DO NOT USE DIRECTLY . public by accident . recalc any enhancement info
4977	Check if this is making a request for a restricted dataset and if so if its allowed .
4978	Create an empty ArraySequence for missing data
4979	Create an ArraySequence to hold the data
4980	Make a Sequence for the part
4981	Add the vertical coordinate variables if necessary
4982	This allows the possibility of reading a catalog in another thread . The default implementation does not do that but a subclass may override and implement . If the catalog is read successfully it is passed on to the callback .
4983	Create an InvCatalog by reading catalog XML from a String .
4984	Create an InvCatalog by reading catalog XML from a StringReader .
4985	Write the InvCatalogImpl to the OutputStream as a InvCatalog 1 . 0 document .
4986	Find the MetadataConverterIF registered for this key
4987	Returns the identifiers associated with the dimensionless derived unit .
4988	Multiplies this derived unit by another .
4989	Divides this derived unit by another .
4990	Converts numerical values from this unit to the derived unit . Obviously the numerical values are unchanged .
4991	Indicates if values in this unit are convertible with another unit .
4992	Checks the type of the Simple Geom and calls the appropriate method to build the xml
4993	Takes in a point and writes its xml
4994	Takes in a line and iterates through all its points writing the posList to xml
4995	Takes in a polygon checks whether it is an interior or exterior ring and writes the corresponding xml . Iterates through all linked polygons
4996	XML Attribute utilities
4997	Return the subnodes of a node with non - element nodes suppressed
4998	Recursive descent parser
4999	Pass reserved xml attributes unchanged
5000	Gets the subset string to be used in NetCDFFile . read given a variable and some indicies . useful for subsetting timeseries
5001	Turn any ArrayStructure into a ArrayStructureMA
5002	Set the data array for this member .
5003	Create an ArrayStructure for a Structure . Allow nested Structures . Create the data arrays and an iterator .
5004	Given a variable name returns the geometry type which that variable is associated with . If the variable has no simple geometry information null will be returned .
5005	Make a Station from the station data structure .
5006	Recursive AST walker ; compilation of filters is done elsewhere .
5007	Convert field references in a filter
5008	Process a dim redefinition
5009	create new Array with given indexImpl and the same backing store
5010	Determine if this bounding box is contained in another LatLonRect .
5011	Extend the bounding box to contain this point
5012	Extend the bounding box to contain the given rectangle
5013	Create the instersection of this LatLon with the given one
5014	Add elements of two arrays together allocating the result array . The result type and the operation type are taken from the type of a .
5015	Check that two arrays are conformable .
5016	Check that two array shapes are conformable . The shapes must match exactly except that dimensions of length 1 are ignored .
5017	Convert original array to desired type
5018	Copy array a to array result the result array will be in canonical order The operation type is taken from the type of a .
5019	copy array a to array result as bytes The array a and result must be type boolean
5020	copy array a to array result as an Object The array a and result must be type object
5021	Find min and max value in this array getting values as doubles . Skip Double . NaN .
5022	Set all the elements of this array to the given double value . The value is converted to the element type of the array if needed .
5023	turn ConfigCatalog into a mutable CatalogBuilder so we can mutate
5024	Create a ProjectionImpl from the projection
5025	Define the DEFINITIVE opendap identifier unescape function .
5026	Define the DEFINITIVE URL unescape function .
5027	Decode all of the parts of the url including query and fragment
5028	backslash escape a string
5029	backslash unescape a string
5030	Tokenize an escaped name using . as delimiter skipping \ .
5031	Find first occurence of char c in escapedName excluding escaped c .
5032	Given a backslash escaped name convert to a DAP escaped name
5033	Read a top - level scalar atomic variable
5034	Given a cursor get a list of containing cursors with the following constraints . 1 . the first element in the path is a top - level variable . 2 . the remaining elements are the enclosing compound variables 3 . the last element is the incoming cursor .
5035	Convenience method for retrieving the UIDefault for a single property of a particular class .
5036	Convenience method to obtain the Swing class from which this component was directly or indirectly derived .
5037	The goal here is to process the serialized databuffer and locate top - level variable positions in the serialized databuffer . Access to non - top - level variables is accomplished on the fly .
5038	Compile a structure array .
5039	Compile a structure instance .
5040	Compile a sequence array .
5041	Compile a sequence as a set of records .
5042	read a long in little endian format
5043	Find the field with the specified name .
5044	Get current value of the named field
5045	Set the current value of the named field
5046	Add a field created by the user .
5047	Add a boolean field as a checkbox .
5048	Add a field that edits a date
5049	Add a field that edits a double
5050	Add a field that edits an integer
5051	Add a password text field .
5052	Add a text field .
5053	Add a text combobox field .
5054	Add a TextArea field .
5055	Add a heading at the specified row . this spans all columns
5056	Add a Component .
5057	Add a seperator after the last field added .
5058	thanks to Heinz M . Kabutz
5059	Get the cell spacing . An exception is thrown if the cell spacing is not constant .
5060	Returns the array of Factor - s constituting this dimension .
5061	Multiplies this dimension by another dimension .
5062	Raises this dimension to a power .
5063	Indicates if this Dimension is the reciprocal of another dimension .
5064	Indicates if this dimension is dimensionless . A dimension is dimensionless if it has no Factor - s or if all Factor - s are themselves dimensionless .
5065	Get a Grib1ParamTables object optionally specifying a parameter table or lookup table specific to this dataset .
5066	Get a Grib1Tables object optionally specifiying a parameter table in XML specific to this dataset .
5067	Add all tables in list to standard tables
5068	Add table to standard tables for a specific center subcenter and version .
5069	Raise this unit to a power .
5070	Converts values in this unit to the equivalent values in the convertible derived unit .
5071	Initialize the unit table . This is used if there are no units in the file .
5072	Create a vertical dimension variable based on the info . Based on visad . data . vis5d . Vis5DVerticalSystem .
5073	Return the name of the DORADE descriptor at the current location in the file . The current location will not be changed .
5074	Unpack a two - byte integer from the given byte array .
5075	Unpack a four - byte integer from the given byte array .
5076	Unpack a four - byte IEEE float from the given byte array .
5077	Unpack an eight - byte IEEE float from the given byte array .
5078	Adds an alias for a unit to the database .
5079	Adds a symbol for a unit to the database .
5080	Factory method for creating a unit converter .
5081	Set the data as a collection of StructureData .
5082	Set the data as a collection of PointFeature .
5083	Draws all the features that are within the graphics clip rectangle using the previously set displayProjection .
5084	get the set of shapes to draw convert projections if need be
5085	process all the bytes in the stream
5086	read into dest byte array until buffer is full or end of stream
5087	Get more bytes into buffer . Stop when endSequence is found .
5088	Reads up to len bytes of data from this input stream into an array of bytes . This method blocks until some input is available .
5089	Skips over and discards n bytes of data from the input stream .
5090	Add this coord as a dimension to the netCDF file
5091	Get the coordinate index for the record
5092	checking the file
5093	Open the file and read the header part
5094	Read the data for each variable passed in
5095	Read data from encoded values and run len into regular data array
5096	take advantage of the work already done by NetcdfDataset
5097	turn Variable into opendap variable
5098	called by Navigation
5099	Set the Map Area .
5100	Set the Map Area by converting LatLonRect to a ProjectionRect .
5101	set the center point of the MapArea
5102	Set the Projection change the Map Area to the projection s default .
5103	Add all of the toolbar s actions to a menu .
5104	from panning so wait delay msecs before doing the redraw .
5105	when component resizes we need a new buffer
5106	Set the currently selected Variable .
5107	Convert int base to Index based
5108	Get the array element at a specific dap4 index as a double
5109	Get the array element at a specific dap4 index as an Object
5110	Return the string of Sector for the GINI image file
5111	Read a scaled 3 - byte integer from file and convert to double
5112	Convenience function ; look up Parameter by name ignoring case .
5113	Iterator API Overrides
5114	Swap the byte order from the system default
5115	Get the number of timesteps per file and the starting offset
5116	Get the file name for the particular time and ensemble index
5117	Get the list of filenames
5118	Get the path to the Data Descriptor File
5119	Get the full path for a given filename
5120	Add a Chsub
5121	Calculate the offset in units of timeUnit from the given reference date?
5122	read the header of input file and parsing the WMO part
5123	read the compressed data
5124	construct a dataset for special graphic symbol packet with code 12 13 and 14
5125	construct a dataset for special symbol packet with code 25
5126	check level III file header
5127	construct a dataset for vector arrow data packet with code 5
5128	construct a dataset for text and special symbol packets with code 1 2 and 8
5129	construct a dataset for linked vector packet and unlinked vector packet
5130	get the table to calibrate data value
5131	get the calibrate data values for dualpol data
5132	adding new variable to the netcdf file
5133	adding new parameter to the netcdf file
5134	uncompress the TDWR products
5135	get unsigned integer from byte array
5136	get signed integer from bytes
5137	this converts a byte array to another primitive array
5138	Process a DMR request .
5139	Merge the servlet inputs into a single object for easier transport as well as adding value .
5140	Generate an error based on the parameters
5141	Set the anchor point .
5142	Erase the last rectangle and draw a new one from the anchor point to this point .
5143	Get current Bounds
5144	Get previous Bounds
5145	Parse text in the format yyyy - MM - dd
5146	change shape of the data variables
5147	Even if JavaBits is 64 the limit on an array size is Integer . MAX_VALUE .
5148	Convert 2 bytes into a signed integer .
5149	Convert unsigned bytes into an integer .
5150	Convert 3 bytes into a signed integer .
5151	Convert 2 bytes into an unsigned integer .
5152	Convert 3 bytes into an unsigned integer .
5153	Convert 4 bytes into a float value .
5154	Convert 4 bytes to a float .
5155	Convert 8 bytes into a signed long .
5156	count number of bits on in bitmap
5157	lon naught ??
5158	Create a WKS string
5159	Escape selected characters in a string using XML entities
5160	Remove backslashed characters in a string
5161	Split a string with respect to a separator character and taking backslashes into consideration .
5162	scan has been done create FmrcInv
5163	the ones that dont start with thredds
5164	How many prohected components of this Grid object?
5165	return record header time as a CalendarDate
5166	Make a section of an ArrayStructureBB
5167	Index all text files under a directory .
5168	deserialize the Grib1Record object
5169	Do we think this is a M3IO file .
5170	Intend to use EPSG system parameters
5171	reacquire any resources like file handles
5172	Is this date before the given date . if isPresent always false .
5173	Is this date before the given date . if d . isPresent always true else if this . isPresent false .
5174	Is this date after the given date . if isPresent always true .
5175	Set the i th value of the array .
5176	Add a CoordinateSystem to the dataset .
5177	Set the Unit String for this Variable . Default is to use the CDM . UNITS attribute .
5178	Get the Unit String for the Variable . May be set explicitly else look for attribute CDM . UNITS .
5179	called from TdsInit on spring - managed auto - wired bean
5180	Does the actual work of reading a catalog .
5181	dirPath = the directory path reletive to the rootDir
5182	dirPath is the directory relative to rootDir directory is absolute
5183	Test if point lies between two longitudes deal with wrapping .
5184	Make a nicely formatted representation of a latitude eg 40 . 34N or 12 . 9S .
5185	Make a nicely formatted representation of a longitude eg 120 . 3W or 99 . 99E .
5186	Compares this base quantity to another base quantity .
5187	Get the currently selected InvDataset .
5188	Set the currently selected InvDataset .
5189	Create the TreePath corresponding to the given TreeNode .
5190	Open all nodes of the tree .
5191	Set the InvCatalog to display . The catalog is read asynchronously and displayed if successfully read . You must use a PropertyChangeEventListener to be notified if successful .
5192	Set the catalog to be displayed . If ok then a Catalog PropertyChangeEvent is sent .
5193	look for an coord_axis or coord_alias attribute
5194	Writes an int in a variable - length format . Writes between one and five bytes . Smaller values take fewer bytes . Negative numbers are not supported .
5195	Writes a sequence of UTF - 8 encoded characters from a string .
5196	Reads UTF - 8 encoded characters into an array .
5197	we are running with only ncx index files no data
5198	Add a member .
5199	Remove the given member
5200	Get the names of the members .
5201	Find the member by its name .
5202	Read the bitmap array when needed return null if none .
5203	Set the state from the last saved in the PreferencesExt .
5204	Get the currently selected rows .
5205	this array translates the column index to the model index
5206	Get member data array of any type as an Array .
5207	Get member data of type double .
5208	Get java double array for a member of type double .
5209	Get member data of type float .
5210	Get java float array for a member of type float .
5211	Get member data of type byte .
5212	Get java byte array for a member of type byte .
5213	Get member data of type int .
5214	Get java int array for a member of type int .
5215	Get member data of type short .
5216	Get java short array for a member of type short .
5217	Get member data of type long .
5218	Get java long array for a member of type long .
5219	Get member data of type char .
5220	Get java char array for a member of type char .
5221	Write a DIF record for a specific dataset
5222	See if a dataset is harvestable to a DIF record .
5223	make an immutable copy without changin DatasetBuilder
5224	transfer all metadata optionally also inheritable metadata from parents
5225	get the inheritable ThreddsMetadata object . If doesnt exist create new empty one
5226	Add in a new product
5227	Dump out the missing data
5228	Dump out the missing data as a summary
5229	Find the grid record for the time and level indices Canonical ordering is ens time level
5230	Dump this variable
5231	Make a long name for the variable
5232	only for longitude only for regular ( do we need a subclass for longitude 1D coords ??
5233	Not quite memcmp
5234	It is common to want to parse a DMR text to a DapDataset so provide this utility .
5235	Walk the dataset tree and remove selected attributes such as _Unsigned
5236	only one message per CoordinatePartitionUnionizer instance
5237	some weird adjustment for la1 and la2 .
5238	parse variable name and index selector out of the selector String . variable name must be escaped
5239	Make section specification String from a range list for a Variable .
5240	we think its got to be in one of the 9 boxes around rectIndex
5241	Calling close will force the method to close and will force any open stream to terminate . If the session is local Then that too will be closed .
5242	Create a request add headers and content then send to HTTPSession to do the bulk of the work .
5243	for stations figure out the encoding
5244	class I don t understand enough of the code base to anticipate implementation artifacts .
5245	Added 5 - 30 - 2006 to allow for resetting of the input used by this object . This saves in memory allocation costs
5246	Reads the stream .
5247	Call this from awt event thread . The task is run in a background thread .
5248	Convert a uri string to an instance of java . net . URI . The critical thing is that this procedure can handle backslash escaped uris as well as %xx escaped uris .
5249	Remove selected fields from a URI producing a new URI
5250	Convert a zero - length string to null
5251	Join two string together to form proper path WITHOUT trailing slash
5252	Accept datasets whose last modified date is at least the last modified limit of milliseconds in the past .
5253	for making partition collection
5254	The files that comprise the collection . Actual paths including the grib cache if used .
5255	public by accident do not use
5256	get index filename
5257	stuff for FileCacheable
5258	Number of nested fields
5259	Add a Global attribute of type String to the file . Must be in define mode .
5260	Add a Global attribute of type Array to the file . Must be in define mode .
5261	Delete a global Attribute . Must be in define mode .
5262	Rename a global Attribute . Must be in define mode .
5263	Add an attribute of type String to the named Variable . Must be in define mode .
5264	Add an attribute of type Array to the named Variable . Must be in define mode .
5265	Delete a variable Attribute . Must be in define mode .
5266	Rename a variable Attribute . Must be in define mode .
5267	Set the file subType .
5268	Writes headers and bounding box
5269	In the WFS specification for GetFeature each feature type is its own member and so writeMembers add each member to the fileOutput
5270	Write stationObsDataset XML document
5271	Write stationCollection XML document
5272	Write the DSR ; do not bother to cache .
5273	Output the specifiedd DMR or DSR or ... but xml only .
5274	Write an error chunk . If mode == DMR then replaces the dmr else reset the current chunk thus losing any partial write .
5275	Closes this output stream and releases any system resources associated with this stream . Except the underlying stream is not actually closed ; that is left to the servlet level
5276	Overload flush to also write out the DMR
5277	needed for constructCopy
5278	Is want contained in this Range?
5279	Get ith element
5280	Create a new Range shifting this range by a constant factor .
5281	Read data subset from file for a variable create primitive array .
5282	Read data subset from file for a variable to WritableByteChannel . Will send as bigendian since thats what the underlying file has .
5283	Create a new primitive vector using a subset of the data .
5284	return sorted catalogs
5285	delete old databases
5286	Set the grid nav block values
5287	used by H5tiledLayout
5288	make a double array out of an int array
5289	Supported for backwards compatibility . We prefer that datasetBoundaries . wkt or datasetBoundaries . json are used .
5290	Checks that all the requested vars exist . If all fills out the param . vars with all grid names Throws exception if some of the variables in the request are not contained in the dataset
5291	Find the DatasetSourceStructure that matches this name .
5292	to work under Intellij .
5293	Make a vertical dimensions
5294	Read the header and populate the ncfile
5295	Finish constructing after all elements have been added . This does the inheritence thing This can be called again if new elements are added .
5296	Look for InvMetadata elements in the parent that need to be added to the public metadata of this dataset . Recurse up through all ancestors .
5297	Transfer all inheritable metadata from fromDs to the local metadata of this dataset . Called by InvDatasetScan to transfer inheritable metaddata to the nested catalogRef
5298	transfer inherited metadata consolidating it into target
5299	LOOK these are wrong
5300	Add a nested dataset at the location indicated by index .
5301	Remove the given dataset element from this dataset if it is in the dataset .
5302	Replace the given dataset if it is a nesetd dataset .
5303	Add a service to this dataset .
5304	Remove a service from this dataset .
5305	Set the list of services attached specifically to this dataset . Discard any previous servies .
5306	Remove the given InvMetadata from the set of metadata local to this dataset .
5307	Look up the User property having the given key
5308	Validate this DatasetNamer object . Return true if valid false if invalid .
5309	get list of data descriptors as Strings
5310	Constructs the full server URI from a request
5311	Processes GetCapabilities requests .
5312	Processes GetFeature requests .
5313	Checks request parameters for errors . Will send back an XML Exception if any errors are encountered .
5314	A handler for WFS based HTTP requests that sends to other request handlers to handle the request .
5315	Provide a method for getting the capabilities document .
5316	Returns the size of the dataset in bytes . Will be zero if this dataset is a collection or non - existent .
5317	Returns the date that the dataset was last modified . Will be null if the dataset is a collection or non - existent .
5318	Node specific generators
5319	Write a file to the response stream .
5320	Send given content string as the HTTP response .
5321	Set the proper content length for the string
5322	The request base as a URI
5323	servletPath + pathInfo
5324	The entire request including query string
5325	Return the value of the given parameter for the given request . Should only be used if the parameter is known to only have one value . If used on a multi - valued parameter the first value is returned .
5326	Save persistent state .
5327	Write a file directory .
5328	not used yet
5329	Track nested Tables .
5330	total bits of this table and all subtables
5331	Append this line to the bottom of the JTextArea . A newline is added and JTextArea is scrolled to bottom ; remove lines at top if needed .
5332	Create an XML document for the stations in this dataset possible subsetted by bb . Must be a station dataset .
5333	Create the capabilities XML document for this dataset
5334	coord based record finding . note only one record at a time
5335	get the ith coordinate
5336	Add the item to the top of the list . If it already exists move it to the top .
5337	LOOK this could be a problem
5338	Return ith slice
5339	return - 1 if we have completed .
5340	public so can be called from Grib2
5341	all CdmrFeatureDatasets must return their featureType - use as a fail - fast test of the endpoint
5342	Set the value type of the option switch to the type passed
5343	Constructs a Grib1Gds object from a pds and predefined tables .
5344	copy all bytes from in to out specify buffer size
5345	Read the contents from the inputStream and place into a String with any error messages put in the return String .
5346	Read the contents from the inputStream and place into a byte array with any error messages put in the return String .
5347	Wite the contents from the String to a Stream
5348	copy file to output stream specify internal buffer size
5349	Copy part of a RandomAccessFile to output stream specify internal buffer size
5350	Copy an entire directory tree .
5351	Read the file and place contents into a byte array with any error messages put in the return String .
5352	Read the contents from the named file and place into a String assuming UTF - 8 encoding .
5353	Write String contents to a file using UTF - 8 encoding .
5354	Write contents to a file using UTF - 8 encoding .
5355	copy input stream to file . close input stream when done .
5356	Turns a ParseException into a OPeNDAP DAP2 error and sends it to the client .
5357	Sends a OPeNDAP DAP2 error to the client .
5358	Sends an html document to the client explaining that they have used a poorly formed URL and then the help page ...
5359	Handler for OPeNDAP catalog . xml requests .
5360	to be overridden by servers that implement catalogs
5361	to be overridden by servers that implement status report
5362	Prints the Bad URL Page page to the passed PrintWriter
5363	reference reference or base time as Dare .
5364	lOOK probably desnt work
5365	Read an NcML file from a String and construct a NcmlCollectionReader from its scan or scanFmrc element .
5366	Read an NcML file from a URL location and construct a NcmlCollectionReader from its scan or scanFmrc element .
5367	Replace any char not alphanumeric or in allowChars by replaceChar .
5368	Delete any non - printable characters
5369	Remove any char not alphanumeric or in okChars .
5370	Remove all but printable ascii
5371	transform embedded space to _
5372	Count number of chars that match in two strings starting from front .
5373	Pad the given string with padString on the left up to the given length .
5374	Pad the given string with padString on the right up to the given length .
5375	Remove all occurrences of the substring sub in the string s .
5376	Remove all occurrences of the character c in the string s .
5377	Remove all occurrences of the character c at the end of s .
5378	Collapse continuous whitespace into one single .
5379	Replace any char out in s with in .
5380	Replace all occurrences of any char in replaceChar with corresponding String in replaceWith
5381	Replaces all occurrences of pattern in string with value
5382	Find all occurrences of the match in original and substitute the subst string .
5383	Find all occurences of match strings in original and substitute the corresponding subst string .
5384	Remove any of the characters in out from sb
5385	Replace any String out in sb with char in .
5386	Replace any of the characters from out with corresponding character from in
5387	Find all occurences of the match in original and substitute the subst string directly into the original .
5388	Remove bad char from beginning or end of string
5389	called by eventBus this is where the trigger comes in
5390	A request has come in check that the state has been initialized . this is called from the request thread .
5391	Collection was changed update internal objects . called by CollectionUpdater trigger via handleCollectionEvent so in a quartz scheduler thread
5392	Look through the collection and find what GDS and PDS templates are used .
5393	Get a list of all the nested datasets .
5394	Release resources - undo the read of the catalog . This is needed when crawling large catalogs . For modest catalogs that you will repeatedly examine do not use this method .
5395	Make deep copy from sdata to another StructureData object whose data is self contained
5396	Make deep copy from an ArrayStructure to a ArrayStructureBB whose data is contained in a ByteBuffer
5397	Make deep copy to an ArrayStructureBB whose data is contained in a ByteBuffer . Use the order of the members in the given Structure ; skip copying any not in the Structure
5398	Make deep copy from a StructureData to a ArrayStructureBB whose data is contained in a ByteBuffer .
5399	Make deep copy from a StructureData to a ArrayStructureBB whose data is contained in a ByteBuffer
5400	Only use in GribVariable to decide on variable identity when intvMerge = false . By returning a constant we dont intvMerge = false . Problem is we cant reconstruct interval length without reference time which is not in the pds .
5401	Create a new CoordinateAxis1D as a section of this CoordinateAxis1D .
5402	Create a TableAnalyser for this dataset with the given TableConfigurer
5403	for debugging messages
5404	Make a NestedTable object for the dataset .
5405	Sync and extend
5406	Get the latitude values for the given type .
5407	Returns the long resulting from reversing 8 bytes at a specified offset in a byte array .
5408	Returns the float resulting from reversing 4 bytes at a specified offset in a byte array .
5409	Returns the char resulting from swapping 2 bytes at a specified offset in a byte array .
5410	The attribute coordinates is an alias for _CoordinateAxes .
5411	Add a Parameter to a CoordinateTransform . The variable attribute points to a another variable that has the data in it . Make sure that atrribute and variable exist . Id readData is true read the data and use it as the value of the parameter otherwise use the name as the value of the parameter .
5412	Get the common parent of this and the other group . Cant fail since the root group is always a parent of any 2 groups .
5413	Is this a parent of the other Group?
5414	Set the Group s parent Group
5415	Adds the specified shared dimension to this group .
5416	Adds the specified shared dimension to this group but only if another dimension with the same name doesn t already exist .
5417	Add a nested Group
5418	Add an Enumeration
5419	Add a Variable
5420	remove a Dimension using its name in this group only
5421	Create groups to ensure path is defined
5422	This method just makes sure that the attribute field in each Aliases resolves correctly if there ends up being a looseEnds Attribute Table at the top level .
5423	Print a DAS constructed from this DDS and it s BaseType variables .
5424	Returns a reference to the named variable .
5425	Write GridDatatype data to the geotiff file .
5426	Replace missing values with dataMinMax . min - 1 . 0 ; return a floating point data array .
5427	Replace missing values with 0 ; scale other values between 1 and 255 return a byte data array .
5428	LOOK WTF ?? is this the seam crossing ??
5429	Write GridCoverage data to the geotiff file .
5430	Given the information on construction writes the necessary exception information .
5431	Begin API Override
5432	This is only used for the top level GribCollection .
5433	Find out what kind of index this is
5434	Update Grib Collection if needed
5435	Update all the gbx indices in one directory and the ncx index for that directory
5436	Used by IOSPs
5437	Open a grib collection from a single grib1 or grib2 file . Create the gbx9 and ncx2 files if needed .
5438	from a single file read in the index create if it doesnt exist ; return null on failure
5439	Match has different semantics than urlCompare
5440	Allow users to add to the default rc
5441	Allow users to search the default rc
5442	Record some well known parameters
5443	overwrite existing entries
5444	Allow for external loading
5445	Get top level datasets contained directly in this catalog . Do not dereference catRefs .
5446	Look though all datasets here or under here . do not go into catrefs
5447	Sets new projection for subsequent drawing .
5448	we have to deal with both projections and resolution - dependence
5449	make an ArrayList of Shapes from the given featureList and current display Projection
5450	Compares this PrefixName with a string .
5451	The given task is run in a background thread . Progress is indicated once a second . You cannot call this method again till the task is completed .
5452	LOOK need an option to only scan latest last partition or something
5453	Extend result with all the values in the list of EnsCoord
5454	Set the index - th StructureData of this ArrayStructure .
5455	Get the index - th StructureData of this ArrayStructure .
5456	member data is itself a structure and may be an array of structures .
5457	Get member data array of any type as an Object eg Float Double String StructureData etc .
5458	Get scalar value as a double with conversion as needed . Underlying type must be convertible to double .
5459	Get scalar value as an int with conversion as needed . Underlying type must be convertible to int .
5460	Get scalar member data of type float .
5461	Get scalar member data of type byte .
5462	Get scalar member data of type short .
5463	Get scalar member data of type char .
5464	Get member data of type String or char .
5465	Get member data of type array of Structure .
5466	Get member data of type ArraySequence
5467	Get member data of type ArrayObject
5468	Peg a value to either the min or max depending on sign .
5469	Evaluate a filter with respect to a Sequence record . Assumes the filter has been canonicalized so that the lhs is a variable .
5470	Convert the view to a constraint string suitable for use in a URL except not URL encoded .
5471	Reference X match
5472	Evaluate a filter with respect to a Sequence record .
5473	Count the number of fields of a structure that already in this view .
5474	Walk all the included variables and accumulate the referenced enums
5475	Walk all the included declarations and accumulate the set of referenced groups
5476	Static Utility for compiling a constraint string
5477	accept grib2 or ncx files
5478	actions that are system - wide
5479	Get the byte order for the machine type .
5480	LOOK WTF ?? Set the machine type for this system .
5481	Find a key with the given name
5482	Find the file header with this name
5483	Read in the values for the file header
5484	Print the part information
5485	Get the pointer to the data . Taken from DM_RDTR
5486	Read a float
5487	Read a String
5488	Unpack an array of packed integers .
5489	Get a bit string for an integer
5490	Write ncfile to a WritableByteChannel .
5491	This method recursively travels through the DOM tree locating BaseType derived nodes and placing them in the DDS . The structure of the BaseType derived elements in the XML instance document is captured in the DOM object that is being parsed . This structure again reflected in the resulting DDS .
5492	Grids are unusual examples of DConstructor and require special handling when parsing .
5493	Parse all of the Alias tags in this element of the XML document . Add each one to the correct Attribute Table .
5494	convert ids to DataDescriptors expand table D
5495	look for replication move replicated items into subtree
5496	Get the dataset filename .
5497	Get the CF feature type
5498	Check if two numbers are nearly equal with given absolute tolerance .
5499	Selected consult or iterator overrides for efficiency
5500	Parses a unit specification . This method is thread - safe .
5501	Show me lots of stuff about the passed in object
5502	a variable is tiled if any of its dimensions are tiled
5503	Implements coverting a complete best to a monotonic best . The reftime is not allowed to decrease
5504	Split a latlon rectangle to the equivalent ProjectionRect using this LatLonProjection to split it at the seam if needed .
5505	construct the TImeSeries plot for the list of logs passed in
5506	Turn a list into a map
5507	Get the value as an Array .
5508	Retrieve a numeric value by index . If it s a String it will try to parse it as a double .
5509	Write CDL representation into f
5510	set the value as a String trimming trailing zeroes
5511	set the values from a list
5512	set the values from an Array
5513	Scan the collection and gather information on contained datasets .
5514	Generate the catalog for a resolver request of the given ProxyDatasetHandler .
5515	put a message on the queue schedule writing if not already scheduled .
5516	Jump to the appropriate tab based on datatype of InvDataset
5517	jump to the appropriate tab based on datatype of InvAccess
5518	Jump to the appropriate tab based on datatype of threddsData
5519	Handle messages .
5520	Set look - and - feel .
5521	Must call this method on the event thread .
5522	Create standard name from list of axes . Sort the axes first
5523	prefer smaller ranks in case more than one
5524	Find the CoordinateAxis that has the given AxisType . If more than one return the one with lesser rank .
5525	Find the first ProjectionCT from the list of CoordinateTransforms .
5526	true if it has X and Y CoordinateAxis and a CoordTransform Projection
5527	true if all axes are CoordinateAxis1D and are regular
5528	Test if all the Dimensions in subset are in set
5529	Do we have all the axes in the list?
5530	Do we have the named axis?
5531	Do we have all the dimensions in the list?
5532	Do we have all the axes types in the list?
5533	Do we have an axes of the given type?
5534	This procedure does the actual recursive clone .
5535	Get the currently selected bean or null if none selected .
5536	Get the currently selected beans . Use this for multiple selection
5537	Get the currently selected cells . Use this for multiple row selection when columnSelection is on
5538	Set which row is selected .
5539	Restore state from PreferencesExt
5540	Factory method for constructing an unknown unit from a name .
5541	Closes this input stream and releases any system resources associated with the stream ; closes the method also .
5542	Has v already been added to the set of extra variables?
5543	Is v a coordinate axis for this feature type?
5544	find a coord axis of the given type in the table and its parents
5545	use recursion so that parent variables come first
5546	add table join to this cursor level
5547	also called from StandardPointFeatureIterator
5548	Do the conversion and return a NodeMap representing the conversion .
5549	Create a SimpleUnit from the given name catch Exceptions .
5550	Create a SimpleUnit from the given name allow Exceptions .
5551	need subclass access
5552	Return true if unitString1 is convertible to unitString2
5553	Return true if this ucar . units . Unit is a Date .
5554	Return true if the given unit is a time Unit eg seconds .
5555	Get the conversion factor to convert inputUnit to outputUnit .
5556	Convert given value of this unit to the new unit .
5557	Is this an instance of an UnknownUnit?
5558	Extract the value can only be called for ScaledUnit .
5559	Generates a clause which which compares subclauses using one of the relative operators supported by the Operator class .
5560	Generates a clause which invokes a function that returns a boolean value .
5561	Generates a clause which invokes a function that returns a BaseType .
5562	Adapt a rank 2 array into a java . awt . image . BufferedImage . If passed a rank 3 array take first 2D slice .
5563	Crawl a catalog thats already been opened . When you get to a dataset containing leaf datasets do all only the first or a randomly chosen one .
5564	Crawl this dataset recursively return all datasets
5565	Crawl this dataset recursively . Only send back direct datasets
5566	Get index file may be in cache directory may not exist
5567	Looking for an existing file in cache or not
5568	Debugging do not use in production . Set counters to zero set debugging on
5569	Debugging do not use .
5570	Close the file and release any associated system resources .
5571	Set the position in the file for the next read or write .
5572	Copy the contents of the buffer to the disk .
5573	Read a byte of data from the file blocking until data is available .
5574	Read an array of shorts
5575	Read an integer at the given position bypassing all buffering .
5576	Read an array of ints
5577	Read an array of longs
5578	Read an array of floats
5579	Read an array of doubles
5580	Read a String of known length .
5581	Read a String of max length zero terminate .
5582	Write an array of booleans
5583	Write an array of shorts
5584	Write an array of chars
5585	Write an array of ints
5586	Write an array of longs
5587	Write an array of floats
5588	Write an array of doubles
5589	Writes the string to the file as a sequence of bytes . Each character in the string is written out in sequence by discarding its high eight bits .
5590	Writes the character array to the file as a sequence of bytes . Each character in the string is written out in sequence by discarding its high eight bits .
5591	Search forward from the current pos looking for a match .
5592	Create the selector result string and append .
5593	returns a DirectoryPartition or DirectoryCollection
5594	Find the index file using its canonical name
5595	Scans first 100 files to decide if its a leaf . If so it becomes a DirectoryCollection else a PartitionCollection .
5596	Find all children directories . Does not recurse . We separate this from the constructor so it can be done on demand Public for debugging .
5597	Scan for subdirectories make each into a DirectoryBuilder and add as a child
5598	read the list of files from the index
5599	Return GridDatatype objects grouped by GridCoordSys . All GridDatatype in a Gridset have the same GridCoordSystem .
5600	Acquire a FileCacheable and lock it so no one else can use it . call FileCacheable . close when done .
5601	LOOK should you remove the entire CacheElement ?
5602	Remove all instances of object from the cache
5603	Release the file . This unlocks it updates its lastAccessed date . Normally applications need not call this just close the file as usual . The FileCacheable has to do tricky stuff .
5604	Convert 4 bytes into a signed integer .
5605	get CacheElement specified by hashKey . If found update lastUsed in shadowCache .
5606	Remove all cache entries .
5607	we have to delay making these since we dont identify the dimensions specifically until now
5608	Is this a global coverage over longitude ?
5609	true if increasing z coordinate values means up in altitude
5610	Given a point in x y coordinate space find the x y index in the coordinate system .
5611	Given a point in x y coordinate space find the x y index in the coordinate system . If outside the range the closest point is returned eg 0 or n - 1 depending on if the coordinate is too small or too large .
5612	Given a lat lon point find the x y index in the coordinate system .
5613	Given a lat lon point find the x y index in the coordinate system . If outside the range the closest point is returned
5614	return slider indicator position for currently selected item
5615	return item selected by this pixel position
5616	this idiom keeps the iterator from escaping so that we can use try - with - resource and ensure DirectoryStream closes . like ++
5617	copy remote files to localDir
5618	LOOK maybe combine grib1 grib2 and bufr ??
5619	Convert a period string into a CalendarPeriod . Field .
5620	minimize memory use by interning . wacko shit in GribPartitionBuilder TimeCoordinate whoduhthunk?
5621	Convert a udunit period string into a CalendarPeriod
5622	Subtract two dates return difference in units of this period . If not even will round down and log a warning
5623	Get the conversion factor of the other CalendarPeriod to this one
5624	Get the duration in milliseconds - +
5625	start + offset = end
5626	Sync the file
5627	Initialize the parameter tables .
5628	Add a dataRootExt to in - memory tree .
5629	Find the longest path match .
5630	Find the longest DataRoot match .
5631	convert a dataRootExt to a dataRoot
5632	return requested CalendarDateRange .
5633	redo the variables against the shared coordinates
5634	Create a new Netcdf file with fill mode true .
5635	Add a Group to the file . Must be in define mode . If pass in null as the parent then the root group is returned and the name is ignored . This is how you get the root group . Note this is different from other uses of parent group .
5636	Add a EnumTypedef to the file . Must be in define mode .
5637	Delete a group Attribute . Must be in define mode .
5638	Rename a group Attribute . Must be in define mode .
5639	For netcdf3 only take all unlimited variables and make them into a structure .
5640	Abort writing to this file . The file is closed .
5641	write XML using the bean properties of the contained object
5642	extract info from underlying feature dataset
5643	Divide this unit into another unit .
5644	Converts a value in this unit to the equivalent value in the convertible derived unit .
5645	Converts a value in the convertible derived unit to the equivalent value in this unit .
5646	Convert a DataDDS into an Array for a Structure member variable .
5647	Convert a DataDDS into an Array for a top level variable ie not a Structure member variable .
5648	Convert a DataDDS into an Array
5649	this is called on TDS shutdown and reinit
5650	assumes only one open at a time ; could have MetadataManagers share open databases
5651	Convert a time udunit string
5652	This ensures that the capacity is at least minCapacity .
5653	This gets a specified element .
5654	Try to build a catalog for the given path by scanning the location associated with this InvDatasetScan . The given path must start with the path of this InvDatasetScan .
5655	Try to build a catalog for the given resolver path by scanning the location associated with this InvDatasetScan . The given path must start with the path of this InvDatasetScan and refer to a resolver ProxyDatasetHandler that is part of this InvDatasetScan .
5656	What is the data type of the aggregation coordinate ?
5657	Factory for Grib2Pds
5658	null means use refTime
5659	Apply scale factor to value return a double result .
5660	Parse the localConcept files needed to create grib1 tables for use by the CDM .
5661	Add the information from a localConcept file to super HashMap localConcepts
5662	clean the string representation of a line in the localConcept file . Basic removal of tabs semicolons single quotes etc .
5663	Store localConcept information in super HashMap localConcepts
5664	Write out grib1 tables based on localConcepts files - these are the tables that the CDM will read .
5665	Write the lookupTables . txt file which basically registers all of the new grib1 tables with the CDM
5666	Quick prinout to System . out of the different parameter metadata fields
5667	Generate grib1 tables for the CDM based on the localConcept files from ECMWF GRIB - API
5668	Find the DatasetSourceType that matches this name .
5669	Crawl this DatasetSource and generate a new InvCatalog return the top - level InvDataset .
5670	Crawl this DatasetSource and generate a new InvCatalog with all datasets named sorted and organized as defined by this DatasetSource return the newly generated InvCatalog .
5671	Use the list of dsNamers to name the given list of datasets .
5672	Name the datasets contained in the given dataset . The given dataset contains a flat list of datasets .
5673	Name the datasets in the given dataset hierarchy using this DatasetSource s list of datasetNamers .
5674	Synchroneous method to load the image . It should only be called by something which is a thread itself such as the HtmlDistillerThread . Since this intended for large batch operations this bypasses the cache .
5675	stops all picture loading except if the Url we desire is being loaded
5676	method that is invoked by the SourcePictureListener interface . Usually this will be called by the SourcePicture telling the ScalablePicture that it has completed loading . The ScalablePicture should then change it s own status and tell the ScalableListeners what s up .
5677	pass on the update on the loading Progress to the listening objects
5678	method that creates the scaled image in the background in it s own thread .
5679	return the size of the scaled image or Zero if there is none
5680	return the size of the scaled image as a neatly formatted text or Zero if there is none
5681	Get the list of merged parts in this file
5682	Make the header for the text report
5683	This subroutine checks the parts in a sounding data set for the unmerged data types .
5684	Check for valid groups
5685	Set the cache root directory . Create it if it doesnt exist .
5686	Make sure that the current root directory exists .
5687	Get a file in the cache . File may or may not exist . We assume its always writeable . If it does exist set its LastModifiedDate to current time .
5688	Remove all files with date < cutoff .
5689	Remove files if needed to make cache have less than maxBytes bytes file sizes . This will remove files in sort order defined by fileComparator . The first files in the sort order are kept until the max bytes is exceeded then they are deleted .
5690	contains a BUFR table entry
5691	Create a coordinate axis from an existing Variable .
5692	Make a copy with an independent cache .
5693	Does the axis have numeric values .
5694	Get a string representation
5695	needed by time coordinates
5696	Replace the rowList with this one .
5697	Get the currently selected row .
5698	Increment or decrement the current selection by one row .
5699	for each column get the model index
5700	set current value - no event
5701	Internal recursive method to perform Quick Sort on name array .
5702	Private method to swap two elements in the array
5703	Make MFileOS if file exists otherwise return null
5704	Tor s transform algorithm renamed to rotate for clarity
5705	Create an XMLStore reading from the specified filename .
5706	Create an XMLStore reading from an input stream . Because of some peculiariteis you must open the input stream wtice and pass both in .
5707	Create a read - only XMLStore reading from the specified resource opened as a Resource stream using the XMLStore ClassLoader . This allows you to find files that are in jar files on the application CLASSPATH .
5708	Convenience routine for creating an XMLStore file in a standard place .
5709	Save the current state of the Preferences tree to disk using the original filename . The XMLStore must have been constructed from a writeable XML file .
5710	Save the current state of the Preferences tree to the given OutputStream .
5711	Write out an atomic variable .
5712	Write out a scalar or array structure instance
5713	Write out a single structure instance
5714	Write out a single or array sequence instance
5715	Write out a single Record instance .
5716	is this a valid BUFR file .
5717	Get the WMO Station ID as a string
5718	Method to read an entry from the data stream . The stream is assumed to be in the right spot for reading . This method should be called from something controlling the reading of the entire file .
5719	Method to retrieve data for this field
5720	Grid point data - simple packing
5721	Code taken from esupport ticket ZVT - 415274
5722	AbstractCursor Abstract Methods
5723	Write a netcdf - 3 file from a subset of a grid dataset
5724	Write a netcdf - 3 file from a subset of a grid dataset as long as it doesnt exceed a certain file size .
5725	Write a CF compliant Netcdf - 3 file from any gridded dataset .
5726	Set the list of stations .
5727	set selected station based on the sttion id .
5728	Find station that contains this point . If it exists make it the selected station .
5729	Find station closest to this point . Make it the selected station .
5730	Get the selected station .
5731	Get the name for the projection type
5732	Get all the Stations within a bounding box .
5733	Find a Station by name
5734	Get all data for this Station .
5735	Get data for this Station within the specified date range .
5736	Read data from this ray .
5737	Dot product of 2 vectors
5738	Get the L2 norm of this vector .
5739	Normalize this vector so it has norm = 1 . 0 .
5740	pull services out of the datasets and into the catalog
5741	Get the parameter with id . If not found look in default table .
5742	Get the parameter with id but dont look in default table .
5743	Adds a prefix to the database by name .
5744	Adds a prefix symbol to the database .
5745	Returns the prefix from the given set with the given identifier .
5746	check its an acceptable form of email
5747	Get the value of the projection parameter . An IllegalArgument exception is thrown if the parameter is not found .
5748	Calculate the CRC of the entire byte array
5749	is a thin grid
5750	Selected DataCursor API overrides
5751	code table 5 - 2010 edition of WMO manual on codes
5752	A string representation of the time coordinate whether its an interval or not .
5753	Sets the next polygon which make up the multipolygon which this polygon is a part of . If next is a CFPolygon automatically connects the other polygon to this polygon as well .
5754	Sets the previous polygon which makes up the multipolygon which this polygon is a part of . If prev is a CFPolygon automatically connect the other polygon to this polygon as well .
5755	Get named property .
5756	set current projection if found else deselect
5757	normal case already handled this is the case where a time has been specified and only one runtime
5758	Register an IOServiceProvider using its class string name .
5759	Register an IOServiceProvider . A new instance will be created when one of its files is opened .
5760	Register an IOServiceProvider . A new instance will be created when one of its files is opened . This differs from the above in that it specifically locates the target iosp and inserts the new one in front of it in order to override the target . If the iospclass is already registered remove it and reinsert . If the target class is not present then insert at front of the registry
5761	See if a specific IOServiceProvider is registered
5762	See if a specific IOServiceProvider is registered and if so remove it .
5763	Find out if the file can be opened but dont actually open it . Experimental .
5764	Open an in - memory netcdf file with a specific iosp .
5765	Open an in - memory netcdf file .
5766	Read a local CDM file into memory . All reads are then done from memory .
5767	Read a remote CDM file into memory . All reads are then done from memory .
5768	Look up global Attribute by name ignore case .
5769	CDL representation of Netcdf header info non strict
5770	Write CDL representation to OutputStream .
5771	Write CDL representation to PrintWriter .
5772	the actual work is here
5773	Add an attribute to a group .
5774	Add optional String attribute to a group .
5775	Add a group to the parent group .
5776	Add a shared Dimension to a Group .
5777	Remove a shared Dimension from a Group by name .
5778	Add a Variable to the given group .
5779	Create a new Variable and add to the given group .
5780	Create a new Variable of type Datatype . CHAR and add to the given group .
5781	Remove a Variable from the given group by name .
5782	Generic way to send a message to the underlying IOSP . This message is sent after the file is open . To affect the creation of the file you must send into the factory method .
5783	If there is an unlimited dimension make all variables that use it into a Structure . A Variable called record is added . You can then access these through the record structure .
5784	Finish constructing the object model . This construsts the global variables attributes and dimensions . It also looks for coordinate variables .
5785	Read a variable using the given section specification . The result is always an array of the type of the innermost variable . Its shape is the accumulation of all the shapes of its parent structures .
5786	Read data from a top level Variable and send data to a WritableByteChannel . Experimental .
5787	Do a bulk read on a list of Variables and return a corresponding list of Array that contains the results of a full read on each Variable . This is mostly here so DODSNetcdf can override it with one call to the server .
5788	Read a variable using the given section specification .
5789	Given a CDMNode create its full name with appropriate backslash escaping of the specified characters .
5790	Create a synthetic full name from a group plus a string
5791	inclusion is an OR
5792	exclusion is an AND
5793	all AND filters must be satisfied
5794	Append a value to this attribute .
5795	Check if the value is legal for a given type .
5796	Check if the value is legal for a given type and try to convert to specified type .
5797	Check if string is a valid Byte .
5798	Check if string is a valid Int16 .
5799	Check if string is a valid Int32 .
5800	Check if string is a valid UInt32 .
5801	Check if string is a valid Float32 .
5802	Check if string is a valid Float64 .
5803	Get the data type of an attribute . Make it unsigned if the variable is unsigned .
5804	Returns true if this is a gridded dataset that is accessible via WMS .
5805	Return true if the given String is true or false ignoring case .
5806	Return true if the given String is an alphanumeric string .
5807	Return true if the given String is an alphanumeric string and one of the valid strings in the constrained set .
5808	Return true if the given path does not ascend into parent directory .
5809	Return the percentHexOctets string that represents the given Unicode code point in the given character set or null if the given character set cannot encode the given code point .
5810	gets a param and value .
5811	Compare GridDefRecords the numerics will use nearlyEquals so values that differ in 3 or 4th decimal places will return equal . This is being coded because the NDFD model dx differ in the 3 decimal place otherwise equal .
5812	Step 1 - read and extract a Bufr Message
5813	return where in the buffer we got to .
5814	Remove double quotes from around a string . If there s not both start and ending quotes does nothing .
5815	Given a stack of BaseType variables mark these as part of the current projection . This function assumes that if the TOS contains a Ctor type variable all of its members are to be projected . Also assume all variables under the TOS are Ctor variables and only the ctor itself is to be projected ; the member within the Ctor that is part of the projection will be on the stack too .
5816	write ncml from given dataset
5817	static so can be called from static enum classes
5818	String representation .
5819	initialize the stationHelper .
5820	Validate this ResultService object . Return true if valid false if invalid .
5821	Get the azimuth in degrees
5822	Get the elevation angle in degrees
5823	Get the array of per - ray latitudes . If we do not have per - ray position information null is returned .
5824	Get the array of per - ray longitudes . If we do not have per - ray position information null is returned .
5825	Get the array of per - ray altitudes . If we do not have per - ray position information null is returned .
5826	Get the array of azimuths for this sweep .
5827	Get the array of elevations for this sweep .
5828	Create a subset of the Structure consisting only of the given member variables
5829	Create a subset of the Structure consisting only of the one member variable
5830	Add a member variable
5831	Set the list of member variables .
5832	Set the parent group of this Structure and all member variables .
5833	Force recalculation of size of one element of this structure - equals the sum of sizes of its members . This is used only by low level classes like IOSPs .
5834	Use this when this is a one dimensional array of Structures or you are doing the index calculation yourself for a multidimension array . This will read only the ith structure and return the data as a StructureData object .
5835	For rank 1 array of Structures read count Structures and return the data as an ArrayStructure . Use only when this is a one dimensional array of Structures .
5836	Get an efficient iterator over all the data in the Structure .
5837	data category name from table A
5838	Get the name of the type of the projection .
5839	Add an attribute to this projection
5840	Get a header for display .
5841	Alternate way to calculate latLonToProjBB originally in GridCoordSys . Difficult to do this in a general way .
5842	Get which CF version this is ie CF - 1 . x
5843	Guess the value of ZisPositive based on z axis name and units
5844	remove last file
5845	set colorscale limits missing data
5846	Do the rendering to the given Graphics2D object .
5847	is this a child of that ?
5848	Find the MessageType that matches this name .
5849	Installs alignment decorators in all of the table s columns .
5850	Specify the HMAC api key and secret to be used for authenticated requests
5851	Create a simple label . Create newlines with \ n .
5852	Create a simple multiline label .
5853	Create a HTML label .
5854	Creates a socket representing a connection to a Cloud SQL instance .
5855	Converts the string property of IP types to a list by splitting by commas and upper - casing .
5856	Implements the interface for com . mysql . cj . protocol . SocketFactory for mysql - connector - java prior to version 8 . 0 . 13 . This change is required for backwards compatibility .
5857	Purges an invalid logger from the cache .
5858	Compile all sources
5859	Compile single source
5860	Add source code to the compiler
5861	Reads Graphics Control Extension values .
5862	Get the next frame in the animation sequence .
5863	Persons in string representation .
5864	If the list changed we want the recreate the targetType representation
5865	Gets a Person . s
5866	Add a list of validation messages for the specified validator .
5867	Set Person id for the screen
5868	This method is used to create and inject the ViewModel for a given View instance .
5869	Creates a viewModel instance for a View type . The type of the view is determined by the given view instance .
5870	Load all countries from the XML file source with DataFX .
5871	Load all subdivisions from the XML file source with DataFX .
5872	Add a new field of type String to this instance of the wrapper . This method is used for model elements that are following the normal Java - Beans - standard i . e . the model fields are only available via getter and setter methods and not as JavaFX Properties .
5873	Add a new immutable field of type String to this instance of the wrapper . This method is used for immutable model elements that have getters to get values for it s fields but not setters . Instead immutables have methods that take a new value for a field and return a new cloned instance of the model element with only this field updated to the new value . The old model instance isn t changed .
5874	This method is the entry point of the Fluent API to load a java based view .
5875	This method is the entry point of the Fluent API to load a fxml based View .
5876	This method is used to clear the given map . To do this you need to implement a BiConsumer that calls the specific method to remove a listener from an observable .
5877	When the selected item changed we want to set the index property too
5878	Helper method to execute a callback on a given member . This method encapsulates the error handling logic and the handling of accessibility of the member .
5879	Load the viewTuple by it s ViewType .
5880	This method is used to create a String with the path to the FXML file for a given View class .
5881	Query for the style row from a style mapping row
5882	Get the pixel value as a 16 bit unsigned integer value
5883	Get the pixel values of the image as 16 bit unsigned integer values
5884	Validate that the image type is single channel 16 bit
5885	Create a new 16 bit single channel image
5886	Set the tile data from a bitmap
5887	Perform a raw database query
5888	Perform the query and wrap as a result
5889	Query using the query from a previous query result
5890	Query using the user query arguments
5891	Convert the cursor to the result type cursor
5892	Get the feature row for the Geometry Index
5893	Register a cursor wrapper for the provided table name . Database queries will wrap the returned cursor
5894	Retrieve the tile row
5895	Get a Tiled Gridded Coverage Data
5896	Get a Tiled Gridded Coverage Data use the coverage data pixel tile size as the request size width and height
5897	Get a Tiled Gridded Coverage Data use the coverage data pixel tile size as the request size width and height request as the specified projection
5898	Get the coverage data tile results by finding the tile matrix with values
5899	Get the coverage data tile results by zooming in or out as needed from the provided tile matrix to find values
5900	Get the coverage data tile results by zooming in from the provided tile matrix
5901	Get the coverage data tile results by zooming out from the provided tile matrix
5902	Get the tile matrix for the zoom level as defined by the area of the request
5903	Get the coverage data value of the pixel in the tile row image
5904	Set the icon for the geometry type
5905	Get the icon for the geometry type
5906	Open or get a connection using the SQLite Android Bindings connection
5907	Decode the bytes to a bitmap with options
5908	Compress the bitmap to a byte array
5909	Create a new table metadata
5910	Delete the database table name
5911	Get a table metadata or create if it does not exist
5912	Get a GeoPackage id from the name
5913	Create a table metadata from the current cursor location
5914	Create the RTree extension for the feature table
5915	Get the feature row from the RTree Index Table row
5916	Perform a raw query
5917	Query for rows within the bounding box in the provided projection
5918	Query for rows within the geometry envelope
5919	Count the rows within the geometry envelope
5920	Query for rows within the bounds
5921	Build a where clause from the bounds for overlapping ranges
5922	Manually query for rows within the bounding box in the provided projection
5923	Manually count the rows within the bounding box in the provided projection
5924	Manually query for rows within the geometry envelope
5925	Manually query for rows within the bounds
5926	Manually count the rows within the bounds
5927	Set the data from a full quality bitmap
5928	Set the data from a bitmap
5929	Set the Bitmap Compress Config
5930	Get the tile count of tiles to be generated
5931	Adjust the tile matrix set and bounds
5932	Adjust the tile matrix set and web mercator bounds for Google tile format
5933	Adjust the tile matrix set and WGS84 bounds for GeoPackage format . Determine the tile grid width and height
5934	Adjust the tile matrix set and web mercator bounds for GeoPackage format . Determine the tile grid width and height
5935	Get the bounding box of tiles
5936	Get the tile grid of the zoom level
5937	Query for a Tile
5938	Query for Tiles at a zoom level in descending row and column order
5939	Get the closest zoom level for the provided width and height in the default units
5940	Get the approximate zoom level for the provided length in the default units . Tiles may or may not exist for the returned zoom level . The approximate zoom level is determined using a factor of 2 from the zoom levels with tiles .
5941	Query for the bounding
5942	Delete a Tile
5943	Count of Tiles at a zoom level
5944	Determine if the tiles are in the Google tile coordinate format
5945	Get the pixel value as a float from the image and the coordinate
5946	Get the pixel values of the image as floats
5947	Validate that the image type
5948	Create a new image
5949	Set the pixel value into the image
5950	Get the cached GeoPackage or open and cache the GeoPackage
5951	Get the current row
5952	Move to the next position of invalid rows to requery . Perform the requery the first time .
5953	Query for style mappings by base id
5954	Delete by base is and geometry type
5955	Get a rectangle using the tile width height bounding box and the bounding box section within the outer box to build the rectangle from
5956	Get a rectangle with rounded floating point boundaries using the tile width height bounding box and the bounding box section within the outer box to build the rectangle from
5957	Delete all databases that do not exist or the database file does not exist
5958	Create the required GeoPackage application id and tables in the newly created and open database connection . Then close the connection .
5959	Validate the GeoPackage database
5960	Validate the database and close when validation fails . Throw an error when not valid .
5961	Validate the database and close it . Throw an error when not valid .
5962	Validate the database header and integrity . Throw an error when not valid .
5963	Validate the header of the database file to verify it is a sqlite database
5964	Determine if the header of the database file is valid
5965	Add all internal databases to the collection
5966	Add all external databases to the collection
5967	Import the GeoPackage stream
5968	Get the GeoPackage metadata
5969	Get the GeoPackage metadata of the database at the external path
5970	Create a new geometry metadata
5971	Populate a new geometry metadata from an envelope
5972	Delete geometry metadata by database
5973	Create the geometry metadata or update if it already exists
5974	Update the geometry metadata
5975	Query for all table geometry metadata count matching the bounding box in the same projection
5976	Create a geometry metadata from the current cursor location
5977	Update all rows matching the where clause with the provided values
5978	Draw a tile with the provided text label in the middle
5979	Get the simple attributes rows that exist with the provided ids
5980	Check the cursor returned from the integrity check to see if things are ok
5981	Get a User Mapping DAO from a table name
5982	Get a related simple attributes table DAO
5983	Get the related id mappings for the base id
5984	Get the base id mappings for the related id
5985	Determine if the base id and related id mapping exists
5986	Get the count of the cursor and close it
5987	Register the cursor wrapper into the GeoPackage
5988	Read the database table and create a DAO
5989	Get the tile from the request bounding box in the request projection
5990	Draw the tile from the tile results
5991	Reproject the tile to the requested projection
5992	Get the tile row results of tiles needed to draw the requested bounding box tile
5993	Call after making changes to the point icon point radius or paint stroke widths . Determines the pixel overlap between tiles
5994	Set the density
5995	Set the line paint
5996	Set the polygon paint
5997	Draw the tile and get the bytes from the x y and zoom level
5998	Draw a tile bitmap from the x y and zoom level
5999	Draw a tile bitmap from the x y and zoom level by querying features in the tile location
6000	Query for feature result count in the x y and zoom
6001	Query for feature result count in the bounding box
6002	Query for feature results in the x y and zoom level by querying features in the tile location
6003	Query for feature results in the bounding box
6004	Draw a tile bitmap from the x y and zoom level by querying all features . This could be very slow if there are a lot of features
6005	When the simplify tolerance is set simplify the points to a similar curve with fewer points .
6006	Get the point paint for the feature style or return the default paint
6007	Get the line paint for the feature style or return the default paint
6008	Get the polygon paint for the feature style or return the default paint
6009	Get the polygon fill paint for the feature style or return the default paint
6010	Get the feature style paint from cache or create and cache it
6011	Get the style paint from cache or create and cache it
6012	Get the paint for the style row and draw type
6013	Get the paint for the style row id and draw type
6014	Cache the icon bitmap for the icon row
6015	Create or retrieve from cache an icon bitmap for the icon row
6016	Wrap the content values names in quotes
6017	Create the final bitmap from the layers resets the layers
6018	Recycle the layered bitmaps
6019	Get the bitmap for the layer index
6020	Get the canvas for the layer index
6021	Create a new empty Bitmap and Canvas
6022	Get a Style Mapping DAO from a table name
6023	Get a style DAO
6024	Get a icon DAO
6025	Get the feature table default feature styles
6026	Get the feature table default styles
6027	Get the style of the feature table and geometry type
6028	Get the feature table default icons
6029	Get the icon of the feature table and geometry type
6030	Get the feature styles for the feature row
6031	Get the feature styles for the feature table and feature id
6032	Get the styles for the feature row
6033	Get the icons for the feature row
6034	Get the styles for feature id from the style mapping dao
6035	Get the icons for feature id from the icon mapping dao
6036	Set the feature table default feature styles
6037	Set the feature table default styles
6038	Set the feature table default icons
6039	Set the feature styles for the feature row
6040	Set the feature styles for the feature table and feature id
6041	Set the styles for the feature row
6042	Set the styles for the feature table and feature id
6043	Set the style of the feature row
6044	Set the default style of the feature row
6045	Set the default style of the feature
6046	Set the icons for the feature row
6047	Set the icons for the feature table and feature id
6048	Set the icon of the feature row
6049	Set the default icon of the feature row
6050	Set the default icon of the feature
6051	Get the style id either from the existing style or by inserting a new one
6052	Get the icon id either from the existing icon or by inserting a new one
6053	Insert a style mapping row
6054	Delete the feature table style for the geometry type
6055	Delete the feature table icon for the geometry type
6056	Delete the table style mappings
6057	Delete the table style mapping with the geometry type value
6058	Delete the style mapping with the geometry type value
6059	Get all the unique style row ids the table maps to
6060	Get all the unique icon row ids the table maps to
6061	Get all the unique style row ids the features map to
6062	Get all the unique icon row ids the features map to
6063	Get the image bytes
6064	Flush the output stream and set the image bytes close the stream
6065	Get the pixel at the coordinate
6066	Read all the pixels from the image
6067	Draw the feature on the canvas
6068	Draw the line path on the canvas
6069	Draw the path on the canvas
6070	Add the linestring to the path
6071	Add the polygon on the canvas
6072	Get or create a feature row cache for the table name
6073	Remove the cached feature row
6074	Clear and resize all caches and update the max cache size
6075	Get the cached table styles querying and caching if needed
6076	Get the cached table icons querying and caching if needed
6077	Get a RTree Index Table DAO for the feature dao
6078	Set the width
6079	Set the height
6080	Get the derived width and height from the values and icon data scaled as needed
6081	Get the tile density based upon the display density scale and tile dimensions
6082	Read the blob column value in chunks
6083	Read the table
6084	Get the color or default value
6085	Validate and adjust the color value
6086	Create a color from the hex color and opacity
6087	Get a GeoPackage Manager
6088	Set the GeoPackage Progress
6089	Index the feature tables for the index types
6090	Index the feature row for the index types . This method assumes that indexing has been completed and maintained as the last indexed time is updated .
6091	Delete the feature index from the index types
6092	Delete the feature index for the feature row from the index types
6093	Delete the feature index for the geometry id from the index types
6094	Delete the feature index for the geometry id
6095	Determine if the feature table is indexed
6096	Get the indexed types that are currently indexed
6097	Query for all feature index results
6098	Query for all feature index count
6099	Query for the feature index bounds
6100	Query for feature index results within the bounding box in the provided projection
6101	Get the indexed type or throw an error if not indexed
6102	Get the internal storage file for the file path
6103	Get the internal storage patch for the file path
6104	Get the geometry type
6105	Set the geometry type
6106	Determine if the url has bounding box variables
6107	Replace x y and z in the url
6108	Determine if the url has x y or z variables
6109	Replace the bounding box coordinates in the url
6110	Replace the url parts with the bounding box
6111	Get the geometry
6112	Index the feature row
6113	Update the least indexed time
6114	Delete the feature table index
6115	Delete the index for the geometry id
6116	Determine if the database table is indexed after database modifications
6117	Query for all Geometry Metadata
6118	Query for Geometry Metadata within the bounding box projected correctly
6119	Query for Geometry Metadata count within the bounding box projected correctly
6120	Query for Geometry Metadata within the Geometry Envelope
6121	Query for Geometry Metadata count within the Geometry Envelope
6122	Query for Geometry Metadata within the bounding box in the provided projection
6123	Query for Geometry Metadata count within the bounding box in the provided projection
6124	Get the bounding box in the feature projection from the bounding box in the provided projection
6125	Get the Geometry Metadata for the current place in the cursor
6126	Get the feature row for the current place in the cursor
6127	Get the feature row for the Geometry Metadata
6128	Query for the tile tables linked to a feature table and return tile DAOs to those tables
6129	Query for the feature tables linked to a tile table and return feature DAOs to those tables
6130	Get the bounding box for the feature tile generator from the provided and from the feature table
6131	Query by both base id and related id
6132	Get the unique base ids
6133	Get the unique related ids
6134	Delete user mappings by base id
6135	Delete user mappings by related id
6136	Delete user mappings by both base id and related id
6137	Build the where ids clause
6138	Create a new GeoPackage metadata
6139	Delete the database
6140	Rename the GeoPackage metadata to the new name
6141	Rename the GeoPackage name to the new name
6142	Get all GeoPackage metadata
6143	Get GeoPackage metadata by name
6144	Get GeoPackage metadata by id
6145	Get GeoPackage metadata or create it if it does not exist
6146	Determine if the GeoPackage is external
6147	Get external GeoPackage metadata by external path
6148	Get metadata where the name is like
6149	Get metadata where the name is not like
6150	Get metadata where the name is like or not like
6151	Create a GeoPackage metadata from the current cursor location
6152	Handle the created view
6153	attach attributes in tag
6154	The LayoutInflater onCreateView is the fourth port of call for LayoutInflation . BUT only for none CustomViews . Basically if this method doesn t inflate the View nothing probably will .
6155	Nasty method to inflate custom layouts that haven t been handled else where . If this fails it will fall back through to the PhoneLayoutInflater method of inflating custom views where Calligraphy will NOT have a hook into .
6156	Perform SMTPAppender specific appending actions mainly adding the event to a cyclic buffer .
6157	Finds a configuration file by system property
6158	Uses the given classloader to search for a resource
6159	Configures logback with the first configuration found in the following search path . If no configuration found nothing is done and logging is disabled .
6160	Adds a status message for the result of the resource search
6161	Converts a socket address to a reasonable display string .
6162	Creates an executor service suitable for use by logback components .
6163	Start converters in the chain of converters .
6164	This method differentiates RollingFileAppender from its super class .
6165	Add a property to the properties of this execution context . If the property exists already it is overwritten .
6166	If a key is found in propertiesMap then return it . Otherwise delegate to the context .
6167	When the parsing step is done the Node list can be transformed into a converter chain .
6168	E = TEopt
6169	T = LITERAL | % C | % FORMAT_MODIFIER C
6170	Do not perform any character escaping except for % and ) .
6171	Given date convert this instance to a regular expression .
6172	Instantiates an evaluator of the given class and sets its name .
6173	Once the children elements are also parsed now is the time to activate the evaluator options .
6174	FOR INTERNAL USE . This method is intended for use by StaticLoggerBinder .
6175	Instantiate the context selector class designated by the user . The selector must have a constructor taking a LoggerContext instance as an argument .
6176	Sets properties for use in configs
6177	Gets the path to the external storage directory only if mounted .
6178	Returns the absolute path to the directory on the Android filesystem where databases are stored for the current application .
6179	Gets the absolute path to the filename starting from the app s files directory if it is not already an absolute path
6180	Return true if event passed as parameter has level ERROR or higher returns false otherwise .
6181	Return the value associated with an MDC entry designated by the Key property . If that value is null then return the value assigned to the DefaultValue property .
6182	update the mask so as to execute change detection code about once every 100 to 8000 milliseconds .
6183	Loop through the filters in the list . As soon as a filter decides on ACCEPT or DENY then that value is returned . If all of the filters return NEUTRAL then NEUTRAL is returned .
6184	Creates key managers using the receiver s key store configuration .
6185	Creates trust managers using the receiver s trust store configuration .
6186	Constructs a key store factory bean using JSSE system properties .
6187	Constructs a resource location from a JSSE system property .
6188	Converts a string describing the location of a resource into a URL object .
6189	This method computes whether a chain of converters handles exceptions or not .
6190	Default method for stopping the Logback context
6191	Print the contents of the context status but only if they contain warnings or errors occurring later then the threshold .
6192	Print the contents of the context statuses but only if they contain errors .
6193	Print context s status data with a timestamp higher than the threshold .
6194	LOGBACK - 411 and LOGBACK - 750
6195	Get an entry from the liveMap if not found search the lingerersMap .
6196	Mark component identified by key as having reached its end - of - life .
6197	This method is used to parse a string such as 5 . 7 5 . 7 or - 5 . 7 into a FormatInfo .
6198	A relatively robust file renaming method which in case of failure due to src and target being on different volumes falls back onto renaming by copying .
6199	Attempts tp determine whether both files are on different volumes . Returns true if we could determine that the files are on different volumes . Returns false otherwise or if an error occurred while doing the check .
6200	Lookup a key from the environment .
6201	Gets an Android system property
6202	Set the MDC map for this event .
6203	if no key is specified return all the values present in the MDC in the format k1 = v1 k2 = v2 ...
6204	Extract caller data information as an array based on a Throwable passed as parameter
6205	Is currentClass present in the list of packages considered part of the logging framework?
6206	Add a new status object .
6207	This implementation does not allow duplicate installations of OnConsoleStatusListener
6208	Check if any implicit actions are applicable . As soon as an applicable action is found it is returned . Thus the returned list will have at most one element .
6209	Return the list of applicable patterns for this
6210	Sets the classloader to lookup the class for android . os . SystemProperties
6211	Get the value for the given key in the Android system properties
6212	Get the value for the given key in the Android system properties returned as a boolean .
6213	Converts a name string s first letter to lowercase
6214	Gets a class s method descriptors
6215	Gets a class s property descriptors . All properties have methods whose name begins with set or get . The setters must have a single parameter and getters must have none .
6216	Checks that requires parameters are set and if everything is in order activates this appender .
6217	This utility method adds a new OnConsoleStatusListener to the context passed as parameter .
6218	Now property definer is initialized by all properties and we can put property value to context
6219	Return the name of the current context name as found in the logging event .
6220	Events of level TRACE DEBUG and INFO are deemed to be discardable .
6221	Instantiates a shutdown hook of the given class and sets its name .
6222	Once the children elements are also parsed now is the time to activate the shutdown hook options .
6223	Gets the set of enabled protocols based on the configuration .
6224	Gets the set of enabled cipher suites based on the configuration .
6225	Applies include and exclude patterns to an array of default string values to produce an array of strings included by the patterns .
6226	Convert a string into a scope . Scope . LOCAL is returned by default .
6227	Add all the properties found in the argument named props to an InterpretationContext .
6228	Attach an appender . If the appender is already in the list in won t be added again .
6229	Remove the appender passed as parameter form the list of attached appenders .
6230	Remove the appender with the name passed as parameter form the list of appenders .
6231	This method is invoked by parent logger to let this logger know that the prent s levelInt changed .
6232	Invoke all the appenders of this logger .
6233	Remove the appender passed as parameter form the list of appenders .
6234	Create a child of this logger by suffix that is the part of the name extending this logger . For example if this logger is named x . y and the lastPart is z then the created child logger will be named x . y . z .
6235	Method that calls the attached TurboFilter objects based on the logger and the level .
6236	Support SLF4J interception during initialization as introduced in SLF4J version 1 . 7 . 15
6237	Loops until the desired connection is established and returns the resulting connector .
6238	Creates the parent directories of a file . If parent directories not specified in file s path then nothing is done and this returns gracefully .
6239	Convert a Level to an Integer object .
6240	Convert an integer passed as argument to a Level . If the conversion fails then this method returns the specified default .
6241	Compute the number of occurrences a resource can be found by a class loader .
6242	Search for a resource using the classloader passed as parameter .
6243	Get the class loader of the object passed as argument . Return the system class loader if appropriate .
6244	Returns the class loader of clazz in an access privileged section .
6245	Return the class loader which loaded the class passed as argument . Return the system class loader if appropriate .
6246	Checks that required parameters are set and if everything is in order activates this appender .
6247	Gets the logcat tag string of a logging event
6248	Set a new property for the execution context by name value pair or adds all the properties found in the given file .
6249	Get the position of the separator character if any starting at position fromIndex .
6250	Return true if event passed as parameter contains one of the specified user - markers .
6251	Returns a name to identify each client thread .
6252	This method assumes that both files a and b exists .
6253	Start the appender
6254	Perform SMTPAppender specific appending actions delegating some of them to a subclass and checking if the event triggers an e - mail to be sent .
6255	Send the contents of the cyclic buffer as an e - mail message .
6256	Add a new MDCValuePair
6257	Attempt to create a converter using the information found in converterMap .
6258	Attempt to create a converter using the information found in compositeConverterMap .
6259	Given the FileNamePattern string this method determines the compression mode depending on last letters of the fileNamePatternStr . Patterns ending with . gz imply GZIP compression endings with . zip imply ZIP compression . Otherwise and by default there is no compression .
6260	Configures logback with the configuration XML read from a file located at the given URL
6261	Configures logback with the configuration XML read from a given file
6262	Configures logback with the configuraiton XML read from an input stream and then closes the stream
6263	Builds a generic configuration - XML interpreter
6264	Configures logback with the configuration XML read from an input source .
6265	Configures logback with SAX events of configuration XML
6266	Given a key return the corresponding property value . If invoked with the special key CONTEXT_NAME the name of the context is returned .
6267	The context name can be set only if it is not already set or if the current name is the default context name namely default or if the current name and the old name are the same .
6268	Returns true if the StatusManager associated with the context passed as parameter has one or more StatusListener instances registered . Returns false otherwise .
6269	Return the time of last reset . - 1 if last reset time could not be found
6270	Parses the pattern and creates the Converter linked list .
6271	Returns a map where the default converter map is merged with the map contained in the context .
6272	Returns appropriate HTML headers .
6273	Returns the appropriate HTML footers .
6274	Instantiates an appender of the given class and sets its name .
6275	Once the children elements are also parsed now is the time to activate the appender options .
6276	Creates a copy of the collection of all clients that are presently being tracked by the server .
6277	Adds a client to the collection of those being tracked by the server .
6278	Removes a client from the collection of those being tracked by the server .
6279	Return a copy of the current thread s context map . Returned value may be null .
6280	returned value may be null and in most cases it is null .
6281	Loop through the filters in the chain . As soon as a filter decides on ACCEPT or DENY then that value is returned . If all of the filters return NEUTRAL then NEUTRAL is returned .
6282	Heuristically determines whether the current OS is Android
6283	Package access for testing purposes .
6284	Return the set of files matching the stemRegex as found in directory . A stemRegex does not contain any slash characters or any folder separators .
6285	Print status messages retrospectively
6286	Returns the integer value corresponding to the named syslog facility .
6287	Gets a file object from a file path to a SQLite database
6288	Removes expired logs from the database
6289	Determines whether it s time to clear expired logs
6290	Inserts the main details of a log event into the database
6291	Updates an existing row of an event with the secondary details of the event . This includes MDC properties and any exception information .
6292	Binds the main details of a log event to a SQLite statement s parameters
6293	Gets the first 254 characters of an object s string representation . This is used to truncate a logging event s argument binding if necessary .
6294	Computes the reference mask for a logging event including flags to indicate whether MDC properties or exception info is available for the event .
6295	Merges a log event s properties with the properties of the logger context . The context properties are first in the map and then the event s properties are appended .
6296	Inserts an exception into the logging_exceptions table
6297	Returns the number of prefix components that this pattern has in common with the pattern p passed as parameter . By prefix components we mean the components at the beginning of the pattern .
6298	different status objects lying on the same cycle
6299	Set a property on this PropertySetter s Object . If successful this method will invoke a setter method on the underlying Object . The setter is the one for the specified property name and the value is determined partly from the setter argument type and partly from the value specified in the call to this method .
6300	Can the given clazz instantiable with certainty?
6301	Child threads should get a copy of the parent s hashmap .
6302	Processes an include
6303	Opens the given URL logging any exceptions
6304	Removes the head tag and tail tag if they are named either included or configuration
6305	Starts the server .
6306	Test whether this error is transient .
6307	Set the default hosts for Algolia Places .
6308	Lazy instantiate the local index .
6309	Launch a sync . If a sync is already running this call is ignored . Otherwise the sync is enqueued and runs in the background .
6310	Launch a sync only if the data is obsolete . The data is obsolete if the last successful sync is older than the delay between syncs or if the data selection queries have been changed in the meantime .
6311	Wait the publication of a task on the server . All server task are asynchronous and you can check with this method that the task is published .
6312	List existing offline indices .
6313	Reads the InputStream as UTF - 8
6314	Reads the InputStream into a byte array
6315	Ensures that the entity content is fully consumed and the content stream if exists is closed .
6316	Get the hosts that are not considered down in a given list .
6317	Set the type of place to search for .
6318	Start the iteration .
6319	Puts a value in the cache computing an expiration time
6320	Get a value from the cache
6321	Waits for all threads to finish .
6322	Compares two version strings .
6323	Writes the cause to file .
6324	Copies a directory recursively .
6325	Initializes the SimulatorProperties with additional properties .
6326	Gets the value for a static field .
6327	Searches a method by name .
6328	Formats a percentage of two numbers and adds padding to the left .
6329	Formats a double number and adds padding to the left .
6330	Formats a long number and adds padding to the left .
6331	and JsonPairContext . read
6332	corresponding hex value
6333	Write the bytes in array buf as a Json characters escaping as needed
6334	wrapped in quotes to output as a Json string .
6335	context dictates escaping write out as Json string .
6336	context if skipContext is true .
6337	not do a complete regex check to validate that this is actually a number .
6338	Read in a Json number . If the context dictates read in enclosing quotes .
6339	when expected or if wrapped in quotes when not expected .
6340	Read in a Json string containing base - 64 encoded data and decode it .
6341	When invoked by a derived instance sends the given call to the server .
6342	Send the given call to the server .
6343	When invoked by a derived instance places the given call in a queue to be sent to the server .
6344	Resolves a file system location to an Eclipse workspace resource .
6345	Causes the platform to update Guvnor decoration notions .
6346	Causes the Repository view to refresh if it is open .
6347	Tries to find the Resource History view attempting to open it if necessary .
6348	Opens a read - only in - memory editor .
6349	Convenience method for reporting log in failure
6350	Prompts for user name and password for a given Guvnor repository .
6351	Creates a page displayed when there are no servers defined .
6352	Start the animation thread
6353	Sets whether this propertybehavior is in the keep all alive form or not .
6354	Sets whether this propertybehavior is in the omit form or not .
6355	Creates and sets an owner element on this activelock and returns an editor on it .
6356	Add a ConditionFactor to a ConditionTerm .
6357	Create a ConditionTerm by parsing the given If header as defined by section 9 . 4 in the WebDAV spec .
6358	See if this ConditionTerm matches the given ConditionTerm . This is an AND operation . All the factors in the ConditionTerm must match .
6359	Get a reader to the DSL contents
6360	This does the hunting around the projec to find the . dsl file .
6361	This will load in the DSL config file using the DSLMapping from drools - compiler
6362	Return a menu which launches the various wizards
6363	Creates and adds a response element to this multistatus and returns an editor on it .
6364	Adds the given href to the end of the set of hrefs . If the href already exists it is not added .
6365	Inserts the given newHref before the given refHref in the set of hrefs . If newHref already exists it is not inserted .
6366	Remove the given href from the set of hrefs .
6367	Creates and adds a propstat element on this response and returns an editor on it .
6368	Returns this response s first href .
6369	Returns this response s status .
6370	Return the current stack frame context or a valid stack frame for the given value .
6371	Returns true if the first class is the same or a subtype of the second class .
6372	Attempt to compare proposals of different types based on the tokenized display string
6373	Returns a clone of the given node . The given document becomes the owner document of the clone .
6374	Resets the stream to its beginning so it can be read again .
6375	For user triggered content assistance
6376	Add an incoming or outgoing connection to this vertex .
6377	Return the property value for the given propertyId or null .
6378	Remove an incoming or outgoing connection from this vertex .
6379	Set the Location of this vertex .
6380	Set the property value for the given property id .
6381	Set the Size of this vertex . Will not update the size if newSize is null .
6382	Constructs constraints string
6383	Creates a new lockentry and adds it to this supported lock . Returns an editor on the new lockentry .
6384	Add new BaseVertex to the graph
6385	Remove a vertex from this graph
6386	This method is called upon plug - in activation
6387	This method is called when the plug - in is stopped
6388	Returns the string from the plugin s resource bundle or key if not found .
6389	Returns the plugin s resource bundle
6390	Form Colors default colors for now .
6391	Do nothing if date format is not supported
6392	Do nothing if date format is not supported .
6393	Utility to create an error status for this plug - in .
6394	Utility method to log errors in the Egit plugin .
6395	Adds the given field editor to this page .
6396	Adjust the layout of the field editors so that they are properly aligned .
6397	Applys the font to the field editors managed by this page .
6398	Calculates the number of columns needed to host all field editors .
6399	Initializes all field editors .
6400	Fires a property change event with the given source property name old and new value . Used when the event source should be different from this mockup preference store .
6401	In addition to
6402	Adds Zoom - related contributions .
6403	especially when parsing incomplete rules
6404	Returns a new context that is based on the given context .
6405	for the sort field
6406	Setup table listeners for GUI events .
6407	Create the Table
6408	Maps the given URL to the given value in this table .
6409	Maps the specified URL to the given value in this table .
6410	The method will create a new Node instance and try to add it as a child node . If an Node with the same string token exists the method will return the existing node instead .
6411	The method will check to see if a Node with the same string token already exists . If it doesn t it will add the token as a child and return the same node .
6412	be used directly . Use DroolsModelBuilder instead .
6413	Add a Condition to this Precondition . Conditions are OR d together to check for a matching resource .
6414	Add a condition created from the given URI and state token . This is a convenience method used primarily to create preconditions for lock tokens that must be provided in the resource context for methods that update the resource .
6415	See if this Precondition contains a matching Condition .
6416	Returns this propstat s prop .
6417	Returns this propstat s status .
6418	Creates and sets a new prop on this propstat and returns an editor on it .
6419	because of how the backText works we need to get the last line so that we can pass it to the DSLUtility
6420	Returns the last line that doesn t start with a dash
6421	Lookup the message with the given ID in this catalog and bind its substitution locations with the given string .
6422	Lookup the message with the given ID in this catalog and bind its substitution locations with the given strings .
6423	Lookup the message with the given ID in this catalog and bind its substitution locations with the given string values .
6424	Create the sample process file .
6425	Create the sample process junit test file .
6426	Return the version number of the KIE Workbench that is installed on the given server . If the server is not running or not responsive use a value from the Preference Store .
6427	Rete visits each of its ObjectTypeNodes .
6428	Helper method to ensure nodes are not visited more than once .
6429	The identity hashCode for the given object is used as its unique DOT identifier .
6430	Adds a remove to the given propertyupdate and returns an editor on its prop .
6431	Adds a set to the given propertyupdate and returns an editor on its prop .
6432	Answer a new resource locator that identifies a particular server resource by it s URL and label .
6433	Define reconciler - this has to be done for each partition . Currently there are 3 partitions Inside rule outside rule and inside comment .
6434	Answers whether the receiver and the argument are considered identical . To be identical the receiver and the argument must have the same status code message and extended status information .
6435	Does this Condition contain the given ConditionTerm?
6436	Create a StateToken by parsing the given If header as defined by section 9 . 4 in the WebDAV spec .
6437	Adds Text Editor for rules and Rete graph viewer
6438	Send an HTTP DELETE request to the KIE console .
6439	Send an HTTP POST request to the KIE console .
6440	Sends a job status request to the KIE Server .
6441	Starts this operation synchronously .
6442	Post - process the pull results allowing the user to deal with uncommitted changes and re - pull if the initial pull failed because of these changes
6443	Replaces the element at the specified position in this array with the JSON representation of the specified string .
6444	Creates and adds a new activelock on this lockdiscovery and returns an editor on it .
6445	Filter out the proposals whose content does not start with the given prefix .
6446	Read some text from behind the cursor position . This provides context to both filter what is shown based on what the user has typed in and also to provide more information for the list of suggestions based on context .
6447	Calculates layouting for provided graph .
6448	Painting antialiased vertex
6449	Maps object to EditPart .
6450	Returns an image descriptor for the image file at the given plug - in relative path . Uses the plug ins image registry to cache it .
6451	Declare an Image in the registry table .
6452	Adds new vertex to specified depth
6453	Finds specified vertex from the rows .
6454	Finds the longest row width .
6455	Dumps all row vertices to System . err
6456	Optimizes all rows for optimal presentation
6457	Loads model from rule base calculates rete view and initializes diagram model .
6458	Loads Rete model and initializes zoom manager .
6459	Draws graph .
6460	Tries to find a match for the provided breakpoint information from the list of registered breakpoints . For stepping and possibly other purposes it returns also a breakpoint for cases where exactly the same line was not found .
6461	Sets this baseline control elment description to the given href .
6462	Return a boolean value indicating whether or not the server for this resource is DAV compliant .
6463	Make a copy of this resource and place it at the location specified by the given destination locator .
6464	If the given response contains a multistatus body the bodies status are checked for errors . If an error is found an exception is thrown .
6465	Helper method to extract the property status response from a multi status reponse and populate a URLTable with the results .
6466	Return the content of this resource as an input stream . The input stream should be closed by the user .
6467	Return an Enumeration over ActiveLocks which lists the locks currently held on this resource . Return an empty enumeration if the lock discovery property is not found on the resource .
6468	Return the property status for the property with the given name .
6469	Return the header from a message send to the server .
6470	Lock this resource using the specified parameters .
6471	Move this resource to the location specified by the given locator . If a resource already exists at the destination and the overwrite boolean is true then write over top of the existing resource . Otherwise do not . The enumeration is over qualified names which are the names of the properties to move .
6472	Check in the receiver and answer a new Locator on the resulting version resource .
6473	Refresh the lock on this resource with the given lock token . Use the specified timeout value .
6474	Remove the properties with the given names from this resource .
6475	Remove the property with the given name from this resource .
6476	Set the content of this resource to be the data stored in the given input stream . The type encoding is given in the content type argument and should be in the media format described by RFC2616 Sec 3 . 7 . The stream will automatically be closed after the data is consumed . If the resource does not exist it is created with the given content .
6477	Set the given properties on this resource .
6478	Set the given property on this resource .
6479	Unlock this resource with the given lock token .
6480	Perform an UPDATE on the receiver to set the version it is based upon .
6481	Bring the receiver under version control . This means that the receiver is replaced by a version - controlled resource . Note that the client may send version control to a resource that is already under version control with no adverse effects .
6482	Delete this resource from the repository optionally succeeding in the delete if the resource was not found on the server .
6483	Check the given status code and throw a WebDAV exception if the code indicates failure . If the code is success this method does nothing .
6484	This is a helper method to check to see if the resource has a property with the given name that in turn has a child with a given name .
6485	Writes this request s body to the given output stream . This method may be called more than once during the lifetime of this request .
6486	Converts the given byte array to its equivalent hexadecimal string and returns the result .
6487	Converts the given int array to its equivalent hexadecimal string and returns the result .
6488	Sets whether this propfind is in the all prop form .
6489	Sets whether this propfind is in the prop name form .
6490	Creates and sets a new prop on this propfind and returns an editor on it . This propfind must not already be in the all prop or prop name form .
6491	Looks behind gets stuff after the white space . Basically ripping out the last word .
6492	Updates the outline page .
6493	Writes this messages body to the given output stream . This method may only be called once during the lifetime of this message .
6494	I don t see the need for any of this custom stepOver stuff why is it here?
6495	This will create markers for parse errors . Parse errors mean that antlr has picked up some major typos in the input source .
6496	Skips the next sequence of white space in s . An exception is not thrown if there is no matching white space .
6497	Adds a resource to Guvnor .
6498	Commits changes to Guvnor .
6499	Get the sender s estimate of the time since the response was generated . Return the int value for the AGE key . Return - 1 if the value is not set .
6500	Get the content length in bytes of the entity body . Return the value for the CONTENT_LENGTH key . Returns - 1 if the Content - Length has not been set .
6501	Return the integer value for the MAX_FORWARDS key .
6502	Get the flag that indicates if copy or move should overwrite an existing destination . Return the boolean value for the OVERWRITE key .
6503	Return the boolean value for the PASSTHROUGH key .
6504	Get the lock timeout value . The value - 1 means that the value was not set the value - 2 means that the value was Infinity . Return the integer value for the TIMEOUT key .
6505	Put the given key - value pair into the context .
6506	Set the lock timeout value in seconds . Pass - 1 to clear the value pass - 2 to set Infinity . Set the integer value for the TIMEOUT key .
6507	method will create a BufferedReader to read the file .
6508	method will use the BufferedReader to read the contents of the file . It calls other methods to parse the line and build the tree .
6509	Method will return just the object metadata
6510	method will strip the metadata from the text string
6511	method adds the token to root
6512	the method will tokenize the text and try to find the node that matches and return the children . the method will traverse down the network as far as it can and return the children at that level .
6513	the method expects the caller to pass the object
6514	method will prepend the parent text to the child and generate the possible combinations in text format .
6515	The method will print the DSLTree to System . out in text format .
6516	method will print the node and then iterate over the children
6517	Method will print n number of tabs
6518	Reads a JSON value from the given string .
6519	Returns an image descriptor for the image file at the given plug - in relative path
6520	Sends the given request to the server and returns the server s response .
6521	Sets the request header value associated with the given field .
6522	Create the sample rule launcher file .
6523	Create the sample rule file .
6524	Create the sample RuleFlow file .
6525	Create the sample RuleFlow launcher file .
6526	Returns only the installable units that are features ignoring feature groups .
6527	Writes the content of this editor to the given stream . Possible formats are for example SWT . IMAGE_BMP IMAGE_GIF IMAGE_JPEG IMAGE_PNG .
6528	Constraint has field extractor and this method is returning fieldName it .
6529	Constraint s evaluator string
6530	Constraint field string
6531	Adds Guvnor - specific resource properties to the collection .
6532	Create a new version - controlled configuration on the given baseline .
6533	Binds the given member in this collection to the resource identified by the given source locator . If the member already exists or is already bound to a resource it is not replaced .
6534	Return the locator of the member of this collection with the given name . Does NOT perform a call to the server to check the existence of the member .
6535	Optimizing vertices for optimal presentation
6536	Initializes the controls of this dialog .
6537	Returns whether this page s visual components all contain valid values .
6538	Construct a unique EntityTag . The tag is constructed by concatening the current time with the current thread s hash code .
6539	Gets opposite of specified vertex .
6540	Try to validate all the OTPs provided .
6541	After validation of an OTP check that it came from a YubiKey that actually belongs to the user trying to authenticate .
6542	Given publicId vvcccccfhc scans filename for a line like yk . vvcccccfhc . user = alice and returns alice if found . Null is returned in case there is no matching line in file .
6543	Stores an association between username and YubiKey publicId in filename .
6544	Access protectedUrl using userName and otp for basic auth . Check if what we get back contains expectedOutput .
6545	Tries to clear all the passwords from memory .
6546	Extract the public ID of a YubiKey from an OTP it generated .
6547	Determines whether a given OTP is of the correct length and only contains printable characters as per the recommendation .
6548	Returns an Evaluation that contains the node source and whether it is a set operation . If there are no Evaluation objects in the pool one is created and returned .
6549	Returns an Evaluation that contains the node source and whether it is a set operation .
6550	Clears all of the cached reflection information normally used to improve the speed of expressions that operate on the same classes or are executed multiple times .
6551	Checks if the current jvm is java language > = 1 . 5 compatible .
6552	Returns the package name of the object s class .
6553	Returns the package name of the class given .
6554	Returns a unique descriptor string that includes the object s class and a unique integer identifier . If fullyQualified is true then the class name will be fully qualified to include the package name else it will be just the class base name .
6555	Gets the class for a method argument that is appropriate for looking up methods by reflection by looking for the standard primitive wrapper classes and exchanging for them their underlying primitive class objects . Other classes are passed through unchanged .
6556	Tells whether the first array of classes is more specific than the second . Assumes that the two arrays are of the same length .
6557	Gets the appropriate method to be called for the given target method name and arguments . If successful this method will return the Method within the target that can be called and the converted arguments in actualArgs . If unsuccessful this method will return null and the actualArgs will be empty .
6558	If the checkAccessAndExistence flag is true this method will check to see if the method exists and if it is accessible according to the context s MemberAccess . If neither test passes this will return NotFound .
6559	This method returns the property descriptors for the given class as a Map .
6560	Gets the property descriptor with the given name for the target class given .
6561	Finds the best possible match for a method on the specified target class with a matching name .
6562	Read a character .
6563	Apply an expression to all elements of a collection creating a new collection as the result .
6564	Apply a boolean expression to all elements of a collection creating a new collection containing those elements for which the expression returned true .
6565	Evaluates the given object as a long integer .
6566	Evaluates the given object as a double - precision floating - point number .
6567	Evaluates the given object as a BigInteger .
6568	Evaluates the given object as a BigDecimal .
6569	Evaluates the given object as a String and trims it if the trim flag is true .
6570	Returns a constant from the NumericTypes interface that represents the numeric type of the given object .
6571	Returns the value converted numerically to the given class type This method also detects when arrays are being converted and converts the components of one array to the type of the other .
6572	Converts the specified value to a primitive integer value .
6573	Returns the constant from the NumericTypes interface that best expresses the type of an operation which can be either numeric or not on the two given types .
6574	Returns the constant from the NumericTypes interface that best expresses the type of an operation which can be either numeric or not on the two given objects .
6575	Returns a new Number object of an appropriate type to hold the given integer value . The type of the returned object is consistent with the given type argument which is a constant from the NumericTypes interface .
6576	Pops the current Evaluation off of the top of the stack . This is done after a node has completed its evaluation .
6577	Fail safe getter creation when normal compilation fails .
6578	Fail safe setter creation when normal compilation fails .
6579	This method may be called from subclasses jjtClose methods . It flattens the tree under this node by eliminating any children that are of the same class as this node and copying their children to this node .
6580	Reinitializes this Evaluation to the parameters specified .
6581	Converts an escape sequence into a character value .
6582	Sets the root object to use for all expressions in the given context - doesn t necessarily replace root object instances explicitly passed in to other expression resolving methods on this class .
6583	Evaluates the given OGNL expression to extract a value from the given root object in a given context
6584	Sets the value given using the pre - compiled expression on the specified root object .
6585	Evaluates the given OGNL expression tree to insert a value into the object graph rooted at the given root object .
6586	Checks if the specified expression represents a constant expression .
6587	Returns default watch service identifier based on operating system .
6588	startTimeout in milliseconds
6589	copied from AbstractPlay2SourcePositionMapper . java
6590	Contrary to its name this doesn t necessarily reload the app . It is invoked on every request and will only trigger a reload of the app if something has changed .
6591	Returns preconfigured archiver
6592	Check for potential Duplicate file exception before archive processing starts
6593	Reads the content of the file to a string .
6594	Creates and configures Ant project for Java task .
6595	Adds string type system property to Ant Java task .
6596	Adds file type system property to Ant Java task .
6597	Shows a confirmation dialog that asks the user if he wants to create a new folder . User can modify provided name if it was not disallowed .
6598	Change the directory that is currently being displayed .
6599	Changes the state of the buttons depending on the currently selected file or folder .
6600	Sets up a FileObserver to watch the current directory .
6601	Returns the selected folder as a result to the activity the fragment s attached to . The selected folder can also be null .
6602	Creates a new folder in the current directory with the name CREATE_DIRECTORY_NAME .
6603	Returns true if the selected file or directory would be valid selection .
6604	Start a background job showing a progress bar as long as the job runs . This seems contradictory but with background job we mean one that runs off the ui thread to prevent an ANR . We still have to wait for the processing to be done because we need the result .
6605	Handles OL and UL start tags
6606	Handles OL and UL end tags
6607	The edge parameter specifies which edges the user is dragging .
6608	Returns the cropping rectangle in image space .
6609	Maps the cropping rectangle from image space to screen space .
6610	This needs to be called before anything else because we need the media factory .
6611	Add a SpanWatcher for the Changeable implementation
6612	This method returns the spinner view
6613	Returns the spinner entry view
6614	Converts a spanned text to HTML
6615	Convert a spanned text within a paragraph
6616	Creates a file with a non - conflicting file name in a specified folder based on an existing file name .
6617	Retrieve local file path for an arbitrary Uri
6618	Return a namespace name from a Qname . The attribute flag tells us whether to return an empty namespace name if there is no prefix or use the schema default instead .
6619	Return a local name from a Qname .
6620	Sets an attribute and its value into an AttributesImpl object . Attempts to set a namespace declaration are ignored .
6621	Sets an attribute and its value into this element type .
6622	Retrieve the file name for a system font .
6623	Retrieve the file name for a font in the asset folder .
6624	Makes a new buffer available either by allocating a new one or re - cycling an existing one .
6625	Write the bytes to byte array .
6626	Write a byte to byte array .
6627	Writes the entire contents of the specified input stream to this byte stream . Bytes from the input stream are read directly into the internal buffers of this streams .
6628	Writes the entire contents of this byte stream to the specified output stream .
6629	Gets the curent contents of this byte stream as a byte array . The result is independent of this stream .
6630	Set the text size .
6631	Converts all separators to the Unix separator of forward slash .
6632	hitting cropping rectangle .
6633	Pan the displayed image to make sure the cropping rectangle is visible .
6634	view s center and scale according to the cropping rectangle .
6635	Reset document locator supplying systemid and publicid .
6636	Validate a value against the set of regular expressions returning a String value of the aggregated groups .
6637	Add or replace an element type for this schema .
6638	Add or replace a default attribute for an element type in this schema .
6639	Specify natural parent of an element in this schema .
6640	Get an ElementType by name .
6641	Get an entity value by name .
6642	This important method makes sure that all paragraph effects are applied to whole paragraphs . While it s optimized for performance it s still an expensive operation so it shouldn t be called too often .
6643	Apply this effect to the selection . If value is Null then the effect will be removed from the current selection .
6644	Returns true if the domain component of an email address is valid .
6645	Call this when an operation is performed to add it to the undo stack .
6646	Re - do the last undone operation for a specific rich text editor
6647	A memory optimized algorithm for String . replaceAll
6648	Get thread status and create one if specified .
6649	The following three methods are used to keep track of BitmapFaction . Options used for decoding and cancelling .
6650	The following three methods are used to keep track of which thread is being disabled for bitmap decoding .
6651	The real place to delegate bitmap decoding to BitmapFactory .
6652	Retrieve the fonts from the asset and the system folder .
6653	Retrieve the fonts from the asset folder .
6654	Retrieve the fonts from the system folders .
6655	Sets up instance variables that haven t been set by setFeature
6656	Buffer both the InputStream and the Reader
6657	Get an InputStream based on a publicid and a systemid
6658	needs to support chars past U + FFFF
6659	with a semicolon .
6660	deferring to the schema for named ones .
6661	e is the next element to be started if we know what it is
6662	Pop the stack irrevocably
6663	Pop the stack restartably
6664	Get the prefix from a QName
6665	Return true if we have a foreign name
6666	If the String is quoted trim the quotes .
6667	Recognises quotes around a phrase and doesn t split it .
6668	so that the argument can be safely pushed
6669	canonicalize case .
6670	Called to retrieve per - instance state before being killed so that the state can be restored in the constructor .
6671	Perform any final cleanup before the component is destroyed .
6672	Media file was picked - > process the result .
6673	LinkFragment has closed - > process the result .
6674	Setup the base matrix so that the image is centered and scaled properly .
6675	rather than the current 1024x768 this should be changed down to 200% .
6676	Check whether the effect exists in the currently selected text of the active RTEditText .
6677	Find spans within that paragraph and add them to the ParagraphSpanProcessor to be removed once the ParagraphSpanProcessor processes its spans .
6678	This method encodes the query part of an url
6679	This method decodes an url with encoded query string
6680	Tries to open a known file browsers to pick a directory .
6681	Thong added for rotate
6682	Set a new output destination for the document .
6683	Write a raw character .
6684	Write a raw string .
6685	Return true if the attribute is an HTML boolean from the above list .
6686	Write an array of data characters with escaping .
6687	Write out the list of Namespace declarations .
6688	Write an element or attribute name .
6689	Create a stream if it does not already exist .
6690	Waits that the stream has been created .
6691	Complete snapshot N with lacking instance snapshots from snapshot N - 1
6692	Wait that the minimum duration between two GetShardIteratorRequests has elapsed .
6693	Retrieves records corresponding to the request .
6694	Handle retry for amazon quotas
6695	Try to perform an Amazon action and increase the duration between requests if some exception is exceeding resource usage exception is thrown .
6696	Throws an exception if the bucket does not exist or is not readable .
6697	Load the stores .
6698	Uses the wildcardExpanderHandler to process all found files and directories .
6699	Replace all occurrences of a substring within a string with another string .
6700	Delete any character in a given String .
6701	Add a single lint report to underlying collection .
6702	Add to properties a new key with value extracted either from filterConfig or from configurable properties file . This method helps to ensure backward compatibility of the filterConfig vs configProperties configuration .
6703	Use this method rather than accessing the field directly because it will create a default one if none is provided .
6704	Handles the resource model auto detection .
6705	Creates a map of postProcessors form a map of preProcessors . This method will be removed in 1 . 5 . 0 release when there will be no differences between pre & post processor interface .
6706	Compiles the javascript template into plain javascript .
6707	Notify all listeners about cachePeriod property changed . If passed newValue is null the oldValue is taken as new value . This is the case when the reloadCache is invoked .
6708	Notify all listeners about cachePeriod property changed . If passed newValue is null the oldValue is taken as new value . This is the case when the reloadModel is invoked .
6709	Build a wrapped servlet request which will be used for dispatching .
6710	Appends a suffix to the source baseName .
6711	Use an empty stream to avoid container writing unwanted message when a resource is missing .
6712	By default redirect does not allow writing to output stream its content . In order to support this use - case we need to open a new connection and read the content manually .
6713	Process each resource and replace it with a collection of resources if it contains wildcard .
6714	create the handler which expand the resources containing wildcard .
6715	Locates an InputStream for the given uri .
6716	Creates configuration by looking up in servletContext attributes . If none is found a new one will be created using the configuration factory .
6717	Register property change listeners .
6718	Perform actual processing .
6719	Once set this configuration will be used instead of the one built by the factory .
6720	Identify duplicate group names .
6721	Merge this model with another model . This is useful for supporting model imports .
6722	This implementation shows the problem with current design of locator implementation . Needs to be changed .
6723	Apply resourcePostProcessors .
6724	This method is synchronized to ensure that processor is injected before it is being used by other thread .
6725	Applies configured processor on the intercepted stream .
6726	Split multiple options into an array of options .
6727	Load the properties from the stream . The implementation will handle comments properly by removing them before properties are loaded .
6728	parse the properties from the provided string containing a raw properties
6729	Creates a custom instance of Manager factory . The wroManagerFactory parameter value is used to identify the manager class .
6730	Store digest for all resources contained inside the list of provided groups .
6731	Check if the provided group is a target group .
6732	Update the classpath .
6733	Override this method in order to provide different xml definition file name .
6734	Initialized inner factory based on provided configuration .
6735	Set a list of transformers to apply on decorated model factory .
6736	visible for testing the init of a HandlebarsJs template
6737	Apply preProcessors on resources and merge them after all preProcessors are applied .
6738	Apply preProcessors on resources and merge them .
6739	runs the pre processors in parallel .
6740	Apply a list of preprocessors on a resource .
6741	Decorates preProcessor with mandatory decorators . This method is synchronized to ensure that processor is injected before it is being used by other thread .
6742	Persist the fallbackStorage to the fallbackStorageFile . This method should be invoked only once during build since it is relatively expensive . Not invoking it would break the incremental build feature .
6743	Return all fields for given object also those from the super classes .
6744	Computes the url of the image to be replaced in a css resource .
6745	Concatenates cssUri and imageUrl after few changes are applied to both input parameters .
6746	Add a single model transformer .
6747	Write to stream the content of the processed resource bundle .
6748	Set the aggregatedFolderPath if required .
6749	Extract variables map from variables body .
6750	Parse css find all defined variables & replace them .
6751	Replace variables from css with provided variables map .
6752	Transforms a post processor into pre processor .
6753	Indicates if the processor is eligible for usage based on provided criteria .
6754	Performs actual gzip of the filtered content .
6755	Decorates a processor which will be applied on provided patterns .
6756	Decorates a processor which will not be applied on provided patterns .
6757	Factory method which requires all mandatory fields .
6758	Will persist the information regarding the provided resource in some internal store . This information will be used later to check if the resource is changed .
6759	Invokes the provided function for each detected css import .
6760	This filtering is required in order to ensure that no nulls are passed ( which happens when using gson for deserializing json collection .
6761	The minimization is can be switched off only in debug mode .
6762	Find a set of imported resources inside a given resource .
6763	Computes absolute url of the imported resource .
6764	Creates a comma separated list of items .
6765	Creates a list of aliases based on provided string containing comma separated values of aliases .
6766	Initialize the context .
6767	Evaluates a script from a reader .
6768	Evaluates a script .
6769	Perform processing of the uri .
6770	Checks if the provided url is a resource proxy request .
6771	Computes the servlet context relative url to call this handler using a server - side invocation . Hides the details about creating a valid url and providing the authorization key required to invoke this handler .
6772	Encodes a version using some logic .
6773	Computes the destination folder based on resource type .
6774	Process a single group .
6775	Check if an uri from a particular group has changed .
6776	This implementation will try to locate the provided resource inside contextFolder configured by standaloneContext . If a resource cannot be located the next contextFolder from the list will be tried . The first successful result will be returned .
6777	Ensure that a not null pool will be created .
6778	Finds the specified URI pattern inside a JAR file . If the specified file isn t a valid JAR default strategy will be used instead .
6779	Opens the specified JAR file and returns a valid handle .
6780	Replaces the protocol specific prefix and removes the query path if it exist since it should not be accepted .
6781	Uses isMinimizeEnabled configuration to compute minimize value .
6782	Allow adding more than one uriLocators .
6783	Factory method which takes care of redundant decoration .
6784	Adds a ruby require to the ruby script to be run by this RubySassEngine . It s safe to add the same require twice .
6785	Transforms a sass content into css using Sass ruby engine . This method is synchronized because the engine itself is not thread - safe .
6786	Logs the summary as it was collected at this point .
6787	A method which should be invoked on each new resource processing having as a side effect an increment of the counter holding the number of total processed resources .
6788	Ensure that the returned lock will never be null .
6789	Creates process responsible for running lessc shell command by reading the file content from the sourceFilePath
6790	Parses out the properties of a selector s body .
6791	Return an array of the data for tasks performed .
6792	Creates compilation command for provided typescript input .
6793	Parse header value & puts the found values in headersMap field .
6794	Populates the map with headers used to disable cache .
6795	Retrieve pathInfo from a given location .
6796	Retrieve servletPath from a given location .
6797	Utility used to verify that requestURI matches provided path
6798	Load the regular expression stored in in regexp . properties resource file .
6799	Copy and close the reader and writer streams .
6800	Creates a temp file which has a certain extension .
6801	Cleans the image url by trimming result and removing \ or \ characters if such exists .
6802	Sets the attribute into the servlet context . The name of the attribute will be computed for you .
6803	Generate the dataUri as string associated to the passed InputStream with encoding & type based on provided fileName .
6804	Generates a data URI from a byte array and outputs to the given writer .
6805	Associate a context with the CURRENT request cycle .
6806	Remove context from the local thread .
6807	Check if resources from a group were changed . If a change is detected the changeListener will be invoked .
6808	Invoked when exception occurs .
6809	Will check if a given resource was changed and will invoke the appropriate callback .
6810	Updates the hash associated with the resource for a give groupName .
6811	Check if the group has at least one resource of some type .
6812	Creates process responsible for running tsc shell command by reading the file content from the sourceFilePath
6813	Serializes an object and returns the Base64 - encoded version of that serialized object .
6814	Initialize the map
6815	Recursive method . Add the parsed element group to the group collection . If the group contains group - ref element parse recursively this group .
6816	Creates a group and all its associated resources .
6817	Creates a resource from a given resourceElement . It can be css js . If resource tag name is group - ref the method will start a recursive computation .
6818	Search for all resources for a group with a given name .
6819	Print logging information for the timer . The log only shows the recorded time of the completed start - stop cycles . If the timer is still running then it will not be stopped to add the currently measured time to the output but a warning will be logged .
6820	Stop a timer of the given string name for the given thread . If no such timer exists - 1 will be returned . Otherwise the return value is the CPU time that was measured .
6821	Get a timer of the given string name and todos for the current thread . If no such timer exists yet then it will be newly created .
6822	Get a timer of the given string name for the given thread . If no such timer exists yet then it will be newly created .
6823	Print statistics about the saturation
6824	waking up all workers waiting for new saturated contexts
6825	Updates the counter for processed contexts and jobs
6826	Check if the counter for saturated contexts and processed jobs can be increased and post - process the finished jobs
6827	Update the counter to the value provided it is greater . Regardless of the returned value it is guaranteed that the value of the counter after execution will be at least the input value .
6828	The default implementation of all methods
6829	Adds the specified object property into the taxonomy if it is not in it yet and sets its direct sub - properties if not set yet .
6830	Flushes index if needed and completes loading if there is new input . Incremental mode should be changed only during completing loading .
6831	Ensures that saturation is restored and taxonomies are cleaned . Also invalidates stages that depend on the saturation if it changed .
6832	Check consistency of the current ontology if this has not been done yet .
6833	Complete the taxonomy computation stage and the stages it depends on if it has not been done yet .
6834	Completes instance taxonomy computation stage and the stages that it depends on if this has not been done yet .
6835	Explains why an ontology inconsistency is entailed . If it is not entailed the returned proof is empty .
6836	Initialize the parameters of the computation for this stage ; this is the first thing to be done before stage is executed
6837	Invalidates this stage and all subsequent stages if not already done so
6838	Returns collection that contains at least all individuals that are in ontology but either are removed from taxonomy or their type nodes in taxonomy were removed .
6839	Returns collection that contains at least all individuals that are in taxonomy but either are removed from ontology or their context became not saturated .
6840	Logs a warning message for unsupported OWL API method
6841	Removes the element at the given position of the table shifting if necessary other elements so that all elements can be found by linear probing .
6842	Removes the element at the given position of the table and the corresponding value at the same position shifting if necessary other elements and values so that all elements can be found by linear probing .
6843	Finds the position of the next element starting from the given position that would not be found by linear probing if the element at the given position are deleted . This should be the element whose index is smaller than this position .
6844	Tests if the set represented by given data array contains a given object .
6845	Adds the element to the set represented by given data array if it did not contain there already .
6846	verifies that occurrence numbers are not negative
6847	Adds all timers of the argument to the corresponding counters of this object . The timers should not be directly modified other than using this method during this operation . The timers in the argument will be reseted after this operation .
6848	Add the values the corresponding values of the given timer
6849	Associates the given key with the given value in the map defined by the keys and value arrays . If an entry with the key equal to the given one already exists in the map the value for this key will be overwritten with the given value .
6850	Remove the entry in the keys and values such that the key of the entry is equal to the given object according to the equality function .
6851	Increasing the capacity of the map
6852	Decreasing the capacity of the map
6853	Not a thread - safe method . Shouldn t be invoked concurrently .
6854	Prints class declarations
6855	Returns all instance nodes of the specified type node and all its sub - nodes .
6856	Removes all entries from this set . The set will be empty after this call returns .
6857	Combine many hash codes with an associative commutative hash function . Associativity ensures that the result of this functions can be further combined with other hash codes for getting the same result as if all hash codes had been combined in one step .
6858	Combine many hash codes into one in a way that depends on their order .
6859	Copies bytes from the input stream to the output stream
6860	Combines the provided partial incompleteness monitors into the top - level monitor for reasoning tasks .
6861	Process a taxonomy and write a normalized serialization .
6862	Submitting a new input for processing . Submitted input jobs are first buffered and then concurrently processed by workers . If the buffer is full the method blocks until new space is available .
6863	Printing an ELK Object through an appender .
6864	If the specified query was added to the index this method marks it as not - computed and deletes the query results .
6865	Add a direct super - class node . This method is not thread safe .
6866	some methods for checking correctness of arguments
6867	Returns read - only view of the given set consisting of the elements satisfying a given condition if the number of such elements is known
6868	A simple second - order map function for sets
6869	Inserts a given element into the given slice
6870	Removes the given object from the given slice
6871	Adds all counters of the argument to the corresponding counters of this object . The counters should not be directly modified other than using this method during this operation . The counter in the argument will be reseted after this operation .
6872	Log the current total memory usage with the specified priority .
6873	This supposed to be the central place where the reasoner gets its configuration options
6874	Tries to shut down the reasoner within the specified time
6875	Prints the heading together with the separators
6876	Formats and the given values adding padding symbols if necessary . The given array may be modified but the values themselves are not modified .
6877	Creates a string of the given length consisting of the given character
6878	Add the values the corresponding values of the given counter
6879	Recursively converts object to xhtml data .
6880	Gets input parameter info which is part of the URL mapping be it request parameters path variables or request body attributes .
6881	Recursively navigate to return a BeanWrapper for the nested property path .
6882	Determines action input parameters for required url variables .
6883	Determines if the given class holds only one data item . Can be useful to determine if a value should be rendered as scalar .
6884	The relation type of the link .
6885	The type parameter when present is a hint indicating what the media type of the result of dereferencing the link should be . Note that this is only a hint ; for example it does not override the Content - Type header of a HTTP response obtained by actually following the link . There MUST NOT be more than one type parameter in a link - value .
6886	The hreflang parameter when present is a hint indicating what the language of the result of dereferencing the link should be . Note that this is only a hint ; for example it does not override the Content - Language header of a HTTP response obtained by actually following the link . Multiple hreflang parameters on a single link - value indicate that multiple languages are available from the indicated resource .
6887	The rev parameter has been used in the past to indicate that the semantics of the relationship are in the reverse direction . That is a link from A to B with REL = X expresses the same relationship as a link from B to A with REV = X . rev is deprecated by this specification because it often confuses authors and readers ; in most cases using a separate relation type is preferable .
6888	Adds link - extension params i . e . custom params which are not described in the web linking rfc .
6889	Expands template variables arguments must satisfy all required template variables unsatisfied optional arguments will be removed .
6890	Allows to retrieve all rels defined for this affordance .
6891	Retrieves all revs for this affordance .
6892	Determines if the affordance has unsatisfied required variables . This allows to decide if the affordance can also be treated as a plain Link without template variables if the caller omits all optional variables . Serializers can use this to render it as a resource with optional search features .
6893	The value of the parameter at sample invocation time formatted according to conversion configuration .
6894	Determines if request body input parameter has a hidden input property .
6895	Find out if property is included by searching through all annotations .
6896	Has any explicit include value or might have implicit includes because there is a hidden or readOnly flag .
6897	Is this action input parameter required based on the presence of a default value the parameter annotations and the kind of input parameter .
6898	Determines default value of request param or request header if available .
6899	Gets request parameter name of this action input parameter .
6900	Gets exposed property or parameter name .
6901	Gets vocab for given bean .
6902	Query consisting of expanded parameters and unexpanded parameters .
6903	Appends form and squashes non - GET or POST to POST . If required adds _method field for handling by an appropriate filter such as Spring s HiddenHttpMethodFilter .
6904	Classic submit or reset button .
6905	Appends simple input or select depending on availability of possible values .
6906	Adds actionDescriptors of the given AffordanceBuilder to this affordanceBuilder .
6907	Returns the template as uri components without variable expansion .
6908	Strips all variables which are not required by any of the given action descriptors . If no action descriptors are given nothing will be stripped .
6909	Gets first child of this uber node having the given name attribute .
6910	Gets first child of this uber node having the given rel attribute .
6911	Allows iterating over children of this uber node which have a data attribute .
6912	Returns a new PersistentHashMap of the given keys and their paired values skipping any null Entries .
6913	Returns a new PersistentTreeMap of the given comparable keys and their paired values skipping any null Entries .
6914	Returns a new empty PersistentTreeMap that will use the specified comparator .
6915	Returns a view of the mappings contained in this map . The set should actually contain UnmodMap . UnEntry items but that return signature is illegal in Java so you ll just have to remember .
6916	Returns the last key in this map or throws a NoSuchElementException if the map is empty .
6917	Static factory methods
6918	than lazily evaluated and cached linked - list Sequence model .
6919	The number of items to drop from the beginning of the output .
6920	Provides a way to collect the results of the transformation .
6921	Map . Entry factory method
6922	If sel is managed correctly it ensures that the cast is accurate .
6923	Use this to prevent duplicate runtime types .
6924	Returns the item specified by the given index .
6925	Inserts a new item at the end of the Vecsicle .
6926	Efficiently adds items to the end of this PersistentVector .
6927	Returns a new MutableSet of the values . This data definition method is one of the few methods in this project that support varargs . If the input contains duplicate elements later values overwrite earlier ones .
6928	Returns a MutableVector of the given items . This data definition method is one of the few methods in this project that support varargs .
6929	Returns a new PersistentHashSet of the values . This data definition method is one of the few methods in this project that support varargs . If the input contains duplicate elements later values overwrite earlier ones .
6930	Returns a new PersistentVector of the given items . This data definition method is one of the few methods in this project that support varargs .
6931	If you need to wrap a regular Java array outside this project to perform a transformation on it this method is the most convenient efficient way to do so .
6932	Creates a new StringBuilder with the given number of spaces and returns it .
6933	There is Arrays . toString but this is intended to produce Cymling code some day .
6934	Construct a LazyRef from the given initialization function .
6935	This whole method is synchronized on the advice of Goetz2006 p . 347
6936	Returns a new array one longer than the given one with the specified item inserted at the specified index .
6937	Returns a new array containing the first n items of the given array .
6938	Some operations require that the transaction be suspended
6939	Verifies if the wrapped transaction is active and if dissociates it from the thread if needed
6940	Builds a service component contained in the specified du jar file with the specified and adds it to the specified deployable unit .
6941	Directory is valid if it exists does not represent a file and can be read .
6942	Create the inheritance link with the sbb absract class provided by the sbb developer
6943	Copy declared methods from one class to another
6944	Copy methods to a class
6945	TMP DEV METHODS
6946	Removes the specified sbb entity but without changing to sbb s class loader first .
6947	Indicates if notifications are enabled for the specified parameter name
6948	Retrieves the set of ra entity link names referenced by the service componen which do not exist
6949	Install a service into SLEE
6950	uninstall a service .
6951	Verifies if the specified ra entity link name is referenced by a non inactive service .
6952	This method returns a list containing the names of the named SBB usage parameter sets that belong to the SBB specified by the sbbID argument and the Service represented by the ServiceUsageMBean object .
6953	Resets the usage parameters of all SBBs within the Service represented by the ServiceUsageMBean object . The SLEE sets counter - type usage parameters to zero and removes all samples from sample - type usage parameters .
6954	Get a collection of ProfileID objects that identify all the profiles contained in the specified profile table . The collection returned is immutable . Any attempt to modify it either directly or indirectly will result in a java . lang . UnsupportedOperationException being thrown .
6955	Get a ProfileTableActivity object for a profile table .
6956	Get a ProfileID object that identifies the profile contained in the specified profile table where the specified profile attribute is set to the specified value . In the case of a profile attribute of an array type the type of the specified value must be the base component type of the array not the array type itself and the SLEE will return the profile identifier of any profile that contains the value within the array .
6957	Method to display result of operation .
6958	Default implementation .
6959	Executes a non transacted fire event operation .
6960	Binds the specified aci name with the specified activity context handle
6961	Unbinds the specified aci name with the specified activity context id
6962	Lookup of the activity context id bound to the specified aci name
6963	Retrieves a map of the bindings . Key is the aci name and Value is the activity context handle
6964	Retrieves the next sbb entity to handle the event .
6965	Determine if this TraceLevel object represents a level that is higher than some other TraceLevel object . For the purposes of the comparison OFF is considered a higher level than SEVERE and FINEST is the lowest level .
6966	This method will extract all the files in the jar file
6967	Pipes data from the input stream into the output stream .
6968	Puts an object in cache data
6969	Tries to attaches an sbb entity
6970	Detaches an sbb entity
6971	Verifies if there at least one sbb entity attached
6972	Return a set with all sbb entities attached .
6973	Attaches a timer
6974	Detaches a timer
6975	Verifies if there at least one timer attached
6976	Returns the set of timers attached to the ac
6977	Adds the specified name to the set of names bound to the ac
6978	Removes the specified name from the set of names bound to the ac
6979	Verifies if there at least one name bound to the ac
6980	Returns the set of names bound to the ac
6981	Sets the aci cmp attribute
6982	Retrieves the aci cmp attribute
6983	Retrieves a map copy of the aci attributes set
6984	Initiates the notification info for usage mbeans
6985	Send the notification .
6986	Downloads a remote DU to a local folder
6987	Updates the list of components already deployed to SLEE .
6988	Method for installing a Deployable Unit into SLEE .
6989	Method for uninstalling a Deployable Unit into SLEE .
6990	Sets the DU as not installed and remove it from waiting list if present there . Also tries to undeploy DU s waiting for dependencies to be removed .
6991	Method for showing current status of the Deployment Manager .
6992	If the message should be logged convert the JDK 1 . 4 LogRecord to a Log4J message .
6993	get the Log4J logger corresponding to the java . util . logger . LogRecord
6994	Retrieves the component ids for components that refers the specified component
6995	Retrieves a set containing sbb entity ids in the factory cache data
6996	generic for all calls
6997	Some methods to expose info about what is goign on .
6998	Determines if profile is in back end storage == visible to other compoenents than MBean if null is passed as argumetn it must check for any other than defualt?
6999	Triggers remove operation on this profile table .
7000	Updates the ra entity config properties
7001	Signals that the container is in RUNNING state
7002	Signals that the container is in STOPPING state
7003	Activates the ra entity
7004	Deactivates the ra entity
7005	schedules the ending of all the entity activities this is needed on ra entity deactivation or slee container stop once the process ends it will invoke allActivitiesEnded to complete those processes
7006	Removes the entity it will unconfigure and unset the ra context the entity object can not be reused
7007	Retrieves the ra interface for this entity and the specified ra type
7008	Indicates a service was activated the entity will forward this notification to the ra object .
7009	if it is a handle reference it gets the referred handle
7010	Callback to notify the entity and possibly the ra object informing activity handled ended .
7011	Updates the ra configuration .
7012	Merges the current properties values with the new ones and uses the ra to verify the configuration
7013	Requests the stopping of the ra object . If the operation succeeds the ra will transition to STOPPING state .
7014	Requests the deactivation of the ra object . If the operation succeeds the ra will transition to INACTIVE state .
7015	Unconfigures the ra object
7016	Unsets the context of the ra object .
7017	Unsets the ft context of the ra object .
7018	Builds the profile attribute map using the cmp interface class
7019	the real logic to resume the event context
7020	Retrieves a set containing all activity context handles in the factory s cache data
7021	Removes the mbean
7022	Retrieves the object name for the usage param mbean with the specified name
7023	Decorate the abstract Class
7024	The logic to fire an event from an SLEE 1 . 0 Sbb
7025	The logic to fire an event from an SLEE 1 . 1 Sbb
7026	Retrieves a profile given the cmp method name and profile id
7027	SBB USAGE PARAMS
7028	Retrieve all abstract methods from a class
7029	Retrieve all methods from an interface including super interfaces except the ones specified in the provided map
7030	Creates an object pool for the specified profile table . If a transaction manager is used then and if the tx rollbacks the pool will be removed .
7031	Removes the object pool for the specified profile table . If a transaction manager is used then the removal is only after the tx commit .
7032	NON MBEAN - used only internal those methods are not exposed via jmx
7033	THis methods raises alarm . It MUST not receive AlarmLevel . CLEAR it has to be filtered .
7034	Usage methods . Here we can be static for sure . Rest must be tested .
7035	Retrieves the JAIN SLEE specs event type descriptor
7036	Method for deciding whether or not to accept the file .
7037	Initializer method for accepted files . Will parse descriptors at this point .
7038	This is where the fun begins . Time to deploy!
7039	Fun has ended . Time to undeploy .
7040	MBean operation for getting Deployer status .
7041	Executes actions scheduled after commit succeeds
7042	Executes actions scheduled to run first after commit succeeds
7043	Executes actions scheduled for after a rollback
7044	Executes actions scheduled for before commit
7045	Executes actions scheduled for before commit at first
7046	This method returns tracer names that have been defined explicitly via setTraceLevel from TraceMBean
7047	This method can be called multiple times .
7048	Removes all replicated data
7049	Register the property editors for jboss jmx console so non string SLEE api types can be used in specs mbeans methods as args
7050	Generates classes for a slee component which defines usage parameters
7051	Retrieves the object pool for the specified sbb and service .
7052	Creates an object pool for the specified service and sbb . If a transaction manager is used then and if the tx rollbacks the pool will be removed .
7053	Executes a non transacted End Activity operation .
7054	Start activity logic independent of transaction management .
7055	End activity logic independent of transaction management .
7056	Checks that fire event methods can be invoked
7057	Event firing logic independent of transaction management .
7058	Generate the Sbb Local Object Class
7059	User should overide it to provide different name for instance for boolean \ is \ prefix
7060	This method is called to convert optArg from string form if no conversion is needed it should return passed object .
7061	Set the profile table and profile referenced by this profile identifier to new values .
7062	protected DeployableUnitsCard deployableUnitsCard ;
7063	The contains method . This method returns true if the SBB entity represented by the SBB local object specified by the input argument is a member of this child relation . If the method argument is not an SBB local object is an invalid SBB local object or is an SBB local object whose underlying SBB entity is not a member of this child relation then this method returns false .
7064	This method returns true if all SBB entities represented by the SBB local objects in the collection specified by the input argument are members of this child relation . If the collection contains an object that is not an SBB local object an SBB local object that is invalid or an SBB local object whose underlying SBB entity is not a member of this child relation then this method returns false .
7065	Removing an SBB entity from a child relation initiates a cascading removal of the SBB entity tree rooted by the SBB entity similar to invoking the remove method on an SBB local object that represents the SBB entity .
7066	Determine if this Level object represents a level that is higher or more severe that some other Level object . For the purposes of the comparison OFF is considered a higher level than SEVERE .
7067	Resolve deserialisation references so that the singleton property of each enumerated object is preserved .
7068	cleans up the class pool cache
7069	Adds call to this profile .
7070	Retrieves a profile object for the table and specified profile name there is only one profile object per profile entity per transaction
7071	Adds transactional actions to the active transaction to passivate a profile object .
7072	Set the element as text value parse it and setValue . The separator is CID_SEPARATOR
7073	Generate the Activity Context Interface Class
7074	Generates the concrete methods of the class It generates a specific method implementation for the javax . slee . ActivityContextInterface methods for the methods coming from the ActivityContextInterface developer the call is routed to the base asbtract class
7075	Set a shared data item for the ACI
7076	add a naming binding to this activity context .
7077	This is called to release all the name bindings after the activity end event is delivered to the sbb .
7078	Add the given name to the set of activity context names that we are bound to . The AC Naming facility implicitly ends the activity after all names are unbound .
7079	attach the given timer to the current activity context .
7080	End Event has been delivered on the Activity Context .
7081	attach an sbb entity to this AC .
7082	Detach the sbb entity
7083	get an ordered copy of the set of SBBs attached to this ac . The ordering is by SBB priority .
7084	Ends the activity context .
7085	Adder method for a Deployable Component .
7086	Method for obtaining the external dependencies for this DU if any .
7087	Method for checking if the DU has all the dependencies needed to be deployed .
7088	Method for checking if this DU contains any component that is already deployed .
7089	Getter for the Install Actions .
7090	Getter for the Uninstall Actions .
7091	Method for checking if this DU components are referred by any others .
7092	Closes and unregisters the mbean for the specified profile if exists
7093	Retrieves the JMX ObjectName for a profile given its profile name and profile table name
7094	Moves to the write mode using specified object . The current java transaction will be suspended .
7095	Logic to execute before invoking a cmp setter method on the mbean
7096	Logic to execute after invoking a cmp setter method on the mbean
7097	Logic to execute before invoking a cmp getter method on the mbean
7098	Logic to execute after invoking a cmp getter method on the mbean
7099	Logic to execute before invoking a management method on the mbean
7100	Logic to execute after invoking a management method on the mbean
7101	deletes the whole path going through directories
7102	Create a default constructor on the Sbb Concrete Class
7103	Create a default usage parameter getter and setter .
7104	Create a method to retrive the entity from the SbbObject .
7105	Create the implementation of the fire event methods
7106	Create the narrow method to get the activity context interface
7107	Add a query expression to this composite expression .
7108	Place an object into the NonSerializableFactory namespace for subsequent access by getObject . There cannot be an already existing binding for key .
7109	A convience method that simplifies the process of rebinding a non - zerializable object into a JNDI context . This version binds the target object into the default IntitialContext using name path .
7110	Decorate the abstract sbb Class
7111	Invokers for the simple types
7112	Computes the real aci data field name
7113	Sets an sbb aci data field value
7114	Retrieves an sbb aci data field value
7115	Invoked from pool .
7116	initialize state from default profile
7117	Invoked when pool removes object
7118	Retrieves the local representation for this profile object
7119	Fires a profile added or updated event if the profile object state is ready and the persistent state is dirty
7120	Retrieves the profile cmp slee 1 . 0 wrapper for this profile object
7121	Creates a class with the desired name and linked to the mentioned interfaces .
7122	Create the inheritance link with the absract class provided by the developer
7123	Adds the selected annotation to the Object along with the specified memberValues .
7124	Private method to add member values to annotation
7125	This method returns the aci for the specified activity if exists it should be invoked by each impl of methods of an ra type aci factory .
7126	Retrieves the component javassist class pool
7127	Specifies the the Deployable Unit this component belongs . This method also sets the reverse relation adding the component to the deployable unit
7128	Indicates that the component was undeployed and thus should clean up any resources
7129	Executes a non transacted start activity operation .
7130	Searches for provided interface in passed Class object - it can be class or interface . If it finds it return instance of it .
7131	Returns methods of this interface and all super interfaces
7132	Creates an InputSource with a SystemID corresponding to a local dtd file .
7133	This checks if tracer name is ok . It must not be null ;
7134	Method that does lookup and creates PLOs
7135	Checks if all dependencies of a DU component exists
7136	Creates the directory that will be used for unpacking the child jars for a given DU .
7137	Retrieves the entity manager for the current tx and the framework profile spec
7138	Start the SLEE container
7139	This method depending if SecurityManger is present switches class loader using priviledged action this is requried as some action may be initiated by unsecure domains .
7140	Its used to embed calls in AccessController in case of insturmented code cause javassist does not support anonmous inner class .
7141	Verifies that the current transaction is still the one used to create the object
7142	Calculates the Activity TTL
7143	Verifies if the specified class can be loaded by current thread class loader
7144	Retrieves a local object valid for thus current transaction .
7145	SImilar to LoggingMXBean return list of available loggers . Filter is string that has to occur in loggers name .
7146	Resets all loggers level to default one
7147	Removes all loggers under certain branch .
7148	Tries to add logger if it doesnt exist
7149	Adds SocketHandler to certain logger this logger must exist prior this function is called
7150	Tries to remove handler from logger .
7151	Generates the log4j logger name for the tracer with specified named and notification source .
7152	syncs the slee tracer level with the one that related logger has in log4j
7153	assigns the equiv log4j level to the tracer
7154	manages the flags which cache if levels are enabled
7155	THis is internaly called by 1 . 1 tracers
7156	This checks if the specified tracer name is ok .
7157	Write the current object and vendor - specific data to the output stream .
7158	Read the current object in the input stream from the stream optionally deserializing any vendor - specific data in the stream .
7159	Adds a direct dependency to this domain . Direct dependencies are other domains which the domain depends on .
7160	Retrieves a flat list containing all dependencies for the domain i . e . all direct dependencies and their own dependencies .
7161	Finds a class locally i . e . in the URLs managed by the extended URLClassLoader .
7162	Finds a resource locally i . e . in the URLs managed by the extended URLClassLoader .
7163	Finds resources locally i . e . in the URLs managed by the extended URLClassLoader .
7164	Creates and registers a profile mbean for the specified object .
7165	Resumes the specified tx . If it is null nothing is done .
7166	Retrieves the set of sbbs used by this service
7167	Retrieves the set of ra entity links referenced by the sbbs related with the service .
7168	Initiates the SLEE container
7169	Shutdown of the SLEE container
7170	Ensures the standard SLEE lifecycle .
7171	Create a named usage parameter getter .
7172	Set column to update . Object is automatically translated onto matching JDBC type .
7173	Return new PolyJDBC instance .
7174	Insert value into column of given name . Object is automatically translated onto matching JDBC type .
7175	Run specified operations in safe transaction block .
7176	Parse an IIIF Image API compliant region request string
7177	Returns the requested region
7178	Resolve the region request into an actual region that can be used for cropping the image
7179	Get type for on values that are plain URIs by deducing the type from their parent .
7180	Set the viewing hints for this resource .
7181	Add one or more viewing hints for this resource .
7182	Sets the renderings . All renderings must have both a profile and a format .
7183	Add one or more renderings . All renderings must have both a profile and a format .
7184	Merge multiple profiles into one . Useful for image servers that want to consolidate the limits given in a info . json .
7185	Merge two profiles .
7186	Parse a rotation request from an IIIF Image API compliant rotation string .
7187	Parse an IIIF Image API compliant size request string
7188	Initializes the AndroidDebugBridge and registers the DefaultHardwareDeviceManager with the AndroidDebugBridge device change listener .
7189	get current android page s dump file
7190	try to click GPS Popup window
7191	Push handlePopBox . jar to android tmp folder
7192	clean file dump . xml qian . xml uidump . xml in tmp folder
7193	pull dump file from android device to pc
7194	Get crash log from AUT
7195	Convert tabs to spaces .
7196	Introduce a number of spaces at the start of each line .
7197	Parse HTML tags returning a Collection of HTMLToken objects .
7198	Perform the conversion from Markdown to HTML .
7199	escape special characters
7200	This method will be called when an operation invoked on a JDBC object throws an SQLException . It will accumulate a list of all non - transient SQL exceptions .
7201	Closes this ClhmStatementCache and removes all entries from it .
7202	Finds the parent barbershop type in the supplied set if any .
7203	Generates the class code and writes to a new source file .
7204	Write BitVector01Divider to OutputStream . This method doesn t care about r0 and r1 . Caller must write these bvs .
7205	Append bits from bit string . The bit string is the array of string that contains 8 characters which is 0 or 1 .
7206	Read data from InputStream . This method doesn t care about r0 and r1 . Caller must load these bvs and set through setR0 and setR1 .
7207	Deserialize the object to the type expected .
7208	Get the list of objects with a filter if there is anything that matches the filters .
7209	When running cucumber tests in parallel Klov reporter should be attached only once in order to avoid duplicate builds on klov server .
7210	Adds the screenshot from the given path with the given title to the current step
7211	Sets the system information with the given key value pair
7212	Allows you to select a property or property path .
7213	Selects but allows having a different alias for the output .
7214	Create an annotation data list .
7215	Extract all annotation for a given property . Searches current class and if none found searches super class for annotation . We do this because the class could be proxied with AOP .
7216	Find annotation given a particular property name and clazz . This figures out the writeMethod for the property and uses the write method to look up the annotation .
7217	This needs to be refactored and put into Reflection or something .
7218	Lookup an object and supply a default value .
7219	From map .
7220	fromMap converts a map into a java object .
7221	Creates an object from a value map .
7222	Basic toMap to create an object into a map .
7223	This could be refactored to use core . TypeType class and it would run faster . Converts an object into a map
7224	Get the values from the annotation . We use reflection to turn the annotation into a simple HashMap of values .
7225	Create the validator by looking it up in the ObjectRegistry and then populating it with values from the meta - data list .
7226	Lookup the list of validators for the current field and initialize them with validation meta - data properties .
7227	This method looks up the validator in the registry .
7228	This method applies the properties from the validationMetaData to the validator uses Spring s BeanWrapperImpl .
7229	Removes a property if it is null or an empty string . This allows the property to have a null or emtpy string in the meta - data but we don t copy it to the validator if the property is not set .
7230	Calculate utc time . This gets called every 20 mili - seconds or so .
7231	Get the size of the cache . This is not 100% accurate if cache is being concurrenly accessed .
7232	Calculate the hash .
7233	Configures default options .
7234	Opens the database
7235	Puts values into the key value store in batch mode
7236	Remove all of the keys passed .
7237	Search to a certain location .
7238	Keys are expected to be sorted
7239	Close the database connection .
7240	Reduce by functional support for int arrays .
7241	Fallback to reflection if the call - site will not work or did not work
7242	Calculate Variance .
7243	Used internally to avoid loss and rounding errors a bit .
7244	Invokes method from list or map depending on what the Object arg is .
7245	A very fast reduce by . If performance is your thing this seems to be as fast a plain for loop when benchmarking with JMH .
7246	Useful for generated file names and generated work directories .
7247	Does the object match this expression . An expression is a collection of criteria .
7248	This has to convert values to field type .
7249	Creates criteria from a list . This is used to configure Criteria in JSON .
7250	Converts a JSON string into a Criteria .
7251	Add a new array to the list .
7252	Gets the max item from the array . Sorts the list descending first .
7253	From the sorts this is the first few items .
7254	Grabs the last items after the sort .
7255	Grabs the last few items from the list .
7256	Returns the least few .
7257	Returns the min value using a natural sort .
7258	Returns the min value of the object with the property given .
7259	Processes an array of maps .
7260	Processes an collection of maps .
7261	fromMap converts a map into a Java object . This version will see if there is a class parameter in the map and dies if there is not .
7262	Get the value at key
7263	Get the tool tip .
7264	Generate the field . Transforms firstName into First Name . This allows reasonable defaults for labels .
7265	Turn a single bytes into two hex character representation .
7266	Called from worker thread .
7267	Called from worker thread . Processes the incoming queue for read and writes .
7268	Start up the queue handlers .
7269	Puts character at index
7270	Gets slice of a string .
7271	See if chars is in another string
7272	Add a char to a string
7273	Add many objects converted to strings together . Null are ignored so be careful .
7274	Gets rid of null characters lurking in the string
7275	Split a string
7276	Split a string by space
7277	Split a string by pipe
7278	Convert arrays of chars to arrays of strings
7279	Convert to camel case and pass upper or lower
7280	Checks to see if a string is inside of another
7281	Convert to under bar case
7282	Do a nice pretty print of a number . Add commas and such .
7283	Helper method to create a Sort that is a composite of other sorts .
7284	Sort if you already know the reflection fields .
7285	This is what really does the magic . This is the comparator creator .
7286	This creates a list of children comparators based on the child list .
7287	End universal methods .
7288	Checks to see if two values are the same
7289	Checks to see if two arrays are equals
7290	Sum Provides overflow protection .
7291	Round up to the nearest power of 2
7292	This is the work horse . It does all of the sorting work for the simple cases . Nulls are last by default .
7293	This is the work horse . It does all of the sorting work for the simple cases .
7294	Inject a map into an object s field .
7295	Convert an object to a list .
7296	Create load all keys SQL .
7297	Clones each list item into a new instance with copied fields . It is like doing a clone operation .
7298	Checks to see if we have a string field .
7299	Checks to see if this class has a string field .
7300	Checks to see if a class has a field .
7301	This can be used for default sort .
7302	Gets the first sortable fields found .
7303	Comparison of entries this determines what we will order the cache by which determines which type of cache it is .
7304	Compare the time .
7305	Takes a list an an array or sorts
7306	Sort a list .
7307	Sort map entries .
7308	Sort map values .
7309	Sort map keys .
7310	Sort an array .
7311	This creates the universal comparator object which is used by the sort work horse .
7312	This creates the universal comparator object used for this .
7313	Get the value from the cache . It does not touch the lock so reads are fast . This does not touch the order list so it is fast .
7314	Used for testing as it gets the value without updating stats
7315	Avoid overflow .
7316	Evict if we are over the size limit .
7317	If the type was not initialized we can still figure it out at runtime .
7318	This gets called from the http post handler or event bus handler .
7319	See if it is time to stop We have been interrupted . Should we ignore it or break out of the loop .
7320	Queue and batch writer main logic . This is where the magic happens .
7321	If we detect that the in - coming transfer outputDataQueue channel is empty then it could be an excellent time to sync to disk .
7322	Start up the health monitor .
7323	Starts up the batch writer .
7324	Gets the item by key from the mapping .
7325	This is the main criteria plan in case the name was not obvious .
7326	Run the filter on the group .
7327	Recieves a tick from our clock .
7328	flush to disk .
7329	Attempts to close down log stream .
7330	Writes a buffer of data to the log system .
7331	Write the actual data to disk .
7332	Initialize the output stream .
7333	Put all of these values in the key value store .
7334	Convert a String key to bytes .
7335	Read the meta - data from a properties file .
7336	This method extracts meta - data from a string .
7337	Read the meta - data from annotation . This copies the meta - data from the annotation into a POJO . It first checks the meta - data cache if the meta data is not found in the cache it then reads it from the class .
7338	Extract BaseValidator Meta Data .
7339	Extract meta - data from the annotationData we collected thus far .
7340	Converts an AnnotationData into a ValidatorMetaData POJO .
7341	Splits a string into many parts
7342	Split string by white space
7343	Split string by a list of delimiters
7344	remove chars from a string
7345	Split string by a list of delimiters but none are empty within a range
7346	parse a double
7347	parse an int within a range
7348	parse an long within a range
7349	This method handles walking lists of lists .
7350	Get fields from object or Map . Allows maps to act like they have fields .
7351	Get property value loads nested properties
7352	Set property value to simulate dependency injection .
7353	Set a static value
7354	This is an amazing little recursive method . It walks a fanout of nested collection to pull out the leaf nodes
7355	This is one is forgiving of null paths . This works with getters first i . e . properties .
7356	Get an int property .
7357	The init method tries to generate the message keys . You should only call the init method if you don t inject values into the detailMessage and summaryMessage .
7358	Creates a message .
7359	Actually creates the message .
7360	Convert the keys to values .
7361	Gets the current subject or the configured subject if the current subject is not found .
7362	Parse a text representation of a JSON data structure
7363	This actually sends the request .
7364	Requests CouchDB deletes a database .
7365	Requests CouchDB creates a new database ; if one doesn t exist .
7366	Request a database sends a list of UUIDs .
7367	List directory contents for a resource folder . Not recursive . This is basically a brute - force implementation . Works for regular files and also JARs .
7368	Triggers a replication request .
7369	Queries for scalar values . Internal use .
7370	Reverses the reading direction not the sort order .
7371	Synchronize all design documents on desk to the database .
7372	Gets a design document from the database .
7373	Gets all design documents from desk .
7374	Gets a design document from desk .
7375	Adds a new document to the replicator database .
7376	Finds a document in the replicator database .
7377	Finds all documents in the replicator database .
7378	Removes a document from the replicator database .
7379	Finds an Object of the specified type .
7380	Find documents using a declarative JSON querying syntax .
7381	Checks if a document exist in the database .
7382	Performs bulk documents create and update request .
7383	Performs a HTTP PUT request saves or updates a document .
7384	Performs a HTTP PUT request saves an attachment .
7385	Performs a HTTP POST request .
7386	Performs a HTTP DELETE request .
7387	Validates a HTTP response ; on error cases logs status and throws relevant exceptions .
7388	Sets a JSON String as a request entity .
7389	Adds an in - line document attachment .
7390	Requests Change notifications of feed type normal .
7391	Reads and sets the next feed in the stream .
7392	Converts double value to the text description .
7393	Attempt to release any locks on shutdown so that other clients can obtain those locks without having to wait for them to expire .
7394	Writes the given Observable data to ServletOutputStream .
7395	functionality into a separate class .
7396	Intended to be used at the startup of the MetricsServiceImpl to ensure we have enough tables for processing
7397	Returns the namespace id for a particular namespace name
7398	Returns if the request is a query request eg to perform a READ
7399	Executed when a pooled connection is acquired .
7400	Determine the verb we should apply based on the HTTP method being requested .
7401	Generates a SubjectAccessReview object used to request if a user has a certain permission or not .
7402	Called when the Kubernetes master server reponse has been inspected .
7403	Called if an exception occurs at any stage in the process .
7404	eventually I would like service initialization async .
7405	This method is currently unused .
7406	Converts bucket points indexed by start time into a list ordered by start time . Blanks will be filled with empty bucket points .
7407	Changes the status code of the response sets the HTTP reason phrase and ends the exchange .
7408	Fetch all the data from a temporary table for the compression job . Using TokenRanges avoids fetching first all the metrics partition keys and then requesting them .
7409	Force bucket step .
7410	send msg .
7411	sene one way msg .
7412	send delay msg .
7413	In this simple proposal we re not testing complex iterations of scan cursor . SCAN is simply a wrapper for KEYS and the result is given in one single response no matter the COUNT argument .
7414	Use by loaders
7415	Add a file to the ZIP .
7416	Replace the contents of a file with a different text .
7417	Build a ZIP file containing the added entries .
7418	Generate a product from a single piece .
7419	Fetch the content for the specified content id .
7420	Fetch the content for the specified order item .
7421	Upload the transformation zip with the stylesheet into Archive .
7422	Generate a file by assembling components .
7423	Create a new directory in the given parent directory .
7424	End this builder .
7425	Registers a ModelAdaptor with the group . Override this method if you want to suppress one OOTB adaptor but not all .
7426	Registers a renderer with the group . Override this method if you want to suppress one OOTB renderer but not all .
7427	Prepares the template by adding the variables .
7428	Add a domain object to the batch of SIPs .
7429	Set the value of a property .
7430	Add an object that is to be owned by this object .
7431	Returns a supplier that creates sequentially named files in the given directory .
7432	Utility method to copy the bytes from an InputStream to an OutputStream while also assembling a hash value in the process .
7433	Parse the content of a given file into an XML document .
7434	Parse the content of a given reader into an XML document .
7435	Return the elements under a given parent element .
7436	Return the nodes under a given parent element .
7437	Return the first child element of a given parent element whose tag matches any of the given names . When no child names are given the first child element is returned .
7438	Return the elements under a given parent element whose tag matches any of the given names . When no child names are given all child elements are returned .
7439	Validate an XML document against an XML Schema document .
7440	Build a SIP archive from all files in a given directory tree .
7441	Sets the content .
7442	Sets the content from a named resource .
7443	Process a named entry in the ZIP file .
7444	Chinese characters transform
7445	Set signature and server time .
7446	remove WhiteSpace from MIME containing encoded Base64 data .
7447	When sending a request will call this method to sign with server .
7448	Set data in the upload with a recorder .
7449	Complete the multi upload .
7450	Invoking a FavoriteAction toggles it .
7451	Caller must insure that the state being set has not already been added to the entry to avoid multiple events with the same state .
7452	Helper method to determine if an SSPToken has expired .
7453	Get 1 notification by id .
7454	Get the set of addressees for a notification .
7455	Get a specific addressee
7456	Get the list of events for a notification .
7457	Get a specific event .
7458	Build the URL for a specific notification .
7459	Search for a JpaEntry with the specified Id . If the entry exists in the persistence context it is returned ; otherwise null is returned .
7460	Get the authentication token to use .
7461	Provides the total number of notifications contained in the response .
7462	Insert the given categories and their entries into the any existing categories of the same title . If a category doesn t match an existing one add it to the list .
7463	Fetch the set of SSP tasks for the uPortal user .
7464	Error handler .
7465	Map and SSP Response to a NotificationResponse .
7466	Map a single notification entry .
7467	Attach any SSP specific actions to this entry if enabled .
7468	Some of the links I have seen from SSP are not well formed . Try to convert any URLs to a usable form .
7469	Get the category name to use for SSP notifications .
7470	Get the source value to use for a Notification entry .
7471	Invoking a ReadAction toggles it .
7472	Deserialize the given JSON formatted file back into a object .
7473	Get the schoolId value from the request .
7474	Parse the person lookup response from SSP .
7475	Invoking a HideAction toggles it .
7476	Convenience method for obtaining the attributes in a more usable collection .
7477	Normalizes the point such that the Frobenius norm is 1 .
7478	Returns true if boxB is contained inside of or is identical to boxA .
7479	Find the closest point on the triangle to P .
7480	Returns the signed of the vector . If its in front it will be positive and negative if behind . In front is defined as being on the same side as the cross product of p2 - p0 and p1 - p0 .
7481	Set s this Se3_F64 to be identical to the provided transform .
7482	Fully specify the transform using Euler angles
7483	Converts a rectangle into a polygon
7484	Converts a polygon into a quadrilateral
7485	Finds the minimum area bounding rectangle around the quadrilateral .
7486	Finds the minimum area bounding rectangle around the quadrilateral that is aligned with coordinate system axises .
7487	Computes the center or average point in the quadrilateral .
7488	Computes the average of all the vertexes
7489	Computes the convex hull of the set of points .
7490	Removes a node from a polygon if the two lines its attached two are almost parallel
7491	Compute the error as a function of the distance between the model and target . The target is sampled at regular intervals and for each of these points the closest point on the model is found . The returned metric is the average of difference between paired points .
7492	Computes the area of the intersection between the two polygons .
7493	True if the point is contained inside the quadrilateral .
7494	Returns true of the the point is inside the triangle .
7495	Finds the point of intersection between two lines and returns the point .
7496	Finds the point of intersection between two lines segments .
7497	Finds the point of intersection between the two lines defined by the set sets of points passed in .
7498	Finds the point of intersection between a line and a line segment . The point of intersection is specified as the distance along the parametric line . If no intersection is found then Double . NaN is returned .
7499	Finds the area of the intersection of two polygons .
7500	Tests to see if the provided point lies on or is contained inside the ellipse
7501	Returns the area of the intersection of two rectangles .
7502	If the index is negative it returns the negative of the value at - index . Starts at 0
7503	Extracts quaternions from the provided rotation matrix .
7504	Creates a rotation matrix about the x - axis .
7505	Sets the values in the specified matrix to a rotation matrix about the x - axis .
7506	Creates a rotation matrix about the y - axis .
7507	Creates a rotation matrix about the z - axis .
7508	Sets the values in the specified matrix to a rotation matrix about the z - axis .
7509	Converts an Euler coordinate into a rotation matrix . Different type of Euler coordinates are accepted .
7510	Creates a rotation matrix about the specified axis .
7511	Sets the slope to the unit vector specified by the provided angle .
7512	Converts a rigid body motion into a twist coordinate . The value of theta used to generate the motion is assumed to be one .
7513	Specify the two transforms which values are to be interpolated between
7514	Interpolates a value between the first and second transform . A value close to 0 will be more similar to the initial and 1 more similar to the end .
7515	SVD based method for fitting a plane to a set of points . The plane s equation is returned as a point on the plane and the normal vector .
7516	SVD based method for fitting a plane to a set of points and a known point on the plane . The plane s equation is returned as a point on the plane and the normal vector .
7517	Resturns the length of the specified side that is composed of point index and index + 1
7518	Returns true if the point is inside the polygon . Points along the border are ambiguously considered inside or outside .
7519	Converts symmetric 3x3 matrix back into a conic .
7520	Converts the conic into a symmetric 3x3 matrix
7521	Converts the conic into a parabola . If the conic isn t a parabola then it is converted into one by adjusting the value of B .
7522	Converts the parabola into a conic .
7523	Divides each element by v
7524	Converts a GeoTuple3D_F64 into DMatrixRMaj
7525	Converts a DMatrixRMaj into GeoTuple3D_F64
7526	Assign the Rodrigues coordinates using a 3 element vector . Theta is the vector s magnitude and the axis of rotation is the unit vector .
7527	Angular distance between two half circle angles .
7528	Finds the line which is the intersection between the two planes . For a valid solution to be returned the planes must not be parallel to each other . If the planes are parallel then the slope of the returned line will have a value of zero for each element .
7529	Determines if the point on the same plane as T is contained inside of T .
7530	Finds the intersection of a line and sphere . There can be 0 1 or 2 intersections . If there is 1 intersection the same point is returned twice .
7531	Perform linear interpolation
7532	The unit eigenvector corresponding to the maximum eigenvalue of Q is the rotation parameterized as a quaternion .
7533	Computes the convex hull . The output will be in counter - clockwise order .
7534	Sets the provided transform so that it does not transform any points .
7535	Converts it into a 4 by 4 homogeneous matrix .
7536	Converts it into a 3 by 3 homogeneous matrix .
7537	Create SE3 using axis - angle for rotation and XYZ tanslation
7538	Can be used to see if two transforms are identical to within tolerance
7539	Converts latitude and longitude coordinates into a unit vector
7540	Given three points find the circle that intersects all three . If false is returned that means the points all lie along a line and there is no circle .
7541	Radius squares of the circle that passes through these three points .
7542	Returns the point which minimizes the distance between the two lines in 3D . If the two lines are parallel the result is undefined .
7543	Finds the closest point on a line to the specified point .
7544	Finds the closest point on the plane to the origin .
7545	Finds the closest point on a line segment to the specified point .
7546	Closest point from a 3D triangle to a point .
7547	Applies a 2D special euclidean transform to the point and stores the results in another variable .
7548	Applies a 2D special euclidean transform to an array of points .
7549	Returns true if the two quadrilaterals are equal to each other to within tolerance . Equality is defined by seeing if the distance between two equivalent vertexes is within tolerance .
7550	Returns the acute angle between the slope of two lines . Lines do not need to ever intersect . Found using the dot product .
7551	Converts a line from polar form to parametric .
7552	Converts a line from general to polar .
7553	Converts a line segment into a parametric line . The start point will be src . a and the direction will be in the direction of src . b - src . a
7554	Converts a line segment into a general line .
7555	Converts a line segment into a general line . Line segment is defined by two points .
7556	Converts a line segment into a line in parametric format . It will point from a to b . Point a and b must be unique .
7557	Converts a line from parametric to polar .
7558	Converts a line from parametric to general
7559	Converts a line from general to parametric
7560	Converts a plane in normal form into a general equation
7561	Converts a plane in tangent form into a plane in normal form
7562	Defines a plane using a 3D rigid body transform . + z is the 3rd column the rotation matrix . The plane s point is the translation . The plane reference frame is the x - y plane .
7563	Given a point on the plane s 2D coordinate system convert it back into a 3D point .
7564	Creates a transform from the plane s reference frame into world s reference frame . The z - axis is set to the plane s normal and the x - axis and y - axis are arbitrarily choosen . Points which lie along the plane will lie along its x - y plane .
7565	Checks to see if the two GeoTuple have values which are nearly the same . False is always returned if the dimension is different .
7566	Generic copy routine . It is recommended that this be overridden with a faster implementation .
7567	Computes the square of the Euclidean norm .
7568	Computes the value of T for a point on the parametric line
7569	Returns true if any of its parameters have an uncountable number
7570	Determines if they are equivalent up to a scale factor
7571	Computes and return the center of the cube .
7572	Computes the acute angle between the two lines . Does not check for intersection
7573	Checks to see if the homogenous 3D point lies on the plane at infinity
7574	Normally distributed homogenous 3D point . w is fixed
7575	Converts a point from homogenous coordinates into Euclidean
7576	Sets the vector equal to a - b .
7577	Tests to see if the two vectors are identical up to a sign difference
7578	Sets this rectangle to be equal to the passed in rectangle .
7579	Convert from rotated to quadratic .
7580	Computes the point on the ellipse at location t where t is an angle in radians
7581	Computes the value of t used to specify a point s location
7582	Computes the tangent to the ellipse at the specified location
7583	Selects a tangent point on the ellipse which is closest to the original source point of A .
7584	Used to retrieve the corners of the box .
7585	Distance of the closest point between two lines . Parallel lines are correctly handled .
7586	Distance from the point to the closest point on the line .
7587	Distance from the point to the closest point on the line segment .
7588	Distance between a plane and a point . A signed distance is returned where a positive value is returned if the point is on the same side of the plane as the normal and the opposite if it s on the other .
7589	Returns the signed distance a point is from the cylinder s surface . If the point is outside of the cylinder it s distance will be positive . If it is inside it will be negative .
7590	Finds the distance between the two line segments
7591	Finds the distance squared between the two line segments
7592	Returns the Euclidean distance of the closest point on the quadrilateral to the provided point .
7593	Returns the Euclidean distance squared of the closest point on the quadrilateral to the provided point .
7594	Returns the Euclidean distance of the closest point on the Polygon to the provided point .
7595	Returns the Euclidean distance squared of the closest point on the Polygon to the provided point .
7596	Returns the distance of the closest point on the line from the origin
7597	Euclidean distance of closest point on ellipse to point p .
7598	Euclidean distance squared of closest point on ellipse to point p .
7599	Adds the next transform in the sequence .
7600	Finds the closest point on the line segment to the provided point p .
7601	Computes the closest point on an ellipse to the provided point . If there are multiple solutions then one is arbitrarily chosen .
7602	Fits the polynomial curve to the data .
7603	Creates a random vector where each axis is selected from a uniform distribution .
7604	Selects a vector which will be perpendicular .
7605	Checks to see if the two vectors are identical to within tolerance . Each axis is checked individually .
7606	Rescales the vector such that its normal is equal to one .
7607	Creates a matrix from the set of column vectors . Each vector is a column in the new matrix .
7608	Converts matrices into vectors . All matrices must be vectors with 3 elements .
7609	Euclidean distance from the point
7610	Specifies the ellipse which point distance is going to be found from
7611	Converts the quaternion into a unit quaternion .
7612	Computes the area of an arbitrary triangle from 3 - vertices .
7613	Area of a quadrilateral computed from two triangles .
7614	Area of a simple polygon . Meaning it can be concave or convex but can t have self intersections
7615	Finds the point which has the mean location of all the points in the array . This is also known as the centroid .
7616	Puts the points into counter - clockwise order around their center .
7617	Computes the mean and covariance matrix from the set of points . This describes a normal distribution
7618	Determines if the polugon is convex or concave .
7619	In - place scalar multiplication
7620	Returns the absolute value of the component with the largest absolute value
7621	Euclidean distance between the two specified points
7622	Euclidean distance squared between the two specified points
7623	Randomly generates a set of points on the plane centered at the plane s origin using a uniform distribution .
7624	Creates a list of random points from a uniform distribution along each axis
7625	Creates a list of random points from a normal distribution along each axis
7626	Computes the mean of the list of points .
7627	Computes the mean of the list of points up to element num .
7628	Discards any cached principal for the given collection of credentials .
7629	Discards any cached principal for the collection of credentials satisfying the given predicate .
7630	Combine the given String collections into a set using case - insensitive matching . If there are multiple instances of the same string but with different capitalization only the first one found will be included .
7631	Get the set of features defined in the server . xml
7632	Gets features from the configDropins s defaults or overrides directory
7633	Adds features from the given server file into the origResult or a new set if origResult is null .
7634	Parse features from an include node .
7635	Parse feature elements from a featureManager node trimming whitespace and treating everything as lowercase .
7636	Download the JSON file for the given product .
7637	Gets the set of all Open Liberty features by scanning the product JSONs .
7638	Returns true if all features in featuresToInstall are Open Liberty features .
7639	Returns whether the reference collection contains all of the strings in the target collection ignoring case .
7640	Gets the next product version number .
7641	Extracts the bundle symbolic name from the jar manifest .
7642	Find latest install map jar from specified directory
7643	Returns whether file2 can replace file1 as the install map jar .
7644	Returns the extracted version from fileName
7645	Performs pairwise comparison of version strings including nulls and non - integer components .
7646	Runs the productInfo command and returns the output
7647	Check whether the given artifact is a Spring Boot Uber JAR
7648	Check that the given key exists in ArquillianProperties
7649	We assume any environment that is not headless will have a web browser to display the image in a web page .
7650	Create the moveBackToCenter recipe
7651	A convenience function to check if two objects are equal .
7652	Loads an int from a String .
7653	Ignore the following It s needed to run the deep dive
7654	Captures an image of the result of your program and displays it to you
7655	Create a copy of the puzzle where the blank swapped with the value in the target position
7656	Calculate the distance between the goal by summing the distance between each cell and its goal .
7657	Prints a formatted string to standard output using the specified format string and arguments and then flushes standard output .
7658	Prints a formatted string to standard output using the locale and the specified format string and arguments ; then flushes standard output .
7659	recipe for makeAFishyDecision with the numberOfFish
7660	Prints to screen any variable information to be viewed .
7661	Returns a random integer uniformly in [ a b ) .
7662	Returns a random real number uniformly in [ a b ) .
7663	Returns a random integer from a Poisson distribution with mean &lambda ; .
7664	Returns a random integer from the specified discrete distribution .
7665	Unit test .
7666	Capitalizes the first character of the word given . It will convert i to I
7667	Un capitalizes the first character of the word given . It will convert i to I
7668	Helps to fix path
7669	Generates Join Query for the given JoinCriteria
7670	Combines the token and cookie sentence
7671	Checks the expiration date of token . Renews and puts at header of response .
7672	Extracts the accesstoken from cookies
7673	Registers any Guice - bound providers or root resources .
7674	Fill permission list with role and sub - role permissions recursively .
7675	Adds a projection to this list of projections after wrapping it with an alias
7676	Creates an identical JobDetail instance from the given parameters .
7677	Creates an identical Trigger instance from the given annotation .
7678	Helps to set count and intervals
7679	Helps to set start and end times
7680	Takes the mail item into the queue and manages the mail sender thread . If thread is alive it will send the mail at the end of current thread queue . Else a new thread will be created and started .
7681	Called to write the message body .
7682	Initialize scheduler and start JobManager
7683	Returns an ordered list of the fields which belongs to the given class .
7684	Returns a map of the fields which belongs to the given class with field name as key .
7685	Parses or wraps the exception and transforms it to a human readable json loaded response .
7686	Configure method for Token generation configurations and encryptor configure
7687	Generates attribute has with userAgent remoteAddr keys . Combines them and hashes with SHA256 and sets the variable .
7688	Generates a tokenString with a new expiration date and assigns it .
7689	Sends a mail with the given item .
7690	Generate strong password that takes into account the user s information and old password . Implementations should verify that the new password does not include information such as the username fragments of the old password and other information that could be used to weaken the strength of the password .
7691	Changes the password for the specified user . This requires the current password as well as the password to replace it with . The new password should be checked against old hashes to be sure the new password does not closely resemble or equal any recent passwords for that UserEntry . Password strength should also be verified . This new password must be repeated to ensure that the user has typed it in correctly .
7692	Returns the UserEntry matching the provided accountName . If the accoundId is not found an Anonymous UserEntry or null may be returned .
7693	Returns a string representation of the hashed password using the accountName as the salt . The salt helps to prevent against rainbow table attacks where the attacker pre - calculates hashes for known strings . This method specifies the use of the user s account name as the salt value . The Encryptor . hash method can be used if a different salt is required .
7694	Ensures that the account name passes site - specific complexity requirements like minimum length .
7695	Ensures that the password meets site - specific complexity requirements like length or number of character sets . This method takes the old password so that the algorithm can analyze the new password to see if it is too similar to the old password . Note that this has to be invoked when the user has entered the old password as the list of old credentials stored by ESAPI is all hashed . Additionally the user object is taken in order to verify the password and account name differ .
7696	implemented just to GET method .
7697	If transaction is present and active then commit .
7698	If transaction is present and active then rollback .
7699	Starts the progress .
7700	roleOid . permissionOid . code
7701	Merges all path patterns and and creates a single string value which will be equal with service methods path annotation value and HTTP method type . Generated string will be used for permission checks .
7702	First it checks is there any annotation class for parsing operations if it is parses with given format if there is a exception while parsing with given format catches and tries with default values If there is no given format tries with static values
7703	Gets current response created with exception parameters .
7704	generates = equals
7705	! = not equals operator
7706	< less than operator
7707	< = less or equals than operator
7708	> greater than operator
7709	> = greater or equals than operator
7710	~ = contains than operator
7711	| = in list operator
7712	Update the list of declared namespaces with a new namespace .
7713	Adds or replaces the content of the representation .
7714	Define rel semantics for this representation .
7715	Replace the value of this resource with a new value optionally of a new type .
7716	Adds a new namespace .
7717	Returns whether the specified range in the given byte array represents valid UTF - 8 encoded characters .
7718	Returns the UTF - 8 encoding of the specified character sequence .
7719	Returns whether the given streams have the same content .
7720	Moves a file from one path to another . Named after the Unix command of the same name .
7721	Creates empty files at the specified paths or updates the last modification time of the files at the specified paths . Named after the Unix command of the same name .
7722	Returns the file name without its path or extension . This method is named after the basename Unix command .
7723	Adds the padding bits and the message length to the input data .
7724	Returns only the name of the given class that is without its package name and without its eventual outer class name .
7725	Returns all the super types of the given class that is all the classes in which any instance of the given class can be cast into .
7726	Verifies that the given password matches the hashed one .
7727	Reads the next line from the standard input using the given charset .
7728	Writes the given byte to this buffer .
7729	Writes the given data to this buffer .
7730	Returns a copy of the given array . The original array and the returned copy will have identical length and content .
7731	Adds the given value to this one and returns the result in reduced form .
7732	Subtracts the given value from this one and returns the result in reduced form .
7733	Multiplies this value by the given one and returns the result in reduced form .
7734	Divides this value by the given one and returns the result in reduced form .
7735	Returns the maximum of the given values .
7736	Returns the minimum of the given values .
7737	Checks the truth of the given condition checking parameters validity .
7738	Fetch a LocationforecastLTS from the MET API based on longitude latitude and altitude .
7739	Fetch a Sunrise from the MET API based on a given longitude latitude and date .
7740	Fetch a Sunrise from the MET API based on a given longitude latitude and date range .
7741	Get all point forecasts from now and to the given hours ahead .
7742	Get the most accurate forecast for the given date .
7743	Fetch a textforecast for a named forecast
7744	Create a longterm forecast but only with a small subset of the weather data fields . Typically for use in simple weather reports where you only show the predicted weather icon and temperature and not all the weather details .
7745	Create a longterm forecast .
7746	Create an untitled Location from coordinate string .
7747	Fetch a list of all available textforecasts .
7748	Create name for a wind symbol .
7749	Find matching Beaufort level for a given point forecast .
7750	Wrap the construction of URL s to avoid throwing of checked MalformedURLException . Instead MeteoException is thrown .
7751	Check if the sun is shining for a given time .
7752	Get the PointForecast that matches the given time .
7753	Find the period forecast that has the best fitted forecast for a given period .
7754	Fetch textforecasts and warnings for a geographical point or area in Norwegian .
7755	Fetch textforecasts and warnings for a geographical point or area .
7756	Checks connection retrieves appropriate changelog and performs database update .
7757	Calls a method on a script object compiled during a previous script execution which is retained in the state of the ScriptEngine .
7758	Return the referenced object potentially performing a remote DataStore lookup and deserialisation . If the object is already present or has been previously acquired it is immediately returned .
7759	Create a ReferencedObject that uses a remote reference to data present in an ObjectSource .
7760	Create a ReferencedObject that directly wraps an object without a reference .
7761	Acquire decode and decrypt a configuration object from a data stream .
7762	Checks whether the string substitution functionality should be enabled .
7763	Excludes all com . sun . jersey classes .
7764	Returns the Decoder that should be used to interpret the configuration files .
7765	Get all advertised service implementations of the specified interface .
7766	Retrieves a module by its simple name that implements a particular type T
7767	Return the referenced data as a stream potentially performing a remote lookup .
7768	Determine the size of the data .
7769	Create a ReferencedData instance that wraps data but also has a reference .
7770	Get the components of the Name at the specified numeric index
7771	Return a Name that consists of a subsection of the current Name .
7772	is an arc colored and hence on a color chain?
7773	exec - match regular expression
7774	cfindloop - the heart of cfind
7775	subset - set any subexpression relevant to a successful subre
7776	crevdissect - determine backref shortest - first subexpression matches The retry memory stores the offset of the trial midpoint from begin plus 1 so that 0 uniquely means clean slate .
7777	cbrdissect - determine backref subexpression matches
7778	cloneouts - copy out arcs of a state to another state pair modifying type
7779	optst - optimize a subRE subtree
7780	markst - mark tree nodes as INUSE
7781	nfanode - do one NFA for nfatree
7782	parse - parse an RE This is actually just the top level which parses a bunch of branches tied together with | . They appear in the tree as the left children of a chain of | subres .
7783	deltraverse - the recursive heart of delsub This routine s basic job is to destroy all out - arcs of the state .
7784	nonword - generate arcs for non - word - character ahead or behind
7785	word - generate arcs for word character ahead or behind
7786	scannum - scan a number
7787	bracket - handle non - complemented bracket expression Also called from cbracket for complemented bracket expressions .
7788	scanplain - scan PLAIN contents of [ . etc . Certain bits of trickery in lex . c know that this code does not try to look past the final bracket of the [ . etc .
7789	newlacon - allocate a lookahead - constraint subRE
7790	onechr - fill in arcs for a plain character and possible case complements This is mostly a shortcut for efficient handling of the common case .
7791	dovec - fill in arcs for each element of a cvec all kinds of MCCE complexity removed .
7792	Retrieve the color for a character .
7793	pseudocolor - allocate a false color to be managed by other means .
7794	subrange - allocate new subcolors to this range of chars fill in arcs . The range will overlap existing ranges ; even in the simplest case it will overlap the initial WHITE range . For each existing range that it overlaps allocate a new color mark the range as mapping to that color and add an arc between the states for that color .
7795	okcolors - promote subcolors to full colors
7796	colorchain - add this arc to the color chain of its color
7797	uncolorchain - delete this arc from the color chain of its color
7798	dumpcolors - debugging output
7799	lexstart - set up lexical stuff scan leading options
7800	prefixes - implement various special prefixes
7801	lexnest - call a subroutine interpolating string at the lexical level Note this is not a very general facility . There are a number of implicit assumptions about what sorts of strings can be subroutines .
7802	Retrieve the color for a full codepoint .
7803	Called at the start of a match . arguably we could just construct a new DFA each time .
7804	lastcold - determine last point at which no progress had been made
7805	eclass - Because we have no MCCE support this just processing single characters .
7806	Return a UnicodeSet for a character class name . It appears that the names that TCL accepts are also acceptable to ICU .
7807	carcsort - sort compacted - NFA arcs by color Really dumb algorithm but if the list is long enough for that to matter you re in real trouble anyway .
7808	dumpst - dump a subRE tree
7809	Factory method for new states .
7810	moveouts - move all out arcs of a state to another state
7811	moveins - move all in arcs of a state to another state You might think this could be done better by just updating the existing arcs and you would be right if it weren t for the desire for duplicate suppression which makes it easier to just make new ones to exploit the suppression built into newarc .
7812	copyins - copy all in arcs of a state to another state
7813	copyouts - copy all out arcs of a state to another state
7814	get rid of a state releasing all its arcs . I m not sure that all this is needed as opposed to depending on the GC .
7815	Unwire a state from the NFA .
7816	cparc - allocate a new arc within an NFA copying details from old one
7817	duptraverse - recursive heart of dupnfa
7818	specialcolors - fill in special colors for an NFA
7819	dumpnfa - dump an NFA in human - readable form
7820	dumpstate - dump an NFA state in human - readable form
7821	dumparcs - dump out - arcs in human - readable form
7822	dumprarcs - dump remaining outarcs recursively in reverse order
7823	dumparc - dump one outarc in readable form including prefixing tab
7824	optimize - optimize an NFA
7825	analyze - ascertain potentially - useful facts about an optimized NFA
7826	combine - constraint lands on an arc what happens?
7827	cleanup - clean up NFA after optimizations
7828	markreachable - recursive marking of reachable states
7829	markcanreach - recursive marking of states which can reach here
7830	fixempties - get rid of EMPTY arcs
7831	unempty - optimize out an EMPTY arc if possible Actually as it stands this function always succeeds but the return value is kept with an eye on possible future changes .
7832	Reads the given rule parameters file .
7833	Get all configured rule interpreter plugins .
7834	Get all configured report plugins .
7835	Return the selection of rules .
7836	Run tasks according to the given arguments .
7837	Extract an error message from the given exception and its causes .
7838	Gathers the standard options shared by all tasks .
7839	Gathers the task specific options for all tasks .
7840	Returns a string containing the names of all supported tasks .
7841	Parse the command line and execute the requested task .
7842	Parse the command line
7843	Executes a task .
7844	Read the plugin properties file if specified on the command line or if it exists on the class path .
7845	Print usage information .
7846	Determine the JQASSISTANT_HOME directory .
7847	Create the class loader to be used for detecting and loading plugins .
7848	Identify which countries are guaranteed to contain the given bounding box fully . The given bounding box may wrap around the 180th longitude i . e minLongitude = 170 and maxLongitude = - 170 .
7849	Identify which countries intersect with the given bounding box . The given bounding box may wrap around the 180th longitude i . e minLongitude = 170 and maxLongitude = - 170 .
7850	Given a target and params this method tries to do the reverse routing and returns the URI .
7851	This method does nothing if the path pattern has already been added . A path pattern can only point to one target .
7852	Returns the number of routes in this router .
7853	Adds route to the first section .
7854	Adds route to the other section .
7855	Adds route to the last section .
7856	Checks if there s any matching route .
7857	There are two different Criterion for if a property is null or checking equality . This is a convience method to return the one based on if value is null or not .
7858	Generates the file name String for an owner and book name .
7859	Folders are always greater than non - Folders if they are both Folders or both not Folders they are equal .
7860	Compairs the entries by name note created and modified properties in that order .
7861	If both classes are not Bookmarks they are equal . If they are both bookmarks they are compared by url then newWindow properties .
7862	Sets the last - modified time of the servlet class file associated with this JspServletWrapper .
7863	Get a list of files that the current page has source dependency on .
7864	START OF IASRI 4709374
7865	Parse the basic authentication header
7866	Generated Servlet and Tag Handler implementations call this method to retrieve an instance of the ProtectedFunctionMapper . This is necessary since generated code does not have access to create instances of classes in this package .
7867	Stores a mapping from the given EL function prefix and name to the given Java method .
7868	Creates an instance for this class and stores the Method for the given EL function prefix and name . This method is used for the case when there is only one function in the EL expression .
7869	Resolves the specified local name and prefix into a Java . lang . Method . Returns null if the prefix and local name are not found .
7870	Initializes the contents of the XMLString structure with the specified values .
7871	Resolves the specified variable within the given context . Returns null if the variable is not found .
7872	Parses a JSP page or tag file . This is invoked by the compiler .
7873	Processes an include directive with the given path .
7874	Extracts tag file directive information from the tag file with the given name .
7875	Parses the JSP page or tag file with the given path name .
7876	Create a Compiler object .
7877	Gets a resource as a stream relative to the meanings of this context s implementation .
7878	Find the last modification timestamp of all channels
7879	We assume that the bootclassloader never uses the context classloader to find classes in itself .
7880	not be used as a delegate otherwise we endup in endless recursion .
7881	False is returned when a cycle is being detected
7882	Reads the Stream Header into a buffer . This is a helper function for the constructors .
7883	Paginate from a full data set
7884	Convert a string to a MetaKey if possible
7885	Fill extra requirements the RPM file itself may have
7886	Checks to see if the given tag name maps to a tag file path and if so parses the corresponding tag file .
7887	Parses the JSP version and tlib - version from the implicit . tld at the given path .
7888	Get the digest of a closed file
7889	Get the size of a closed file
7890	Validate the name of the channel
7891	Seeks to the beginning of the given XZ Block .
7892	Locates the Block that contains the given uncompressed position .
7893	Get a list of all relevant maven artifacts
7894	Updates the state and reps for the current byte in the opts array .
7895	Calculates prices of a literal a short rep and literal + rep0 .
7896	Calculates prices of long rep and long rep + literal + rep0 .
7897	Calculates prices of a normal match and normal match + literal + rep0 .
7898	Throws an exception for expected byte .
7899	Throws an exception for invalid byte .
7900	Scan the all the tlds accessible in the web app . For performance reasons this is done in two stages . At servlet initialization time we only scan the jar files for listeners . The container passes a list of system jar files that are known to contain tlds with listeners . The rest of the jar files will be scanned when a JSP page with a tld referenced is compiled .
7901	Scan the given TLD for uri and listeners elements .
7902	Add a new JspServletWrapper .
7903	Get the parent class loader .
7904	Save the bytecode for the class in a map . The current time is noted .
7905	Retrieve the time the bytecode for a class was created
7906	Save the bytecode for a class to disk .
7907	Method used by background thread to check the JSP dependencies registered with this class for JSP s .
7908	Method used to initialize classpath for compiles .
7909	Start the background thread that will periodically check for changes to compile time included files in a JSP .
7910	Stop the background thread that is periodically checking for changes to compile time included files in a JSP .
7911	The background thread that checks for changes to files included by a JSP and flags that a recompile is required .
7912	Find a channel by name
7913	Find a channel
7914	Update the channel to deploy group cache map
7915	methods of DeployAuthService
7916	Copy the remaining content of one stream to the other
7917	The main entry for Parser
7918	Parse Attributes for a reader provided for external use
7919	may be send to EL processor .
7920	Add a list of files . This is used for implementing include - prelude and include - coda of jsp - config element in web . xml
7921	Attempts to parse JspAttributeAndBody production . Returns true if it matched or false if not . Assumes EmptyBody is okay as well .
7922	Add an attribute to this node replacing any existing attribute with the same name .
7923	Add a new child node to this node .
7924	Return an Iterator of the attribute names of this node . If there are no attributes an empty Iterator is returned .
7925	Return an Iterator of all children of this node . If there are no children an empty Iterator is returned .
7926	Return an Iterator over all children of this node that have the specified name . If there are no such children an empty Iterator is returned .
7927	Create a new instance without classifier and extension
7928	Checks to see if the given variable name is used as an alias and if so returns the variable name for which it is used as an alias .
7929	Start capturing thread s output .
7930	Stop capturing thread s output and return captured data as a String .
7931	Find PrintStream to which the output must be written to .
7932	Write field only when the value is set
7933	Write a field
7934	Create a new element and add it as the last child
7935	Create a new element and add it as the first child
7936	Write the contents of this BodyJspWriter into a Writer . Subclasses are likely to do interesting things with the implementation so some things are extra efficient .
7937	Sets the writer to which all output is written .
7938	Reallocates buffer since the spec requires it to be unbounded .
7939	Creates the functions mappers for all EL expressions in the JSP page .
7940	Traverse up from the provided parent and find the first which uses the same key
7941	Register a new model with the storage manager
7942	Stream directly from the storage
7943	Monitor the job only produces an HTML fragment of the current job state
7944	Simply test if the request is authenticated against the channels deploy keys
7945	Complete the document but don t close the underlying writer
7946	Make an appropriate Gson parser to processing ChannelData instances
7947	Compresses for LZMA2 .
7948	Return an unmodifiable map of provided and extracted meta data
7949	Returns the value of the javax . servlet . error . exception request attribute value if present otherwise the value of the javax . servlet . jsp . jspException request attribute value .
7950	Check if the uploaded artifact is actually a checksum file
7951	Finishes the stream without closing the underlying OutputStream .
7952	Returns the exception associated with this page context if any .
7953	Evaluates an EL expression
7954	Make the prefix by guessing the port from the OSGi settings
7955	Test if this file is an XML file
7956	Parses the tag file and collects information on the directives included in it . The method is used to obtain the info on the tag file when the handler that it represents is referenced . The tag file is not compiled here .
7957	Compiles and loads a tagfile .
7958	Removed the java and class files for the tag prototype generated from the current compilation .
7959	END GlassFish 750
7960	Base dir for the webapp . Used to generate class names and resolve includes
7961	Locate all jsp files in the webapp . Used if no explicit jsps are specified .
7962	Find the WEB - INF dir by looking up in the directory tree . This is used if no explicit docbase is set but only files . XXX Maybe we should require the docbase .
7963	START SJSAS 6327357
7964	Moves to the next byte checks that there is enough available space and possibly normalizes the hash tables and the hash chain .
7965	search the stream for a match to a string
7966	Looks ahead to see if there are optional spaces followed by the given String . If so true is returned and those spaces and characters are skipped . If not false is returned and the position is restored to where we were before .
7967	Skip until the given string is matched in the stream . When returned the context is positioned past the end of the match .
7968	Skip until the given string is matched in the stream but ignoring chars initially escaped by a \ . When returned the context is positioned past the end of the match .
7969	Skip until the given end tag is matched in the stream . When returned the context is positioned past the end of the tag .
7970	Parse a space delimited token . If quoted the token will consume all characters up to a matching quote otherwise it consumes up to the first delimiter character .
7971	Pop a file from the file stack . The field current is retored to the value to point to the previous files if any and is set to null otherwise .
7972	Create an unclassified version of ourself
7973	Filter the provided aspect lists by a predicate on the ID
7974	Get all aspect ids which are currently missing but required by this aspect
7975	Sets the path prefix URL for . xsd resources
7976	Sets the path prefix URL for . dtd resources
7977	END PWC 6386258
7978	Create and return a TreeNode that corresponds to the specified Node including processing all of the attributes and children nodes .
7979	Merge all errors of this binding into this result
7980	Initialize the binder with our current state
7981	This actively scans for available aspects and returns their information objects
7982	Returns an unqualified version of the given file path .
7983	Invoke tag plugin for the given custom tag if a plugin exists for the custom tag s tag handler .
7984	Allocates a new byte array hopefully reusing an existing array from the cache .
7985	This is like getByteArray but for int arrays .
7986	Convert aether result list to AetherResult object
7987	the following is a workaround until these problems are resolved .
7988	Translation - time validation of the XML document associated with the JSP page . This is a convenience method on the associated TagLibraryValidator class .
7989	Sets this mark s state to a new stream . It will store the current stream in it s includeStack .
7990	Autodetects the encoding of the XML document supplied by the given input stream .
7991	org . apache . xerces . impl . XMLDocumentScannerImpl . dispatch
7992	Convenience function used in all XML scanners .
7993	Return the real path for the specified context - relative virtual path .
7994	Return a URL object of a resource that is mapped to the specified context - relative path .
7995	Return an InputStream allowing access to the resource at the specified context - relative path .
7996	Return the set of resource paths for the directory at the specified context path .
7997	Log the specified message and exception .
7998	Adds the filter with the given name description and class name to this servlet context .
7999	Gets the size of the LZ window buffer that needs to be allocated .
8000	Gets approximate memory usage of the LZEncoder base structure and the match finder as kibibytes .
8001	Sets a preset dictionary . If a preset dictionary is wanted this function must be called immediately after creating the LZEncoder before any data has been encoded .
8002	Moves data from the end of the buffer to the beginning discarding old data and making space for new input .
8003	Copies new data into the LZEncoder s buffer .
8004	Process pending bytes remaining from preset dictionary initialization or encoder flush operation .
8005	Get the length of a match at the given distance .
8006	Get the length of a match at the given distance and forward offset .
8007	Verifies that the matches returned by the match finder are valid . This is meant to be used in an assert statement . This is totally useless for actual encoding since match finder s results should naturally always be valid if it isn t broken .
8008	Moves to the next byte checks if there is enough input available and returns the amount of input available .
8009	Package - level access
8010	Flush the output buffer to the underlying character stream without flushing the stream itself . This method is non - private only so that it may be invoked by PrintStream .
8011	Discard the output buffer .
8012	Flush the stream .
8013	Close the stream .
8014	Attempt to write a String pre - encoded with the page encoding .
8015	END PWC 6512276
8016	Processes the given javac error report and exception .
8017	Make a key from the aggregator fields
8018	Compile the servlet from . java file to . class file
8019	Compile the jsp file from the current engine context . As an side - effect tag files that are referenced by this page are also compiled .
8020	Remove generated files
8021	Get an instance of JavaCompiler . If Running with JDK 6 use a Jsr199JavaCompiler that supports JSR199 else if eclipse s JDT compiler is available use that . The default is to use javac from ant .
8022	Return true if the path refers to a jar file in WEB - INF and is a system jar .
8023	Single quote and escape a character
8024	Generates declarations . This includes info of the page directive and scriptlet declarations .
8025	Compiles list of tag handler pool names .
8026	Generates an XML Prolog which includes an XML declaration and an XML doctype declaration .
8027	Common part of postamble shared by both servlets and tag files .
8028	Generates the ending part of the static portion of the servlet .
8029	The main entry for Generator .
8030	Generates declarations for tag handler attributes and defines the getter and setter methods for each .
8031	Read in a map of properties
8032	Export the content of a channel
8033	Validate XML view against the TagLibraryValidator classes of all imported tag libraries .
8034	Gets the next available tag handler from this tag handler pool instantiating one if this tag handler pool is empty .
8035	Parse an EL expression
8036	Select the property group that has more restrictive url - pattern . In case of tie select the first .
8037	To find out if an uri matches an url pattern in jsp config . If so then the uri is a JSP page . This is used primarily for jspc .
8038	Print a standard comment for echo outputed chunk .
8039	Prints the current indention followed by the given string
8040	Prints the current indention and then the string and a \ n .
8041	Prints the given string .
8042	Takes a potential expression and converts it into XML form
8043	Checks to see if the given scope is valid .
8044	Escape the 5 entities defined by XML .
8045	Validates the syntax of all EL expressions within the given string .
8046	Gets the fully - qualified class name of the tag handler corresponding to the given tag file path .
8047	Converts the given path to a Java package or fully - qualified class name
8048	Splits a string into it s components .
8049	Converts the given identifier to a legal Java identifier
8050	Mangle the specified character to create a legal Java class name .
8051	Test whether the argument is a Java keyword
8052	Add property entry only of value is not null
8053	Convert a modifier value to a bootstrap type modifier
8054	Get all meta data values which match namespace and key
8055	Clean up timed out user registrations
8056	Get the last segment of a path the filename
8057	returns true if updated .
8058	implements the CacheLoader interface .
8059	type comparisions we use to determine how to serialize a number .
8060	resolve a number to a Long or double .
8061	writes object to CodedOutputStream .
8062	Gets the TTL for a particular locator rollupType and granularity .
8063	Create all prepared statements use in this class for metrics_locator
8064	This method is used to log delayed metrics if tracking delayed metrics is turned on for this Blueflood service .
8065	This method logs the delayed aggregated metrics for a particular tenant if tracking delayed metric is turned on for this Blueflood service . Aggregated metrics have one single timestamp for the group of metrics that are sent in one request .
8066	read out a type - specified number .
8067	put out a number prefaced only by a type .
8068	Convert the existing configuration values into a Map including those specified in defaultProps .
8069	idempotent other than when the month changes between two calls
8070	only one thread should be calling in this puppy .
8071	Remove the given slot from the running group after it has been successfully re - rolled .
8072	Listens on the event .
8073	Adds a one time listener for the event .
8074	Removes all listeners of the specified event .
8075	Executes each of listeners with the given args .
8076	Returns a list of listeners for the specified event .
8077	Get the remote file name .
8078	Serialize a Rollup Event and append it to the file .
8079	Parse the timestamp from a filename .
8080	Starts the Ingest server
8081	determine which DataType to use for serialization .
8082	Returns an instance of this class based on what configuration says our driver should be .
8083	Helper function to build the ttl mapping . Only insert to the mapping if the value is a valid date .
8084	compute the maximum width for each field across a collection of formatters .
8085	formats a header row after maximums have been established .
8086	formats results and sets formattedStrings .
8087	Registers the different ZooKeeper metrics .
8088	Set the threadpool name . Used to generate metric names and thread names .
8089	For a given metricIndex and docCount classifies the data with respect to baseLevel and stores it accordingly .
8090	Compares actualDocCount and total docCount of its immediate children of an index to determine if the metric index is a complete metric name or not .
8091	This method return list of tokens with their parents for a current Discovery object .
8092	Asynchronously insert a rolled up metric to the appropriate column family for a particular granularity
8093	Return granularity that maps most closely to requested number of points based on provided selection algorithm
8094	Find the granularity in the interval that will yield a number of data points that are closest to the requested points but < = requested points .
8095	set the server time in millis .
8096	Retrieves the set of unique Cassandra hosts from configuration file . If a single host appears multiple times in the configuration only one will be listed .
8097	Calculates the number of max connections per Cassandra hosts
8098	iterate over all column families that store metrics .
8099	Inserts a collection of metrics to the metrics_preaggregated_full column family
8100	Inserts a collection of metrics to the correct column family based on the specified granularity
8101	This methods gets locators to rollup a slot .
8102	Performs terms aggregation by metric_name which returns doc_count by metric_name index that matches the given regex .
8103	Returns regex which could grab metric names from current level to the next level for a given query .
8104	Start background storage management and uploading tasks .
8105	Stop background storage management .
8106	Checks if Locator is recently inserted in the batch layer
8107	Checks if Locator is recently inserted in the discovery layer
8108	Checks if Locator is recently inserted in the token discovery layer
8109	Check if the delayed locator is recently inserted for a given slot
8110	Marks the delayed locator as recently inserted for a given slot
8111	Returns a mapping of ranges in the coarser granularity to the sub - ranges in finer granularity
8112	return the Ranges for an interval at this granularity
8113	single column updates ) .
8114	generic IMetric insertion . All other metric insertion methods could use this one .
8115	Determines if the metric is considered delayed or not
8116	Returns a BoundStatement if a metric needs to be inserted to the metrics_delayed_locator Column Family . Returns null otherwise .
8117	Method that returns all metadata for a given locator as a map .
8118	return a serializer for a specific type
8119	Checks the Content - Type header to see if clients specify the right media type
8120	Checks the Accept header to see if clients accept the correct media type
8121	REST call to index into ES
8122	This method is invoked by the validator automatically
8123	gets run by the thread .
8124	Returns an Extractor instance appropriate based on the given configuration .
8125	Decides if the operating system matches .
8126	Starts the RabbitMQ server process and blocks the current thread until the initialization is completed .
8127	Submits the command to stop RabbitMQ and blocks the current thread until the shutdown is completed .
8128	The default parameters for media constraints . Might have to tweak in future .
8129	Append default servers to the end of given list and set as iceServers instance variable
8130	Instantiate iceServers if they are not already and add Ice Server to beginning of list .
8131	Send a custom JSONObject user message to a single peer .
8132	Send a custom JSONObject user message to all peers .
8133	Gets the value of the weitereAdresse property .
8134	Gets the value of the userDefinedSimplefield property .
8135	Gets the value of the userDefinedAnyfield property .
8136	Sets the value of the apiSuchfelder property .
8137	Gets the value of the multimediaAnhang property .
8138	Gets the value of the statusVBM property .
8139	Gets the value of the statusIS24 property .
8140	Gets the value of the statusHP property .
8141	Gets the value of the importmodus property .
8142	Gets the value of the adressdruck property .
8143	Gets the value of the waehrung property .
8144	Gets the value of the bodenbelag property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the rentCollectionPeriod property .
8150	Sets the value of the furnished property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the epart property .
8160	Sets the value of the jahrgang property .
8161	Sets the value of the gebaeudeart property .
8162	Sets the value of the bueroTyp property .
8163	Test if a string contains a parsable number .
8164	Sets the value of the gebiete property .
8165	Sets the value of the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property property .
8168	Sets the value of the stand property .
8169	Gets the value of the userDefinedExtend property .
8170	Sets the value of the zeiteinheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haus property .
8173	Gets the value of the bueroPraxen property .
8174	Gets the value of the gastgewerbe property .
8175	Gets the value of the landUndForstwirtschaft property .
8176	Gets the value of the sonstige property .
8177	Gets the value of the zinshausRenditeobjekt property .
8178	Gets the value of the terrain property .
8179	Sets the value of the umfang property .
8180	Sets the value of the wohnungtyp property .
8181	Return an ISO - 2 country code from a country name .
8182	Create an ISO - 2 country code from an ISO - 3 country code .
8183	Return an ISO - 3 country code from a country name .
8184	Create an ISO - 3 country code from an ISO - 2 country code .
8185	Return a country name in another language .
8186	Translate a country name into another language .
8187	Gets the value of the anbieter property .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the aktionart property .
8191	Sets the value of the realestateitems property .
8192	Sets the value of the pacht property .
8193	Downgrade an OpenImmo document from version 1 . 2 . 7 to 1 . 2 . 6 .
8194	Upgrade an OpenImmo document from version 1 . 2 . 6 to 1 . 2 . 7 .
8195	Gets the value of the content property .
8196	Returns the names of specified fields .
8197	Sets the value of the blick property .
8198	Sets the value of the pauschalmiete property .
8199	Sets the value of the monatsmiete property .
8200	Gets the value of the parkplatz property .
8201	Sets the value of the lastenaufzug property .
8202	Sets the value of the zustandArt property .
8203	Gets the value of the feld property .
8204	Receive notification of a validation warning or error .
8205	Write content of the record in a human readable form .
8206	Returns the value of the record at a certain index position .
8207	Returns a list of values for this record as they are written into CSV .
8208	Sets the value of this record at a certain index position .
8209	Sets the value of the ctype property .
8210	Sets the value of the haustyp property .
8211	Gets the value of the energiepass property .
8212	Sets the value of the keller property .
8213	Sets the value of the grundstTyp property .
8214	Sets the value of the geschlAttr property .
8215	Sets the value of the hallenTyp property .
8216	Gets the value of the wiederholungstermin property .
8217	Gets the value of the teilungsversteigerung property .
8218	Upgrade an OpenImmo document from version 1 . 2 . 2 to 1 . 2 . 3 .
8219	Gets the value of the bevorzugt property .
8220	Gets the value of the wunsch property .
8221	Sets the value of the art property .
8222	Sets the value of the modus property .
8223	Gets the value of the emailSonstige property .
8224	Gets the value of the telSonstige property .
8225	Sets the value of the handelTyp property .
8226	Downgrade an OpenImmo document from version 1 . 2 . 6 to 1 . 2 . 5 .
8227	Sets the value of the apiSuchfeld1 property .
8228	Sets the value of the apiSuchfeld2 property .
8229	Sets the value of the apiSuchfeld3 property .
8230	Gets the value of the row property .
8231	Sets the value of the distanzZuSport property .
8232	Gets the value of the anhang property .
8233	Gets the value of the objektKategorie2 property .
8234	Gets the value of the objektzustand property .
8235	Gets the value of the hausKategorie property .
8236	Gets the value of the ausstattungsqualitaet property .
8237	Gets the value of the vermarktungsart property .
8238	Gets the value of the interessent property .
8239	Sets the value of the wert property .
8240	Sets the value of the ackerland property .
8241	Sets the value of the bauerwartungsland property .
8242	Sets the value of the bootsstaende property .
8243	Sets the value of the buero property .
8244	Sets the value of the camping property .
8245	Sets the value of the doppelhaus property .
8246	Sets the value of the einfamilienhaus property .
8247	Sets the value of the einzelhandelGross property .
8248	Sets the value of the einzelhandelKlein property .
8249	Sets the value of the garagen property .
8250	Sets the value of the garten property .
8251	Sets the value of the gastronomie property .
8252	Sets the value of the gewerbe property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industrie property .
8255	Sets the value of the keineBebauung property .
8256	Sets the value of the kleingewerbe property .
8257	Sets the value of the lager property .
8258	Sets the value of the mehrfamilienhaus property .
8259	Sets the value of the obstpflanzung property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the produktion property .
8262	Sets the value of the reihenhaus property .
8263	Sets the value of the stellplaetze property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the anbieter property .
8267	Gets the value of the wohnung property .
8268	Gets the value of the grundstueck property .
8269	Gets the value of the einzelhandel property .
8270	Gets the value of the hallenLagerProd property .
8271	Gets the value of the parken property .
8272	Gets the value of the freizeitimmobilieGewerblich property .
8273	Gets the value of the objektartZusatz property .
8274	Gets the value of the stellplatzart property .
8275	Sets the value of the maxDauer property .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmertyp property .
8278	Upgrade an OpenImmo document from version 1 . 2 . 4 to 1 . 2 . 5 .
8279	Sets the value of the keineAngabe property .
8280	Sets the value of the erdwaerme property .
8281	Sets the value of the solarheizung property .
8282	Sets the value of the pelletheizung property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernwaerme property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Generate a random string with ASCII letters and digits .
8289	Generate a random string with ASCII letters .
8290	Generate a random string with ASCII digits .
8291	Gets the value of the wohnungKategorie property .
8292	Sets the value of the benutzer property .
8293	Sets the value of the objekte property .
8294	Gets the value of the feed property .
8295	Sets the value of the moeb property .
8296	Gets the value of the serviceleistungen property .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city property .
8299	Sets the value of the locality property .
8300	Downgrade an OpenImmo document from version 1 . 2 . 1 to 1 . 2 . 0 .
8301	Upgrade an OpenImmo document from version 1 . 2 . 0 to 1 . 2 . 1 .
8302	Sets the value of the landTyp property .
8303	Gets the value of the field property .
8304	Upgrade an OpenImmo document from version 1 . 1 to 1 . 2 . 0 .
8305	Gets the value of the ad property .
8306	Sets the value of the gastgewTyp property .
8307	Sets the value of the platzart property .
8308	Gets the value of the datenVerkabelung property .
8309	Gets the value of the klimaanlage property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2Rating property .
8315	Sets the value of the energyRating property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the bebaubarAttr property .
8320	Upgrade an OpenImmo document from version 1 . 2 . 3 to 1 . 2 . 4 .
8321	Sets the value of the parkenTyp property .
8322	Sets the value of the alterAttr property .
8323	Sets the value of the freizeitTyp property .
8324	Sets the value of the telefonart property .
8325	Sets the value of the emailart property .
8326	Sets the value of the overseasSales property .
8327	Sets the value of the overseasRental property .
8328	Helper method to create a &lt ; user_defined_simplefield&gt ; element with a feldname attribute and a string value .
8329	Gets the value of the fehler property .
8330	Sets the value of the erbpacht property .
8331	Gets the value of the stpSonstige property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minDauer property .
8334	Sets the value of the zinsTyp property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the value of the properties property .
8339	Downgrade a Kyero document from version 3 .
8340	Upgrade a Kyero document to version 3 .
8341	Gets the value of the immobilie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehlerliste property .
8344	Gets the value of the status property .
8345	Sets the value of the sonstigeTyp property .
8346	Sets the value of the distanzZu property .
8347	Gets the value of the distanzen property .
8348	Gets the value of the distanzenSport property .
8349	Check whether the given exception is compatible with the exceptions declared in a throws clause .
8350	Sets the bindings for this namespace context . The supplied map must consist of string key value pairs .
8351	Binds the given prefix to the given namespace .
8352	Removes the given prefix from this context .
8353	Does the supplied content contain an XML opening tag . If the parse state is currently in an XML comment then this method always returns false . It is expected that all comment tokens will have consumed for the supplied content before passing the remainder to this method .
8354	Consumes all the leading comment data in the given String and returns the remaining content which may be empty since the supplied content might be all comment data . For our purposes it is only important to strip leading comment content on a line since the first piece of non comment content will be either the DOCTYPE declaration or the root element of the document .
8355	Consume the next comment token update the inComment flag and return the remaining content .
8356	Try to consume the supplied token against the supplied content and update the in comment parse state to the supplied value . Returns the index into the content which is after the token or - 1 if the token is not found .
8357	Initialize log4j from the given file location with no config file refreshing . Assumes an XML file in case of a . xml file extension and a properties file otherwise .
8358	Binds the given prefix to the given namespaces .
8359	Add given iterator to this composite .
8360	Add the specified Option to the list of accepted options
8361	Convenience method for adding a string option .
8362	Convenience method for adding an integer option .
8363	Convenience method for adding a long integer option .
8364	Convenience method for adding a double option .
8365	Convenience method for adding a boolean option .
8366	Extract the options and non - option arguments from the given list of command - line arguments . The specified locale is used for parsing options whose values might be locale - specific .
8367	Dynamic instantiation of the given type with singleton retrieval support as described in this class description .
8368	To be invoked after the main execution logic of concrete subclasses .
8369	Set the target object on which to call the target method . Only necessary when the target method is not static ; else a target class is sufficient .
8370	Prepare the specified method . The method can be invoked any number of times afterwards .
8371	Find a matching method with the specified name for the specified arguments .
8372	Convert the integer to an unsigned number .
8373	Serialize the given object to a byte array .
8374	Deserialize the byte array into an object .
8375	Utility method that returns the first child element identified by its name .
8376	Utility method that returns the first child element value identified by its name .
8377	Retrieves all child elements of the given DOM element
8378	Matches the given node s name and local name against the given desired name .
8379	Matches the given node s name and local name against the given desired names .
8380	Appends the necessary amount of spaces to the string until it has the givn length . No Exception is thrown if the length of the String is shorter than the given length but nothing will happen and a message will be printed to the System . out .
8381	Start to monitor given handle object for becoming weakly reachable . When the handle isn t used anymore the given listener will be called .
8382	Add entry to internal map of tracked entries . Internal monitoring thread is started if not already running .
8383	Check whether to keep the monitoring thread alive i . e . whether there are still entries being tracked .
8384	Test the phone number from which the city is using Taobao API
8385	Starts the prefix mapping for the given prefix .
8386	Ends the prefix mapping for the given prefix .
8387	Adds the given callback to this registry .
8388	Build a Tree from the entries .
8389	Calculates text color for specified item based on its position and state .
8390	Sets values to choose from
8391	Calculates color for specific position on time picker
8392	Sets text size for items
8393	Calculates x scroll position that is still in range of view scroller
8394	The introduction is stored in a text file resource because it is easier to edit than String constants .
8395	Get an array containing the names of the keywords that the library implements .
8396	Get an array of argument specifications for the given keyword .
8397	Get documentation for given keyword .
8398	Main method for command line usage .
8399	A non - blocking method for stopping the remote server that allows requests to complete within the given timeout before shutting down the server . New connections will not be accepted after calling this .
8400	Starts the remote server . Add test libraries first before calling this .
8401	Generate Json by given path to file with properties with only included domain keys .
8402	Generate Json by given file with properties with only included domain keys .
8403	generate Json by given InputStream and given filter .
8404	generate Json by given Java Properties
8405	generate Json by given Map&lt ; String String&gt ;
8406	generate Json by given Map&lt ; String Object&gt ;
8407	generate Json by given Map&lt ; String String&gt ; and given filter
8408	generate Json by given Java Properties and given filter
8409	Calculates required radius of shadow .
8410	Builder to create an instance of OcspFetcher using Apache HttpClient for connectivity .
8411	Method for finding issuer by provided issuers in properties given an issued certificate .
8412	Execute the maven plugin .
8413	Read Markdown files from directory .
8414	Replace variables with given pattern .
8415	Get the first h1 for the title .
8416	Adds the title to the html file .
8417	Replace variables in the html file .
8418	Update relative include paths corresponding to the markdown file s location in the folder structure .
8419	Copy files from one dir to another based on file extensions .
8420	When retrieving more statements LRS will return full path .. the client will have part in the URI already so cut that off
8421	this will wrap the view which is added to the slider into another layout so we can then overlap the small and large view
8422	animate to the large view
8423	animate to the small view
8424	calculate the percentage to how many percent the slide is already visible
8425	overlap the views and provide the crossfade effect
8426	The intent to launch the Activity .
8427	Launch the activity if needed .
8428	getTodos Retrieves all todos a user can read .
8429	getFactSheets Retrieves all Fact Sheets
8430	Download file from the given response .
8431	Build the Client used to make HTTP requests .
8432	createAccessControlEntity Creates an access control entity
8433	updateDataModel Updates the data model for a workspace
8434	createFullExport Creates a full export of the workspace data or an export of the changelog depending on given type
8435	getExports Lists all exports of the given type in the workspace of the authorized user
8436	Specifies all urls needed to get an access token based on given host name and common url naming convention .
8437	Sets your client Id and client Secret .
8438	processGraphQLMultipart Processes GraphQL requests supporting multipart documents
8439	getBookmarks Retrieves all stored bookmarks a user can read .
8440	Adds permissions to a graph .
8441	Sets the permissions on a graph .
8442	Fluent setter for rulesets .
8443	Close the connection and free resources
8444	synchronization needed because of setting of page length
8445	Creates MarkLogicDatasetGraph from access parameters to a REST MarkLogic server .
8446	Limits the number of threads used by the GraphicsMagick process during execution . Note that no validation is made so ensure that the value is a non - positive integer presumably less than the maximum CPU cores on the host .
8447	Resize source to desired target dimensions using default resizing filter algorithm .
8448	Rotates the image with empty triangles back - filled using default background color .
8449	Defines the gravity for geometry - based operations . See documentation for more details as this option works in conjunction with various options in different ways .
8450	Strips out ICC profiles .
8451	Defines font for text overlay .
8452	Specifies the source image to convert .
8453	Add image to operation .
8454	Parse a set of arguments and populate the target with the appropriate values .
8455	Generate usage information based on the target annotations .
8456	Extracts and returns the time unit from a string . If the string doesn t include a unit it returns null .
8457	Parse properties instead of String arguments . Any additional arguments need to be passed some other way . This is often used in a second pass when the property filename is passed on the command line . Because of required properties you must be careful to set them all in the property file .
8458	Execute a presentation file at a given url
8459	Execute a presentation file
8460	Interpret a presentation file as a list of executable actions
8461	sort a list of rectangles by their sizes in ascending order
8462	Render the given template string as a string based on the parameter values associated with this context
8463	Get the file of the slide rel for a slide number
8464	Check the mouse action is within the screen region range .
8465	namely if they have the same x range they would intersect
8466	Executes the outbound Sqs Operation .
8467	Executes the outbound Sns Operation .
8468	Same as findFile but throws an exception if the file was not found .
8469	Attempts to create a temporary directory that did not exist previously .
8470	Construct an immutable map from one key - value pair . Although this is more convenient than the static factory methods this method does not capture the instance being logged .
8471	Log a message at the trace level . Default values are used for all other parameters .
8472	Log a message for a canonical event at the trace level . Default values are used for all other parameters .
8473	Log a message at the debug level . Default values are used for all other parameters .
8474	Log a message for a canonical event at the debug level . Default values are used for all other parameters .
8475	Log a message at the info level . Default values are used for all other parameters .
8476	Log a message for a canonical event at the info level . Default values are used for all other parameters .
8477	Log a message for a canonical event with supporting key - value pairs at the info level . This method is provided only for efficiency over the var - args method above as it avoids an array creation during invocation .
8478	Log a message at the warn level . Default values are used for all other parameters .
8479	Log a message for a canonical event at the warn level . Default values are used for all other parameters .
8480	Log a message at the error level . Default values are used for all other parameters .
8481	Log a message for a canonical event at the error level . Default values are used for all other parameters .
8482	Before outputting the message inject additional context .
8483	Start writing the Steno JSON wrapper .
8484	Write specified key - value pairs into the current block .
8485	This function assumes the field object has already been started for this throwable this only fills in the fields in the exception or equivalent object and does not create the field in the containing object .
8486	Generate a Steno log compatible representation .
8487	Retrieve the relevant caller data adjusted for Steno logger wrapping .
8488	Safely serialize a value .
8489	Create a new database with the specified name .
8490	we should clear it
8491	Parses the save attr .
8492	Save data to object in context .
8493	reload the data from context to websheet row .
8494	Parses the save attr string .
8495	Gets the save attr list from row .
8496	Gets the save attr from list .
8497	Sets the save objects in hidden column .
8498	Sets the save attrs for sheet .
8499	Sets the save attrs for row .
8500	Prepare context and attrs for cell .
8501	Fmt number .
8502	Put shift attrs .
8503	Set up workbook . Also create evaluation wrapper .
8504	Return evaluation wrapper if needed .
8505	get formulaevaluator .
8506	recalculate max coulumn count across sheets in the workbook .
8507	load web sheet from inputStream file with data object .
8508	load web sheet from giving workbook with data object .
8509	load worksheet by tab name .
8510	download current workbook .
8511	Save the current workbooks .
8512	Submit the current workbooks .
8513	populate component .
8514	Gets the current sheet config .
8515	load the bean from saving .
8516	Gets the locale .
8517	Return picture to web front end .
8518	Gets the cell helper .
8519	Gets the pic helper .
8520	Gets the validation handler .
8521	Gets the chart helper .
8522	Convert shared formulas .
8523	Convert ptg .
8524	Convert ptg for watch list .
8525	Single ptg .
8526	Gets the rows list .
8527	assemble rowslist from rowsmapping .
8528	Fixup ref relative row one to one .
8529	Builds the dynamic row for ref ptg base .
8530	Builds the dynamic row for area ptg base .
8531	retrieve background color for plot area .
8532	get line color of line chart from CTLineSer .
8533	Find automatic fill color .
8534	retrieve xcolor from scheme color .
8535	get xcolor from ctsRgbColor .
8536	Get xcolor for automatic fill setting . This is the default setting in Excel for chart colors . Normally the colors will be accent1 to 7 .
8537	convert xssf color to color .
8538	Convert xssfcolor to triple let numbers .
8539	Gets the bg color from cell .
8540	find component according it s class .
8541	populate attributes .
8542	match parameter of method .
8543	set object property .
8544	get object property value .
8545	Setup control attributes .
8546	Find cell validate attributes .
8547	Setup faces cell picture charts .
8548	Setup faces cell charts .
8549	Setup faces cell picture .
8550	initial chart map for specified workbook .
8551	return pie chart title from chartData .
8552	Set color of series .
8553	create pie 3d chart .
8554	finalize the style for barchart . This will call setupStyle common first .
8555	initial chart map for XSSF format file . XSSF file is actually the only format in POI support chart object .
8556	Gets the chart id from parent .
8557	initial anchors map for specified workbook . Excel put the chart position information in draw . xml instead of chart . xml . anchors map contains the information getting from draw . xml .
8558	Generate single XSSF chart .
8559	Transform to collection object .
8560	Gets the full name from row .
8561	Re build upper level formula .
8562	Setup upper level formula .
8563	Builds the cell formula for shifted rows .
8564	Gather rows mapping by full name .
8565	Increase index number in shift map .
8566	Increase upper level final length .
8567	Change index number in hidden column .
8568	Sets the full name in hidden column .
8569	Gets the original row num in hidden column .
8570	Sets the original row num in hidden column .
8571	Find parent rows mapping from shift map .
8572	Find child rows mapping from shift map .
8573	Find item in collection .
8574	Builds the current range .
8575	Whether the row is static . This only check rowIndex against original template .
8576	Whether the row is static . This check row after shifted .
8577	100 > = 80
8578	Index merged region .
8579	Skipped region cells .
8580	Add skipped cell into the list of a region .
8581	Build Sheet Comment From command alias .
8582	Builds the cell comment fromalias .
8583	Builds the configuration .
8584	Gets the sheet configuration .
8585	Builds the form command from sheet config .
8586	check last column . if it s blank then treat it as null cell .
8587	build a sheet for configuration map .
8588	check and repair the sheet s lastrow . If the row is blank then remove it .
8589	build command list from comments . after transfer the comment to command remove it from comments .
8590	Sets the parent for child command .
8591	check whether contain each command in the list .
8592	Match command to sheet config form .
8593	Copy the each command area to seperated sheet . As it will be used for iteration .
8594	build command list from comment .
8595	Process method line .
8596	Process command line .
8597	change the comment .
8598	create configuration command .
8599	Build the attributes map .
8600	Create sheet configuration from form command .
8601	Sets the footer of sheet configuration .
8602	Sets the body of sheet configuration .
8603	Sets the header of sheet configuration .
8604	Delete row .
8605	Removes the ranges from shift map .
8606	Find remove full name list .
8607	Gets the each command from parts name .
8608	Insert empty object in context .
8609	Delete object in context .
8610	Prepare collection data in context .
8611	Index command range .
8612	Checks if is row allow add .
8613	Insert each template .
8614	Evaluate normal cells .
8615	Evaluate user formula .
8616	Checks if is user formula .
8617	Creates the cell comment .
8618	evaluate boolean express .
8619	Remove the rows .
8620	Removes the single row in sheet .
8621	Removes the cached cell for row .
8622	Removes the rows in body .
8623	Put picture image to session map and return the key to web .
8624	Put chart image to session map and return the key to web .
8625	Assemble new value .
8626	return cell value with format .
8627	get input cell value . none input return blank
8628	Get cell value as string but with giving type .
8629	Gets the cell string value with number type .
8630	Set cell value with giving String value .
8631	Sets the cell value string .
8632	Sets the cell value boolean .
8633	Sets the cell value date .
8634	Sets the cell value number .
8635	Copy rows .
8636	Copy single row .
8637	Copy cell .
8638	set cell value .
8639	set up cell style .
8640	clone existing comments into new cell comment .
8641	Creates the comment anchor .
8642	Creates the or insert comment .
8643	Use low level API to match the comments setting .
8644	Find vmldrawing part according to cell .
8645	Find CtShape from vml object . This class use reflection to invoke the protected method in POI .
8646	create cell style from source cell .
8647	set up facesCell s attribute from poiCell and others .
8648	Gets the row col from component attributes .
8649	Gets the inits the rows from config .
8650	Gets the faces row from body row .
8651	Gets the faces cell from body row .
8652	Gets the poi cell from sheet .
8653	Gets the skey from poi cell .
8654	Gets the or add tie cell in map .
8655	Gets the current data context name .
8656	Evaluate the expression .
8657	evaluate from giving context .
8658	save the row before serialize .
8659	Removes the row .
8660	Merge map .
8661	recover rows mapping by using it s address .
8662	return chart type from CTChart object .
8663	Convert style string to stroke object .
8664	init chart data .
8665	build chartData for line chart . chartData include categoryList and seriesList which used for generate jfreechart .
8666	retrieve anchor information from draw . xml for all the charts in the workbook . then save them to anchors map .
8667	Inits the XSSF anchors map for sheet .
8668	Gets the anchor associate chart id .
8669	Gets the chart id from child node attributes .
8670	Builds the each objects .
8671	Save data in context .
8672	recalc whole workbook .
8673	Gets the poi cell with row col from tab .
8674	Gets the faces cell with row col from current page .
8675	Restore data context .
8676	Get last collect object from full name .
8677	Checks if is need restore .
8678	Start restore data context .
8679	Shift row ref .
8680	set first cell also set static relative address firstCellAddress .
8681	set last cell also set static relative address lastCellAddress .
8682	Builds the cells for row .
8683	Builds the single cell .
8684	load the workbook from saving .
8685	build categotry list .
8686	build series list .
8687	Builds the chart series in list .
8688	get color list from dpt .
8689	get dpt from list .
8690	Sets the command index map .
8691	Gets the pictrues map .
8692	Gets the XSSF pictrues map .
8693	save pciture in map with index .
8694	Generate picture style .
8695	Generate chart style .
8696	Gets the anchor size .
8697	Gets the pattern .
8698	Return real chart picture when browser requesting the image .
8699	recover cell by using it s address .
8700	Gets the row style .
8701	Gets the cell font style .
8702	get cell font color .
8703	Get font decoration .
8704	Gets the cell style .
8705	Gets the column style .
8706	Gets the alignment from cell .
8707	Gets the vertical alignment from cell .
8708	Calc total height .
8709	Setup cell style .
8710	Gets the input type from cell type .
8711	return faces context resource path .
8712	get resource file as stream .
8713	remove prefix path of the full path .
8714	evaluate input type .
8715	Find bean in context .
8716	join string .
8717	round number according to decimal places .
8718	get tab type .
8719	get tab style .
8720	Gets the default date pattern .
8721	Gets the decimal separator by default locale .
8722	Gets the thousand separator by default locale .
8723	Sets the tie command alias list .
8724	Watch list serve for formula changes . Basically all the rows appeared in the formula in the current sheet will be watched . Note if the cell reference is from other sheet or workbooks it will be ignored .
8725	Builds the watch list for cell .
8726	Only rows in dynamic area will be added to watch list .
8727	check it s a command comment .
8728	Parses the widget attributes .
8729	get attribute key in map by cell .
8730	Parses the validate attributes .
8731	Find pair bracket position .
8732	Parse the attributes from string .
8733	parse input attributes .
8734	parse validate attributes .
8735	split string by = sign .
8736	parse select item attributes .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	Parse Comment To Map
8741	find first non letterordigit position from string .
8742	Removes the chars from string .
8743	Gets the excel column name .
8744	Convert col to int .
8745	Gets the cell by reference .
8746	Height units 2 pixel .
8747	Checks if is date .
8748	Parses the date .
8749	Checks if is numeric .
8750	Should continue .
8751	Sets the object property .
8752	Cell compare to .
8753	Inside range .
8754	Clear hidden columns .
8755	Delete hidden columns in row .
8756	Delete cell from row .
8757	process event .
8758	Refresh after status changed .
8759	Validate with row col in current page .
8760	Validate by tie web sheet validation bean .
8761	Check error message from object in context .
8762	Validate all rules for single cell .
8763	Do validation .
8764	Validate cell .
8765	Validate current page .
8766	Validate row in current page .
8767	Validate row .
8768	Refresh cached cells in current page .
8769	Refresh cached cells in row .
8770	set submit mode flag with javascript for holding in client side .
8771	triggered validation process before actions like save or submit .
8772	clear all the related maps .
8773	Load header rows .
8774	Load header row without configuration tab .
8775	Fill to max columns .
8776	Gets the header column style .
8777	Gets the width style .
8778	Load header row with configuration tab .
8779	Gets the column width style .
8780	Clear workbook .
8781	Inits the tabs .
8782	load data process . unfinished .
8783	Refresh data .
8784	Refresh data for row .
8785	refresh data for single cell .
8786	Find tab index with name .
8787	Load work sheet .
8788	prepare worksheet for loading . this only load at backend without refresh gui .
8789	Sets the data table page .
8790	Save objs .
8791	Setup row info .
8792	Load body rows .
8793	Assemble faces body row .
8794	Refresh cached cell .
8795	Process refresh cell .
8796	Creates the dynamic columns .
8797	Adds the repeat row .
8798	Refresh body rows in range .
8799	Sets the unsaved status .
8800	Checks if is unsaved status .
8801	Returns the constructor with most visible visibility and longest argument list . Self - referencing constructors are ignored .
8802	Utility method for transferring input stream to output .
8803	Write next line as a long .
8804	Write next line to the output .
8805	Set network stats tag . Converts string tag to integer one .
8806	Setup binary content with the bitmap .
8807	Setup binary content with the file descriptor .
8808	Remove parameter with the specified name from request description .
8809	Add header to request description .
8810	Clear the builder .
8811	Play the track .
8812	Stop playback .
8813	Bind to the streaming service .
8814	Unbind from the streaming service .
8815	Drop streaming service listener .
8816	Store image to the disk cache . If max allowed size is set image may be rescaled on disk .
8817	Read all the bytes from input stream and convert them to a string . Input stream is closed after this method invocation .
8818	Read all the bytes from input stream and convert them to a string using UTF - 8 charset . Input stream is closed after this method invocation .
8819	Writes the data to the given OutputStream .
8820	Returns the number of bytes that are available before this stream will block . This method returns the number of bytes available in the buffer plus those available in the source stream .
8821	Closes this stream . The source stream is closed and any resources associated with it are released .
8822	Reads a single byte from this stream and returns it as an integer in the range from 0 to 255 . Returns - 1 if the end of the source string has been reached . If the internal buffer does not contain any available bytes then it is filled from the source stream and the first byte is returned .
8823	Resets this stream to the last marked location .
8824	Write the start to the specified output stream .
8825	Write the content disposition header to the specified output stream .
8826	Write the content type header to the specified output stream .
8827	Write the content transfer encoding header to the specified output stream .
8828	Write the end of the header to the output stream .
8829	Write the end data to the output stream .
8830	Write all parts and the last boundary to the specified output stream .
8831	Gets the length of the multipart message including the given parts .
8832	if it is it returns the url parameter
8833	When file timestamp is the same as what the browser is sending up send a 304 Not Modified
8834	Sets the Date header for the HTTP response
8835	Sets the Date and Cache headers for the HTTP Response
8836	Sets the content type header for the HTTP Response
8837	Closes the specified channel after all queued write requests are flushed .
8838	Write the disposition header to the output stream .
8839	Write the data in source to the specified stream .
8840	Setup cache . This operation causes disk reads .
8841	this method is synchronized in order to avoid concurrent calls to mkdir
8842	Read cache for the specified cache entry .
8843	Returns an input stream that reads the body of a snapshot closing the snapshot when the stream is closed .
8844	Prepare for new width and hight .
8845	Returns the singleton instance for this class
8846	Validates that a keystore with the given parameters exists and can be used for an SSL context .
8847	This method replaces the scale type of an image view without call to layout requests .
8848	Stop updates .
8849	Construct a pending intent that can be used for starting request processing . Note that after this method is executed executor of the request builder is always null .
8850	Perform disconnect actions .
8851	Create the service connection .
8852	Destroy the service connection .
8853	Method should be called when wrapped view gets changes related to this consumer .
8854	The client won t send any message so connect directly on channel open
8855	Data loading has been successful we are going to accept data . Here we can implement some accumulation logic .
8856	request to completely reset the loader
8857	For testing only .
8858	Set text view value or change its visibility in case of empty value .
8859	Hide soft keyboard .
8860	Show soft keyboard .
8861	Toggles keyboard visibility .
8862	Converts device independent points to actual pixels .
8863	cancel the timer if exception is caught - prevents useless stack traces
8864	Clear the cached entities .
8865	Populate the requested image to the specified view . Called from the GUI thread .
8866	Cancel image loading for a view .
8867	Create an image holder instance for the defined view .
8868	It must be executed in the main thread .
8869	Set preloader .
8870	Executed in the main thread .
8871	Add image to memory cache .
8872	Recycle the buffer .
8873	A good place to set custom request headers .
8874	Add string parameter .
8875	XXX on 2 . 3 we get NP exception in case of HTTPs connection and cache
8876	Calculate 32 bytes length MD5 digest .
8877	Returns a string representation of the given constant
8878	Returns the String identifying the given cublasStatus
8879	If the given result is different to cublasStatus . CUBLAS_STATUS_SUCCESS and exceptions have been enabled this method will throw a CudaException with an error message that corresponds to the given result code . Otherwise the given result is simply returned .
8880	Obtain the current CUBLAS status by calling cublasGetErrorNative and store the result as the lastResult . If the obtained result code is not cublasStatus . CUBLAS_STATUS_SUCCESS and exceptions have been enabled an CudaException will be thrown .
8881	Add one occurrence of one lexeme .
8882	Add one occurrence of one ending .
8883	Cumulative frequency estimate for given wordform .
8884	For debugging purposes only .
8885	Check if attribute - value structure has attribute matching given attributeValue and if so then set corresponding position in the tag .
8886	Convert internal attribute - value structure to SemTi - Kamols tag .
8887	Check if tag has given value in specified position and if so then set corresponding attribute - value pair in the given attribute - value structure .
8888	Remove formating from Kamols - style tag .
8889	Perform retrieval of metrics from AppDynamics using specified parameters .
8890	Generate querystring for the request .
8891	Process the JSON response from the request .
8892	Parse JSON String as configurations that the task should query from AppDynamics .
8893	Retrieve configurations by looking up in property param first then environment variable .
8894	Perform reading and reporting of AppDynamics metrics to SignalFx
8895	Create a reader builder for com . helger . genericode . v04 . CodeListDocument .
8896	Create a reader builder for com . helger . genericode . v04 . CodeListSetDocument .
8897	Create a reader builder for com . helger . genericode . v04 . ColumnSetDocument .
8898	Create a reader builder for com . helger . genericode . v10 . CodeListDocument .
8899	Create a reader builder for com . helger . genericode . v10 . CodeListSetDocument .
8900	Create a reader builder for com . helger . genericode . v10 . ColumnSetDocument .
8901	Get the ID of the passed column element .
8902	Get the value of a column identified by an ID within a specified row . This method only handles simple values .
8903	Get the column with the specified ID .
8904	Get the IDs of all contained keys
8905	Get the key with the specified ID .
8906	Check if the passed column ID is a key column in the specified column set
8907	Create a new column to be added to a column set
8908	Create a new key to be added to a column set
8909	Set the number of lines to skip before the header row starts
8910	Add a single column definition .
8911	Create a writer builder for com . helger . genericode . v04 . CodeListDocument .
8912	Create a writer builder for com . helger . genericode . v04 . CodeListSetDocument .
8913	Create a writer builder for com . helger . genericode . v04 . ColumnSetDocument .
8914	Create a writer builder for com . helger . genericode . v10 . CodeListDocument .
8915	Create a writer builder for com . helger . genericode . v10 . CodeListSetDocument .
8916	Create a writer builder for com . helger . genericode . v10 . ColumnSetDocument .
8917	Create a validator builder for com . helger . genericode . v04 . CodeListDocument .
8918	Create a validator builder for com . helger . genericode . v04 . CodeListSetDocument .
8919	Create a validator builder for com . helger . genericode . v04 . ColumnSetDocument .
8920	Create a validator builder for com . helger . genericode . v10 . CodeListDocument .
8921	Create a validator builder for com . helger . genericode . v10 . CodeListSetDocument .
8922	Create a validator builder for com . helger . genericode . v10 . ColumnSetDocument .
8923	Send Logs to Server
8924	Context object must be set in order to use the Logger API . This is called automatically by BMSClient .
8925	Get the current Logger . LEVEL .
8926	Get the current value of the capture flag indicating that the Logger is recording log calls persistently .
8927	Set the maximum size of the local log file . Once the maximum file size is reached no more data will be appended . Consider that this file is sent to a server .
8928	if we have callstack metadata prepend it to the message
8929	Get stack trace caused by Logger exceptions
8930	Will create JSONObject with the passed parameters and other relevant information . See class - level documentation .
8931	Log location event
8932	Specify current application user . This value will be hashed to ensure privacy . If your application does not have user context then nothing will happen .
8933	public for testing only
8934	Starting the location updates
8935	Calculates and logs the size of first numEntries in the region .
8936	Sizes numEntries of a partitioned region or all the entries if numEntries is 0 .
8937	Sizes numEntries of a replicated or local region or all the entries if numEntries is 0 .
8938	Reads a snapshot entry . If the last entry has been read a null value will be returned .
8939	elapsed millis from base
8940	Returns an array of time stamp values the first of which has the specified index . Each returned time stamp is the number of millis since midnight Jan 1 1970 UTC .
8941	Accepts a file or directory contain the statistics files
8942	Dynamically create a GemFire pool with just the server
8943	This methods create a pool for connecting to a locator
8944	Determine if a given region exists
8945	Obtain a GemFire JMX client
8946	Determines the unique set of the host names for the distributed system
8947	Supports resolving host network lookup issues
8948	Determine if the data should be sent
8949	Execute a function with the given execution settings
8950	Used to flatten results from multiple servers
8951	Select results for OQL
8952	Factory method for put events registration
8953	Factory method for delete events registration
8954	Handling exceptions in general for REST responses
8955	On region filter facts determine how to parse the inputs typically for CICS to grid calls
8956	This function will use the JsonExportFunction function to export json data and read the results to be returned to callers
8957	List the unique set of host name
8958	Execute the search on Region
8959	Current supports get cache server name Determine the logic name of app
8960	Initialize security properties
8961	This is an example to get or create a region
8962	Create a proxy region
8963	Build the RegionSyncReport the given
8964	Return true if the current ts must be inserted instead of being mapped to the tsAtInsertPoint
8965	Closes the archive .
8966	Finds and converts all statistics files in a given directory to CSV
8967	Main method to extract GF Stats to file
8968	Close and recreate the JMX connect
8969	Stops all cache servers followed by locators on a given server
8970	Shut down a given member by its name
8971	Does not stop locators
8972	Shut down each member in a given RedundancyZone
8973	Store the pagination search result details
8974	Read Results from region by keys in pageRegion
8975	Import exported data from a given
8976	Parse the remote locators and locator and assert that they match
8977	This function gets HashMap key = Serializable value = BigInteger
8978	Build check sum map
8979	Forces the value to be wrapped with if it isEqualTo for a string field .
8980	Checks if a TypeMirror is mapped to Sqlite Integer Type
8981	Takes an object and serializes it to a byte array . Don t enforce that it extends serializable to allow for lists and maps to be passed in .
8982	De - serialize a byte array back to it s original object .
8983	Takes a class type and constructs it . If the class does not have an empty constructor this will find the parametrized constructor and use nulls and default values to construct the class .
8984	Check if the element has the
8985	Check if the element has a
8986	Checks for a supertype returns true if element has a supertype
8987	Get table schema
8988	Create the java functions required for the internal class
8989	Create a way to get an id for foreign keys
8990	Executes a query and returns the results wrapped in an observable
8991	Check to ensure that the column name provided is valid
8992	Checks if a string there if not returns the default string
8993	Capitalizes the first letter of the string passed in
8994	Checks if a TypeMirror is mapped to Sqlite Type
8995	Order the results in descending order
8996	Read temperature from the sensors .
8997	Maps a type to the corresponding Cursor get function . For mapping objects between the database and java . If a type is not found getBlob is returned
8998	Print out notes
8999	Print out errors this will stop the build from succeeding
9000	Returns all icon fonts from bundle .
9001	Returns all icons from bundle .
9002	Create the Sld Editor layout and attach handlers to the actions .
9003	Create background content decoration for the widget tab .
9004	Compute and return x^power .
9005	Set this column vector from an array of values .
9006	Compute x^exponent to a given scale . Uses the same algorithm as class numbercruncher . mathutils . IntPower .
9007	Compute the integral root of x to a given scale x &ge ; 0 . Use Newton s algorithm .
9008	Compute e^x to a given scale by the Taylor series .
9009	Compute the natural logarithm of x to a given scale x &gt ; 0 .
9010	Compute the natural logarithm of x to a given scale x > 0 . Use Newton s algorithm .
9011	Compute the arctangent of x to a given scale |x| &lt ; 1
9012	Compute the arctangent of x to a given scale by the Taylor series |x| < 1
9013	Compute the square root of x to a given scale x &ge ; 0 . Use Newton s algorithm .
9014	Print the string containing the digits of pi .
9015	Return a timestamp string that contains the elapsed time period .
9016	Set the minimum and maximum random values .
9017	Determine a random value s interval and count it .
9018	Print the counter values as a horizontal bar chart . Scale the chart so that the longest bar is MAX_BAR_SIZE .
9019	Add another complex number to this one .
9020	Subtract another complex number from this one .
9021	Multiply this complex number by another one .
9022	Divide this complex number by another one .
9023	Set this row vector from a matrix . Only the first row is used .
9024	Get a row of this matrix .
9025	Get a column of this matrix .
9026	Set this matrix from a 2 - d array of values . If the rows do not have the same length then the matrix column count is the length of the shortest row .
9027	Return the transpose of this matrix .
9028	Add another matrix to this matrix .
9029	Subtract another matrix from this matrix .
9030	Multiply this matrix by a constant .
9031	Multiply this matrix by another matrix .
9032	Print the matrix values .
9033	Attach an ImageResource to the button .
9034	Validate the coefficients .
9035	Compute the next position of xn .
9036	Does not clear templateNames .
9037	Convert StyledLayerDescriptorInfo to raw xml .
9038	Convert raw xml to StyledLayerDescriptorInfo .
9039	Test by marshalling .
9040	Test by unmarshalling .
9041	Compute the area of the ith trapezoidal region .
9042	Set this square matrix from another matrix . Note that this matrix will reference the values of the argument matrix . If the values are not square only the upper left square is used .
9043	Set this square matrix from a 2 - d array of values . If the values are not square only the upper left square is used .
9044	Compute the inverse of this matrix .
9045	Compute the determinant .
9046	Compute the Euclidean norm of this matrix .
9047	Solve Ax = b for x using the Gaussian elimination algorithm .
9048	Print the decomposed matrix LU .
9049	Do forward elimination with scaled partial row pivoting .
9050	Solve Ly = b for y by forward substitution .
9051	Solve Ux = y for x by back substitution .
9052	Iteratively improve the solution x to machine accuracy .
9053	Convert a square matrix into an identity matrix .
9054	Compute the next randomn value using the von Neumann algorithm . Requires sequences of uniformly - distributed random values in [ 0 1 ) .
9055	Do the regula falsi iteration procedure .
9056	Compute the next position of x - false .
9057	Check the position of x - false .
9058	Compute the next position of xFalse .
9059	Check the interval .
9060	Add the value of an addend to the running sum .
9061	Multiply two integer values a and b modulo m .
9062	Raise a to the b power modulo m .
9063	Do the secant iteration procedure .
9064	Create an instance of the SldManager .
9065	Convert a long value into a character array of 0 and 1 that represents the value in base 2 .
9066	Decompose a floating - point value into its parts .
9067	Print the decomposed parts of the value .
9068	Validate the value of the float biased exponent value .
9069	Validate the value of the float unbiased exponent value .
9070	Validate the value of the double biased exponent value .
9071	Validate the value of the double unbiased exponent value .
9072	SldEditorServiceFactory constructor .
9073	Compute the next random value using the Central Limit Theorem which states that the averages of sets of uniformly - distributed random values are normally distributed .
9074	Compute the next randomn value using the polar algorithm . Requires two uniformly - distributed random values in [ - 1 + 1 ) . Actually computes two random values and saves the second one for the next invokation .
9075	Compute the next random value using the ratio algorithm . Requires two uniformly - distributed random values in [ 0 1 ) .
9076	Compute the Sieve of Eratosthenes .
9077	Compute the prime factors of an integer value .
9078	Do the bisection iteration procedure .
9079	Compute the next position of xMid .
9080	Check the position of xMid .
9081	Sets the JavaFX application instance to be provided by the CDI BeanManager .
9082	Settings from a custom calabash . xml
9083	Settings to be always applied
9084	Initializes the given FXMLLoader instance using the provided parameters .
9085	The location latitude and longitude .
9086	Safely get the information from our convention
9087	Find an attribute definition that applies to a particular attribute filter .
9088	Evaluate single attribute filter
9089	1 .. 55 chars . anything goes .
9090	The address that you want to geocode .
9091	In a geocoding response the Google Geocoding API can return address results restricted to a specific area .
9092	return all distinct names registered by this discovery type .
9093	return all instances registered to this particular name for this discovery type
9094	Retrieve all Collaboration items TO where logged in user .
9095	Construct the correct Meta - Data from parameters .
9096	Change the password for the currently logged in user .
9097	Retrieves all user information .
9098	Retrieve the gravatar bytes by email .
9099	Retrieve the gravatar bytes for Fluid user .
9100	Not allowed to call this method .
9101	Returns the ElasticSearch equivalent data field - type from the Fluid datatype .
9102	Creates a new Flow Step .
9103	Updates an existing Flow Step .
9104	Retrieves an existing Flow Step via Primary key .
9105	Retrieves an existing Flow Step via Step .
9106	Retrieves all Steps via Flow .
9107	Delete an existing Flow Step .
9108	Forcefully delete an existing Flow Step .
9109	Populate all the Table Field values from the Table index .
9110	Close the SQL and ElasticSearch Connection .
9111	Handles the message . If there was an error the object will be Error If there was no error the object will be JSONObject
9112	Event for when connection is closed .
9113	Gets a list of echo messages of the current return values .
9114	Retrieves all Personal Inventory items for the logged in user .
9115	Create a new Table Record .
9116	Deletes the Form Container provided . Id must be set on the Form Container .
9117	Retrieves Electronic Form Workflow historic information .
9118	Retrieves Electronic Form and Field historic information .
9119	Retrieves Electronic Form and Field historic information for the most recent modification .
9120	Lock the provided form container for logged in user .
9121	Unlock the provided form container from the logged in user . Item will not be removed from users Personal Inventory .
9122	Unlock the provided form container from the logged in user .
9123	Maps the Form to the provided Definition - Id and Title .
9124	Convert the comma separated list of roles as objects .
9125	Creates a new Form Definition with the Fields inside the definition .
9126	Updates an existing Form Definition with the Fields inside the definition .
9127	Retrieves the Form Definition by Primary key .
9128	Retrieves the Form Definition by Name .
9129	Retrieves all Form Definitions by logged in user .
9130	Deletes the Form Definition provided . Id must be set on the Form Definition .
9131	Generates the storage key the provided parameters .
9132	Creates an instance of MemcachedClient .
9133	Closes the Memcached client connection .
9134	Returns - 1 if there is a problem with conversion .
9135	Makes use of the Fluid Core to convert a document into a PDF file .
9136	Populate the field values from the cache .
9137	Create a new Flow Step Entry rule .
9138	Create a new Flow Step Exit rule .
9139	Create a new Flow Step View rule .
9140	Update an existing Flow Step Entry rule .
9141	Update an existing Flow Step Exit rule .
9142	Update an existing Flow Step View rule .
9143	Moves an entry rule order one up from the current location .
9144	Moves an entry rule order one down from the current location .
9145	Deletes an Step Entry rule .
9146	Deletes an Step Exit rule .
9147	Deletes an Step View rule .
9148	Performs HMAC and encryption to initialize the session .
9149	Retrieves all user query information .
9150	Retrieves all role information .
9151	Gets the Service Ticket associated with the Fluid session as HEX .
9152	Create a new Text Masked field .
9153	Create a new Text Barcode field .
9154	Create a new Decimal Spinner field .
9155	Create a new Decimal Slider field .
9156	Creates a new Table Field .
9157	Update an existing Masked Text field .
9158	Update an existing Barcode Text field .
9159	Updates the Decimal Spinner field .
9160	Updates the Decimal Slider field .
9161	Updates a Table Field .
9162	Retrieve a Form Field via name .
9163	Retrieve the Form Fields via Form Definition name .
9164	Retrieve the Form Fields via Form Definition id .
9165	Deletes the provided field .
9166	Forcefully deletes the provided field .
9167	Generates the Meta Data for a table field .
9168	Update an existing User field value .
9169	Creates a new index or fetches existing index .
9170	Creates a new Flow with an Introduction and Exit basic rule .
9171	Updates an existing Flow .
9172	Retrieves a Flow by Primary Key .
9173	Retrieves a Flow by unique Name .
9174	Delete an existing Flow .
9175	Forcefully Delete an existing Flow .
9176	Update an existing Global field value .
9177	Retrieve all the Global field values .
9178	Retrieves the Form Definition and Title mapping currently stored in Fluid .
9179	Decrypts the encrypted data .
9180	If the HTTP Client is set this will close and clean any connections that needs to be closed .
9181	Initiate a new request process .
9182	Generate a verbose Exception message .
9183	Create a new administrator user for Fluid . This function only works if there are no pre - existing admin user .
9184	Gets a Access Token from Auth0 .
9185	Gets Auth0 Normalized User Profile info .
9186	Submit a JSON based HTTP request body with JSON as a response .
9187	Submit a HTML Form based HTTP request body with JSON as a response .
9188	Get a text based response handler used mainly for JSON .
9189	Performs a HTTP Get against the connection test Web Service to confirm whether the connection is valid .
9190	Creates a new Http client .
9191	Retrieves the system property for the Fluid specific trust store .
9192	Close the SQL Connection .
9193	Retrieves items for the provided JobView .
9194	Send a form item to be part of a workflow .
9195	Callback hook for Connection close events .
9196	Callback hook for Message Events . This method will be invoked when a client sends a message .
9197	Send a message .
9198	Send a message as text .
9199	Closes the Web Socket User session .
9200	Executes a native SQL query on the remote Fluid instance .
9201	Request a new license based on the license request input .
9202	Applies a generated license for the server .
9203	Create a new Plain Text field .
9204	Create a new Paragraph Text field .
9205	Create a new Paragraph HTML field .
9206	Create a new Multi Choice select Many field .
9207	Create a new Date only field .
9208	Update an existing Text field .
9209	Update an existing Paragraph HTML field .
9210	Update an existing Date and Time field .
9211	Update an existing Decimal field .
9212	Update an existing Route field value .
9213	Create an new Route field value .
9214	Retrieves a Configuration by Key .
9215	Retrieves all Configurations .
9216	Uploads a new Attachment . If there is an existing attachment with the same name a new version will be uploaded .
9217	Retrieves a Attachment by Primary Key .
9218	Delete an existing Attachment .
9219	Forcefully Delete an existing Attachment .
9220	Parses the XSD file represented by the received InputStream .
9221	Creates a new class loader replacing the current one having another path added to the classpath . The new path is the path to the jar received in this class constructor .
9222	Asserts if the current object has the name attribute when not being a direct child of the XsdSchema element which is not allowed throwing an exception in that case .
9223	Asserts if the current has no value for its name attribute while being a direct child of the top level XsdSchema element which is required . Throws an exception if no name is present .
9224	Asserts if the current object has a ref attribute at the same time as either a simpleType as children a form attribute or a type attribute . Throws an exception in that case .
9225	This function uses DOM to obtain a list of nodes from a XSD file .
9226	Asserts if the current object has a form attribute while being a direct child of the top level XsdSchema element which isn t allowed throwing an exception in that case .
9227	Asserts if the current object has a ref attribute while being a direct child of the top level XsdSchema element which isn t allowed throwing an exception in that case .
9228	If T is assignable from value then return the value . Otherwise tries to create an instance of this type using the provided argument .
9229	Construct a Cli from an annotated interface definition
9230	Construct a Cli from an annotated class
9231	Parse arguments from an annotated interface definition
9232	Parse arguments from an annotated class instance
9233	Package protected for testing purposess
9234	Removes a previously - added footer view .
9235	Returns the output value from the noise module given the one - dimensional coordinate of the specified input value located on the line segment .
9236	Generates a gradient - noise value from the coordinates of a three - dimensional input value and the integer coordinates of a nearby three - dimensional value .
9237	Generates an integer - noise value from the coordinates of a three - dimensional input value .
9238	Generates a value - noise value from the coordinates of a three - dimensional input value .
9239	Performs cubic interpolation between two values bound between two other values
9240	maps a value onto a quitnic S - Curve
9241	Configure bounds for range module
9242	Processes an single event by looping available plugins .
9243	Processes a specific event on specified plugin .
9244	Extracts the accountId .
9245	true if rule matches a violation and should be whitelisted .
9246	Get the EventSerializer based on user s configuration .
9247	Create a file within the temporary folder root .
9248	Create a directory within the temporary folder root .
9249	Reverse the system property sets performed on behalf of this restore context .
9250	Create the map implementation
9251	Add an object to the collection .
9252	Set a property
9253	Get an array style property
9254	Transition to the next state given the name of a valid transition .
9255	Iterate through the gcqueue for for any cleared reference remove the associated value from the underlying set .
9256	Get the information for a type
9257	Get the information for a parameterized type
9258	Get the information for a type variable
9259	Prints the composite message and the embedded stack trace to the specified print stream .
9260	Prints the composite message and the embedded stack trace to the specified print writer .
9261	Override replaceObject to check for Remote objects that are not RemoteStubs .
9262	Called by the thread pool executor
9263	Set thetask for this wrapper
9264	Notify the task it has been accepted
9265	Notify the task it has been rejected
9266	Notify the task it has started
9267	Notify the task it has completed
9268	Stop the task
9269	Never call this method only override in subclasses to perform job getting in a specific way normally tied to the data structure holding the jobs .
9270	Never call this method only override in subclasses to perform job adding in a specific way normally tied to the data structure holding the jobs .
9271	A utility method to convert a string name to a BlockingMode
9272	Overriden to return the indentity instance of BlockingMode based on the stream type int value . This ensures that BlockingMode enums can be compared using == .
9273	Setup readers .
9274	Add a new CatalogReader to the Catalog .
9275	Copies the reader list from the current Catalog to a new Catalog .
9276	Create a new Catalog object .
9277	Load the system catalog files .
9278	Parse a catalog document augmenting internal data structures .
9279	Parse all of the pending catalogs .
9280	Parse a single catalog file augmenting internal data structures .
9281	Handle unknown CatalogEntry types .
9282	Parse all subordinate catalogs .
9283	Return the applicable DOCTYPE system identifier .
9284	Return the applicable DOCUMENT entry .
9285	Return the applicable SYSTEM system identifier .
9286	Return the applicable URI in this catalog .
9287	Search the subordinate catalogs in order looking for a match .
9288	Construct an absolute URI from a relative one using the current base URI .
9289	Perform character normalization on a URI reference .
9290	Perform % - encoding on a single byte .
9291	Add to the current list of delegated catalogs .
9292	Safely create a new SoftValueRef
9293	Fire onThrowable to all registered listeners .
9294	Add a throwable that is to be handled .
9295	Create the list implementation
9296	A TimerTask is less than another if it will be scheduled before .
9297	Returns a InetAddress for the input object converted to a string .
9298	Dereference the object at the given index .
9299	Replaces the element at the specified position in this list with the specified element .
9300	Maintains the collection by removing garbage collected objects .
9301	Adds a new catalog entry type .
9302	Lookup an entry type
9303	Find out how many arguments an entry is required to have .
9304	Get an entry argument .
9305	Set the context classloader for the given thread
9306	Swap two nodes in the tree .
9307	Remove a node from the tree and normalize .
9308	Recursive cleanup of a TimeoutImpl
9309	Load a class by asking the parent
9310	Preload the JBoss specific protocol handlers so that URL knows about them even if the handler factory is changed .
9311	Search the handlerPkgs for URLStreamHandler classes matching the pkg + protocol + . Handler naming convention .
9312	See if the java . protocol . handler . pkgs system property has changed and if it has parse it to update the handlerPkgs array .
9313	Returns a Class for the input object converted to a string .
9314	Create the set implementation
9315	Return a synchronized counter .
9316	Returns a directional counter .
9317	Are we in an extension namespace?
9318	Checks whether a notification is required and notifies as appropriate
9319	A convenience method that simplifies the process of rebinding a non - serializable object into a JNDI context . This version binds the target object into the default IntitialContext using name path .
9320	Transform the obj Reference bound into the JNDI namespace into the actual non - Serializable object .
9321	Substitute sub - strings in side of a string .
9322	Split up a string into multiple strings based on a delimiter .
9323	Convert and join an array of bytes into one string .
9324	The default toString implementation of an object
9325	Returns a BlockingMode for the input object converted to a string .
9326	Initializes the cache for use . Prior to this the cache has no store .
9327	Get the cache value for key if it has not expired . If the TimedEntry is expired its destroy method is called and then removed from the cache .
9328	Get the cache value for key . This method does not check to see if the entry has expired .
9329	Remove the entry associated with key and call destroy on the entry if found .
9330	Remove all entries from the cache .
9331	Get the list of keys for entries that are not expired .
9332	Set the cache timer resolution
9333	Get the raw TimedEntry for key without performing any expiration check .
9334	Returns an iterator over the children of the given element with the given tag name .
9335	Gets the child of the specified element having the specified unique name . If there are more than one children elements with the same name and exception is thrown .
9336	Gets the child of the specified element having the specified name . If the child with this name doesn t exist then null is returned instead .
9337	Get the content of the given element .
9338	Macro to get the content of a unique child element .
9339	Macro to get the content of an optional child element .
9340	This resets the work queue capacity . This requires recreating the work queue and ThreadPoolExecutor so this needs to be called before doing any work with the pool .
9341	For backward compatibility with the previous string based mode
9342	For backward compatibility with the previous string based mode This is needed for microcontainer as it gets confused with overloaded setters .
9343	Execute a task
9344	Return the applicable SYSTEM system identifier resorting to external RESOLVERs if necessary .
9345	Return the applicable PUBLIC or SYSTEM identifier resorting to external resolvers if necessary .
9346	Query an external RFC2483 resolver for a system identifier .
9347	Query an external RFC2483 resolver for a public identifier .
9348	Query an external RFC2483 resolver .
9349	Append two vectors returning the result .
9350	Find the URNs for a given system identifier in all catalogs .
9351	Find the URN for a given system identifier .
9352	Return the applicable SYSTEM system identifiers .
9353	Return all applicable SYSTEM system identifiers in this catalog .
9354	Search the subordinate catalogs in order looking for all match .
9355	Parse an XML Catalog file .
9356	Parse an XML Catalog stream .
9357	Checks if the underlying file for this connection exists .
9358	We should probably disallow this?
9359	compareAndSet next field
9360	Helps out a deletion by appending marker or unlinking from predecessor . This is called during traversals when value field seen to be null .
9361	Return value if this node contains a valid key - value pair else null .
9362	Create and return a new SnapshotEntry holding current mapping if this node holds a valid value else null
9363	compareAndSet right field
9364	Create logger .
9365	List the set of JBossObjects
9366	Get the class short name
9367	Implementation of String
9368	Return an iterator over all contained property names .
9369	Get a property group for the given property base .
9370	Get a compatible constructor for the given value type
9371	Copy an serializable object deeply .
9372	Dereference an object
9373	Initialized listener lists and the JNDI properties cache map
9374	Called by setProperty to update the jndiMap cache values .
9375	Returns a set of keys for all entries in this group and optionally all of the keys in the defaults map .
9376	Returns a set of entrys for all entries in this group and optionally all of the entrys in the defaults map .
9377	Remove a property listener .
9378	Fire a property added event to the given list of listeners .
9379	Fire a property removed event to the given list of listeners .
9380	Fire a property changed event to the given list of listeners .
9381	Fire a property changed event to all listeners .
9382	Make a optionaly prefixed property name .
9383	Load properties from a PropertyReader .
9384	Load properties from a PropertyReader specifed by the given class name .
9385	Get a property group for the given property base at the given index .
9386	Returns the boolean value to inform id DTD was found in the XML file or not
9387	Attempt to use the systemId as a URL from which the schema can be read . This checks to see whether the systemId is a key to an entry in the class entity map .
9388	Attempt to use the systemId as a URL from which the schema can be read . This uses the systemID as a URL .
9389	Resolve the systemId as a classpath resource . If not found the systemId is simply used as a classpath resource name .
9390	Sets as an Element created by a String .
9391	Normalize a public identifier .
9392	Encode a public identifier as a publicid URN .
9393	Decode a publicid URN into a public identifier .
9394	Replace one string with another .
9395	Start the watch .
9396	Stop the watch .
9397	Return a synchronized stop watch .
9398	Compares this object with the specified object for order .
9399	Generate a hash code for a byte array .
9400	Generate a hash code for an object array .
9401	Initializes the cache creating all required objects and initializing their values .
9402	Coerce and set specified value to field .
9403	Return the next token in the catalog file .
9404	Setup the parsing formats . Offered as a separate static method to allow testing of locale changes since SimpleDateFormat will use the default locale upon construction . Should not be normally used!
9405	Add a vertex to the graph
9406	Set a root vertex . If root does no exist in the graph it is added .
9407	Remove a vertex from the graph
9408	Perform a depth first serach using recursion .
9409	Find the spanning tree using a DFS starting from v .
9410	Search the verticies for one with data .
9411	Search the graph for cycles . In order to detect cycles we use a modified depth first search called a colored DFS . All nodes are initially marked white . When a node is encountered it is marked grey and when its descendants are completely visited it is marked black . If a grey node is ever encountered then there is a cycle .
9412	Normalizes the given string .
9413	Parse the given XML string and return the root Element
9414	Parse the given XML stream and return the root Element
9415	Parse the given input source and return the root Element
9416	Create an Element for a given name
9417	Transform the giveen qualified name into a QName
9418	Copy attributes between elements
9419	True if the node has child elements
9420	Gets child elements
9421	Get the concatenated text content or null .
9422	Gets the child elements for a given local name without namespace
9423	Gets parent element or null if there is none
9424	Add a transaction waiting for a lock
9425	Read a catalog from an input stream .
9426	Read the catalog behind the specified URL .
9427	Return the current host internet address .
9428	Tries to resolve the entity using the thread specific catolog resolvers
9429	Sets the system property to a class when the class is available .
9430	Format a string buffer containing the Class Interfaces CodeSource and ClassLoader information for the given object clazz .
9431	Describe the class
9432	Get the short name of the specified class by striping off the package name .
9433	Get the package name of the specified class .
9434	Force the given class to be loaded fully .
9435	Get the wrapper class for the given primitive type .
9436	Populates a list with all the interfaces implemented by the argument class c and all its superclasses .
9437	Returns an array containing all the unique interfaces implemented by the argument class c and all its superclasses . Interfaces that appear multiple times through inheritence are only accounted for once .
9438	Check if the given class is a primitive wrapper class .
9439	Instantiate a java class object
9440	Returns attribute s getter method . If the method not found then NoSuchMethodException will be thrown .
9441	Returns attribute s setter method . If the method not found then NoSuchMethodException will be thrown .
9442	Convert a given String into the appropriate Class .
9443	Get a system property
9444	Get an array of filenames to load .
9445	Maintain the elements in the set . Removes objects from the set that have been reclaimed due to GC .
9446	Return an iteration over the elements in the set .
9447	Create a URL lister for the supplied protocol
9448	Returns an entry set for all properties in this group .
9449	Add a bound property listener .
9450	Remove a bound property listener .
9451	Whether a string is interpreted as the null value
9452	Locate a value editor for a given target type .
9453	Register an editor class to be used to editor values of a given target class .
9454	Convert a string value into the true value for typeName using the PropertyEditor associated with typeName .
9455	Retrieve the context classloader for the given thread
9456	Detects exception contains is or a ApplicationDeadlockException .
9457	Schedules a new timeout .
9458	Timeout worker method .
9459	Create a subcontext including any intermediate contexts .
9460	Lookup an object in the default initial context
9461	Checks an object implements the given class
9462	Append Class Info
9463	Lookup an allowed transition given its name .
9464	Load the properties from the propertyFile and build the resources from it .
9465	Obtain the verbosity setting from the properties .
9466	Obtain the relativeCatalogs setting from the properties .
9467	Obtain the list of catalog files from the properties .
9468	Return the current list of catalog files .
9469	Obtain the preferPublic setting from the properties .
9470	Obtain the static - catalog setting from the properties .
9471	SAX resolveEntity API .
9472	Transformer resolve API .
9473	Attempt to construct an absolute URI
9474	Use the thread context class loader to resolve the class
9475	Coerce and invoke the property setter method on the instance .
9476	Returns the localname part of a QName which is the whole name if it has no prefix .
9477	Returns the namespace URI for the specified prefix at the specified context node .
9478	Returns the namespace URI for the namespace to which the element belongs .
9479	Create a list from an enumeration
9480	Get an input stream for the given filename .
9481	Load properties from a file into a properties map .
9482	Read properties from each specified filename
9483	Add an edge to the vertex . If edge . from is this vertex its an outgoing edge . If edge . to is this vertex its an incoming edge . If neither from or to is this vertex the edge is not added .
9484	Add an outgoing edge ending at to .
9485	Add an incoming edge starting at from
9486	Check the vertex for either an incoming or outgoing edge mathcing e .
9487	Remove an edge from this vertex
9488	Search the outgoing edges looking for an edge whose s edge . to == dest .
9489	Search the outgoing edges for a match to e .
9490	What is the cost from this vertext to the dest vertex .
9491	This recursive method writes all matching files and directories to the jar output stream .
9492	Check if there are more elements .
9493	Forwards an event into state machine . State machine will deliver the event to a handler methods responsible for its processing . If there is no handler method found then event gets silently ignored and this call has no effect .
9494	Performs the actual installation of the JvmTypeProvider .
9495	version 2 . 2 . x
9496	Dispatch the given action . Dispatching is always done on the JavaFX application thread even if this method is called from another thread .
9497	A filtered event - stream of actions of the given type .
9498	Taken from mvvmFX
9499	One to many
9500	Many to one
9501	Strict many to one
9502	Strict one to one
9503	Uses the page settings .
9504	Assert that the generated command matches the specified command .
9505	- Dmode = simple default is complex
9506	- Dmode = simple default is complex - Dfile . encode = utf - 8 or other
9507	Sum of Degree of Morphemic Freedom of One - Character
9508	Returns a map which contains only those arguments that the superclass understands .
9509	Load words from jdbc
9510	Check if the datasource is able to provide connections .
9511	ITERABLES - complete
9512	ARRAYS - complete
9513	LISTS - complete
9514	COLLECTIONS - complete
9515	todo add generics checks
9516	eithers - left
9517	eithers - right
9518	validations - failures
9519	validations - successful
9520	try - successful
9521	Registers a database to further execute SQL commands
9522	Simply runs a SQL command used for udpates inserts which the result doesn t matter .
9523	Used generally when the result is assigned to a variable
9524	Interprets a strongly - typed number array to array of booleans . If a value found in the array is greater than 0 return true false otherwise .
9525	Executes a query which returns all rows in the entity table that match the fields of the example object having values other than the defaults .
9526	Upgrades the table that represents the associated entity . This will typically be an ALTER TABLE statement .
9527	Backs up the current table to a CSV file .
9528	Restores a table from a text file .
9529	The default content for this Activity has a TextView that is shown when the list is empty . If you would like to change the text call this method to supply the text it should use .
9530	Dumps a database table to a CSV file in the default location . Returns the number of rows written to the file .
9531	Removes enclosing quotes and unescapes double quotes
9532	Returns values from a CSV String .
9533	Parses a CSV row containing name = value pairs .
9534	Returns a String containing a comma - separated list of name = value pairs from a map .
9535	Joins items of a text list separating items by comma .
9536	Joins items of a text array separating items by comma .
9537	Populate the model of a database and its associated tables from a file in support of incremental compilation .
9538	Write the database info and associated tables to a file in support of incremental compilation .
9539	Verifies that the entity has exactly one id field of type long .
9540	Builds a BaseDaoModel from the class passed as attribute baseDaoClass of the annotation Entity
9541	Morph bind type like INT == > Int so it can be used in a Cursor getXxx method name . Never called at runtime .
9542	Attempts to import a database table from a CSV file in the default location .
9543	Backup all tables to CSV files one per table
9544	Restore all tables from CSV files one per table
9545	Write the current model state to a file in support of incremental compilation .
9546	Returns a JPA Query with all previously specified parameters added .
9547	Returns a JPA TypedQuery with all previously specified parameters added .
9548	Renders this object as JPQL query string .
9549	Deletes a single row by ID . Returns the number of rows deleted or 0 if unsuccessful .
9550	Insert or update .
9551	Update all columns for the row having the ID matching the provided entity s ID .
9552	Adds a NOT IN predicate .
9553	Adds a sub - query predicate .
9554	Makes the next intentions stack active using a round robin scheme .
9555	Returns an empty intentions stack . Creates a new intentions stack and adds it to the list of stacks if needed .
9556	Add the set of bindings for a given plan to this store . Any previously stored bindings for this plan will be replaced .
9557	Selects a plan instance from the set of plan bindings using the given policy .
9558	Selects a plan instance at random from the set of plan bindings .
9559	Sets the plan instance variables using the given results set .
9560	Gets the result at the given index from the results set .
9561	Gets the parents of this object in the Goal - Plan tree .
9562	Gets all the children of this object in the Goal - Plan tree .
9563	Grows the given array by the given size .
9564	Creates a new logger .
9565	Performs a single step of this plan i . e . progresses this intention .
9566	Sets the list of goals for this agent .
9567	Waits for user to press a key before continuing . Useful for connecting to a profiler
9568	Initialises the intention selection pools .
9569	Starts the intention selection threads that each handle a pool of agents .
9570	Starts the intention selection threads .
9571	Stops the intention selection threads .
9572	Registers a new Jill extension .
9573	Resets the global state .
9574	Creates a given number of agents of a given Class and adds the newly created agents to the given store .
9575	Loads the given plan classes and sets up parent - child links with the given goal type .
9576	Creates the specified number of agent instances of the given type and adds them to the catalog .
9577	Loads the class of given name and type .
9578	Loads a Jill extension .
9579	Checks if two objects have the same name . The check is case sensitive .
9580	Returns a usage string for the Jill command line arguments .
9581	Parses the given command line arguments .
9582	Parses the given command line argument and associated option . Will abort if an unrecoverable error occurs .
9583	Evaluates the given query on the given belief base for the agent .
9584	Gets the object at the given index of the catalog .
9585	Find an object by name . Can be very expensive for large catalogs since a name comparison is performed in sequence on the objects in the catalog until a match is found . Search is case sensitive .
9586	Pushes a new object to the top of the catalog .
9587	Gets the object at the given index in the catalog .
9588	Pushes an object on to the top of the stack .
9589	Pops the Object at the top of the stack .
9590	Gets the type of the given object .
9591	Checks if the given query run on the given belief returns a match .
9592	Sample program to test pattern matching .
9593	Encodes the String str into a sequence of bytes using the character set specified in CHARSET storing the result into a new byte array .
9594	Push the given goal to the given stack .
9595	Send a message to an agent .
9596	Send a message to this agent .
9597	Returns this agent s top level goals .
9598	Creates a new belief set with the given fields .
9599	Adds a new belief to the specified belief set .
9600	Evaluates the given query against this agent s belief base .
9601	Forces this agent to enter an idle state irrespective of whether it has any active intentions or not . The agent will continue to remain in the suspected state until some event forces it to become active again at which point it will resume operation .
9602	Gets the field of this belief set that has the given name .
9603	Helper function to add beliefs about neighbours .
9604	Builds a new name .
9605	Runs this intentions selction thread .
9606	Checks if this agent s execution stack is valid . The stack is valid if it is not null or empty and has not exceeded the maximum size limit of 255 .
9607	Removes the given list of agents from the list of active agents .
9608	Manages the goal at the top of the execution stack of an agent . All relevant plans are evaluated to see if their context conditions hold . Plans deemed applicable are then added to the list of bindings from which a plan instane will be eventually selected .
9609	Terminates this intention selector thread .
9610	and this thread is still iterating over activeagents
9611	Move a disc from pin A to pin B .
9612	Initialises the Jill engine .
9613	Blocks until all agents have finished executing plans and have gone idle .
9614	Termiantes the Jill engine .
9615	Checks if the system is idle i . e . all the agents pools are idle
9616	Gets the ID of the intention selection pool to which the given agent belongs .
9617	Returns the expression currently active in the building context .
9618	Sets the expression currently active in the building context .
9619	Create a new join or find an existing join on the specified attribute .
9620	Join recursively using the split property path .
9621	Find an existing join for the property or create a new join .
9622	Indicates whether the response reaches the end of the elements available on the server .
9623	Get upload stream from given HTTP request . This method expects on HTTP request a multipart form with a single part of byte stream type . Returns an upload stream instance wrapping the form stream part .
9624	Handle request for a REST resource . Locate REST method based on request path info execute method and serialize back to client returned value if any . See class description for general behavior .
9625	Test if content type has a parameter with requested name and value .
9626	Get parameter value or null if parameter does not exist .
9627	Parse content type parameters . Given parameters expression should be valid accordingly grammar from class description ; it should not start with parameters separator that is semicolon .
9628	Configure underlying transaction manager .
9629	Returns the target file for a given artifact type and filename . This method takes care about eventually creating non existing directories or protect existing files to be overridden .
9630	Writes a generated artifact to a file .
9631	Initialize instance fields from managed class configuration object .
9632	Get implementation class constructor . Managed class mandates a single constructor with parameters no matter if private or formal parameters count . If both default constructor and constructor with parameters are defined this method returns constructor with parameters . Returns null if implementation class is missing .
9633	Build and return this managed class string representation .
9634	Get Java reflective method from interface . This getter attempt to locate a method with the same signature as requested base class method in any interface the declaring class may have . If no method found in interfaces or no interface present return given base class method . If requested base class method is declared in multiple interfaces this getter returns the first found but there is no guarantee for order .
9635	Return field class or actual type argument if given field is a list .
9636	Get dependency value of requested type . See class description for a discussion about supported types and circular dependencies .
9637	Compares the content of the temporary file with the possibly existing target file . If both are equal the temporary file is deleted . Otherwise the old target file is deleted and the new generated file is renamed . This prevents time stamp changes for the target file if nothing changed since the last generation .
9638	Registers one or more default links for a specific relation type . These links are used when no links with this relation type are provided by the server .
9639	Registers a default link template for a specific relation type . This template is used when no template with this relation type is provided by the server .
9640	Handles links embedded in an HTTP response .
9641	Handles links embedded in HTTP response headers .
9642	Handles links embedded in JSON response bodies .
9643	Parses a JSON object for link information .
9644	Returns the element with the specified key from the map . Creates adds and returns a new element if no match was found .
9645	Handles allowed HTTP methods and other capabilities reported by the server .
9646	Shows whether the server has indicated that a specific HTTP method is currently allowed .
9647	Register all instance post - processors .
9648	Register instance factory to requested instance type .
9649	Register instance processor . Only a single instance per processor class is allowed .
9650	Register global processors for managed classes . Post - processors are singletons and only one post - processor instance of a type is allowed .
9651	INSTANCE RETRIEVAL ALGORITHM
9652	Adds an argument to the template . If the list of arguments does not exist it will be created .
9653	Returns the list of target files . Either by using the producer or by simply returning the internal list .
9654	Marshals the object to an XML String .
9655	Initializes the model .
9656	Checks if this model has a reference to the given template file .
9657	Creates an instance by reading the XML from a reader .
9658	Creates an instance by reading the XML from a file .
9659	Set this method request URI path that is the path component by which this method is referred into request URI . If given request URI path is null uses method name converted to dashed case .
9660	Provides an observable stream of elements .
9661	Create a scope instance from its string value .
9662	Initialize field from named context parameter .
9663	Adds a new CaptureAppender to an existing logger .
9664	Removes a CaptureAppender from a logger .
9665	Deletes all cached log entries .
9666	Read mixed body entities from HTTP request creating and initializing arguments accordingly given formal parameters . The number and order of arguments from multipart mixed message should respect formal parameter types . Also stream argument if present should be a single one and the last on arguments list .
9667	Parses all model files in the directories and all resources . y
9668	Tries to resolve all proxies .
9669	Returns files that end with java and all directories . Files and directories started with a . are excluded .
9670	Parse the directory and it s sub directory .
9671	Determines if all proxies in the model are resolved .
9672	Returns a list of all objects .
9673	Sets the model directories to parse . If no list exists internally it will be created if necessary .
9674	Sets the list of file extensions . If no list exists internally it will be created if necessary .
9675	Sets the model resources to parse . If no list exists internally it will be created if necessary .
9676	Reads the next row .
9677	type IN (
9678	Set Nullable Parameters
9679	java . sql . Statement
9680	Create an instance type from its string value .
9681	Merges the template and context into a file . If the directory of the file does not exists the full directory path to it will be created .
9682	Returns the model directory .
9683	Returns the template directory .
9684	Serialize XML document to output stream of given HTTP response .
9685	Starts the browser and loads the set url in the web view .
9686	Configures the browser window .
9687	Print callback . Checks if the print feature is enabled . If so launch the system print job .
9688	Utility method to copy a stream to another stream .
9689	Retrieve managed instance from application factory and invoke given method on that instance .
9690	Attach this instance to HTTP servlet request . Load this instance state from HTTP servlet request and mark it as attached .
9691	Detach request context instance from HTTP servlet request . Invoking getters on this instance after detaching is considered a bug .
9692	Get request cookies .
9693	Dump this request context state to error logger . If this instance is not attached this method is NOP .
9694	Collect invocation meters from application managed classes .
9695	Configure events stream instance from configuration object .
9696	Set the host address for client connected to this event stream .
9697	Get named parameter throwing exception if not found .
9698	Removes a prefix from a path . If the path does not start with the prefix the unchanged path is returned .
9699	Gets the longest common parent directory path of two paths .
9700	Converts an absolute path into a relative one .
9701	Converts an relative path into an absolute one .
9702	Counts the number of directories in a given path .
9703	Dump throwable stack trace and request context to application logger .
9704	Send object back to client encoded JSON with given HTTP status code . Take care to set content type length and language . Content language is extracted from request context locale .
9705	Adds another template to the list . If the list does not exist it will be created .
9706	Adds all templates to the list . If the list does not exist it will be created .
9707	Initalizes the object .
9708	Returns a list that contains all models that reference the given template .
9709	Controls whether a save button is shown and fields are editable .
9710	Deletes the element .
9711	Handler for deleting the element .
9712	Uses managed class constructor to create new instance with provided arguments . Arguments should be in order types and number required by constructor signature .
9713	Returns all saved filenames .
9714	Returns the sum of all results .
9715	Returns a summary row for a whole test run .
9716	Generates a HTML summary row for a subdirectory .
9717	Load service defined by managed class interface and return service instance . This factory does not support arguments . Service provider should be present into run - time otherwise no provider exception is thrown .
9718	Returns the setup class .
9719	Returns a list of model directories to parse .
9720	Returns a list of model resources to parse .
9721	Sets a set of candidates for selection .
9722	Load configuration document from file .
9723	Handler for errors reported by REST endpoints .
9724	Test if method formal parameters designates a strict object that is is not primitive array collection or map .
9725	Uses JSON deserializer to parse method invocation arguments accordingly formal parameters list .
9726	Parse JSON from input stream accordingly given type . Return parsed object .
9727	extracts and removes parameters from a cell .
9728	javax . persistence . Query & javax . persistence . TypedQuery
9729	Test if given HTTP request is performed via XMLHttpRequest .
9730	Test if HTTP request is from Android .
9731	Refresh when child elements are created or updated
9732	Lists all properties on a bean type that have a specific annotation on their getter or backing field .
9733	Returns an annotation of a specific type on a property s getter or its backing field .
9734	Log formatted message to Java logger since framework logger is not yet initialized .
9735	Uses the Ruby Whois gem to perform a whois lookup
9736	Check if Ruby Whois gem has a parser for a specific registrar
9737	Get remotely accessible managed class registered to a certain interface class .
9738	Get managed method that is remotely accessible and has requested name .
9739	Checks whether the log messages contain the expected exception .
9740	Checks whether the log messages do not contain the expected text .
9741	Get Primitive Wrappers
9742	java . sql . Wrapper
9743	Set common HTTP response headers and delegates actual serialization to subclass . This method disables cache and set content type to value returned by subclass .
9744	Get value of the named cookie or null if cookie does not exist .
9745	Add cookie to HTTP response of the current request context . Override cookie value if already exists .
9746	Remove cookie from HTTP response . If named cookie does not exist this method does nothing .
9747	Get cookies iterator . Return empty iterator if not cookies on HTTP request .
9748	Returns an existing target file list producer instance or creates a new one if it s the first call to this method .
9749	Adds a public field to the constructed class .
9750	Compiles the class and returns a class object which contains all added fields .
9751	Test that selected image identified by given token is the right response .
9752	Challenge value associated with image file . File name is converted to lower case extension removed and non letter characters replaces with space that is non letters are considered words separators .
9753	Adds a trailing slash to the URI if it does not already have one .
9754	SECURITY CONTEXT INTERFACE
9755	Get HTTP request from current request context .
9756	Invocation handler implementation . Every method invocation on managed class interface is routed to this point . Here actual container services are implemented and method is invoked against wrapped instance .
9757	Helper method for mutable transaction execution .
9758	Helper method for immutable transaction execution .
9759	Returns a list of all matching files .
9760	Returns the last matching file .
9761	Returns the parser configuration .
9762	Test if request path starts with path component . This predicate returns true if first path component from given request path equals requested path component . Comparison is not case sensitive . Request path should start with path separator otherwise this predicate returns false .
9763	Returns a list of factories for the given model type .
9764	Get HTTP session from current request creating it if necessary . This method should be call inside a request context otherwise bug error is thrown .
9765	Serialize this file resource to HTTP response . Disable cache and set content type and content length .
9766	Fetches meta data such as links from the server .
9767	Handle request for a resource . Locate resource method based on request path from request context execute method and serialize back to client returned resource . See class description for general behavior .
9768	Closes the SQL statement .
9769	Closes all event streams still opened when event stream manager is destroyed .
9770	Enables or disabled buttons based on the Allow HTTP header .
9771	Called to upload new blob data to the server .
9772	Deletes the blob .
9773	extracts and removes parameters from a row .
9774	Returns all argument names .
9775	Schedule periodic task execution .
9776	Schedule timeout task reseting timeout period if given timeout task is already pending .
9777	Create views meta pool from given managed view configuration object . Configuration object is described on class description .
9778	Returns the next matching file .
9779	Configures the application .
9780	Prints Welcome Banner .
9781	Prints Stopped Banner .
9782	Creates the Chameleon instance . The instance is not started .
9783	Registers a shutdown hook to stop nicely the embedded framework .
9784	Triggers the action .
9785	Handler for triggering the action .
9786	Replaces a row with one or more results .
9787	Gets the sum of all results .
9788	setter for score - sets The score associated with the answer .
9789	getter for variants - gets List of alternative answer summaries .
9790	setter for variants - sets List of alternative answer summaries .
9791	getter for questionType - gets The class of the question determined by either an automatic question classification process or human judgment .
9792	setter for questionType - sets The class of the question determined by either an automatic question classification process or human judgment .
9793	getter for token - gets The corresponding token for the focus .
9794	getter for depLabel - gets The dependency label of the token with respect to its head .
9795	setter for depLabel - sets The dependency label of the token with respect to its head .
9796	getter for semanticType - gets A semantic type typically the name of an Entity Annotation type .
9797	setter for semanticType - sets A semantic type typically the name of an Entity Annotation type .
9798	getter for sections - gets Content of sections in the document .
9799	setter for sections - sets Content of sections in the document .
9800	indexed getter for sections - gets an indexed value - Content of sections in the document .
9801	indexed setter for sections - sets an indexed value - Content of sections in the document .
9802	getter for uris - gets Array of uris that identify this named entity . There may be more than one uri if this named entity is ambiguous .
9803	setter for uris - sets Array of uris that identify this named entity . There may be more than one uri if this named entity is ambiguous .
9804	getter for types - gets A list of concept types that the concept belongs to .
9805	setter for types - sets A list of concept types that the concept belongs to .
9806	getter for targetType - gets The actual target type annotation .
9807	setter for targetType - sets The actual target type annotation .
9808	getter for rank - gets Rank of this result in the original hit - list .
9809	setter for rank - sets Rank of this result in the original hit - list .
9810	getter for queryString - gets The query string associated with the hit .
9811	setter for queryString - sets The query string associated with the hit .
9812	getter for candidateAnswers - gets CandidateAnswerVariants generated from this SearchResult .
9813	setter for candidateAnswers - sets CandidateAnswerVariants generated from this SearchResult .
9814	indexed getter for candidateAnswers - gets an indexed value - CandidateAnswerVariants generated from this SearchResult .
9815	indexed setter for candidateAnswers - sets an indexed value - CandidateAnswerVariants generated from this SearchResult .
9816	getter for query - gets The query in the native syntax of the corresponding search engine .
9817	setter for query - sets The query in the native syntax of the corresponding search engine .
9818	getter for hitList - gets Hit list of search results sorted in descreasing order of relevance score .
9819	setter for hitList - sets Hit list of search results sorted in descreasing order of relevance score .
9820	indexed getter for hitList - gets an indexed value - Hit list of search results sorted in descreasing order of relevance score .
9821	indexed setter for hitList - sets an indexed value - Hit list of search results sorted in descreasing order of relevance score .
9822	getter for abstractQuery - gets The abstract query from which this actual query was generated .
9823	setter for abstractQuery - sets The abstract query from which this actual query was generated .
9824	getter for searchId - gets An identifier for this search result . Used to collect hit - list objects that belong to this search result after they ve been split out for parallel processing then gathered up again .
9825	setter for searchId - sets An identifier for this search result . Used to collect hit - list objects that belong to this search result after they ve been split out for parallel processing then gathered up again .
9826	setter for docId - sets A unique identifier for the document that conatins this passage .
9827	getter for offsetInBeginSection - gets Character offset of the start of this passage within the section that contains this passage .
9828	setter for offsetInBeginSection - sets Character offset of the start of this passage within the section that contains this passage .
9829	getter for offsetInEndSection - gets Character offset of the end of this passage within the section that contains this passage .
9830	setter for offsetInEndSection - sets Character offset of the end of this passage within the section that contains this passage .
9831	getter for beginSection - gets The start section of this passage within the document that contains this passage .
9832	setter for beginSection - sets The start section of this passage within the document that contains this passage .
9833	getter for endSection - gets The end section of this passage within the document that contains this passage .
9834	setter for endSection - sets The end section of this passage within the document that contains this passage .
9835	getter for aspects - gets Aspects of the gold standard passage .
9836	setter for aspects - sets Aspects of the gold standard passage .
9837	getter for triple - gets The relevant triple searched in the RDF store .
9838	setter for triple - sets The relevant triple searched in the RDF store .
9839	getter for sourceRelation - gets The triple from which the search result was generated
9840	setter for sourceRelation - sets The triple from which the search result was generated
9841	getter for subject - gets The subject of the triple - always a URI .
9842	setter for subject - sets The subject of the triple - always a URI .
9843	getter for predicate - gets The predicate of the triple - always a URI .
9844	setter for predicate - sets The predicate of the triple - always a URI .
9845	getter for isObjUri - gets Boolean flag - true of object field is a URI false otherwise .
9846	setter for isObjUri - sets Boolean flag - true of object field is a URI false otherwise .
9847	getter for operator - gets The operator associated with this concept .
9848	setter for operator - sets The operator associated with this concept .
9849	getter for operatorArgs - gets The operator arguments in a complex query concept .
9850	setter for operatorArgs - sets The operator arguments in a complex query concept .
9851	getter for concept - gets The abstract concept that the text span conveys .
9852	getter for score - gets The confidence score that the concept mention matches the concept .
9853	getter for text - gets The candidate answer string .
9854	setter for text - sets The candidate answer string .
9855	getter for id - gets The id of the concept type .
9856	setter for id - sets The id of the concept type .
9857	getter for name - gets A human readable concept label .
9858	getter for abbreviation - gets The abbreviation of the name label .
9859	setter for abbreviation - sets The abbreviation of the name label .
9860	setter for concept - sets The relevant concept searched in the ontology .
9861	getter for variants - gets List of candidate answer variants that were merged into this final answer .
9862	setter for variants - sets List of candidate answer variants that were merged into this final answer .
9863	getter for namedEntityTypes - gets List of Named Entity types associated with this concept .
9864	setter for namedEntityTypes - sets List of Named Entity types associated with this concept .
9865	getter for conceptType - gets The type of this concept .
9866	setter for conceptType - sets The type of this concept .
9867	getter for occurrences - gets The occurrences of this variant .
9868	setter for occurrences - sets The occurrences of this variant .
9869	getter for concepts - gets The list of query concepts that make up this abstract query . The list is ordered .
9870	setter for concepts - sets The list of query concepts that make up this abstract query . The list is ordered .
9871	getter for originalText - gets The lexical string in the question .
9872	setter for originalText - sets The lexical string in the question .
9873	getter for args - gets The arguments for the operator .
9874	setter for args - sets The arguments for the operator .
9875	getter for label - gets The semantic role label .
9876	setter for label - sets The semantic role label .
9877	Find the next clear bit in the bit set .
9878	Thread safe set operation that will set the bit if and only if the bit was not previously set .
9879	This code was copied form MMAPDirectory in Lucene .
9880	Creates a new instance of CacheValue the cache capacity should be used for the given file .
9881	Rebuild the backing array with a different size .
9882	method to generate a valid HELM2 of this object
9883	method to check if all open brackets are closed
9884	method to set the details of the current connection
9885	method to get a valid HELM2 of the connection notation
9886	method to add a single element to the group
9887	main method to run a single HELM2Parser from the command line
9888	method to validate the polymer id in the simple polymer section the id can be peptide rna chem or blob
9889	method to validate the polymer id in the connection section the id can be peptide rna chem or blob the ratio + range was also included the ambiguity is also proven
9890	method to validate the details about the connections ; hydrogen bonds are here included
9891	method to validate the group id
9892	method to validate the repeating section it can be a single number or a range
9893	method to check if the last added polymer element is a peptide or a rna
9894	method to generate a JSON - Object from the NotationContainer
9895	method to get the simple polymer type
9896	method to get the current grouping notation
9897	method to generate for all sections a HELM2 string
9898	method to generate a valid HELM2 string for the first section
9899	method to generate a valid HELM2 string for the second section
9900	method to generate a valid HELM2 string for the third section
9901	method to generate a valid HELM2 string for the fourth section
9902	method to get the ID s from all polymers and groups
9903	method to get a specific polymer by its id
9904	method to generate the right PolymerElements in the case of Chem and Blob only one Monomer is allowed
9905	method to convert the given string into the HELM2 format
9906	method to add annotation to this monomer
9907	method to change the default count of one to the user - defined
9908	method to decide which of the MonomerNotation classes should be initialized
9909	method to decide which of the two Constructors of MonomerNotationGroupElement should be called
9910	method to decide which of the Entities classes should be initialized
9911	method to get the ratio or the interval of this group in the case of an interval it returns a list of two values
9912	method to parse the given HELM2 string in the case of an invalid HELM2 notation exception is thrown
9913	method to set for each nucleotide the sugar the base and the phosphat
9914	method to add ambiguity to the group
9915	This method returns an approximation of this thread s execution statistics for the entire period since the thread was started . Writes are done without memory barriers to minimize the performance impact of statistics gathering so some or all returned data may be arbitrarily stale and some fields may be far staler than others . For long - running pools however even approximate data may provide useful insights . Your mileage may vary however you have been warned ; - )
9916	This is a convenience factory method that extracts the list of nodes from the edges . It assumes that every node has at least one edge going from or to it .
9917	This factory method creates a graph with the given nodes and edges . It expressly allows nodes that have no edges attached to them .
9918	This method does the reachability analysis in a way that is useful for many other methods .
9919	A directed graph defines a partial order through reachability and this method sorts the graph s nodes based on that partial order .
9920	Subscribes a static method to a service name pattern .
9921	Determine how may service name pattern subscriptions have occurred .
9922	Unsubscribes from a service name pattern .
9923	Returns a response from a service request .
9924	Synchronously returns a response from a service request .
9925	Blocks to process incoming CloudI service requests
9926	Shutdown the service successfully
9927	This method checks if a given Throwable is fit for local handling returning it if it is and throwing it otherwise .
9928	Unlocks and sets runState to newRunState .
9929	Tries to construct and start one worker . Assumes that total count has already been incremented as a reservation . Invokes deregisterWorker on any failure .
9930	Tries to add one worker incrementing ctl counts before doing so relying on createWorker to back out on failure .
9931	Callback from ForkJoinWorkerThread constructor to establish and record its WorkQueue .
9932	Final callback from terminating worker as well as upon failure to construct or start a worker . Removes record of worker from array and adjusts counts . If pool is shutting down tries to complete termination .
9933	Tries to create or activate a worker if too few are active .
9934	Top - level runloop for workers called by ForkJoinWorkerThread . run .
9935	Possibly blocks worker w waiting for a task to steal or returns false if the worker should terminate . If inactivating w has caused the pool to become quiescent checks for pool termination and so long as this is not the only worker waits for up to a given duration . On timeout if ctl has not changed terminates the worker which will in turn wake up another worker to possibly repeat this process .
9936	Returns a cheap heuristic guide for task partitioning when programmers frameworks tools or languages have little or no idea about task granularity . In essence by offering this method we ask users only about tradeoffs in overhead vs expected throughput and its variance rather than how finely to partition tasks .
9937	Returns common pool queue for an external thread .
9938	Performs helpComplete for an external submitter .
9939	Submits a ForkJoinTask for execution .
9940	Creates and returns the common pool respecting user settings specified via system properties .
9941	Waits if necessary for at most the given time for the computation to complete and then retrieves its result if available .
9942	This is a convenience method for building simple JSON strings . It passes an AJsonSerHelper to a callback and builds a string based on what the callback does with it .
9943	This method returns an approximation of statistical data for all worker threads since the pool was started . Updates of the statistical data is done without synchronization so some or all of the data may be stale and some numbers may be pretty outdated while others are very current even for the same thread . For long - running pools however the data may be useful in analyzing behavior in general and performance anomalies in particular . Your mileage may vary you have been warned! ; - )
9944	Creates an AList from a given list of elements .
9945	Returns a copy of this AList with elements in reversed order .
9946	Matches a predicate against collection elements and returns true iff it matches them all .
9947	Applies a binary operator to a start value and all elements of this sequence going left to right .
9948	Applies a binary operator to a start value and all elements of this list going left to right .
9949	Add a new task to the top of the localQueue incrementing top . This is only ever called from the owning thread .
9950	This is a convenience method that creates an AOption based on Java conventions .
9951	Returns an ALongHashMap initialized from separate keys and values collections . Both collections are iterated exactly once and are expected to have the same size .
9952	Returns an empty AListMap instance with a given equalityForEquals . Calling this factory method instead of the constructor allows internal reuse of empty map instances since they are immutable .
9953	Returns an AHashMap instance with a given equalityForEquals initializing it from separate keys and values collections . Both collections are iterated exactly once and are expected to have the same size .
9954	Returns an AListMap instance with a given equalityForEquals initializing it from separate keys and values collections . Both collections are iterated exactly once and are expected to have the same size .
9955	There is usually a performance gain to be had by overriding this default implementation
9956	- > hack to undo this
9957	Marshals the specified user - defined value type object to single XML value string representation .
9958	Returns sub sequence .
9959	Creates binary search wrapper over a list of comparable elements .
9960	Creates binary search wrapper over a list with given comparator .
9961	Send an email
9962	Send a JavaMail message
9963	Specify a handler that will be called for all HTTP methods
9964	Specify a filter handler that will be used to wrap route executions
9965	Delimeter that separates role names in tag attribute
9966	Converts packing Long Int
9967	Remove duplicate Strings from the given array . Also sorts the array as it uses a TreeSet .
9968	Stitching LIKE SQL percent .
9969	Run from the web interface .
9970	Check the user s password and execute the login request
9971	Get user login information if the session does not exist then try to obtain from the Cookie if cookie exists then decrypt obtain user information .
9972	Obtain user information from the Session
9973	Check Password salt password planpassword .
9974	Store user information in a cookie logged in .
9975	Generating system user login ID string .
9976	Obtain user information from the Cookie
9977	Forwards HTTP request to the specified path .
9978	Add File Separator
9979	Get shaping parameters submitted by the browser
9980	Log with DEBUG level
9981	Examine stack trace to get caller
9982	Converts char array into byte array by stripping the high byte of each character .
9983	Converts char sequence into byte array .
9984	Converts byte array to char array by simply extending bytes to chars .
9985	Converts char sequence into ASCII byte array .
9986	Lookups for locale data and creates new if it doesn t exist .
9987	Start this job in several seconds
9988	Crop an image
9989	Run the code in a new thread after a delay
9990	Run the code in the same thread than caller .
9991	Returns rest operations object suitable for use with the specified credentials
9992	Rendering errors information in Json format .
9993	In the form of JSON rendering forbidden information .
9994	Render view as a string
9995	Based on the current path structure is going to jump full Action of the path
9996	The source of data for rendering the jQuery Datatables
9997	rendering the empty datasource .
9998	Sets the input items to the underlying ComboBoxCellEditor .
9999	Writes this HTTP response to the specified Web context .
10000	Returns all the extension implementations in the specified injector .
10001	Returns current method signature .
10002	Compacts memory as much as possible by allocating huge memory block and then forcing garbage collection .
10003	Propagates metrics entry to the thread local metrics collection does nothing if local metrics collection is missing .
10004	Encodes a value so that it won t contain spaces commas and equal signs .
10005	Get coding format file .
10006	Copies input stream to output stream using buffer . Streams don t have to be wrapped to buffered since copying is already optimized .
10007	Copies specified number of bytes from input stream to output stream using buffer .
10008	Copies input stream to writer using buffer .
10009	Copies reader to writer using buffer . Streams don t have to be wrapped to buffered since copying is already optimized .
10010	Copies specified number of characters from reader to writer using buffer .
10011	Copies reader to output stream using buffer .
10012	Copies reader to output stream using buffer and specified encoding .
10013	Compares the content of two byte streams .
10014	Compares the content of two character streams .
10015	Starts pipeline with the specified stream object that flows through this pipeline .
10016	To obtain a configuration of SQL .
10017	string - > object
10018	Extracts zip file to the target directory . If patterns are provided only matched paths are extracted .
10019	A static dialog fragment instance creator method .
10020	Work around for dialog not to dismiss on back button press .
10021	Adds supported core value type .
10022	Matches the regular expression
10023	Phone number verification
10024	Telephone number including mobile phones and landlines
10025	Judge whether it is birthday
10026	Matches are linked
10027	Tell the time
10028	Processes the Web request in Bootleg .
10029	Encode a String to base64
10030	Decode a base64 value
10031	Transform an hexadecimal String to a byte array .
10032	Read a properties file with the utf - 8 encoding
10033	Read the Stream content as a string
10034	Read file content to a String
10035	Write binay data to a file
10036	If targetLocation does not exist it will be created .
10037	Serialize to XML String
10038	Parse an XML file to DOM
10039	Parse an XML string content to DOM
10040	Parse an XML coming from an input stream to DOM
10041	Check the xmldsig signature of the XML document .
10042	Sign the XML document using xmldsig .
10043	Check whether the given class is cache - safe in the given context i . e . whether it is loaded by the given ClassLoader or a parent of it .
10044	Check if the given class represents an array of primitives i . e . boolean byte char short int long float or double .
10045	Check if the given class represents an array of primitive wrappers i . e . Boolean Byte Character Short Integer Long Float or Double .
10046	Resolve the given class if it is a primitive class returning the corresponding primitive wrapper type instead .
10047	Check if the right - hand side type may be assigned to the left - hand side type assuming setting by reflection . Considers primitive wrapper classes as assignable to the corresponding primitive types .
10048	Determine if the given type is assignable from the given value assuming setting by reflection . Considers primitive wrapper classes as assignable to the corresponding primitive types .
10049	Return all interfaces that the given instance implements as array including ones implemented by superclasses .
10050	Return all interfaces that the given instance implements as Set including ones implemented by superclasses .
10051	Writes properties to the temporary file that will be deleted on process exit and returns file URL as a result .
10052	Returns template variable name and value pairs extracted from the specified actual URI .
10053	Add permission and message one by one .
10054	The configuration database specify the name of the database .
10055	Allows the subtype to be selective about what to bind .
10056	Returns the value of built - in type .
10057	Returns the default value of the specified primitive type .
10058	Converts the specified object to the specified type . This method is overridable . You can provide your own conversion to the parameter construction by overriding this method .
10059	Converts the specified object to the specified user - defined value type . This method is overridable . You can provide your own conversion to the parameter construction by overriding this method .
10060	Returns the Web endpoint method parameter from query string .
10061	Returns the Web endpoint method parameter from cookie in the HTTP request .
10062	Returns the Web endpoint method parameter from HTTP session .
10063	init databases .
10064	set freemarker variable .
10065	Adding custom query condition and value
10066	Adding custom query equal value .
10067	Show dialog fragment to show dialogs before asking permission . Or you can set to show dialogs only when user denied permission earlier .
10068	Check if annotated result permissions contains all values from annotated array . Then it also check if all permissions in annotated method value array are granted .
10069	Check if annotated result permissions contains all values from annotated array . Then it also check if any permission in annotated method value array is denied .
10070	Query the database record set .
10071	Query a data record .
10072	According to the primary key and entity determine whether for the new entity .
10073	Determine whether the given method explicitly declares the given exception or one of its superclasses which means that an exception of that type can be propagated as - is within a reflective invocation .
10074	Traverses the ReferenceQueue and removes garbage - collected SoftValue objects from the backing map by looking them up using the SoftValue . key data member .
10075	Creates a new entry but wraps the value in a SoftValue instance to enable auto garbage collection .
10076	Checks whether a string matches a given wildcard pattern .
10077	Returns an instance of A if the arguments could be correctly parsed and A was not a subclass of ArgumentsWithHelp or no help was requested null otherwise .
10078	Return a ProtobufEntity annotation from any object sent null if there is none .
10079	Returns true if there is a ProtobufEntity annotation on this class .
10080	Returns a full mapping of all Protobuf fields from the POJO class . Essentially the only fields that will be returned if they have the ProtobufAttribute annotation .
10081	Retrieve the getter against the Protobuf class ; default is to is get plus upper case first character of the field name .
10082	Retrieve the setter on the POJO class ; default is to is set plus upper case first character of the field name .
10083	return a ObjectMapper if exist else new ObjectMapper
10084	return a JsonFactory if exist else new JsonFactory
10085	Bean to json string
10086	Sets all the border values .
10087	The SQL statement is retrieved from the configuration and the admin is trusted
10088	For a JMX MBean idenfitied by an ObjectName copy the values of the given attributes into the target object using the specified setter methods mapped by attribute name .
10089	Copy the values of the given attributes into the target object using the specified setter methods mapped by attribute name .
10090	Get property .
10091	Set property .
10092	Add this applet to a frame and initialize .
10093	Save the token using java preferences .
10094	Get the persisted token using java preferences .
10095	Returns current thread s context class loader
10096	Finds the resource with the given name .
10097	Returns an input stream for reading the specified resource .
10098	Returns an input stream for reading the specified class .
10099	Initialize all fields of this URI from another URI .
10100	Initialize the scheme for this URI from a URI string spec .
10101	Initialize the path for this URI from a URI string spec .
10102	Set the scheme for this URI . The scheme is converted to lowercase before it is set .
10103	Set the userinfo for this URI . If a non - null value is passed in and the host value is null then an exception is thrown .
10104	Set the host for this URI . If null is passed in the userinfo field is also set to null and the port is set to - 1 .
10105	Set the port for this URI . - 1 is used to indicate that the port is not specified otherwise valid port numbers are between 0 and 65535 . If a valid port number is passed in and the host field is null an exception is thrown .
10106	Append to the end of the path of this URI . If the current path does not end in a slash and the path to be appended does not begin with a slash a slash will be appended to the current path before the new segment is added . Also if the current path ends in a slash and the new segment begins with a slash the extra slash will be removed before the new segment is appended .
10107	Set the query string for this URI . A non - null value is valid only if this is an URI conforming to the generic URI syntax and the path value is not null .
10108	Set the fragment for this URI . A non - null value is valid only if this is a URI conforming to the generic URI syntax and the path value is not null .
10109	Get the URI as a string specification . See RFC 2396 Section 5 . 2 .
10110	Support ? as parameter
10111	Creates new MuffinManager .
10112	Get the current value for this muffin .
10113	Set the current value for this muffin .
10114	Get data from the system clipboard .
10115	Set the global clipboard contents .
10116	Open this file .
10117	Discovers the registered services of the given class .
10118	Sets the operation parametres based on a map of values .
10119	Obtains the values of all the parametres of the given operation .
10120	Finds a parametrized service based on its ID .
10121	Finds a service in a collection of services based on its class .
10122	Parses the results of a query and handles any errors .
10123	Returns an iterator over buffer elements .
10124	Obtain xml file encoding attribute
10125	JDK 1 . 7
10126	Creates a logging version of a connection
10127	Prints the authorizationUrl the user will open the url and obtain an authorization key . When prompted the user should provide the authorization key .
10128	Visits a package declaration .
10129	Visits a class declaration .
10130	Visits a method or constructor declaration .
10131	Return the value of a JAAS configuration parameter .
10132	Returns a filter that selects declarations containing all of a collection of modifiers .
10133	Returns a filter that selects declarations of a particular kind . For example there may be a filter that selects only class declarations or only fields . The filter will select declarations of the specified kind and also any subtypes of that kind ; for example a field filter will also select enum constants .
10134	Returns a filter that selects those declarations selected by both this filter and another .
10135	Returns a filter that selects those declarations selected by either this filter or another .
10136	double check for map
10137	set constructor is accessible
10138	Prepare to query the given object .
10139	replaces slashes with hyphens and removes padding =
10140	Converts an array of bytes to a string of two digits hex - representations
10141	Returns the indexes for a parameter .
10142	Parses a sql with named parameters . The parameter - index mappings are put into the map and the parsed sql is returned .
10143	Loops through the collection of objects and serializes them iff they have ProtobufEntity annotations .
10144	This method does the actual set on the Protobuf builder . If the user specified a converter then use that right before we actually try and set the value .
10145	This method does the actual set on the POJO instance . If the user specified a converter then use that right before we actually try and set the value .
10146	Tests whether or not the specified abstract pathname should be included in a pathname list .
10147	Creates a logging version of a ResultSet
10148	Produces a mapping of label to index for use in parsing state values to the appropriate slot in the state object .
10149	Uses the provided label - index mapping to extract state values and create a new State object .
10150	Returns generic supertype for given class and 0 - based index .
10151	Poll the configured objects now and store the results in the objects themselves .
10152	Poll all of the objects one at a time .
10153	obtain field If recursively is true obtain fields from all class hierarchy
10154	obtain methods list of specified class If recursively is true obtain methods from all class hierarchy
10155	obtain method list of specified class If recursively is true obtain method from all class hierarchy
10156	obtain methods list of specified class and which are annotated by incoming annotation class If recursively is true obtain methods from all class hierarchy
10157	obtain constructors list of specified class and which are annotated by incoming annotation class If recursively is true obtain constructors from all class hierarchy
10158	Dumps single byte to output stream .
10159	Finds first index of a substring in the given source string and range with ignored case .
10160	Removes all characters contained in provided string .
10161	Clean up any state associated with the current login attempt .
10162	Initialize the instance - global audit object
10163	Initialize the instance - global message queue object
10164	Initialize the instance - global password validator object
10165	Initialize the instance - global password authenticator object
10166	Resolves locale code from locale .
10167	Lookups for locale info and creates new if it doesn t exist .
10168	Creates a logging version of a Statement
10169	Removes all of the elements from this stack .
10170	Pushes an item onto the top of this stack .
10171	Removes the object at the top of this stack and returns that object as the value of this function .
10172	If there is no input stream use the file to create one .
10173	Parse this URL formatted string into properties .
10174	Match tokenized string and pattern .
10175	Changes the rectangle coordinates by adding the specified X and Y offsets
10176	Checks if this rectangle entirely contains another rectangle .
10177	Checks if this rectangle contains a point .
10178	Computes the intersection of this rectangle with another one .
10179	Computes the union of this rectangle with another one .
10180	Replaces the X coordinates of the rectangle with the X coordinates of another one .
10181	Replaces the Y coordinates of the rectangle with the Y coordinates of another one .
10182	Finds the offset of the specified column from the grid origin .
10183	Finds the offset of the specified row from the grid origin .
10184	Computes the coordinates of the specified grid cell relatively to the area top left corner .
10185	Goes through the child areas and creates a list of collumns
10186	Goes through the child areas and creates a list of rows
10187	Examines a Throwable object and gets it s root cause
10188	Launches the debugger as a stand - alone Swing application .
10189	Should be notified every time byte - code is added to the machine .
10190	Copies code from the specified code buffer into the internal one resizing the internal code buffer if necessary to make enough room .
10191	Renders disassembled instructions into the code table starting at the specified row and instruction address .
10192	Loads a properties file and stores it in the application context . The property resource name and the application scope variable name are passed as initialization parameters in the servlet config in the web . xml .
10193	Return a QueryParameter which contains reference to the original elements except for those from the exception list .
10194	Adds a child tree to the children of this point in the tree . If this is already a node then it remains as a node . If this is a leaf then adding a child to it must promote it to become a node . This implementation supports turning leaves into nodes .
10195	Clears all the children of this point in the tree . If this point is a leaf it will have no children so this operation does nothing . If this point is a node it will be reduced to a leaf by this operation . This implementation supports turning nodes into leaves .
10196	Gets the next element from the sequence the cached one if one has already been generated or creating and caching a new one if not . If the cached element from a previous call has not been consumed then subsequent calls to this method will not advance the iterator .
10197	Adds a conjunctive body functor or head functor to this clause along with the instructions that implement it .
10198	Adds some instructions to the parent predicate and also adds this as a clause on the parent if it has not already been added .
10199	Called when a property in the WorkPanelState is changed . This method calls initPanels to rebuild the user interface to reflect the current application state .
10200	Sets the specified work panel to listen to the button press events for all of the OK Cancel and Apply buttons . Regisers this object to listen for changes to the work panels state .
10201	Keeps the set of flags indicating which window components are present up - to - date .
10202	Creates a new decimal type with the specified name if it does not already exist .
10203	Determine whether a term is a free variable .
10204	Performs an optimization pass for specialized instructions .
10205	Compares two collections using lexicographic ordering based on a comparator of their elements .
10206	Processes the http request that is directed to this servlet .
10207	Renders the paging control .
10208	Renders a button control as a hyperlink for the page control .
10209	Resets the learning method . This should clear all the examples properties to learn from and for and the input machine to train .
10210	This should be called at the start of the learn method to initialize the input and output property sets .
10211	Returns the value to which this map maps the specified key .
10212	Returns the index to which this map maps the specified key .
10213	Inserts the element at the specified index . This only works if this index already exists .
10214	Removes the mapping for the specified key from this map if present .
10215	Removes the specified index from the data structure . This only works if the index already exists .
10216	Checks if the bean has a named property . Note that if the property value is set to null on the bean this method will still return true it tests for the existance of a named property including null ones .
10217	Sets the value of a property of the bean by name .
10218	Returns a single named property of the bean .
10219	Checks if a wrapper type is assignable from a primtive type .
10220	Initialized this property introspector on a specified object building the caches of getter and setter methods .
10221	Performs the actual decision based on a property of the state . If the quick lookup table has been initialized then the decision is taken straight from it . If not then the supplied reference to the decision tree at this point is used to find the outcome by scanning over its children .
10222	Initializes the lookup table for this decision node . The specified decision tree that corresponds to this node is used to extract all the possible outcomes for this decision and these are stored in a lookup table so that future decisions made with this tree will run faster .
10223	Unifies two terms and produces a list of bound variables that form the unification when it it possible .
10224	Attempts to unify one term with another against a background of already unified variables in both terms . In the case where two terms are being unified from scratch the variable assignments will be empty .
10225	Unifies a variable with a term . If the variable is bound then the bound value is unified with the term . If the term is a bound variable and the variable is free then the vairable is unified with the bound value of the term . Otherwise the variable is free and is bound to the value of the term .
10226	Compiles a clause as a query . The clause should have no head only a body .
10227	Examines all top - level functors within a clause including any head and body and determines which functor has the highest number of arguments .
10228	Allocates stack slots to all free variables in a query clause .
10229	Gather information about variable counts and positions of occurrence of constants and variable within a clause .
10230	Pretty prints a compiled predicate .
10231	Pretty prints a compiled query .
10232	Writes the specified integer value as an ASCII string into the specified byte buffer . If the integer value is shorted than the specified length the number will be padded with leading zeros so that it fills the required length . If there is insufficient space in the buffer to write the value into then the buffer size is increased using the supplied byte buffer pool .
10233	Returns the contents of a buffer as a string converting ASCII characters in the buffer into unicode string characters .
10234	Gets the string value of a string attribute .
10235	Sets the specified string as the value of this attribute . The value to set must be a legitimate member of this attributes type when the type has been finalized . If the type has yet to be finalized then the new value is added to the set of possible values for the type .
10236	Reads a Lojix term and invoked appropriate methods on the content handler to describe its structure and contents to it .
10237	Checks if the named class exists and is loadable .
10238	Checks if the named class exists and is loadable and is a sub - type of the specified class .
10239	Checks that the named child class is the same type or a sub - type of the named parent class .
10240	Checks that the child class is the same type or a sub - type of the parent class .
10241	Gets the Class object for a named class .
10242	Creates an instance of a Class instantiated through its no - args constructor .
10243	Calls a constuctor with the specified arguments .
10244	Calls a named method on an object with a specified set of parameters any Java access modifier are overridden .
10245	Calls a named method on an object with a specified set of parameters .
10246	Calls a named static method on a class with a specified set of parameters .
10247	Gets the constructor of a class that takes the specified set of arguments if any matches . If no matching constructor is found then a runtime exception is raised .
10248	Finds the argument types of all setter methods on a bean for a given property name . For a method to be a setter method it must have a void return type be public and accept only a single argument . Its name must be set followed by the property name .
10249	Provides a transactional queue that delays all queue manipulation operations until the transaction is committed or erases them if it is rolled back .
10250	Provides a transactional requeue that delays all queue manipulation operations until the transaction is committed or erases them if it is rolled back . As this is a requeue the requeue buffer may be examined directly and the queue fully supports browsing with iterators .
10251	Gets the type of a specified object .
10252	Resets the search clearing out the queue and setting it to contain just the start state node .
10253	Perform the search . This can be called multiple times to get successive results where more than one goal can be found if the algorithm supports this . In this case it should return null once no more goals can be found .
10254	Creates a new int range type with the specified name if it does not already exist .
10255	Add a new supported tz . Add one aliase with the same name
10256	Timezone is case sensitive
10257	Add a dimension as mandatory . Mandatory dimension names are stored in upper case .
10258	Calculates the set of free variables in a term .
10259	Calculates the set of free and non - anonymous variables in a term . This is the set of variables that a user query usually wants to be made aware of .
10260	Compares two heuristic search nodes by their heuristic values .
10261	Writes an object using its toString method to the named file . The object may optionally be appended to the file or may overwrite it .
10262	Reads the contents of a reader one line at a time until the end of stream is encountered and returns all together as a string .
10263	Creates the correct type of search nodes for this search . This search uses heuristic search nodes .
10264	Generates a sequence of spaces to indent debugging output with .
10265	For a predicate of arity n the first n registers are used to receive its arguments in .
10266	Checks if a variable is appearing within the last body functor in which it occurs and only does so within argument position .
10267	This helper method works out how the majority of the specified examples are classified by the named property . The property should always be the goal property that the algorithm is learning and must always take on a finite number of different values .
10268	Tests if a property of a set of examples has the same value for all the examples . This algorithm works by iterating through the examples until two different values are found or the end of the collection is reached having found only one value .
10269	For a given set of examples input properties and an output property this method chooses the input property that provides the largest information gain on the value of the output property .
10270	Creates a functor .
10271	Creates a variable . If the variable name begins with an underscore _ it will be anonymous otherwise it will be named .
10272	Handles an HTTP request sent to this action by struts . This simply forwards to the location specified by the redirect request parameter .
10273	Extracts the sub - list at the specified page index . The returned list will have size equal to the page size unless it is the last page in which case it may not be a full page .
10274	Sets the kind of paint to use . For the image background?
10275	Immediately repaints the surface .
10276	Generates a fresh buffered image of the appropriate type .
10277	Creates a Graphics2D drawing context from a BufferedImage or Graphics context . The graphics context is built using the properties defined for the surface . This method is used to generate the Graphics2D context that subclasses will render in . IF the buffered image is null then the passed in Graphics context will be used to generate the Graphics2D context . This is the case when no buffered image is used and the subclass renders straight to the screen .
10278	Creates a custom grey - scale binary image format .
10279	Creates a custom colour image format .
10280	Allows different queue search algorithms to replace the default one . This overidden method ensures that the peek at head flag is always set on the search algorithm and that it expands it successor nodes in reverse as for depth first searches .
10281	Search iteratively on increasing maximum bound limits until the search space is exhausted or a goal state is found .
10282	Search until a goal state is found or the maximum allowed number of steps is reached .
10283	Parses statements and print the parse tree to the console for quick interactive testing of the parser .
10284	Parses a single sentence in first order logic . A sentence consists of a term followed by a full stop .
10285	Recursively parses terms which may be functors atoms variables literals or operators into a flat list in the order in which they are encountered .
10286	Parses a single functor in first order logic with its arguments .
10287	Parses a list expressed as a sequence of functors in first order logic . The empty list consists of the atom nil and a non - empty list consists of the functor cons with arguments the head of the list and the remainder of the list .
10288	Parses a sequence of terms as a comma seperated argument list . The operator in prolog can be used as an operator when it behaves as a functor of arity 2 or it can be used to separate a sequence of terms that are arguments to a functor or list . The sequence of functors must first be parsed as a term using the operator precedence of to form the term . This method takes such a term and flattens it back into a list of terms breaking it only on a sequence of commas . Terms that have been parsed as a bracketed expression will not be broken up .
10289	Parses a variable in first order logic . Variables are scoped within the current sentence being parsed so if the variable has been seen previously in the sentence it is returned rather than a new one being created .
10290	Parses an integer literal .
10291	Parses a real number literal .
10292	Parses a string literal .
10293	Peeks and consumes the next interactive system directive .
10294	Interns an operators name as a functor of appropriate arity for the operators fixity and sets the operator in the operator table .
10295	Interns and inserts into the operator table all of the built in operators and functors in Prolog .
10296	Consumes a token of the expected kind from the token sequence . If the next token in the sequence is not of the expected kind an error will be raised .
10297	Peeks ahead for the given token type and if one is foudn with that type it is consumed .
10298	Binds the session as a transactional context to the current thread if it is not already bound .
10299	Forgets pending operations .
10300	Extracts all elements from an iterator usually created from a filterator and adds them into the target collection returning that collection as the result .
10301	Reserves a call point for a block of named callable code . The size of the block of code must be known fully in advance . If the named block already has a call point this will replace it with a new one .
10302	Converts a field by field time of day into millisecond ticks .
10303	Extracts the years component of a time in millisecond ticks .
10304	Sets the component of the timestamp returning the new timestamp with updated component .
10305	Sets the minutes component of the timestamp returning the new timestamp with updated component .
10306	Sets the seconds component of the timestamp returning the new timestamp with updated component .
10307	Sets the year component of the timestamp returning the new timestamp with updated component .
10308	Sets the month component of the timestamp returning the new timestamp with updated component .
10309	Sets the date component of the timestamp returning the new timestamp with updated component .
10310	Calculates the number of milliseconds to the start of the specified year taking 1970 as zero .
10311	Given a millisecond timestamp that lands in a specified year calculate what month the timestamp corresponds to .
10312	Reads some number of bytes from the input stream and stores them into the buffer array b . The bytes are also returned wrapped in a byte block so that they can be returnd over RMI .
10313	Looks up the specified key in hash table using cuckoo hashing . If the key cannot be found in the table then the next available sequence number is allocated to it and a new entry is added to the hash table for the key again using cuckoo hashing .
10314	Checks if the specified key can be found in the set and returns its entry if so .
10315	Adds a new entry to a hash table using the cuckoo algorithm .
10316	Creates a new hashtable that is twice the size of the old one then re - hashes everything from the old table into the new table .
10317	Listens for the button events Ok Cancel and Apply . If the event is Ok or Apply the saveWork method is triggered . If the event is Cancel then the discardWork method is triggered .
10318	Sets the state of the next available flag and notifies any listeners of this change .
10319	Sets the state of the previous available flag and notifies any listeners of this change .
10320	Sets the state of the finished and notifies any listeners of this change .
10321	Creates an instance of this machine loading and checking for availability of the native implementation library as required .
10322	Provides an iterator that generates all solutions on demand as a sequence of variable bindings .
10323	For a given set of probabilities of the occurences of symbols this function calculates the expected information content of a set of symbols given its probability distribution . The answer is expressed as a positive number of bits .
10324	Estimates probabilities given a set of counts of occurrences of symbols .
10325	Sets this date from a milliseconds timestamp .
10326	Processes the action .
10327	Creates a URL for the specified string representation .
10328	Returns a String with all basic request information in an HTML table .
10329	Returns a String with all header information as an HTML table .
10330	Returns a String with all cookie information as an HTML table .
10331	Returns a String with all request parameter information .
10332	Returns a String with all request scope variables .
10333	Returns a String with all page scope variables .
10334	Returns a String with all session scope variables .
10335	Returns a String with all application scope variables .
10336	Returns the user principal name .
10337	Renders the debugging message .
10338	Returns an HTML table with all the values of the specified property .
10339	Searches all SearchNodes less than the maximum bound for some property of the nodes .
10340	Sets the new current screen state and notifies all listeners of the change in screen state .
10341	Walks over the supplied term .
10342	Compares two heuristic search nodes by their f values .
10343	Updates the register file with a new set of registers .
10344	Fires off a list of property change events to any interested listeners .
10345	Upon leaving the clause sets the nonArgPosition flag on any constants that need it .
10346	Checks if the current position is immediately within a top - level functor .
10347	Returns an array containing all of the elements in this heap ; the runtime type of the returned array is that of the specified array . If the collection fits in the specified array it is returned therein . Otherwise a new array is allocated with the runtime type of the specified array and the size of this collection .
10348	Sets the arguments of this operator . It can be convenient to be able to set the outside of the constructor for example when parsing may want to create the operator first and fill in its arguments later .
10349	Provides the symbols fixity derived from its associativity .
10350	Reports whether this operator is an infix operator .
10351	Compares this object with the specified object for order providing a negative integer zero or a positive integer as this symbols priority is less than equal to or greater than the comparator . If this symbol is less than another that means that it has a lower priority value which means that it binds more tightly .
10352	Called when a property in the work flow state is changed .
10353	Registers the work flow button panel with the specified work flow controller . This will cause the work flow controller to receive button press events from the panel and register the button panel to receive state changes from the underlying work flow model .
10354	Generates a factory for building enum attributes of the specified enum class .
10355	Creates an instance of the named component factory .
10356	Provides the storage cell for the specified variable . Some types of variable may defer their storage onto a storage cell other than themselves other variable types may simply return themselves as their own storage cells .
10357	Reports whether or not this variable is bound to a value .
10358	Sets a column attribute adding padding to the underlying array as necessary to ensure it is large enough to hold the attribute at the requested position .
10359	Sets a row attribute adding padding to the underlying array as necessary to ensure it is large enough to hold the attribute at the requested position .
10360	Gets a columns attribute if possible without overflowing the underlying array .
10361	Gets a rows attribute if possible without overflowing the underlying array .
10362	Inserts a set of attributes into the grid at the specified location . This is a private insert method that does not notify model listeners so that the public insert methods can do that as a separate step .
10363	Creates a new time range type with the specified name if it does not already exist .
10364	Creates a new string pattern type with the specified name if it does not already exist .
10365	Checks a string value against this type to see if it is a valid instance of the type .
10366	Sets up the initial context once at the start of a traversal .
10367	Updates the layout register file with a new set of layout registers .
10368	Search up the scope tree to locate the variable s value . The parser has already verified that the variable is defined .
10369	Implementation of the general bi - dircetional search . The search alternated between taking a forward and a reverse step .
10370	Once a match has been found between the forward and reverse fringes of the search a path is known to exist from the start to the goal . The path is not complete at this stage because it remains to reverse all of the steps in the backward half of the path and add them to the forward half of the path to produce the complete forward path from start to the goal .
10371	Fetches and caches the specified block .
10372	Static factory method that locates an existing instance or creates a new property reader for a named resource .
10373	Specifies the throttling rate in operations per second .
10374	Reads some number of bytes from the input stream and stores them into the buffer array b .
10375	Skips over and discards n bytes of data from this input stream .
10376	Gathers the functors to compile as a sequence of choice points . These exist as the arguments to disjunctions recursively below the supplied disjunction . They are flattened into a list by performing a left - to - right depth first traversal over the disjunctions and adding their arguments into a list .
10377	Extracts an int from an array of bytes .
10378	Outputs an int into a byte array .
10379	Outputs an int into a byte array copying only the bottom 24 bits of the integer . The top sign bit is lost by this operation so this only works on positive ints below 2^24 .
10380	Extracts an int from an array of bytes . Only three bytes are pulled together from the array to make a 24 bit integer albeit returned as a java 32 bit int .
10381	Extracts a short from an array of bytes .
10382	Outputs a short into a byte array .
10383	Returns the state obtained by applying the specified operation . If the operation is not valid then this should return null .
10384	Gets all operators valid from this state . If the current tree to search has any children these are encoded as operators to access those child trees as tree search states . If the current tree is a leaf then an empty iterator is returned .
10385	Returns the integer id of the attribute .
10386	Gets the object value of a object attribute .
10387	Sets the specified object as the value of this attribute . The value to set must be a legitimate member of this attributes type when the type has been finalized . If the type has yet to be finalized then the new value is added to the set of possible values for the type .
10388	Converts a string listing sub - strings seperated by a delimeter into an array of strings .
10389	Converts an array of strings into a delimeter seperated string .
10390	Converts a string to camel case .
10391	Converts string between various case forms such as camel case snake case or kebab case .
10392	Provides a string containing information about the configured logging set up .
10393	Lists information about logging handlers .
10394	Looks up the offset of the start of the code for the named functor .
10395	Records the offset of the start of the code for the named functor .
10396	Tests if another hierarchy attribute is strict a sub - category of this one . It is a sub - category if it has the same sequence of path labels as this one as a prefix of its whole path label .
10397	Returns the long id of the attribute .
10398	Gets the label value at the named level of the hierarchy .
10399	Gets the label value at the last level of the hierarchy .
10400	Serialized a hierarchy attribute .
10401	Deserializes a hierarchy attribute .
10402	Returns heuristic evaluation of an eight puzzle board position as the manhattan distance of all tiles from their correct positions .
10403	Calculates the modulo of a coordinate with the bucket size . Correctly calculates this module for negative coordinates such the the first negative bucket is - 1 with element 0 corresponding to - 100 running to 99 corresponding to - 1 .
10404	Adds another user readable error message to this exception .
10405	Converts an exception into struts action errors . The exception stack trace is stored under the exception message key . The message resource error . internalerror is stored under the message key generalerror . The stack trace is pretty printed in HTML .
10406	Writes a string of characters to the filtered writer . Any newline characters \ n are replaced with an HTML break tag &lt ; br&gt ; .
10407	Classifies a state using the decision tree .
10408	Translates the partial order into the + 1 0 - 1 convention needed by Comparators .
10409	Returns a distriubuted iterator that can provide elements of the list on demand over a remote connection .
10410	Calcalates the log base 2 of an integer . This code is tuned to uniformly distributed output values longer numbers are slightly favoured .
10411	Calcalates the log base 2 of an integer . This code is tuned to uniformly distributed input values longer numbers are favoured .
10412	Calcalates the log base 10 of an integer . This produces results faster for longer numbers .
10413	Calcalates the log base 10 of an integer . This produces results faster for shorter numbers .
10414	Calcalates the log base 10 of an integer . This method favours shorter numbers .
10415	Calcalates the log base 10 of an integer . This method favours longer numbers or evenly distributed input .
10416	Calculates the number of ASCII characters that will be needed to represent a specifed signed 32 - bit integer .
10417	Calculates the number of ASCII characters that will be needed to represent a specifed signed 64 - bit integer .
10418	Calculates the number of ASCII characters that will be needed to represent a specified signed decimal number .
10419	Sets a compiled head functor to this clause .
10420	Emmits the binary byte code for the clause into a machine writing into the specified byte array . The state of this clause is changed to Linked to indicate that it has been linked into a binary machine .
10421	This is a helper method that controller implementations may find useful for moving to a new screen . It places the screen into the panel that this controller was built with replacing any existing screen changes the underlying state to reflect the change to a new current screen and calls the new screens initialize method .
10422	Evaluates a logical predicate .
10423	Looks up a property value relative to the environment callers class and method . The default environment will be checked for a matching property if defaults are being used . In order to work out the callers class and method this method throws an exception and then searches one level up its stack frames .
10424	Looks up an array property value relative to the environment callers class and method . The default environment will be checked for a matching array property if defaults are being used . In order to work out the callers class and method this method throws an exception and then searches one level up its stack frames .
10425	For a given environment base modifier and key and setting of the use of default environments feature this generates an iterator that walks over the order in which to try and access properties .
10426	Scans all the properties in the parent Properties object and creates arrays for any array property definitions .
10427	Specifies the throttling rate in operations per second . This must be called with with a value the inverse of which is a measurement in nano seconds such that the number of nano seconds do not overflow a long integer . The value must also be larger than zero .
10428	Evaluates the arithmetic operator on its numeric argument .
10429	This methods attempts to load the properties from a file or URL referenced by the system property with the same name as the properties resource name from a resource on the classpath with the same name as the properties resource name or from a properties file name relative to the current working directory . It tries these methods sequentially one after the other until one succeeds .
10430	Tries to load the properties from the file or URL named by the system property with name mathching the properties resource name .
10431	Tries to load the properties from the classpath using the classloader for this class .
10432	Tries to load the properties as a file or URL matching the properties resource name . File names will be taken relative to the current working directory .
10433	Applies the built - in transform during a post - fix visit of a term .
10434	Gets the actual value of a term which is either the term itself or in the case of variables the value that is currently assigned to the variable . When the variable is free the variable term itself is returned .
10435	Binds this variable to the specified value .
10436	Creates the correct type of queue for this search . This search uses a priority queue ordered by heuristic value .
10437	Drop the connection to the remote host and release the underlying connector thread if it has been created .
10438	Appends a logging event to the remote event reciever .
10439	Starts a new connector thread to do?
10440	Sets up the stack of column printers .
10441	When operating in transactional mode causes any changes since the last commit to be made visible to the search method .
10442	When operation in transactional mode causes any changes since the last commit to be dropped and never made visible to the search method .
10443	Requests an operation that alters the transactional resource . This may be blocked until an appropriate lock can be acquired delayed until commit time or actioned upon a copy of the data structure private to a transaction branch .
10444	Adds a transactional operation to the transactional write - behind cache for the specified transaction . If no cache exists for the specified transaction id a new one is created .
10445	Waits until the global write lock can be acquired by the specified transaction .
10446	Releases the global write lock from being assigned to a transaction .
10447	Enlists this transactional resource with the current session . If no session exists this will fail .
10448	Locates nested MediaQueryNode inside RuleSetNode separates RuleSetNode and MediaQueryNode
10449	Inserts the specified element into this queue waiting if necessary up to the specified wait time for space to become available .
10450	Retrieves and removes the head of this queue waiting if necessary up to the specified wait time if no elements are present on this queue .
10451	Adds the specified element to this queue waiting if necessary for space to become available .
10452	Insert element into the queue then possibly signal that the queue is not empty and block the producer on the element until permission to procede is given .
10453	Fetches the next element from this iterator .
10454	Parses a property as a boolean .
10455	Parses a property as an integer .
10456	Parses a property as a long .
10457	Creates a clone of this scope to be attached to the tree at the site of a mixin reference . If an ArgumentsNode is passed each of its values override those defined by the mixin s parameters .
10458	Some nodes are captured in additional structures to aid later resolution .
10459	Back - tracks from the specified node moving succesively upwards through the chain of parent nodes until a node is encountered that has unexamined successors . This method implements the backtracking searches reverse direction . By checking for the presence of unexamined successors this method only backtracks where necessary .
10460	Extracts the raw byte code from the machine for a given call table entry .
10461	Runs a query and for every non - anonymous variable in the query decodes its binding value from the heap and returns it in a set of variable bindings .
10462	Decodes a term from the raw byte representation on the machines heap into an abstract syntax tree .
10463	Captures an objects state in this memento .
10464	Restores the values currently in this memento to the specified object .
10465	Gets the value of the named field of the specified class .
10466	Places the specified value into the memento based on the field s declaring class and name .
10467	Generates a list of all the fields of the object that this memento maps for a given class .
10468	Implementation of the prod - script goal .
10469	Inserts the specified element onto the tail of this queue .
10470	Retrieves and removes the head of this queue or null if this queue is empty .
10471	Creates the correct type of search nodes for this search . This search uses ordinary search nodes .
10472	Creates the correct type of queue for this search . This search uses a priority queue ordered by path cost .
10473	Provides a simple depth first walk over a term .
10474	Provides a depth first walk over a term visiting only when a goal predicate matches .
10475	Provides a positional depth first walk over a term .
10476	Provides a positional depth first walk over a term visiting only when a goal predicate matches .
10477	Provides a positional postfix walk over a term .
10478	Get properties from an input stream .
10479	Get properties from a file .
10480	Get properties from a url .
10481	Get properties from a path name . The path name may refer to either a file or a URL .
10482	Computes the rendered dimensions of the text grid model on screen . Used for sizing this component .
10483	Sets up metrics relating to the size of the font used to display the text grid . This only needs to be done once but this method can be called many times as it is guarded by an initialization flag to prevent these being calculated many times .
10484	Adds a property changed listener to be notified of changes to the application state .
10485	Adds a property changed listener to be notified of changes to the named property .
10486	Removes the specified property change listener from the list of active listeners .
10487	Notifies all property change listeners of the given PropertyChangeEvent .
10488	Creates a new double range type with the specified name if it does not already exist .
10489	Requests a color fade against the specified target under a group name .
10490	Creates a horizontal grip - able bar for adjusting the console height .
10491	Creates a vertical grip - able bar for adjusting the left panel width .
10492	Creates a vertical grip - able bar for adjusting the right panel width .
10493	Ensures that radio controls are mutually exclusive within control groups .
10494	Wait for the predicate to become true on the specified object .
10495	Wait for up to a timeout limit for the predicate to become true on the specified object .
10496	Implementation of the script goal .
10497	Appends the classpath onto the command line .
10498	Creates a new date range type with the specified name if it does not already exist .
10499	Prints a welcome message .
10500	Sets up the JLine console reader .
10501	Evaluates a query against the resolver or adds a clause to the resolvers domain .
10502	Evaluates a query . In the case of queries the interner is used to recover textual names for the resulting variable bindings . The user is queried through the parser to if more than one solution is required .
10503	Converts a boolean into a multi type data object .
10504	Converts a byte into a multi type data object .
10505	Converts a char into a multi type data object .
10506	Converts a short into a multi type data object .
10507	Converts a int into a multi type data object .
10508	Converts a long into a multi type data object .
10509	Converts a float into a multi type data object .
10510	Converts a double into a multi type data object .
10511	Converts a String into a multi type data object .
10512	Converts a Object into a multi type data object .
10513	Given a multi type data object and a class representing a type this method attemps to return an object of that class created from the multi type data . The exception to this rule is if the specified data type is a primtive type such as int . clas then the returned object will be of the equivalent wrapper class type Integer . class in this case . This is because a primitive cannot be returned under an Object return type .
10514	Inserts an object into the scope .
10515	Clears entries up to and including the specified key from the map . This is a simple garbage collection operation to clear consumed data from the circular buffer .
10516	Expands the size of the storage to whichever is the larger of 1 . 5 times the old size or an array large enough to hold the proposed key that caused the expansion copying the old data into a new array .
10517	Inserts a single character into the grid at the specified location . This is a private insert method that does not notify model listeners so that the public insert methods can do that as a separate step .
10518	Compares two search nodes by their path cost .
10519	Parses a flat list of terms which are literals variables functors or operators into a tree in such a way that the operators associativity and precendence is obeyed .
10520	Checks the operator table for all possible operators matching a given name .
10521	Checks if a candidate operator symbol can have one of the specified fixities and resolve it to an oeprator with that fixity if so . If it cannot be resolved an exception is raised .
10522	Makes a new node of the same type as this one from a Successor state .
10523	Right pads a string with a given string to a given size . This method will repeat the padder string as many times as is necessary until the exact specified size is reached . If the specified size is less than the size of the original string then the original string is returned unchanged .
10524	Lists all the parsing errors from the most recent parsing in a string .
10525	Lists the properties set from the most recent parsing or an empty string if no parsing has been done yet .
10526	Generates a usage string consisting of the name of each option and each options argument description and comment .
10527	If a command line has been parsed calling this method sets all of its free arguments that were name = value pairs on the specified properties .
10528	If a command line has been parsed calling this method sets all of its options that were set to the specified properties .
10529	Adds the option to list of available command line options .
10530	Converts the free arguments into property declarations . After parsing the command line the free arguments are numbered from 1 such that the parsed properties contain values for the keys 1 2 ... This method converts any free arguments declared using the name = value syntax into properties with key name value value .
10531	Checks the format of an argument to an option against its specified regular expression format if one has been set . Any errors are added to the list of parsing errors .
10532	Walks down two iterators comparing them element by element using the equals method .
10533	Returns an enumeration describing the available options .
10534	Gets the current settings of the classifier .
10535	Sets the stemmer type to use
10536	Returns the stemmer to use .
10537	Returns the stemmed version of the given word . Word is converted to lower case before stemming .
10538	Runs the stemmer with the given options .
10539	Creates a new float range type with the specified name if it does not already exist .
10540	Resets the machine to its initial state . This clears any programs from the machine and clears all of its stacks and heaps .
10541	Pretty prints the current environment frame for debugging purposes .
10542	Pretty prints the current choice point frame for debugging purposes .
10543	Invokes an internal function .
10544	Computes the start of the next stack frame . This depends on whether the most recent stack frame is an environment frame or a choice point frame as these have different sizes . The size of the most recent type of frame is computed and added to the current frame pointer to give the start of the next frame .
10545	Backtracks to the continuation label stored in the current choice point frame if there is one . Otherwise returns a fail to indicate that there are no more choice points so no backtracking can be done .
10546	Records the address of a binding onto the trail . The trail pointer is advanced by one as part of this operation .
10547	Undoes variable bindings that have been recorded on the trail . Addresses recorded on the trail are reset to REF to self .
10548	Tidies trail when a choice point is being discarded and a previous choice point it being made the current one .
10549	Attempts to unify structures or references on the heap given two references to them . Structures are matched element by element free references become bound .
10550	A simplified unification algorithm for unifying against a constant .
10551	Pretty prints a variable allocation slot for tracing purposes .
10552	Generates a random starting position .
10553	To check for solvability the empty tile is moved to its goal position and then the number of swaps needed to put the other tiles in position is counted . For an odd number of rows on a square puzzle there must be an even number of swaps for an even number of rows an odd number of swaps .
10554	Applies a move to generate a new board position . This creates a new state object and updates its board position . The board position in this object is not changed .
10555	Supplies the valid moves for a board position .
10556	Pretty prints the board as 3 lines of characters with a space for the empty square .
10557	Repeatedly swaps a tile with its neighbours until it reaches the specified location . If the tile is swapped with the empty tile then this is a legal move . If the tile is swapped with another non - empty tile then this is an illegal move and the total number of illegal moves is counted .
10558	Swaps the two tiles at the specified coordinates . One of the tiles may be the empty tile and the empty tile position will be correctly updated . If neither of the tiles is empty then this is an illegal swap in which case the method returns true .
10559	Turns a string representation of the board into a list of characters .
10560	Turns a list of characters representation of the board into a proper state .
10561	Transforms a java . util . logging . LogRecord to a message printable on Log4J .
10562	Converts java . util . logging levels to Log4J logging levels .
10563	Places an element onto the requeue buffer .
10564	Places an element onto the requeue buffer in the acquired state by the specified owner .
10565	Atomically adds to the size and count if the queue is running in atomic counting mode or sizeable mode and the element is sizeable .
10566	Atomically subtracts from the size and count if the queue is running in atomic counting mode or sizeable mode and the element is sizeable .
10567	Signals the signallable resource if the size crosses a threshold boundary in a downward direction .
10568	Enumerates the names bound in the named context along with the class names of objects bound to them . The contents of any subcontexts are not included . If a binding is added to or removed from this context its effect on an enumeration previously returned is undefined .
10569	Enumerates the names bound in the named context along with the objects bound to them . The contents of any subcontexts are not included .
10570	Adds a new environment property to the environment of this context . If the property already exists its value is overwritten . See class description for more details on environment properties .
10571	Removes an environment property from the environment of this context . See class description for more details on environment properties .
10572	Repeatedly runs the garbage collector and finalization method of the JVM runtime system until the used memory count becomes stable or 500 iterations occur whichever happens soonest . If other threads are active then this method is not likely to work as the used memory count will continually be changing .
10573	Tokens that don t need to evaluated
10574	Locates the referenced mixin in one of the scope nodes on the stack . If found the mixin s scope is cloned and placed onto the stack in place of the mixin reference . Additionally any arguments are applied to the mixin s scope .
10575	Looks for a variable definition that matches the reference in the scope nodes on the stack . If found a reference node that can repeat this lookup later is placed on the stack not the current value itself . This is done because the value may change if the variable reference is inside a mixin .
10576	Updates the maximum row height for a row of the data table .
10577	Updates the maximum column width for a column of the data table .
10578	Updates the current page or index offset of a paged list in the session scope .
10579	Returns a new node based on a successor of this node . This new node will also be a HeuristicSearchNode .
10580	Processes the action providing default error handling . Implementation should override this method to provide their own error handling if the default is not to be used .
10581	Substitutes built - ins within a clause with their built - in definitions .
10582	Runs a symbol key traverser over the clause to be compiled to ensure that all of its terms and sub - terms have their symbol keys initialised .
10583	Finds and marks all functors within the clause that are considered to be top - level .
10584	Pretty prints a term relative to the symbol namings provided by the specified interner .
10585	Evaluates the arithmetic comparison on its two numeric arguments .
10586	Makes a transaction from the Initial state to the Running state or no transition if the current state is not Initial .
10587	Makes a transaction from the Running state to the Shutdown state or no transition if the current state is not Running .
10588	Makes a transaction from the Running or Shutdown state to the Terminated state or no transition if the current state is not Running or Shutdown .
10589	Inserts the specified element into this heap .
10590	Calculates the smallest integer value m such that m^2 > = n . The ceiling log2 of n .
10591	Compares the specified node with the minimum and updates the minimum if neccessary . If a comparator was used to create this heap then this comparator is used to perform the comparison . If no comparator was set then the natural ordering of the element type is used . The element must implement the Comparable interface to support a natural ordering . If it does not there will be a class cast exception thrown .
10592	Compares two heap nodes . The comparison performed is dependant on whether a comparator has been set or the natural ordering is to be used .
10593	Inserts a single node or a circular doubly linked list of nodes into a list next to the specified node . I does not matter if the specified nodes are singletons or part of a chain as they will be correctly linked in in either case so long as their prev and next references form a loop with themselves .
10594	Restarts the sweep alogirithm . Useful after a kill has stopped it .
10595	Finds the set of all goals of a search .
10596	Finds a bag of all goals of a search .
10597	Finals all solutions to a search and inserts them into the specified collection .
10598	Generates the next element in the sequence .
10599	Restores the properties currently in this memento to the specified object .
10600	Gets the value of the named property of the specified class .
10601	Sets the value of the named property as a multi type object .
10602	Places the specified value into the memento based on the property s declaring class and name .
10603	Captures the fields of the associated object .
10604	Pops the first object placed on the stack off of it and returns it .
10605	Converts the modifiers to a specification string for KeyStroke .
10606	Converts a string to an integer . The string must be a valid integer or the result will be zero .
10607	Converts a string to a date . The string must be a date in the correct format or this method will return null .
10608	Check that a string is a date in the format specified by dateFormat .
10609	Checks that a string is a time in the format specified by timeFormat .
10610	Checks that a string is a datetime in the format specified by dateTimeFormat .
10611	Creates a token source on a string .
10612	Creates a token source on a file .
10613	Creates a token source on an input stream .
10614	Checks if the term argument to an instruction was a constant .
10615	Checks if the term argument to an instruction was a singleton non - argument position variable . The variable must also be non - permanent to ensure that singleton variables in queries are created .
10616	Checks if the term argument to an instruction was in a non - argument position .
10617	Provides an iterator over the child terms if there are any . Only functors and clauses are compound and build across a list of child arguments .
10618	Gets the argument within the functor with the specified index .
10619	Provides an iterator over the child terms if there are any . Only functors are compound and built across a list of child arguments .
10620	Creates a string representation of this functors arguments mostly used for debugging purposes .
10621	Execute a query to retrieve the summary . This do not have any group by element
10622	Execute a query to retrieve the records .
10623	Private methode called by the public ones to effectively run the query .
10624	Writes out the instruction plus arguments in the byte code format to the specified location within a code buffer .
10625	Sets the basic type of this type depending on the class .
10626	Consults an input stream reading first order logic clauses from it and inserting them into the resolvers knowledge base .
10627	Prints a variable binding in the form Var = value .
10628	Transforms an iterator over sets of variable bindings resulting from a query to an iterator over a map from the string name of variables to their bindings for the same sequence of query solutions .
10629	A dedicated thread loop for reading the stream and sending incoming packets to the appropriate router .
10630	Read the incoming stream until it ends .
10631	package - visibility for testing
10632	Gets the appropriately modified timestamep for the UUID . Must be called from a synchronized block .
10633	call this method if the trackInfo object in the playlist was updated . Only the trackinfo object will be sent via Event
10634	updates the Info about the current song
10635	method that uses the data from the OutputExtensions to generate a final output that will then be rendered .
10636	handles the a request to start playing music via Resource
10637	handles the a request to start playing music via Event
10638	this method will be called to create and fire the StartMusicRequest
10639	Initializes the reader in order to be used . The reader is initialized during the first connection and when reconnecting due to an abruptly disconnection .
10640	Starts the packet reader thread and returns once a connection to the server has been established . A connection will be attempted for a maximum of five seconds . An XMPPException will be thrown if the connection fails .
10641	Shuts the packet reader down .
10642	Resets the parser using the latest connection s reader . Reseting the parser is necessary when the plain connection has been secured or when a new opening stream element is going to be sent by the server .
10643	Parse top - level packets in order to process them further .
10644	Processes a packet after it s been fully parsed by looping through the installed packet collectors and listeners and letting them examine the packet to see if they are a match with the filter .
10645	Sets the CLI option .
10646	Creates a new chat and returns it .
10647	Convert a new content object to an internal version .
10648	Reset the object back to its last saved state .
10649	set a property creating if it does not exist overwriting if it does .
10650	Adds a filter to the filter list for the OR operation . A packet will pass the filter if any filter in the list accepts it .
10651	Process the request in a stream .
10652	Clear the current set of properties to add and remove .
10653	Initializes the writer in order to be used . It is called at the first connection and also is invoked if the connection is disconnected by an error .
10654	Sends the specified packet to the server .
10655	Returns the next available packet from the queue for writing .
10656	Sends to the server a new stream element . This operation may be requested several times so we need to encapsulate the logic in one place . This message will be sent while doing TLS SASL and resource binding .
10657	returns a List containing all the Descriptors and the type .
10658	returns whether the event contains the specific descriptor . this method also checks whether it matches the type .
10659	adds the Consumer to the specified EventLifeCycle . In its current implementation the invocation of the Callback method is parallel but the notificaton of the listners not .
10660	Shuts down the task engine service .
10661	Identical File Contents
10662	Clean or unmap a direct ByteBuffer
10663	Checks that this entry is valid for the current thread
10664	Returns internal representation for key . Use NULL_KEY if key is null .
10665	Check for equality of non - null reference x and possibly - null y .
10666	Returns the entry associated with the specified key in the HashMap . Returns null if the HashMap contains no mapping for this key .
10667	Rehashes the contents of this map into a new array with a larger capacity . This method is called automatically when the number of keys in this map reaches its threshold .
10668	Copies all of the mappings from the specified map to this map These mappings will replace any mappings that this map had for any of the keys currently in the specified map .
10669	Removes the mapping for this key from this map if present .
10670	Removes and returns the entry associated with the specified key in the HashMap . Returns null if the HashMap contains no mapping for this key .
10671	Special version of remove for EntrySet .
10672	Add a new entry with the specified key value and hash code to the specified bucket . It is the responsibility of this method to resize the table if appropriate .
10673	Creates map delegate .
10674	Encodes a string for use in an XML attribute by escaping characters with a special meaning . In particular white spaces are encoded as character references such that they are not replaced by on parsing .
10675	Encodes an array of bytes as String representation of hexadecimal .
10676	Encodes a String as a base64 String .
10677	Encodes a byte array into a bse64 String .
10678	Overridden to just get the count and nothing else .
10679	adds the ability to select tracks
10680	adds the ability to jump to a specified position of the current track
10681	adds the ability to change the playback
10682	adds the ability to change the volume from outside the player
10683	adds the ability to return the available playlists on request .
10684	this method gets called when a new Command was found . It automatically fires the update Event or an error
10685	handles the volume - command
10686	handles the jump - command
10687	handles the select Track command
10688	Generate a cache bound to the thread .
10689	Generate a cache bound to the request
10690	Get the name of an alternative field for an alternative stream .
10691	Converts to an Immutable map with keys that are in the filter not transfered . Nested maps are also transfered .
10692	For instance the SparsePrincipal uses it .
10693	Adapt an object to a session . I haven t used typing here becuase I don t want to bind to the Jars in question and create dependencies .
10694	Make the method on the target object accessible and then invoke it .
10695	Delete an entire tree starting from the deepest part of the tree and working back up . Will stop the moment a permission denied is encountered either for read or for delete .
10696	Only update specified properties of the Object
10697	Sets the ping interval .
10698	Cancels any existing periodic ping task if there is one and schedules a new ping task if pingInterval is greater then zero .
10699	Adds all given option ignoring null elements .
10700	Tests if an option is already added to the parser .
10701	Parses command line arguments and fills set options .
10702	Prints a usage screen based on set options .
10703	Parses command line arguments for a given CLI parser .
10704	Initializes the connection by creating a packet reader and writer and opening a XMPP stream to the server .
10705	Notification message saying that the server supports TLS so confirm the server that we want to secure the connection .
10706	Returns the compression handler that can be used for one compression methods offered by the server .
10707	Request the server that we want to start using stream compression . When using TLS then negotiation of stream compression can only happen after TLS was negotiated . If TLS compression is being used the stream compression should not be used .
10708	Start using stream compression since the server has acknowledged stream compression .
10709	Sends out a notification that there was an error with the connection and closes the connection . Also prints the stack trace of the given exception
10710	Sends a notification indicating that the connection was reconnected successfully .
10711	Registers a new SASL mechanism
10712	Returns the registerd SASLMechanism classes sorted by the level of preference .
10713	generates the data to control the Event
10714	emit an informational message to standard out
10715	emit an error message to standard err
10716	the throwable if not - null is also prefixed line by line with the prefix
10717	creates a new StartEvent . Assumes the Output is using the java - sound output .
10718	creates a new StartEvent
10719	Notify that a new string has been written .
10720	checks whether it can provide the resource
10721	checks whether there are any resources registered from the source
10722	checks whether the ResourceContainer can provide at least ONE resource
10723	returns all EXISTING resources for the ID . If there are no resources for the ID the ID will get skipped
10724	Try to retrieve an object from the cache . Has the side - effect of loading an uncached object into cache the first time .
10725	Combine the parameters into a key suitable for storage and lookup in the cache .
10726	Remove this object from the cache . Note StorageClient uses the word remove to mean delete . This method should do the same .
10727	Put an object in the cache
10728	Runs the locator and collects all locations using the filters if set . The method can be called multiple times and will only result in a new map if any of the filters have been changed . If no filter has been changed the current map will be returned .
10729	Include a name and file
10730	Include from a jar file
10731	Add a SASL mechanism to the list to be used .
10732	Add a Collection of SASL mechanisms to the list to be used .
10733	Creates the listeners that will print in the console when new activity is detected .
10734	Create resources used by this component .
10735	registers the standard - events
10736	Registers or adds an event to the local_events . properties file with the informations found in the EventListener
10737	Registers or adds an event to the local_events . properties file
10738	executes with a lock
10739	Unregisters or deletes an event from the local_events . properties file
10740	Checks if the outputExtension can execute with the current event
10741	Create a new session for a DSE cluster initializes it and sets the keyspace to the provided one .
10742	creates a new MusicPlayerError
10743	starts the playing command
10744	stops the playing of the music
10745	commands the player to fulfill the command
10746	creates the Playlist - Request
10747	creates the Playlist - Answer
10748	Appends one or more postfixes and separates them by slashes .
10749	Create a query parameter with a boolean value .
10750	Create a query parameter with a number value .
10751	Create a query parameter with a String value . The value will be urlencoded .
10752	Create a query parameter with a String value .
10753	gets the first playlist if found in the EventModel
10754	This is the launch button action method . This method launches the Apache Sling bootloader and informs the user to wait before accessing it in a browser .
10755	Pings the Apache Sling server URL every 5 seconds to see if it has finished booting . Once it receives an OK status it enables the button to launch the browser and disables the launch Nakamura button .
10756	Pings the Apache Sling server URL looking for an OK status . Returns true once that OK status is received .
10757	Performs the action when the browser button is pressed which is launch a web browser and browse to the server URL .
10758	Returns an ImageIcon or null if the path was invalid .
10759	The Main method which executes the program .
10760	Replace contents with given values
10761	exports the Presence to a HashMap
10762	Advance current JSON value to specified element in JSON array . Set current JSON value to null otherwise .
10763	Advance current JSON value to specified value of current JSON object . Set current JSON value to null otherwise .
10764	Return an integer for current JSON value parsing string values as required .
10765	Return a double number for current JSON value parsing string values as required .
10766	Return string value for current JSON value
10767	creates a new Resource .
10768	verifies that an command is not malformed
10769	verifies that the player is capable of handling the command
10770	verifies tha the command is legal and able to be executed
10771	Async - execute a batch statement .
10772	Returns all subclasses found for the given class .
10773	Returns all subclasses found for the given fully qualified class name .
10774	Returns all known subclasses for a given class location and package name
10775	Returns all known subclasses found in a given directory .
10776	Returns all known subclasses found in a given location
10777	creates a list with this Element in it .
10778	Returns the accumulated size of all the bottom level maps .
10779	Processes a packet to see if it meets the criteria for this packet collector . If so the packet is added to the result queue .
10780	gets the first Volume if found in the EventModel
10781	Logs the RSM page not found error and returns an IQ error response
10782	Creates an error response for a given IQ request .
10783	returns true if the identifiable is the target of the EventModel
10784	Sets the login enabled time
10785	Factory method to create a synchronized set .
10786	Sets the name associated with this entry .
10787	Updates the state of the entry with the new values .
10788	Returns an unmodifiable collection of the roster groups that this entry belongs to .
10789	Appends RSM info to query response .
10790	Parses an RSM from a query XML element
10791	Filters response objects based on the RSM parameters . Updates the RSM object with item count first and last jid
10792	creates a new LeavingEvent
10793	Reloads the entire roster from the server . This is an asynchronous operation which means the method will return immediately and the roster will be reloaded at a later point when the server responds to the reload request .
10794	Creates a new roster entry and presence subscription . The server will asynchronously update the roster with the subscription status .
10795	Returns an unmodifiable collection of all entries in the roster including entries that don t belong to any groups .
10796	Returns the presence info for a particular user s resource or unavailable presence if the user is offline or if no presence information is available such as when you are not subscribed to the user s presence updates .
10797	Changes the presence of available contacts offline by simulating an unavailable presence sent from the server . After a disconnection every Presence is set to offline .
10798	Fires roster changed event to roster listeners indicating that the specified collections of contacts have been added updated or deleted from the roster .
10799	Sets the digest value using a connection ID and password . Password digests offer a more secure alternative for authentication compared to plain text . The digest is the hex - encoded SHA - 1 hash of the connection ID plus the user s password . If the digest and password are set digest authentication will be used . If only one value is set the respective authentication mode will be used .
10800	generates the resources
10801	helper method for PlaylistSelector
10802	returns the time passed if available
10803	the listener will always be called when the Properties - file changes .
10804	Initializes properties in the addOn . Creates new properties file using default properties .
10805	reloads the propertiesFile into the properties object
10806	Parses stream error packets .
10807	Parse the available SASL mechanisms reported from the server .
10808	Parse the available compression methods reported from the server .
10809	Parses a packet extension sub - packet .
10810	Decodes a String into an object of the specified type . If the object type is not supported null will be returned .
10811	verifies that the StartMusicRequest is correct and checks whether the you are meant to react to it
10812	returns the PlaybackState from the resource
10813	Returns the secret key for a sub - domain . If no key was found then the default secret key will be returned .
10814	Returns if we want components to be able to connect multiple times to the same JID . This is a custom Openfire extension and will not work with any other XMPP server . Other XMPP servers should ignore this extra setting .
10815	Puts a key - value mapping into this map . Neither the key nor the value may be null .
10816	Returns a set view of this map s keys .
10817	Returns a collection view of this map s values .
10818	Purges the specified reference .
10819	Gets the entry mapped to the key specified .
10820	Gets the hash code for a MapEntry . Subclasses can override this for example to use the identityHashCode .
10821	Creates a ReferenceEntry instead of a HashEntry .
10822	Controls whether the fired Event should be dispatched to all the listeners . This method should execute quickly
10823	sets the presence
10824	updates the boolean whether it is the mode vague
10825	Delivers a message directly to this chat which will add the message to the collector and deliver it to all listeners registered with the Chat . This is used by the Connection class to deliver messages without a thread ID .
10826	Generates a script .
10827	Tests and if necessary creates an output directory . The root path is the current directory as given by the system property user . dir . The created output directory has the name of the specified target for the generator . The method fails if the output directory cannot be created or if it exists and is write protected .
10828	Loads properties from a file .
10829	Writes an ST object to a file .
10830	gets the first Progress if found in the EventModel
10831	Factory method to create a synchronized collection .
10832	Discover FireREST services located in a range of IPv4 InetAddresses . E . g . The range of 256 addresses that starts with 10 . 0 . 1 . 128 ends with 10 . 0 . 2 . 127 .
10833	Return the cached service configuration resolving the service if required .
10834	returns the API used to manage the ThreadPool
10835	creates a new StopRequest
10836	verifies that the StopMusicRequest is correct and checks whether the you are meant to react to it
10837	Obtain a DSE cluster instance .
10838	Adds a connection listener to this connection that will be notified when the connection closes or fails .
10839	Registers a packet listener with this connection . A packet listener will be invoked only when an incoming packet is received . A packet filter determines which packets will be delivered to the listener . If the same packet listener is added again with a different filter only the new filter will be used .
10840	Registers a packet listener with this connection . The listener will be notified of every packet that this connection sends . A packet filter determines which packets will be delivered to the listener . Note that the thread that writes packets will be used to invoke the listeners . Therefore each packet listener should complete all operations quickly or use a different thread for processing .
10841	Process all packet listeners for sending packets .
10842	Registers a packet interceptor with this connection . The interceptor will be invoked every time a packet is about to be sent by this connection . Interceptors may modify the packet to be sent . A packet filter determines which packets will be delivered to the interceptor .
10843	Process interceptors . Interceptors may modify the packet that is about to be sent . Since the thread that requested to send the packet will invoke all interceptors it is important that interceptors perform their work as soon as possible so that the thread does not remain blocked for a long period .
10844	Creates the most suitable type .
10845	Notification message that the connection with the server was lost unexpectedly . We will try to reestablish the connection for ever until the connection has been reestablished or this thread has been stopped .
10846	Retrieve the current thread id for use by the transaction code .
10847	Checks that this node is valid for the current thread
10848	Returns the key to which this map maps the specified value . Returns null if the map contains no mapping for this value .
10849	common get logic used to get by key or get by value
10850	do the actual lookup of a piece of valid data
10851	do the actual lookup of a piece of data
10852	Compare two objects
10853	find the least node from a given node . very useful for starting a sorting iterator ...
10854	find the most node from a given node .
10855	get the next larger node from the specified node
10856	get the most valid node from the specified node
10857	find the least valid node from a given node . very useful for starting a sorting iterator ...
10858	copy the color from one node to another dealing with the fact that one or both nodes may in fact be null
10859	is the specified node red? if the node does not exist no it s black thank you
10860	is the specified black red? if the node does not exist sure it s black thank you
10861	get a node s grandparent . mind you the node its parent or its grandparent may not exist . no problem
10862	get a node s parent . mind you the node or its parent may not exist . no problem
10863	get a node s right child . mind you the node may not exist . no problem
10864	get a node s left child . mind you the node may not exist . no problem
10865	do a rotate left . standard fare in the world of balanced trees
10866	do a rotate right . standard fare in the world of balanced trees
10867	complicated red - black insert stuff . Based on Sun s TreeMap implementation though it s barely recognizable any more
10868	complicated red - black delete stuff . Based on Sun s TreeMap implementation though it s barely recognizable any more
10869	check if an object is fit to be proper input ... has to be Comparable if the comparator has not been set and non - null
10870	insert a node by its value
10871	Returns true if this map contains a mapping for the specified key .
10872	Returns true if this map maps one or more keys to the specified value .
10873	Returns the value to which this map maps the specified key . Returns null if the map contains no mapping for this key .
10874	Removes the mapping for this key from this map if present
10875	Removes all mappings from this map
10876	Returns a set view of the keys contained in this map . The set is backed by the map so changes to the map are reflected in the set and vice - versa . If the map is modified while an iteration over the set is in progress the results of the iteration are undefined . The set supports element removal which removes the corresponding mapping from the map via the Iterator . remove Set . remove removeAll retainAll and clear operations . It does not support the add or addAll operations .
10877	Returns a collection view of the values contained in this map . The collection is backed by the map so changes to the map are reflected in the collection and vice - versa . If the map is modified while an iteration over the collection is in progress the results of the iteration are undefined . The collection supports element removal which removes the corresponding mapping from the map via the Iterator . remove Collection . remove removeAll retainAll and clear operations . It does not support the add or addAll operations .
10878	It is very rare that this method would be required . You probably want to use entrySet instead . This method returns all Entry s in this Map no matter what its transactional status .
10879	Copy all entries including transaction statuses from this map into the supplied map . Do not use this method unless you know exactly what you are doing . The auto commit flag of the supplied map may be changed as a result of calling this method check that this is valid first .
10880	Clears all entries out of cache where the entries are older than the maximum defined age .
10881	Removes the least recently used elements if the cache size is greater than or equal to the maximum allowed size until the cache is at least 10% empty .
10882	When the bundle gets activated we retrieve the OSGi properties .
10883	asks the player for more information about the specified playlist and creates a PlayerRequest with the answer .
10884	Creates a new roster store on disk
10885	Opens a roster store
10886	Scan a range of InetAddresses starting with the given address
10887	Return first address on subnet containing given address
10888	exports the TrackInfo to a Hashmap
10889	returns the optional TrackInfo if the HashMap contains no malformed data
10890	Adds a set of application at runtime as in all found applications that can be executed
10891	Executes an application .
10892	Prints a list of pre - registered and found applications .
10893	Prints usage information to standard out .
10894	Public main to start the application executor .
10895	creates a new MuteEvent
10896	creates a new MuteEvent will mute everything
10897	Given a schema name get the associated GoodwillSchema . This method tries hard to find it i . e . it will refresh the cache if the schema is not in the cache .
10898	Writes the given lines to the given file if possible .
10899	Tests if the class is run from an executable JAR .
10900	Adds a new option to CLI parser and option list .
10901	Get the schema as a collection of fields . We guarantee the ordering by field id .
10902	Given a name return the field matching the name .
10903	Returns the package name for a jar entry .
10904	Maps the content of the base map to its values .
10905	Create the EventListener .
10906	Sets the supplied state for this IterativeCallback .
10907	public wrapper for the iteration
10908	do the actual iteration
10909	gets the first TrackInfo if found in the EventModel
10910	exports the progress
10911	creates a Progress - object from the resourceModel
10912	Return an red image with the given text auto - sized to fit the current imageWidthximageHeight
10913	Return image from given URL .
10914	HTTP GET json from given URL resource .
10915	Take key and value pairs from source and create map from value to key in target .
10916	Creates Cartesian product of two lists .
10917	Sets the thread running
10918	Returns the thread to the pool .
10919	creates a new EndedEvent
10920	returns the current played track or null
10921	updates the TrackInfo - Object
10922	Shuffles the playlist and returns the shuffled playlist so the original stays intact . Only the part of the playlist after the current position is shuffled .
10923	returns true if all the active playbackModes are supported
10924	exports the Playlist to a HashMap
10925	Escapes all necessary characters in the String so that it can be used in an XML doc .
10926	The server is challenging the SASL mechanism for the stanza he just sent . Send a response to the server s challenge .
10927	Create a JSON representation of the GoodwillSchemaField . It will always contain the name type and position . Description and SQL attributes are however optional .
10928	main method for outputPlugin runs the data - conversion and output - renderer
10929	Handles an event from OSGi and places it in the appropriate queue .
10930	used only for testing
10931	Set a property . The property will only be set if writable . If the property or this athorizable is read only nothing will happen .
10932	remove the property .
10933	add a principal to this authorizable .
10934	remove a principal from this authorizable .
10935	Notification that the root window is closing . Stop listening for received and transmitted packets .
10936	call this method when you have encountered the user
10937	Invoked when an activator - event occurs .
10938	returns true if the resource is true otherwise returns false
10939	Sets the name of the group . Changing the group s name is like moving all the group entries of the group to a new group specified by the new name . Since this group won t have entries it will be removed from the roster . This means that all the references to this object will be invalid and will need to be updated to the new group specified by the new name .
10940	Checks whether the map contains the specified key .
10941	Checks whether the map contains the specified value .
10942	Puts a key - value mapping into this map .
10943	Clears the map resetting the size to zero and nullifying references to avoid garbage collection issues .
10944	Gets the hash code for the key specified . This implementation uses the additional hashing routine from JDK1 . 4 . Subclasses can override this to return alternate hash codes .
10945	Compares two keys in internal converted form to see if they are equal . This implementation uses the equals method . Subclasses can override this to match differently .
10946	Compares two values in external form to see if they are equal . This implementation uses the equals method and assumes neither value is null . Subclasses can override this to match differently .
10947	Changes the size of the data structure to the capacity proposed .
10948	Calculates the new capacity of the map . This implementation normalizes the capacity to a power of two .
10949	Creates an entry set iterator . Subclasses can override this to return iterators with different properties .
10950	Load a Map from binary stream
10951	This method is used to register the modules
10952	Internal initiation of addOn - fake constructor comes before prepare
10953	Fires listeners when a reconnection attempt has failed .
10954	Fires listeners when The Connection will retry a reconnection . Expressed in seconds .
