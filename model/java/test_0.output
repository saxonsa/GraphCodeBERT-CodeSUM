0	Copies the content of this buffer to the specified character sink .
1	Reads the content of the underlying stream .
2	Read the contents of the file into a list of lines .
3	Reads a number of bytes from the stream .
4	Grows a char buffer by copying the buffer .
5	Read more characters .
6	Start drain .
7	Returns a copy of the input stream .
8	Returns true if the iterable is empty .
9	Returns a function that converts an iterable to an Iterator .
10	Returns an iterator that consumes elements from an array .
11	Concatenates an Iterator to an Iterator over the elements in the Iterator .
12	Clears the iterator .
13	Writes bytes to the output stream .
14	Parse a cache builder specification string .
15	Returns the cache builder .
16	Appends a separator to the appendable .
17	Creates an immutable int array from the given arrays .
18	Returns an immutable copy of this IntArray .
19	Reads a single byte .
20	Read bytes from the input stream .
21	Write a map .
22	Writes the given Multiset to the given stream .
23	Gets the field setter .
24	Starts the stopwatch .
25	Adds the element at the end of the list .
26	Resize the size if necessary .
27	Convert an address to an InetAddress
28	Compress the longest run of the hextets
29	Convert hextets to an IPv6 string .
30	Creates an IP address from a URI string .
31	Returns true if the given IP address is a compatible version of the given IP address .
32	Convert an IPv4 address to an IPv4 address .
33	Checks to see if an address is a TeredO address .
34	Returns true if the given IP address is a valid IP address .
35	Convert an IP address to an IP address .
36	Convert an IP address to an IP address
37	Checks if a string represents a IPv4 address .
38	Decrement the given address .
39	Creates a buffered reader for the given file .
40	Writes a byte array to a file .
41	Copies the given file to the given output stream .
42	Copies a file from one file to another .
43	This method is used to create a new instance of the class .
44	Read the first line of the given file and return it as a String .
45	Creates a builder for the given expected size .
46	Copies the specified value into the cache .
47	Creates a new MinMaxPriorityQueue from the given iterable .
48	Calculates the capacity of the queue .
49	Fmix function .
50	Creates a new element order .
51	This method is used to create a new instance of this class .
52	This method is used to create a new instance of this class .
53	Enters the monitor .
54	This method is used to create a new instance of this class .
55	Enters the monitor .
56	Enter the guard if it is satisfied .
57	This method is used to create a new instance of this class .
58	Enter the monitor if interrupted .
59	Tries to enter the guard if the guard is satisfied .
60	Blocks until the guard is satisfied .
61	Waits until the guard is satisfied .
62	This method is used to create a new instance of this class .
63	Returns the wait queue length for the guard .
64	Waits until the next guard is satisfied .
65	Sign all registered guarders .
66	Start waiting for a guard .
67	Ends waiting for a guard .
68	Waits until the guard is satisfied .
69	Returns a new instance of the specified type .
70	Writes the specified character sequence to the output stream .
71	Execute the command .
72	Loads a 64 - bit long from a byte array .
73	Writes a 64 - bit 64 bit long to the byte buffer at the given offset .
74	Load a 32 bit integer from the given byte array .
75	Creates a media type with the specified type and subtype .
76	Parse a media type from a string .
77	Capture the parameterized type .
78	Removes all elements from an iterator .
79	Escape string .
80	Grows the buffer by the specified index .
81	Sets the concurrency level .
82	Build a cache .
83	Allocate arrays .
84	Adds a value to the histogram
85	Calculates the mean value that is non - zero .
86	Rebuild the hash table .
87	Returns the size of the set size
88	Creates an immutable table .
89	Creates an immutable immutable table .
90	Creates a new immutable table .
91	Creates a new instance of the specified type .
92	Creates a new ImmutableTable with the specified columns and column spacing .
93	Creates a new ImmutableSortedSortedSortedSortedSortedSortedSet with the given element .
94	Creates a builder for reverse order .
95	Returns true if the given Multiset is retained .
96	Implementation of pre - order traversal .
97	Creates a new StringBuilder for the given size .
98	Creates a type resolver for the given type .
99	Sets the map .
100	Removes all values for the given key from the map .
101	Concatenates an iterable without duplicates .
102	Creates a new immutable iterable .
103	Returns a copy of the input stream .
104	Creates an immutable list multimap .
105	Returns an immutable copy of this map .
106	Count the number of skipped bytes .
107	Returns the byte array .
108	Returns the hash code for the given hash function .
109	Compares two byte sources .
110	Creates an immutable range map .
111	Creates an immutable range map .
112	Concatenates two hash functions
113	Creates an immutable sorted set .
114	Sets the expected node count
115	Creates a lexicographical ordering from an iterable .
116	Starts the finalizer .
117	Creates a new instance of the specified type .
118	Creates an immutable sorted map .
119	Creates an immutable map .
120	Returns a copy of the specified sorted map .
121	Implementation of MurmurHash32 with seed .
122	Checks the current state of the monitor .
123	List files in a directory .
124	Returns true if the given directory is a directory .
125	Compares two paths .
126	This method is used to create a new instance of this class .
127	Returns the parent path of the given path .
128	Checks if a recursive delete option is allowed .
129	Throws an exception if the delete fails .
130	Rehash the hash table .
131	Returns the segment for the given hash .
132	Returns an immutable copy of the given list .
133	Joins the given range with the given value .
134	Unregister all registered listeners
135	Returns all subscribers for the given event type .
136	Find all subscribers in the given listener .
137	Returns an immutable copy of the specified elements .
138	Creates an immutable list .
139	Creates an immutable mutable list .
140	Returns a builder that has the expected size .
141	Returns a copy of the input stream .
142	Copies the collection into an array .
143	Checks that the element is not null .
144	Returns a copy of the input stream .
145	Reconicalizes a wildcard type variable .
146	Creates an immutable list of elements .
147	Returns a new immutable map with the expected size .
148	Returns an immutable copy of this map .
149	Finish the next line .
150	Creates an entry transformer for the given function .
151	Transforms an entry to a map entry .
152	Transforms an entry to an entry function .
153	Returns the index map for a collection .
154	Returns a string representation of the pending future .
155	Updates the buffer with the given byte buffer .
156	Returns an ImmutableSortedSortedSortedSortedSortedSet that wraps the given delegateSortedSet .
157	Creates an immutable set multimap .
158	Returns the sum of all AtomicLongs .
159	Returns the finalizer for the given loaders .
160	Dispatches the event .
161	Copies the given URL to the given output stream .
162	Post event .
163	Sets the concurrency level .
164	Sets the delegate maps .
165	Returns a copy of the input stream .
166	Executes the specified task .
167	Returns a new table that contains the values of the given table .
168	Creates a new TreeMultiset with the given elements .
169	Adds the cause chain to the set .
170	Copies object c .
171	Sets priority .
172	Creates a host and port from a string .
173	Creates a host and port from a string .
174	Creates a host and port from a string .
175	Extract host and port from a bracketed host string .
176	Creates a new GeneralRange from the given comparator .
177	Returns the reverse range .
178	Returns an immutable copy of the given set .
179	Creates an immutable type map .
180	Invoked when a lock is acquired .
181	Returns the subset of this range .
182	Creates an immutable map entry .
183	Makes an immutable map entry .
184	Wraps the given charEscaper .
185	Add a point
186	Creates a new ImmutableBiMap .
187	Creates a new ImmutableBiMap with the given entries .
188	Returns identity function .
189	Creates a new predicate function for the given predicate .
190	Creates a new instance of the specified type .
191	Is the entry expired?
192	Reserve and return wait length .
193	Returns the code point at the specified index .
194	Ensure that the capacity is larger than the given capacity .
195	Insert an entry into the hash table .
196	Insert an entry into the hash table .
197	Deletes an entry from the hash table .
198	Deletes an entry from the hash table .
199	Remove an entry from the table .
200	Remove an entry from the hash table .
201	Remove an entry from the hash table .
202	Sets the expected number of nodes .
203	Sets the expected edge count
204	Returns the SQL statement string that contains the named parameter values .
205	Sets the named parameter value .
206	Serialize an object to a byte array .
207	Converts a blob to an object .
208	Lock the data line
209	Save an undo log
210	The redis template
211	Returns the app map .
212	Locates a file on the classpath
213	Creates a connection information from a connection .
214	Maps a throwable to an event bus .
215	Checks to see if the given class should be skipped .
216	Get the default event bus .
217	Subscribe a subscriber to an event type
218	Unsubscribe from event type
219	Unregister a subscriber .
220	Posts an event to the current thread
221	Gets the sticky event .
222	Removes a sticky event .
223	Removes the given sticky event .
224	Look up all event types for the given event class .
225	Adds the given interfaces to the event types .
226	Adds an index to the event bus .
227	Attaches this Activity to the Activity .
228	Prepares the error fragment .
229	Replies the title for the exception .
230	Replies the message for the exception .
231	Performs a post - completion operation on a queue .
232	Blocks until the current thread finishes .
233	Support the subscript operator with a default value
234	Creates a new Flux with the given fallback function .
235	Repeats a sequence of elements with a given number of times .
236	Convert supplier to Mono
237	Subtract and add to the ring buffer
238	Converts a Subscription to a QueueSubscription .
239	Dispatches an error notification .
240	Executes the given updater and returns the result .
241	Creates a new scalar subscriber with the given value .
242	Shift a MonoIgnore to a new one
243	Creates a wait strategy that waits for the specified spin timeout .
244	Creates a new Mono from this Mono .
245	Returns a Mono that is empty
246	OR this Mono
247	Executes the given Throwable asynchronously on the given Throwable .
248	Gets the hook for onEach operator .
249	Creates a copy of the delayed delay using the specified generator .
250	Drains a maximum value into a queue .
251	Submits a scalar map using the provided function .
252	Execute the given function using the provided function .
253	Perform a parallel collect on the stream
254	Creates a new ParallelFux with a given mapper
255	Executes the given runnable on this thread
256	Execute onComplete onComplete
257	Performs a single - error on the stream
258	Executes a parallel function on the thread
259	Creates a parallel flat map using the provided mapper
260	Performs a parallel merge on this Queue .
261	Validates the given subscribers .
262	Performs a parallel concatenation of the results of applying the given function to the result .
263	Concatenates the provided Mono with the provided error mode .
264	Terminate the given field with the given instance .
265	Log a signal .
266	Start the download .
267	Pause all files .
268	Get the size of the download .
269	Unbinds the service if any .
270	Set the maximum network thread count
271	Pause all running tasks .
272	Start the download tasks .
273	Download and ignore duplicate tasks .
274	Add a download task .
275	Pause this queue
276	Resume this queue
277	Checks if the given response code is a valid accept range .
278	Finds the instance length for a trial .
279	Sets whether the open animation should be drawn .
280	Sets the elevation of the view .
281	Sets the colors of the label .
282	Add configuration properties .
283	Add a new model class comment .
284	Add an Enum comment .
285	Add getter comment .
286	Add general method comment .
287	add a comment
288	Returns the fully qualified name .
289	Returns the select key for the given column and generated key .
290	Load a framework resource table
291	Load a resource table .
292	Add styleable attributes to the resource table .
293	Sets if WiFi is enabled .
294	Adds the smallest screen width to the qualifiers .
295	Inject native method .
296	Rewrite method body .
297	Determines whether the given method is a Gregorian calendar constructor .
298	Marks the given class as public .
299	Marks the given method as public .
300	Marks the given method as private .
301	Set the traversal after traversal .
302	Set the traversal before .
303	Adds a child .
304	Pushes the default return value to the stack .
305	Get the mode of a file .
306	Initializes the ActivityController .
307	Updates the configuration .
308	Recreates the activity controller .
309	Sets the call state
310	Expect a log message .
311	Indicates whether the activity should be exported .
312	Get the shape end point
313	Get the point at the end
314	Create a resTable_config from the given buffer
315	Compares two resTable_configs .
316	Determines if this component is a default .
317	Gets the application restrictions for the given package name .
318	Adds a user profile .
319	Adds a user .
320	Connects to the socket .
321	Intercept the invoke virtual method with invokeDynamic .
322	Add the mappings between this one and another .
323	Adds a mapping for the given package name .
324	Grants permissions to a user .
325	Allow permissions for a user .
326	Selects and returns a list of available dns .
327	Get a file from a ZIP file
328	Gets the next HTTP request .
329	Add a response rule .
330	Adds a response rule to the request .
331	Stop the given object .
332	Adds a response rule .
333	Update the bluetooth audio route
334	Sets the priority of the thread .
335	Returns the priority for the specified thread .
336	Returns the index of the given bit
337	Sets the mode for the app .
338	Get the color value from a string .
339	Get the type of a string
340	Parse a float attribute .
341	Create an image decoder
342	Create an image decoder
343	Clicks a menu item .
344	Call onActivityResult method
345	Start the lock task .
346	Stop the lock task .
347	Posts a runnable to the current thread .
348	Posts a runnable at the end of the queue .
349	Removes the specified runnable from the scheduler .
350	Advances to the last scheduled runnable .
351	Advances the current time by the given amount .
352	Advances to the next task .
353	Run one task .
354	Bind service as user .
355	Sets the current time .
356	Returns true if the queue is idle .
357	Reset the message queue .
358	Builds an activity from the given class .
359	Builds an ActivityController from the given Intent .
360	Setup an Activity .
361	Build a FragmentController from the given class .
362	Speech from text .
363	Get the display size
364	Get the file system for the given jar file .
365	Gets the logs for the given tag .
366	Returns a list of all the manifest entries .
367	Returns the broadcast receiver for the given class name .
368	Deletes a notification channel group .
369	Get java version
370	Transform the shadow
371	Returns the value associated with the given key .
372	Load a resource bag value .
373	Posts a runnable to the scheduler .
374	Posts a runnable to the scheduler
375	Add an ActivityInfo if not already present .
376	Add a service if not already present .
377	Add a receiver to the activity .
378	Add a provider if not already present .
379	Add or update an activity .
380	Add or update a service .
381	Add or update a receiver .
382	Add or update a provider .
383	Removes an activity by its name .
384	Remove a service .
385	Remove a provider .
386	Removes a receiver from the list of receivers .
387	Sets the list of resolve infos for the given intent .
388	Add resolve info for an intent .
389	Add the package info .
390	Adds an intent filter to an activity .
391	Adds an intent filter for the given component name .
392	Adds an intent filter for a receiver .
393	Adds an intent filter for the given component name .
394	Finds the parent script for the given script .
395	Returns the number of ancestors of the given script .
396	Parse the apk file
397	Returns an Intent for the given activity class .
398	Verify the given resTable_type .
399	Find the libraries in the project .
400	Determines the organization name for the given admin .
401	Sets accessibility services .
402	Sets the allowed input methods .
403	Activates a reset token for the given admin .
404	Get the set of resource configurations
405	Returns a set of locales .
406	Open a non - asset .
407	Add the available restore sets for the given list of packages .
408	Executes the specified runnable .
409	Execute the runnable on the mainLooper .
410	Read a Parcelable object .
411	Writes a blob to the real object .
412	Writes the given byte array to the given byte array .
413	Returns the byte array as a byte array .
414	Set the data position
415	Checks that the given item is consistent with the given item .
416	Returns the next element .
417	Read next item from data buffer
418	Reads a value from the input stream .
419	Read zero bytes .
420	Read primitive .
421	Write an item .
422	Read bytes from an input stream .
423	Returns the native object id for the given object .
424	Get a native object by its id
425	Call attach method
426	Sets the default network active .
427	Play sound .
428	Load a sound .
429	Reconfigures the widget with the given id
430	Create widgets .
431	Invokes the seekComplete listener .
432	Invokes an info listener on the player .
433	Invoke error listener
434	Returns the default display .
435	Sets the density of the object .
436	Set the xdpi
437	Sets the ydpi
438	Sets the name of this object .
439	Sets the flags for this object .
440	Set the width
441	Set the height
442	Set real width
443	Set real height
444	Sets the current rotation .
445	Sets the state of this object .
446	Releases a connection .
447	Establishes the tunnel .
448	Returns the common superclass of the given types .
449	Qualify an attribute .
450	Navigate to the next node .
451	Checks if the given name is a supported device .
452	Adds an asset .
453	Returns the qualifier string for the given configuration .
454	Sets the system qualifier names .
455	Build a string from a char array
456	Loads a ServiceFinder .
457	Load a ServiceFinder .
458	Loads a service from system properties .
459	Checks if the given device is granted to the given package name .
460	Revoke the specified device from the given package name .
461	Adds or updates an android device .
462	Removes the given USB device from the system .
463	Add a new port .
464	Open the accessory descriptor
465	Add data .
466	Creates a media item .
467	Creates a deep - proxy for the given class .
468	Retrieves a field from an object .
469	Call an instance method .
470	Call an instance method .
471	Call a static method
472	Call a static method .
473	Create a new instance of the given class .
474	Call constructor .
475	Starts rendering .
476	Gets the typeface synchronously .
477	Gets the compile - time package resource table .
478	Dumps the view .
479	Extract the inner text of the view .
480	Returns a list of available wrappers for the given intent .
481	Post an intent .
482	Convert RGB values to HSV
483	Start a new section .
484	Ends a trace section .
485	Returns a provider for the given key .
486	Creates a new file with the given name and length
487	Run all queued tasks .
488	Run the next task .
489	Request an audio focus request .
490	Called when an audio focus request is sent .
491	Starts the server .
492	Returns the buffer at the specified index .
493	Queue input buffer
494	Releases the output buffer
495	Simulates a time change .
496	Converts a Map to a Bundle
497	Convert a SQL statement to a SQL string .
498	Create a new package info from the original package info .
499	Checks if the given package name is granted for backwards compatibility .
500	Applies the given flags to the component info .
501	Returns the index of the requested permission .
502	Gets the user badge .
503	Checks if the current user has a profile owner on the current user .
504	Extract a codepoint from a string .
505	Instantiates the specified class using reflection .
506	Get the status for the given authority .
507	Returns all content observers that match the given URI .
508	Add a display .
509	Changes the display with the given id
510	Fix the trace path .
511	Find the next set bit .
512	Reset fields .
513	Parse the string representation of the cron expression .
514	Returns the index of the given argument .
515	Generate a load instruction for the given type .
516	Generate a store instruction to store a variable .
517	Load a number of arguments .
518	Load the argument array .
519	Load a local variable .
520	Store a local variable .
521	Swap two types .
522	Box a type .
523	Unbox type .
524	Compares the given type .
525	Generate a field instruction .
526	Get a static field .
527	Put a static field on the stack .
528	Get field .
529	Put a field on the stack .
530	Generate an instruction for an invoke instruction .
531	Invoke the specified method .
532	Invoke a constructor .
533	Invoke a static method .
534	Invoke an interface .
535	Throws an exception .
536	Check type .
537	Visit implicit first frame .
538	Start a new frame
539	Adds a method item .
540	Adds a float to the constant pool .
541	Adds a string to the constant pool .
542	Adds a name type item .
543	Returns the item for the given key
544	Puts a 16 bit integer into the constant pool .
545	Put a short into the constant pool .
546	Visit an enum field .
547	Visits an annotation .
548	Calculate the position of the wavelet
549	Creates a buffered image from the raster
550	Visit a parameter
551	Visits an annotation .
552	Visits a parameter annotation .
553	Visit a type instruction .
554	Visit a field instruction .
555	Visits a method instruction .
556	Visit a table switch instruction .
557	Visit a lookup switch instruction .
558	Visit a multi - array instruction .
559	Visits a local variable annotation .
560	Visit a line number .
561	Read the frame type .
562	Sets the top of the stack .
563	Returns the index for the given local .
564	Sets the local variable .
565	Pushes stack .
566	Returns the type of the given descriptor .
567	Pop the output stack .
568	Pop the stack .
569	Initialize the variable
570	Returns the type of the given type .
571	Visit a source .
572	Visit an outer class .
573	Visits an annotation .
574	Visits a type annotation .
575	Extract a bit from a bit range .
576	Gets object type .
577	Extract the argument types from a method descriptor .
578	Extract the return type from a method descriptor .
579	Returns the number of arguments and return the number of arguments .
580	Get the type from the buffer .
581	Gets the descriptor .
582	Returns the descriptor for the given class .
583	Get the opcode for the given opcode .
584	Put a byte into the buffer .
585	Put two byte arrays .
586	Put a short into the buffer .
587	Puts two byte arrays into the buffer .
588	Put an int into the buffer .
589	Puts a long into the buffer .
590	Puts a string into the buffer .
591	Puts a byte array into the buffer .
592	Enlarges the size of the array
593	Get column name
594	Sets the column mapping .
595	Gets the value of the property .
596	Initialize all configuration properties .
597	Creates an instance from the given name .
598	Convert a string to a lower case .
599	Returns the current value for the given change .
600	Sets the value for the given change .
601	If null returns an empty array .
602	Creates a Set if it is null .
603	Get global param
604	Attach parameters to the statement .
605	Returns the absolute path of the given path .
606	Parse a checksum value .
607	Computes the checksum for the given value .
608	Returns the class loader of the project .
609	Prints the settings .
610	Parses the properties file .
611	Checks if current field value is set .
612	Write next line .
613	Returns true if the given string contains any special characters .
614	Process the next line .
615	Process the next character .
616	Execute the update .
617	Returns the value of the given property .
618	Returns the value of the property
619	Sets the value of the property .
620	Adds aliases .
621	Sets the default value
622	Generate the SQL statement to create an index statement .
623	Checks if the given column is computed .
624	Tag the database .
625	Lists all locks in the database .
626	Returns a list of change set statuses for the given context .
627	Clear the check checksums .
628	Parse a CSV file from a reader .
629	Process a line .
630	Returns the property editor for the given property descriptor .
631	Load implementations in a jar file .
632	Checks if the package matches the given package name .
633	Gets the property type .
634	Checks if the given object has a property with the given name .
635	Sets the property .
636	Gets the read method .
637	Returns the write method for the given property name .
638	Get methods for an object .
639	Undo the collection .
640	Gets the list of outgoing foreign keys .
641	Creates the CDI config .
642	Acquires a file lock .
643	Returns the simple path for a resource .
644	Checks if the change set is filtered by the given type .
645	Returns the value of the specified column .
646	Initialize the configuration .
647	Initialize database .
648	Checks if the given database objects are equal .
649	Sets the validate option if available .
650	Adds a type to the snapshot .
651	Initialize the Liquibase
652	Checks for trim .
653	Convert a String value to an Object
654	Main entry point .
655	Splits an argument string into an array of arguments .
656	Checks if the argument is a SQL command .
657	Returns true if the given command is a no - arg command .
658	Extract the contents of a jar entry from a jar file .
659	Parse the default property file from the classpath
660	Fix up the arguments .
661	Check setup .
662	Check for missing command parameters .
663	Checks if the command parameters are valid .
664	Parse the properties file .
665	Prints the help message .
666	Prints the help message .
667	Parse the command line arguments .
668	Gets the value of a command parameter .
669	Read an Integer .
670	Returns true if this expression matches the given runtime labels .
671	Returns true if the given example object contains the given example .
672	Creates a snapshot of the database .
673	Creates a snapshot of an example .
674	Generate the drop foreign key constraints .
675	Deletes a directory .
676	Split SQL statements into SQL statements .
677	Pads the string to the specified length .
678	Left pad the string .
679	Generate a random identifier .
680	Strip the SQL comments from the end of the string
681	Concatenates the base string and returns the result .
682	Returns the names of all catalog names in the database .
683	Append a new clause .
684	Appends a new clause with the given key .
685	Prepend the given key with the given key .
686	Inserts a new string clause before the given key .
687	Inserts the given key with the given key .
688	Returns the value associated with the specified key .
689	Get the subclause for the given key
690	Prints the change set to the given output stream .
691	Get all implemented databases
692	Get all internal databases
693	Validates the given database .
694	Convert database data type to database data type
695	Convert object to SQL string .
696	Checks if string is a current date time function
697	Returns true if the data type supports boolean data type .
698	Generate SQL statement string .
699	Returns true if the statement is a volatile statement .
700	Adds an artifact .
701	Gets the declared field .
702	Get alternate paths from path
703	Returns true if this expression matches the given context .
704	Creates the resource accessor .
705	Closes the database .
706	Append the next character to the string buffer .
707	Checks if the next line is escaped .
708	Determines if the next line is escaped .
709	Get all children with the given namespace .
710	Sets the value .
711	Returns the value converted to a given type .
712	Get a child node by name .
713	Gets the child value of the given node .
714	Returns the value of the child with the given name .
715	Closes the underlying stream .
716	Returns true if the type is auto incremented .
717	Checks if the given path is a compressed file .
718	Gets the column by its name .
719	Gets a singleton object from this scope .
720	Tag the database .
721	Create a Precondition from the given tag name .
722	Checks to see if the value is now or not .
723	Returns the value associated with the given key .
724	Sets the validate option if available .
725	Returns the SQL statement for unique constraints .
726	Returns the set parameters for the given change .
727	Retrieves the required parameters for the given database .
728	Convert to string
729	Returns the set of serializable fields .
730	Returns the full path of the given filename .
731	Creates the index lookup .
732	Returns the index of the given column
733	Returns the property descriptor for the given column .
734	Returns the field for the given column
735	Gets the column name .
736	Finds the descriptor for the given name .
737	Find a field by its name .
738	Returns true if the given property descriptor matches the given name .
739	Loads property descriptors .
740	Get column name
741	Sets the column mapping .
742	Returns the size of the parameter
743	Checks if the given column type is compatible with the given default value .
744	Get list of change sets to run .
745	Escapes the name of the database object .
746	Sets the value numeric .
747	Sets the value boolean .
748	Sets the default value boolean
749	Unregister a change .
750	Returns the set of changed changes .
751	Create a change object .
752	Prompts for non - local database .
753	Gets the name of the default schema .
754	Checks if the database is safe to run .
755	Filters the list of rollback events to rollback .
756	Returns the maximum number of digits for the given timestamp .
757	Checks that the given string is valid .
758	Create a node in the current change log file .
759	Fails if the given object is not null .
760	Checks if the database name is a sybase product name .
761	Create a new SqlVisitor for the given tag name .
762	Get the local host address .
763	Get the local host name
764	Surround the SQL to the given database .
765	Adds a schema to the text .
766	Encode data to hexadecimal
767	Get the names of all table names
768	Read the next line .
769	Returns the next line .
770	Returns true if the reader is closed .
771	Start polling
772	Starts the server .
773	Sets app conf folder .
774	Creates a new int property .
775	Creates a new long property .
776	Creates a boolean property .
777	Creates a new float property .
778	Gets a double property .
779	Load properties from a table .
780	Gets a dynamic property .
781	Update all properties
782	Add a callback .
783	Remove all callbacks
784	Returns the HttpVerb uriRegex property value .
785	Load properties from an input stream .
786	Adds a property .
787	Update properties .
788	Add or change a property .
789	Deletes a property .
790	Clears the map .
791	Gets the properties .
792	Loads properties from the configuration source .
793	Adds a configuration at the specified index .
794	Removes the given configuration .
795	Removes a named configuration .
796	Returns the keys for all overrides .
797	Returns all keys matching the given prefix .
798	Checks if a key is present in the configuration list .
799	Retrieves a list from the cache .
800	Returns a String array for the given key
801	Load the cascaded properties from the resources .
802	Load properties from configuration .
803	Load the configuration properties .
804	Poll the configuration files .
805	Get the angle at the given location
806	Compute and return the value for the given key .
807	Main entry point .
808	Returns the name of the getter property .
809	Returns true if the method is a getter method .
810	Adds a constraint match .
811	Add medium constraint .
812	Adds a constraint match .
813	Clean the path .
814	Calculates the standard deviation squared for all asset allocation .
815	Checks if the problem is already present .
816	Returns the problem scale for the given solution .
817	Generate task name .
818	Determines if the request context has a request timeout .
819	Returns true if the task timeout is needed .
820	Creates a task with a timeout .
821	Build a response from an input stream .
822	Returns a new build task .
823	Create a new build task
824	Write the generic failure information to the output .
825	Creates a single trace from a trace object .
826	Execute a batchable task .
827	Returns the name of the batch .
828	Executes the specified consumer with the specified consumer .
829	Creates default configuration .
830	Composes the transformation trace .
831	Create a new execution task .
832	Sets an engine property .
833	Creates a new promise value
834	Propagate result to destination
835	create resilient summary
836	Create a simple summary for a member .
837	Create connections summaries for a person id .
838	Adds a side effect to a task .
839	Timeout the specified task .
840	Finds the lowest SN from a list of children
841	Appends the stack trace to the task stack trace .
842	Monitor the monitor .
843	Checks to see if there is a stall .
844	Creates a new RetryableTask with the given name and retry policy .
845	Wraps the given attempt .
846	Retries a retry attempt .
847	Executes the task .
848	Convert object to target type
849	Sets the rest client .
850	Acquires a lock .
851	Release lock .
852	Acquire the permit for the given class .
853	Get the Ning HTTP client
854	Initializes the AsyncHttpHttpClient .
855	Consumes characters from the buffer until they are found .
856	Throws an IllegalArgumentException if the array is null .
857	Checks that the string is not empty .
858	Parse a transformation string .
859	Get file list .
860	Returns a list of files with the specified name .
861	Find files that match the query .
862	Removes a file .
863	Remove all elements matching the query .
864	Put a value under the key .
865	Get the value associated with the key
866	Creates a new builder for the given type .
867	Gets the maximum time in milliseconds .
868	Creates a new compressor with the given key and value .
869	Returns the name of the cluster .
870	Returns the master address .
871	Is the given server address?
872	Returns the maximum size of the cluster .
873	Adds a key to the query .
874	Applies the write concern to the transaction options .
875	Returns true if the status is ok .
876	Gets the error message .
877	Read annotations .
878	Returns the index names for the given indexes .
879	Generate index name .
880	Validates the file .
881	Returns a codec for the given bson type .
882	Calculate the batch size .
883	Parse a string into a long .
884	Decodes the given BSON reader using the default context .
885	Checks if the given set of valid states are equal .
886	Writes a BSON document to the document .
887	Write extra elements to the stream .
888	Returns a byte array representation of this object .
889	Puts this object into a byte buffer .
890	Returns a hex string representation of this object .
891	Returns a string representation of this object .
892	Starts the document builder .
893	Pushes a new object onto the current stack .
894	Adds a bulk result .
895	Adds error result .
896	Adds a write error result .
897	Adds an error result .
898	Gets the error .
899	Atomically sets the next node .
900	Returns the next non - marker .
901	Returns the successor of this node .
902	Returns the predecessor of this node .
903	Returns the next node .
904	Returns the back of this node .
905	Appends the specified element to this node .
906	Prepend the specified element to this node .
907	Deletes the next element .
908	Replace this node with a new element .
909	Executes the fsync command .
910	Returns a list of servers for the given cluster .
911	Returns a ReadPreferred ReadPreferred ReadPreference with the given maxStaleness .
912	Gets a secondary read preference .
913	Returns a new ReadPreferred ReadPreferred ReadPreferences with the given maxStaleness .
914	Returns a new ReadPreference which is nearest to the given maximum size .
915	Returns a read - only ReadableReadableReadableReadableReadableReadableReads for the given tag set .
916	Creates a new read - only read preference .
917	Returns a new ReadableReadableReadableReadableReadableReadableReadableReadableReadableReadableReadableReads for the given tag set .
918	Returns a Naggable read preference for the given tag set .
919	Returns a TaggableReadableReadableReadableReadableReadableReadableReadableReadableReadableReadableReads and returns a TaggableReadableReadableReadableReadableReadableReadableReadableReads .
920	Returns a Naggable read preference for the given tag set list .
921	Returns the read preference with the given name .
922	Creates a TaggableReadable read preference with a given name .
923	Creates a TaggableReadableReadableReadableReadableReadable from a list of tags .
924	Reads bytes from an input stream .
925	Read an int from the input stream .
926	Read an int .
927	Read an int from the buffer starting at the given offset .
928	Read a long from the given input stream .
929	Gets the credential list .
930	Get a random server from the list of servers .
931	Creates a new MongoDB client .
932	Creates a copy of this object .
933	Creates a new class model builder for the given type .
934	Get collection by name .
935	Drop database .
936	Get collection names .
937	Executes a command .
938	Executes a command .
939	Checks if collection exists .
940	Execute a script .
941	Get statistics about the database .
942	Remove a user .
943	Returns the read preference for the given command .
944	Returns a new instance of the given class .
945	Insert a document into the database .
946	Execute update .
947	Find a single document .
948	Rename collection .
949	Executes a map reduce command .
950	Explain the aggregate .
951	Create an index .
952	Create an index .
953	Find and remove a query .
954	Sets the db decoder factory .
955	Sets the db encoder factory .
956	Get index info .
957	Drop an index .
958	Drop an index .
959	Indicates whether the field is capped .
960	Sets the class for the given path .
961	Returns the class for the given path .
962	Creates a new BSON update .
963	Sets the value of a setOnInsert property .
964	Rename a field .
965	Appends the given number to the given number .
966	Creates a new object with the given number .
967	Apply a minimum value to the given field .
968	Creates a new maximum value .
969	Adds a new object to the set .
970	Adds an item to the set .
971	Creates a new field with the given name and value .
972	Push an item to a list of values .
973	Creates a BSON update operation .
974	Creates a bson document that contains the given filter .
975	Creates a new BSON update operation .
976	Write query prologue .
977	Increments the generation on a socket exception .
978	Gets the hierarchy of the given class .
979	Creates replace options object .
980	Decode a string .
981	Encode a byte array to a string .
982	Returns the address of the cluster .
983	Returns the replica set status .
984	Returns a list of databases .
985	Synchronously sends a file to disk .
986	Fsync and lock the database .
987	Unlock the file .
988	Returns the value as a BSON Number .
989	Returns a new connection id with the given server value .
990	Compute the ancestors of the given class .
991	Returns a Json representation of this object .
992	Execute a batch command .
993	Gets the expire after the specified time unit .
994	Returns a DBObject representation of this query .
995	Gets the logical session timeout .
996	Gets all server descriptions .
997	Gets a server by its address .
998	Returns a list of primitives .
999	Gets the secondary .
1000	Returns a list of secondary objects with the given tag set .
1001	Returns a list of all servers .
1002	Returns a list of available server or secondary .
1003	Gets any server with the given tag set .
1004	Get short description .
1005	Create a new MongoDB credential .
1006	Create a new SMram SHA256 credential .
1007	Create a plain password .
1008	Creates a new authentication credential .
1009	Sets the authentication mechanism .
1010	Gets the mechanism property .
1011	returns a byte array
1012	Adds a serializer for the given class .
1013	Sets whether or not the update should be performed .
1014	Encode the message .
1015	Write the message prologue .
1016	Adds a document to the output .
1017	Adds collectible document .
1018	Backpatch message length
1019	Create a chunk .
1020	Creates a copy of this cursor .
1021	Checks to see if the cursor is available .
1022	Retrieves the next object from the cursor .
1023	Returns a list of elements from this iterator .
1024	Retrieves the next record .
1025	Gets the read preference .
1026	Gets the read concern .
1027	Put a value .
1028	Put a DBRef .
1029	Creates a new bulk write result .
1030	Get socket address .
1031	Gets socket addresses .
1032	Creates an object that is not equal to the given value .
1033	Create a greater than or equal to the given value
1034	Creates a less than or equal to the given value
1035	Creates a greater than or equal to the given value .
1036	Creates a less than or equal to the given value
1037	Creates an OR filter from a list of filters .
1038	Creates and returns a new BSON filter .
1039	Returns true if the given field exists .
1040	Search for documents that match the search string
1041	Creates a BSON filter for text search .
1042	Creates a BSON match for an element .
1043	Returns the bounding box within the bounding box .
1044	Returns a bounding box within a list of points .
1045	Returns a bounding box within the specified center .
1046	Returns a geometry that is near the specified field .
1047	Returns a BSON document that is near the specified field .
1048	Returns the flags for a string .
1049	Returns the flag for the given character .
1050	Returns a string representation of the flags .
1051	Sets the text version .
1052	Sets the sphere version .
1053	Copy options .
1054	Convert value to type
1055	Encode a DBObject to a Writer .
1056	Execute the write request .
1057	Creates a new bulk update .
1058	Add an array filter to the bulk update request .
1059	Execute a write operation on a writeBinding .
1060	Initialize the mongo library
1061	Creates a new embedded cluster .
1062	Closes the mongo library .
1063	Enable SNI for a host .
1064	Returns the type of the given object .
1065	Serialize the output to a DBObject
1066	Returns a short description of this instance .
1067	Creates acknowged update result .
1068	Gets the content type .
1069	Returns the list of aliases for this file .
1070	Returns the first key in the document .
1071	Encode the value with the default context .
1072	Returns a BSON document as a BSON document
1073	Compress the source into a single byte array
1074	Gets a String property .
1075	Gets the boolean value as a boolean .
1076	Returns the value of the specified field .
1077	Get the value of the field as a Date .
1078	Converts the given object to a BSON object .
1079	Gets the credential .
1080	Start a session .
1081	Gets the WTimeout value .
1082	Returns a BSON document as a BSON document .
1083	Indicates whether the writer is acknowledged .
1084	Returns a copy of this write concern with the given witter .
1085	Returns a copy of this write concern with the specified w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . w . ws . ws . w . w . w . ws . w . w . w . ws . ws . w . w . w . w . ws . w . w . w . ws . w . w . w . w
1086	Returns a new write concern with the given timeout .
1087	Creates a majority concern for majority write operations .
1088	Insert a document .
1089	Execute a query .
1090	Execute bulk write operation .
1091	Creates a copy of this object .
1092	Creates a geo haystack index .
1093	Gets the index names .
1094	Returns the value associated with the given key or the defaultValue if no value is found .
1095	Gets a document value as a document .
1096	Returns the value associated with the given key as an array .
1097	Returns the value associated with the given key as a BSONNumber .
1098	Returns the value associated with the given key as a BSONInt32 or the given defaultValue if the key does not exist .
1099	Returns the value associated with the given key as a BSONInt64 .
1100	Returns the value associated with the given key as a decimal value .
1101	Returns the value associated with the given key as a double .
1102	Returns the boolean value associated with the given key as a boolean .
1103	Returns the value associated with the given key as a String .
1104	Returns the value associated with the given key as a BSONDateTime .
1105	Returns the value associated with the given key as a BSON timestamp .
1106	Gets the value associated with the given key .
1107	Returns the value associated with the given key as a BSONBinary object .
1108	Returns the value associated with the given key as a BSON regular expression .
1109	Write handling tasks .
1110	Returns a BSON document as a BSON document .
1111	Checks if value is not null .
1112	Is boolean boolean .
1113	Gets the property builder with the given name .
1114	Builds the class model .
1115	Returns the update options .
1116	Get the wrapper for a class .
1117	Get the wrapper for the given class .
1118	Returns the UUID as a UUID .
1119	Returns the UUID as a UUID .
1120	Parse a property value .
1121	Reads a hex string .
1122	Skip whitespace .
1123	Parse a string .
1124	Parse a number .
1125	Parse the exponent .
1126	Parse an array .
1127	Update an update .
1128	Returns a new connection description with the specified connection id .
1129	Returns true if the given count is acknowledged .
1130	Returns true if the write was acknowledged .
1131	Gets embedded value .
1132	Construct a list of values from the given key .
1133	Merges the given options with the given default options .
1134	Releases an item to the pool .
1135	Get a new item from the pool .
1136	Close the pool .
1137	Write this buffer to an output stream .
1138	Throws an exception if the given context type is not valid .
1139	Throws a BsonInvalidOperationException .
1140	Verify the required BSON type .
1141	Verifies the name of the element .
1142	Checks the preconditions for the given type .
1143	Parse a string representation of a decimal value .
1144	Returns this value as a BigDecimal .
1145	Gets the byte array .
1146	Sets the hint for the aggregation .
1147	Returns the document as a BSON document .
1148	Write the document to a file .
1149	Writes the contents of this buffer to the specified output stream .
1150	Removes this file .
1151	Sets the sort .
1152	Sets the sort document .
1153	Gets namespace .
1154	Gets the database name .
1155	Creates a new change stream document .
1156	Creates a builder for the given client session options .
1157	Reset the connection .
1158	Creates a copy of this options .
1159	Gets the write concern .
1160	Get user agent string .
1161	Populates the environment properties .
1162	Checks if the user group key matches the user group key .
1163	Convert a list of groups to a set of granted authorities .
1164	Returns the service endpoints for the given environment .
1165	Creates a new AADJWT token filter
1166	Get all TodoList
1167	Registers a file with the given path .
1168	Build the aggregators .
1169	Generate a summary for the report .
1170	Register a watcher .
1171	Adds a property .
1172	Create a raml type from a string
1173	Sets the watch event .
1174	Executes the given handle with the given callback
1175	Executes the given consumer with the given configurationurer .
1176	Executes the given callback with the specified callback .
1177	Define a form for authentication .
1178	Matches a basic authentication pattern .
1179	Resolves the value .
1180	Returns the path for the given pattern .
1181	Define a type .
1182	Serialize this object to a YAML string
1183	Returns the status of the response .
1184	Gets the status code .
1185	Sets the status map .
1186	Sets the media type .
1187	Run the Ebean enhancer .
1188	Sets the media type .
1189	Get query parameter .
1190	Gets the form parameter .
1191	Adds a header parameter .
1192	Returns the response for the given status .
1193	Sets the Hibernate validator configuration .
1194	Read data from the output stream .
1195	Requery a reactive entity .
1196	Requery a reactor .
1197	Require completion stage .
1198	Creates a Requery .
1199	Sets the type of the JavaScript element .
1200	Sets the HTML type for the element .
1201	Specifies the JSON element that should be used to write a JSON element .
1202	Sets the css .
1203	Removes attributes from a path .
1204	Creates a CSS style from a SVG element .
1205	Parse a string representation of a size .
1206	Write a sequence to a file
1207	Sets handle .
1208	Do model .
1209	Gets the last event id for the given type .
1210	Sends data to the client .
1211	Put a value in the view .
1212	Put values in the view .
1213	Creates a class loader for the system .
1214	Creates a class loader for the given project .
1215	Sets attributes .
1216	Sets attribute .
1217	Sets the parameter with the given name
1218	Returns the status object for the given status code .
1219	Executes the Jdbi with the given configurationurer .
1220	Rewrite SQL statement .
1221	Sends an asset .
1222	Executes the given DBI with the given configuration
1223	Executes the JOOQ with the given configurationurer .
1224	Adds a trigger for the given job .
1225	Creates a new Quartz job with the given configuration
1226	Gracefully shutdown the given iterator .
1227	Execute a cluster with a configuration callback
1228	Creates a new result with the given status .
1229	Sets the Jackson Jackson Module
1230	Provides an unauthenticated provider that is unauthenticated with the given provider .
1231	Sets the form for the given pattern .
1232	Parse the given application .
1233	Scan the specified type .
1234	Specifies the Swagger API to use .
1235	Specifies the Swagger API to use .
1236	The raml tool
1237	Sets raml .
1238	Process the contents of the source file .
1239	Receives a result from a CTE request
1240	Receives a result from a MongoDB response
1241	Receive a result from a CTE response
1242	Receives a response from the DFF
1243	Receive a CteConsultaCT result .
1244	Receives a result from the DFF
1245	Returns the default envelope for the given factory .
1246	Retrieves the namespaces from an envelope .
1247	Receive a result from a NFNFResult .
1248	Get the Lote enque .
1249	Enables the LEX environment for the LEX environment .
1250	Retrieves the status of the NFVO .
1251	Retrieves an event that was sent to the server .
1252	Cancels the event and returns it .
1253	This method is used to retrieve the INUIC informations for an INVALIDITY event .
1254	This method gets a CIDCastro CID from the NFVO .
1255	Receives a result from a CTE request .
1256	Receives a result of a CTE retre .
1257	Gets the assinata xml .
1258	Receives a result from a CTE request
1259	Cancels the element and returns it .
1260	Receive a MDF result
1261	Receives a result of a MDLE retry
1262	Cancels a DDL element .
1263	Enceures that there is no such element .
1264	Encode an event to an XML document .
1265	CDF status servlet .
1266	Fetches the informations about the OIDCA and returns it .
1267	Compute the updated XU .
1268	Returns the cosine similarity between two vectors .
1269	Computes and computes the set of data .
1270	Deletes a directory recursively .
1271	Creates an instance of the given class using the given constructor arguments .
1272	Publish additional model data .
1273	Open a custom tab .
1274	Determines the package name to use .
1275	Checks to see if there is a special handler for the given intent .
1276	Load the session .
1277	Starts the custom tabs .
1278	Validates the session configuration .
1279	Creates an intent to launch the response .
1280	Edit the configuration handler
1281	Starts a sample framework .
1282	Shutdown the Mesos scheduler .
1283	Returns true if the target VM has been assigned to the target VM .
1284	Evaluate and return the value of the target VM .
1285	Evaluate the target VM for the target VM .
1286	Sets the auto scale callback .
1287	Disable a VM .
1288	Disable a VM by id .
1289	Enable a VM .
1290	Shutdown the executor .
1291	Returns true if the given properties are not present .
1292	Create a demo file info for a source
1293	Create a CDOTAM match metadata file
1294	Read a packet .
1295	Read a varint from the stream .
1296	Read a fixed 32 - bit integer from the stream .
1297	Reads the engine type .
1298	Appends a tag to this tag .
1299	Add children to this container .
1300	If the Optional returns null .
1301	Renders a container tag .
1302	Set attribute .
1303	Sets attribute .
1304	Get attribute .
1305	Set the class names .
1306	Compress the JS code
1307	Parse a list of properties .
1308	Parse a comma separated list of values .
1309	Handle visibility of visible menu items .
1310	Sets the color of the left action button .
1311	Set the background color
1312	Open menu .
1313	Close the menu .
1314	Inflates the overflow menu .
1315	Sets whether or not the search key should be shown .
1316	Sets whether the items should be shown or not .
1317	Sets whether the search is focused or not .
1318	Update suggestions section height
1319	Calculates the height of the suggestion items .
1320	Sets the onBind suggestion callback .
1321	Returns the MD5 checksum of a file
1322	Configures to ignore SSL certificates .
1323	Reads the type from the given JsonReader .
1324	Returns the type abstract name .
1325	Returns the path in a nested package
1326	Returns the type as immutable .
1327	Creates a TypeAdapter for the given type .
1328	Returns an immutable ordered set .
1329	Returns an iterator over the elements in this buffer .
1330	Creates a cache key .
1331	Gets the serialized name .
1332	Returns the name of the name .
1333	Creates a predicate from the given expression .
1334	Creates a FluentFuture from a ListenableFuture .
1335	Gets the immutable map .
1336	Returns a string representation of the given type .
1337	Returns the next token buffer .
1338	Close the pool .
1339	Executes a script on the page .
1340	Sets the proxy settings .
1341	Sets the HTTP proxy .
1342	Sets the auto proxy URL .
1343	Creates a new Box Developer Edition connection with the given user id .
1344	Update the modified fields from another process definition .
1345	Add a user task listener to the activity .
1346	Post deployment processes to the Tenant Engine .
1347	Check if the bridge is selected by the bridge .
1348	Returns the servlet context path for the given process .
1349	Gets the servlet context path .
1350	Get the application information for the given process definition id .
1351	Get the process definition for the given process definition id .
1352	Create user details service
1353	Cast value .
1354	Initialize the camunda BPM component
1355	Checks if the given variable is set .
1356	Checks if the given variable is set .
1357	Opens the dialog .
1358	Close the stream .
1359	Updates the item positions .
1360	Returns the coordinates of the action view .
1361	Returns the center of the action view
1362	Calculates the position of the items
1363	Gets the activity content view
1364	Get screen size
1365	Restore the view after an animation .
1366	Sets the content view .
1367	Sets the position of the view .
1368	Attaches the view to the dialog .
1369	Performs the given destination and destination state .
1370	Makes sure that the given destination and destination states are not identity .
1371	Performs a condition for the given destination and destination state .
1372	Supports the given trigger if it is not null .
1373	Get or create a representation for the given state .
1374	Add an instance .
1375	Sets the overflow value for a given bucket .
1376	Merges two HLLs with the same size .
1377	Encode a sequence .
1378	Decode a sequence into a list of bytes .
1379	Decode a sequence optional element .
1380	Encodes a bit string into a byte array .
1381	Encodes the given byte array into an octet string .
1382	Encode length .
1383	Returns a new logger with the given name .
1384	Log a debug message .
1385	Log a warning level .
1386	Log an error message .
1387	Replaces the path .
1388	Decode percent encoded value .
1389	Process content timestamps .
1390	Registers the given configuration provider .
1391	Adds a value to the reservoir .
1392	Encode a byte array .
1393	Decode Base64 encoded string .
1394	Flush the output stream .
1395	Retrieves a destination .
1396	Compute the alpha of the target weight
1397	Propagate a cancelable future to the destination .
1398	Returns an unmodifiable future that is unmodifiable .
1399	Returns a new CompletableFuture that is unmodifiable .
1400	Returns a new CompletableFuture that is completed with the given throwable .
1401	Gets the value of the future .
1402	Retrieves the value associated with the given Future .
1403	Retrieve the value associated with the given Future .
1404	Retrieves the future value for the given future .
1405	Checks that the given Future has completed .
1406	Creates and returns a ListenableFuture that will be notified when the given futures are completed .
1407	Returns a CompletableFuture that is the first CompletableFuture that is the first completed exceptionally .
1408	Returns a CompletableFuture that is first completed by the given CompletionStage .
1409	Returns a CompletableFuture that is a list of CompletableFuture objects .
1410	Converts a ListenableFuture to a CompletableFuture .
1411	Converts a CompletableFuture to a ListableFuture .
1412	Adds an exception callback to the given executor .
1413	Returns a histogram of the given buckets .
1414	Remove a node from the tree
1415	Compute the maximum path weight for the given node .
1416	Adds a hash .
1417	Load properties from a file .
1418	Binds the given configuration for the given class .
1419	Calculates the next random duration for the next poll .
1420	Fetches the value of the given value .
1421	Multiply this duration by another .
1422	Divides this duration by another .
1423	Find a single field using the given strategy .
1424	Returns true if the given field has a static modifier .
1425	Throws an exception if the field was not found .
1426	Gets the field annotated with the given annotation .
1427	Sets the condition evaluation listener .
1428	Sets the executor service .
1429	Until the given atomic boolean .
1430	Until the given atomic boolean .
1431	Creates a new condition factory that will be used to catch exceptions .
1432	Sets the default timeout .
1433	Sets the default timeout .
1434	Tokenize the arguments .
1435	Escape backslashes .
1436	Serve static file .
1437	Loads the language configuration for the given file or url .
1438	Load all message files for the given languages .
1439	Get the URL for a logback configuration file .
1440	Generate a random secret
1441	Build a run class in a separate JVM .
1442	Extracts all artifacts from a set of artifacts .
1443	Resolves the standalone class .
1444	Encrypt a string .
1445	Decrypt a string
1446	Reads the Jinja version .
1447	Registers the given path .
1448	Determines if the environment is running or not .
1449	Returns true if the given string is a valid MIME type .
1450	Build the route
1451	Starts the server .
1452	Creates the server URL .
1453	Initialize the servlet .
1454	Process found methods .
1455	Sort methods .
1456	Finds all controller methods that are annotated with .
1457	Configures the reflections for the environment .
1458	Determines whether the given HTTP method should be used to determine whether or not .
1459	Gets the http method .
1460	Build a controller method invocation .
1461	Get real class name lower case .
1462	Checks if a class with the given name exists in the classloader .
1463	Get the source code relative to a stack trace element
1464	Add a value to the cache .
1465	Retrieves an object from the cache .
1466	Checks that the value is a serializable value .
1467	Renders the given key and value .
1468	Renders a string as a JSON string
1469	Renders the contents of a byte array
1470	Gets the cookie by name .
1471	Do not cache content .
1472	Checks if the application secret is set .
1473	Adds the specified collection to this adapter .
1474	Returns the position for the given id
1475	helper method to switch the view
1476	Remove an active index .
1477	Gets the active indexes .
1478	Gets the title view for the given position .
1479	Returns the content view for the given position .
1480	Expands an item at the specified position .
1481	Collapse the given position
1482	Returns the parent view parent for the given position .
1483	Returns the additional animators for the given view .
1484	Get bitmap from view
1485	Determines if the given position is dismissed .
1486	Reset the velocity .
1487	Reset the animation .
1488	Cancel an existing animation
1489	Animates a view .
1490	Calculates the delay between the given position
1491	Concatenates an array of Animators into an array of Animators .
1492	Handle nonCORS .
1493	Adds a stream of literal words to the buffer .
1494	Materializes the contents of an IteratingRL .
1495	Removes the first element from the stack .
1496	Resize the buffer .
1497	Compute size in words
1498	Computes the two bitmaps .
1499	Adds a stream of literal words to the buffer .
1500	Fill a list of literals .
1501	Returns this bit set as a bit set .
1502	Returns the number of bits in this set .
1503	Returns true if the set is empty .
1504	Returns an IntIterator that iterates over this set .
1505	Returns true if this set contains another bit set .
1506	Returns an IntIterator that iterates over this BitSet .
1507	Parse the next run .
1508	Open the tap bar .
1509	Closes the button .
1510	Sets the background color of the menu .
1511	Fetch the database name range index from the URL
1512	Fetch the database name range index from the URL
1513	Parse a connection URL
1514	Registers a connection URL parser .
1515	Fetch database name from url
1516	Runs daemon service .
1517	Copy a file to a file .
1518	Copies the specified assets file to the specified file .
1519	Installs a binary file .
1520	Handle missing fields .
1521	Get Enum from jsonObject
1522	Fix unresolved references .
1523	Traverses all fields in the given json object .
1524	Convert json to Java object
1525	Convert a jsonObject to a Java object .
1526	Traverses fields .
1527	Store missing field .
1528	Gets the raw type .
1529	Read an array .
1530	Reads a number .
1531	Read a string .
1532	Get a field by its name
1533	Removes leading and trailing quotes from a string .
1534	Converts an object to a JSON string .
1535	Format a json string
1536	Tab a tab .
1537	Writes the given object as an array element .
1538	Write a custom object .
1539	Get a custom writer for the given class
1540	Writes an object to the stream .
1541	Trace references .
1542	Trace fields for the given object .
1543	Ensure that the given map is a String .
1544	Write collection element .
1545	Creates a Map from a List of Strings .
1546	Gets the source .
1547	Gets the value of the topics property .
1548	Gets the hjid property .
1549	Gets the value of the documentDetailList property .
1550	Creates a new axis for the y axis .
1551	Creates default grid .
1552	Creates the legend which is used to show the legend
1553	Creates the legend which is used to show the legend .
1554	Creates a legend outside the one column
1555	Sets the legend style .
1556	Creates a highlighter
1557	Creates a highlighter for the chart
1558	Creates the default pie chart .
1559	Creates default Donut series default
1560	Gets the value of the documentAttachmentList property .
1561	Add commands to the application menu bar .
1562	Creates the menu items for the command .
1563	Create the overview page .
1564	Create the overview content .
1565	Gets the value of the kommunvrets property .
1566	Configure authentication .
1567	Sets the list .
1568	Sets the status map .
1569	Sets the resource type map .
1570	Gets the value of the kommun property .
1571	Gets the value of the uppdrag property .
1572	Gets the value of the proposal property .
1573	Gets the page path .
1574	Update the vote data
1575	Returns the maximum size of the maximum size of the view .
1576	Initialize the party map .
1577	Add data to the data series
1578	Create the ball ball chart .
1579	Adds the ball data to the data series .
1580	Creates the org . org . org . org . org . apache . org . org . apache . org . apache . org . org . apache . org . org . org . apache . org . apache . org . apache . org . org . org . apache . org . apache . org . apache . org . apache . org . apache . org . apache . org . apache . apache . org . org . apache . apache . org . org . org . apache . org . org . org . org . apache . org .
1581	Add the result for the given month .
1582	Creates a field for the given property .
1583	Creates the display property converters .
1584	Get a converter for a property type
1585	Gets the type of a property .
1586	Gets the value of the documentActivities property .
1587	Gets the user account from the security context .
1588	Gets the value of the county regions property .
1589	Gets the value of theAgainstProposalContainer property .
1590	Gets the value of the committeeProposalContainer property .
1591	Gets the value of the events property .
1592	Gets the page id .
1593	Gets the page number .
1594	Creates the panel content .
1595	Create page visit history .
1596	Helper method to add the Politician data .
1597	helper method to add a list to the data series
1598	Sets the scratch codes .
1599	Creates the role grant .
1600	Create a generic gantt .
1601	Returns a sorted set of entries sorted by values .
1602	Add a view generic role member to a step .
1603	Strips the date after the current date .
1604	Creates a new Gantt .
1605	Convert total days to years string .
1606	Load a secret key from a secret reference .
1607	Sends a message to the worker destination .
1608	Gets the value of the documentPersonReferenceList property .
1609	Clean the decision .
1610	Returns the document name for the document .
1611	Gets the short name .
1612	Block login attempts for a user .
1613	Block login attempts for a session .
1614	Navigation to page .
1615	Gets the application manager .
1616	Displays a notification .
1617	Gets the value of the topic property .
1618	Adds the source and indicators to the menu .
1619	Retrieves the topic indicators for the given view .
1620	Gets the value of the address property .
1621	Add cache hints to a typed query .
1622	Gets the string id list .
1623	Read a CSV file from a ZIP input stream
1624	Create the paging controls .
1625	Adds a page to the page .
1626	Inserts a Politician .
1627	Inserts a single party .
1628	Gets the value of theAgainstProposalList property .
1629	Adds a value to the data serie .
1630	Adds the general summary for the report .
1631	Helper method to add the annualization report data .
1632	Adds the general data to the chart .
1633	Add entry data to data series .
1634	Creates the report summary .
1635	Create the role list .
1636	Process all documents .
1637	Load and process document list .
1638	Load document list .
1639	Read the contents of a reader from a Reader .
1640	Read an access URL from an access URL .
1641	Gets the value of theotingering property .
1642	Retrieves the body of the narrative body
1643	Gets the value of the personAssignmentElement property .
1644	Gets the value of the personDetailElement property .
1645	Create a user account .
1646	Creates a row item .
1647	Creates a new grid layout .
1648	Sends the indicator work order .
1649	Gets the value of the documentProposal property .
1650	Gets the value of the documentActivityContainer property .
1651	Gets the value of the documentDetailContainer property .
1652	Gets the value of the document attachment container .
1653	Gets the value of the documentReferenceContainer property .
1654	Gets the value of the document person reference container .
1655	Creates a map of view riksdagen summary .
1656	Add document history by data series
1657	Read the missing person list .
1658	Append object presentation .
1659	Adds the fallback value to the string builder .
1660	Re - encrypt the vault values .
1661	Gets the value of the landstingsventries property .
1662	Adds the summary to the document builder .
1663	Add entry to string builder .
1664	Add decision data rows to the chart
1665	Add doc type data rows
1666	Add doc type decision data rows
1667	Gets the user id from the security context .
1668	Gets the request URL .
1669	Checks if the given role is in the security context .
1670	Gets the document action page summary map .
1671	Gets the page event page mode .
1672	Gets the list of Application action event pageDailySummary .
1673	Adds a list of view application action events to the data series .
1674	Update the person assignment data .
1675	Update assignment data .
1676	Handle input validation .
1677	Creates the base application event request .
1678	Validate the request .
1679	Returns human readable message for the request .
1680	Handle input violations .
1681	Create the data indicator for the indicator .
1682	Initialize the application menu bar .
1683	Create admin menu .
1684	Creates a button link .
1685	Sets the result element .
1686	Gets the kie container .
1687	Sets the javers .
1688	Sets the Javers auditable Aspect
1689	The author provider .
1690	Create the role summary .
1691	Utility method to add the ministry per year .
1692	Adds the provisional bodyAnnualSummary to the year list
1693	Get an integer from a string .
1694	Adds the data for the year to the map .
1695	Utility method to add the investigation body to the map
1696	Creates a GRPC summary from a row
1697	Gets the value of the personAssignmentData property .
1698	Gets the value of the personDetailData property .
1699	Retrieves a map of decisions that can be used to determine the decision type .
1700	Retrieves a map of all submissions in the organization and returns a map which can be used to determine the organization of the team .
1701	Add decision type by organization .
1702	Displays document attachments .
1703	Creates and adds a label to the given panel .
1704	Build the key for the given userid and password .
1705	Returns the rule violations .
1706	Adds a new rule violation .
1707	Creates a map from a list of votes .
1708	Checks to see if the date is in the include date .
1709	Get date from a string
1710	Gets the value of the parties property .
1711	Create the enable google auth button .
1712	Create the disable google auth button .
1713	Creates the button to display the change password .
1714	Gets the value of the documentReferenceList property .
1715	Try to determine the best guess date for the vote .
1716	Checks if the list contains the same date .
1717	Try to find a valid date .
1718	Get IP address from web browser .
1719	Get operating system name .
1720	Gets the value of the committeeProposalList property .
1721	Gets the value of the paragraphElectoral regions property .
1722	Gets the view rigen document summary .
1723	Add document history by organization
1724	Adds a new data series to the data series
1725	Add data item to data series
1726	Initialize user command map .
1727	Performs an operation .
1728	Gets the value of the voteDataList property .
1729	Gets the value of the assignmentList property .
1730	Sets the column orders and hidden fields .
1731	Configures the selection listener .
1732	Creates a grid cell filter .
1733	Sets the column converter .
1734	Gets the document type summary .
1735	Add data series .
1736	Gets the value of the exemptionTypes property .
1737	Get the ball summary item
1738	Gets the admin region .
1739	Gets the income level property .
1740	Gets the writing type .
1741	Gets the value of the ballotDocumentData property .
1742	Gets the value of the ballotDocumentElement property .
1743	Demonstrates the encryption property .
1744	Encrypt value .
1745	Gets the encryptor .
1746	Decrypt value .
1747	Gets the value of the countyElector regions property .
1748	Gets the JobContextHolder .
1749	Gets the value of the portal property .
1750	Gets the active user account .
1751	Gets the value of the dkument property .
1752	Creates the layout with the given panel and footer .
1753	Creates the top header actions for the user context .
1754	Creates the vertical layout .
1755	Adds the logo to the header .
1756	Creates the top title header .
1757	Gets the mail sender .
1758	Gets the smtp port .
1759	Find a language by its locale .
1760	Returns the supported languages .
1761	Creates a map of IssueConstraints for the issue .
1762	Sets the name space on an XML stream .
1763	Adds a chart .
1764	Returns the height of the chart window .
1765	Returns the name of the given party name
1766	Retrieves the view rigin document from the database .
1767	Attempt to authenticate the given username and password .
1768	Determines if the operating system is a Windows .
1769	Starts an emulator .
1770	Unlock an emulator .
1771	Write emulator start script .
1772	Writes the app emulator start script .
1773	Stop an emulator .
1774	Stops an emulator .
1775	Send emulator command .
1776	Assemble the start command line
1777	Determines the emulator to use .
1778	Determines the wait for the emulator .
1779	Determines the command line options .
1780	Determines the avd
1781	Determines the location of an emulator .
1782	Unjar a jar file .
1783	Calculates the source destination mapping .
1784	Visit a dependency tree .
1785	Resolve an artifact .
1786	Wait until the device is connected .
1787	Waits for initial device list from the AndroidDebugBridge .
1788	Deploys an APK file .
1789	Deploys the apk
1790	Undeploys an apk file .
1791	Undeploys an APK .
1792	Extract the package name from the apk file
1793	Extract the package name from an android manifest .
1794	Extract the instrumentation runner from the manifest file .
1795	Generate the libraries .
1796	Demonstrates how to run a device .
1797	Copies the input stream without closing the stream .
1798	Copy gdb server to destination directory
1799	Gets the java executable path .
1800	Returns the path of the pro guard jar .
1801	Gets the path of the shrinkedAndroid library .
1802	Returns the path of the build tools lib directory .
1803	Gets the main dex file path .
1804	Returns the path to the application .
1805	Gets the android jar .
1806	Replies the platform .
1807	Load the major version .
1808	Execute the command .
1809	Copy the manifest file .
1810	Extract the apk sources
1811	Extract the apk library from the apk library .
1812	Extract the AAR library
1813	Checks for apk lib dependencies .
1814	Gets the package compare map .
1815	Generate the correct rjava for the apk lib dependencies .
1816	Generates the rjava for the AAR dependencies .
1817	Generates the R file for an apk library .
1818	Checks if the build config is present .
1819	Checks if an artifact is present in the jar
1820	Gets the input files for the input file .
1821	Execute the command .
1822	Checks if the client secret file is valid
1823	Adds libraries to the classpath .
1824	Adds classes to the classpath .
1825	Execute the Lint invocation .
1826	Gets the GAV .
1827	Collect JVM arguments .
1828	Gets the jvm library .
1829	Gets the toolchain .
1830	Returns the path to the ndk .
1831	Reads the manifest file .
1832	Writes the manifest to a file .
1833	Export the properties to the manifest .
1834	Generate the version code from the manifest .
1835	Extracts the architecture from an artifact .
1836	Returns the names of the files in the given directory .
1837	Encrypt a string
1838	Decrypt a string
1839	Read name .
1840	Convert a char to a digit .
1841	Try to move to the specified location .
1842	Start listening for events .
1843	Stop listening .
1844	Sends the upload request .
1845	Adds a form field .
1846	Adds a file part .
1847	Creates a BitmapDrawable from the given Bitmap .
1848	Preload images .
1849	Detach an ImageView from an ImageTask
1850	Add an image task to the component manager
1851	Queries the image cache .
1852	Recover work .
1853	Stop work .
1854	Destroy work .
1855	Attaches the image to the container .
1856	Invalidate a cache .
1857	Clear the disk cache
1858	Creates a new hash table .
1859	Compute the capacity of the hash table .
1860	Write a bitmap .
1861	Returns the contents of the stream as a String .
1862	Sets a String to a String
1863	Delete the cache entry
1864	Commit changes to disk
1865	Adds a file field .
1866	Clears the memory cache .
1867	Attempt to resume the journal
1868	Remove entries from the journal .
1869	Rebuild the journal .
1870	Removes all entries from the cache .
1871	Called when the back button is pressed .
1872	Called when the UI is loaded .
1873	Create a new ImageReuseInfo object .
1874	Performs a request synchronously .
1875	Notifies listeners that the request has finished .
1876	Gets the response .
1877	Set the loading bitmap
1878	Sets the view to the right view .
1879	Downloads the image to an output stream .
1880	Adds an image view to the container
1881	Remove an image view .
1882	On load handler
1883	Called when the load task has finished .
1884	Add size info to key
1885	Join size tag to key
1886	Initializes the disk cache
1887	Flush disk cache with delay after delay
1888	Get the disk cache
1889	Deletes a directory .
1890	Get the external cache dir
1891	Gets the readable space of a file .
1892	Notify the drawable
1893	On resume .
1894	Get the last item
1895	Hide the dialog .
1896	helper method to align the sheet
1897	Makes a sheet from aFab
1898	Morph a sheet into aFab
1899	Hide the overlay
1900	Show the sheet .
1901	Sets the action bar .
1902	Setup the drawer
1903	Setup the tabs .
1904	Setup theFab
1905	Update theFab
1906	Updates the Snackbar
1907	Morph the animation into a sheet .
1908	Morph from a sheet .
1909	Hide suggestions if needed
1910	Returns suggestions for the given query token .
1911	Checks if the input string contains an explicit character .
1912	Returns true if the given string contains word breaking characters .
1913	Returns true if the input string contains only letters or digits .
1914	Returns the index of the search starting at the specified cursor .
1915	Returns the index of the search end index .
1916	Display text counter .
1917	Disables suggestions .
1918	Update editor text count .
1919	Sets the mention span factory .
1920	Copies the text from the specified range .
1921	Performs the paste .
1922	Demonstrates how to handle the paste
1923	Updates the selection if necessary .
1924	Called when the cursor has changed .
1925	Deselect all spans .
1926	Parse a string representation of a duration .
1927	Escape a string for XML entities .
1928	Write a SVG document to a file
1929	Creates a compatible image with the given width and height .
1930	Creates a compatible image with the specified capabilities .
1931	Returns a string representation of this rectangle
1932	Maps a font from a family name .
1933	Sets the shape rendering .
1934	Sets the text rendering .
1935	Append an optional element ID from the hint .
1936	Generate the SVG path data
1937	Convert RGB color to RGB
1938	Returns the rgba color string
1939	Returns the stroke style .
1940	Returns the SVG fill style
1941	Returns the font style
1942	Get font metrics
1943	Scales the transformation by the specified scale .
1944	Sets the transformation .
1945	Sets the transform .
1946	Sets the clip to the specified shape .
1947	Registers a clip .
1948	Set the clip clip .
1949	Clip the clip rectangle .
1950	Sets the clip .
1951	Write a PNG image to a PNG image
1952	Draws the specified image using the provided transformation .
1953	Draws a renderable image using the provided transformation .
1954	Generate a radial gradient element .
1955	Get the clip - path reference
1956	Gets the parts from a string .
1957	Record a specific level .
1958	Record a timing .
1959	Track timeouts .
1960	Check client .
1961	Handle a request .
1962	Creates the back end request .
1963	Handle errors for the backend .
1964	Handle client responses .
1965	Process the queue .
1966	Creates a tenant discovery service .
1967	Handle a method call .
1968	Call method call
1969	Create a local proxy
1970	Transform before method call .
1971	Transform before method call .
1972	Stop all services .
1973	Start up the call queue .
1974	Find the service name .
1975	Load endpoints by service name .
1976	Convert a SRv record to an EndpointDefinition .
1977	Checks the request type .
1978	Handle http request .
1979	Handle method call .
1980	Create consul from host and port
1981	Get a DnsClient .
1982	Returns a new receive queue .
1983	Gets the send queue .
1984	Convert a promise to a Callback
1985	Convert a promise to a callback .
1986	Executes a callback on the promise
1987	Load healthy services .
1988	Do failover load .
1989	Returns a new DnsClient .
1990	Add a task to be executed after the specified delay .
1991	Drains all queued queues .
1992	Remove a future callback
1993	Coordinates a CallbackCoordinator .
1994	Monitor callbacks .
1995	Monitor callback coordinator .
1996	Wraps the given callback with the given timeout .
1997	Build the proxy service .
1998	Build the service .
1999	Handles a WebSocket call .
2000	Starts the server .
2001	Adds an event listener to the channel
2002	Creates a service discovery .
2003	Converts json to a given class
2004	Converts a json array to a List .
2005	Serialize the given object to a JSON string .
2006	Converts a json string to a Map .
2007	Convert a Map to a Map .
2008	Checks to see if the handler has a callback .
2009	Sets the callback .
2010	Wrap callback .
2011	Sets the list callback .
2012	Sets the set callback .
2013	Sets the collection callback .
2014	Sets the map callback .
2015	Sets an optional callback for the given class .
2016	Adds a header .
2017	Checks if a service is registered .
2018	Ping the agent .
2019	Registers a new registration .
2020	Deregisters a service .
2021	Deregisters a check .
2022	Performs a check .
2023	Perform a pass check .
2024	Checks to see if a given check is a warning .
2025	Stops the HTTP server .
2026	Handle async callback .
2027	Sends a message .
2028	Creates a proxy for the given service name .
2029	Creates and returns the response queue listener .
2030	Returns the receive queue .
2031	Creates a send queue .
2032	Starts a receive queue listener .
2033	Builds the service queue .
2034	Check in ok .
2035	Update the health .
2036	Enable logging for a single diagnostic context .
2037	Enable consul service discovery .
2038	Get admin builder .
2039	Gets the context meta builder .
2040	Add an endpoint service with service management bundle .
2041	Adds an endpoint service with an alias .
2042	Adds an endpoint service .
2043	Adds an endpoint service .
2044	Gets the service endpoint server .
2045	Configures interceptors .
2046	Destroys a session .
2047	Load all endpoints by name .
2048	Performs a delete request .
2049	Handle a request .
2050	Execute the receive queue .
2051	Send item to event manager
2052	Starts the Queue .
2053	Gets the http request .
2054	Remove event connector .
2055	forward event transfer object
2056	Send event connector to event connector
2057	Read the microservice config .
2058	Registers a handler for a client .
2059	Determines if a method call should be executed before .
2060	Extract the request info and put it into the map .
2061	Extract headers from the http request .
2062	Handle REST call .
2063	Handle a response from a service response .
2064	Add a request to check for timeouts .
2065	Adds an integer to the end of the list .
2066	Adds an integer to the list .
2067	Adds an array to the end of the list
2068	Sets the element at the specified index .
2069	Reduces the values by applying the specified function to the end of the list .
2070	Override before method call .
2071	Notifies the listener that a change has been registered .
2072	Add default serializers .
2073	Gets the parse from method .
2074	Verify no leading zeroes .
2075	Parse an unquoted field name .
2076	Handle unexpected value .
2077	Skip string .
2078	Match token .
2079	Decode a base64 variant .
2080	Checks if the given string is a valid identifier .
2081	Returns true if the specified character is a valid identifier .
2082	Write a string .
2083	Prepend or write a new buffer .
2084	Append a character escape .
2085	Sets the conversion properties .
2086	Generate the Pig script for the given class
2087	Convert a schema to a StringBuilder
2088	Open an index reader .
2089	Gets the current progress .
2090	Converts a message to a tuple
2091	Converts a field value to a tuple .
2092	Convert a single field to a tuple .
2093	Coerces the given field value to the correct type .
2094	Returns the schema for the given message descriptor .
2095	Convert a message descriptor to a Schema
2096	Maps a single field descriptor to a field schema .
2097	Generate the script for the message .
2098	Generate the pig script .
2099	Generate a script script for a field .
2100	Generate a script for a single field .
2101	Returns a new instance of the given class .
2102	Extracts a map from an enum class .
2103	Creates a new path filter for the index directory .
2104	Returns true if the given class is a dynamic proto message .
2105	Gets a type reference .
2106	Gets the progress .
2107	Serialize the message .
2108	Sets the real input format .
2109	Sets the thrift class .
2110	Writes a list of strings to the configuration
2111	Read a string list from the configuration
2112	Write a list of strings to the configuration
2113	Read a list of strings from the configuration
2114	Verify that the given class is a Thrift class .
2115	Gets the value of the field with the specified name .
2116	Gets the value of the field with the specified name .
2117	Gets the field value type .
2118	Write a field without tag .
2119	Converts the given tuple to a message .
2120	Convert a tuple field to a single field .
2121	Adds a field .
2122	Convert a pig type to a proto type .
2123	Converts a tuple to a thrift value .
2124	Convert pig value to thrift value
2125	Create a new instance of the given class
2126	Sets the combined input format delegate to the given class .
2127	Finds the splits .
2128	Sets input paths .
2129	Get input paths .
2130	Adds a split to the list .
2131	Returns the list of locations .
2132	Evaluate the delimiter string .
2133	Creates a ResourceFieldSchema for the required fields .
2134	Reads all bytes from the input stream into the output stream .
2135	Returns the next token .
2136	Create a standard base64 .
2137	Create a new instance of the given type .
2138	Reads the next byte from the stream .
2139	Read the next bytes from the current block .
2140	Read the next bytes from the stream
2141	Creates a new task attempt context .
2142	Creates a new map context .
2143	Creates a new instance of the given type .
2144	Creates a new instance of this class .
2145	Creates a new instance .
2146	Returns a builder for the given class .
2147	Get the message builder for the entry .
2148	Creates a new map descriptor builder .
2149	Resolves the type name for the given descriptor .
2150	Convert a thrift object to a message .
2151	Convert a thrift object into a message .
2152	Build map entry message .
2153	Maps proto message type .
2154	Traverses a path recursively .
2155	Traverses the given path recursively into accumulator .
2156	Get directory size
2157	Sets the number for the column number .
2158	Updates the local settings for the MR .
2159	Returns the method for the given class .
2160	Parse a message from an input stream .
2161	Parse a message from an input stream .
2162	Write the next tuple .
2163	Sets the class configuration for the given class .
2164	Sets the type ref .
2165	Validates the container size .
2166	Sets the pattern .
2167	Convert a word to a name
2168	Convert an integer to its ordinal form .
2169	Creates a new instance of the given type .
2170	Creates a new LzoWLogInputFormat for the given file .
2171	Sets the output format .
2172	Matches a word .
2173	Replaces the word with the given string .
2174	Returns the plural form of the given word .
2175	Returns true if the given word is uncountable .
2176	Get output stream
2177	Verify the writable class .
2178	Create a new instance of the given type .
2179	Returns the class for the given name .
2180	Gets the thrift type reference .
2181	Finds and returns the list of columns to read .
2182	Sets the thrift class .
2183	Execute a HTTP request .
2184	Adds the authorization header to the request .
2185	Validate the response
2186	Parse a Thing .
2187	Returns a list of mixed lists
2188	Format comma delimited list .
2189	Waits for an element to become available .
2190	Adds basic authentication to the request .
2191	Refresh access token .
2192	Prints a list of comments .
2193	Converts an object to an Integer .
2194	Converts a json object to a double .
2195	Convert json to boolean
2196	Convert json to Long
2197	Parse a list of comments .
2198	Parses the provided json text and returns a list of all the results .
2199	Calculates the signature of an endpoint .
2200	Sorts the given map .
2201	Retrieves the Oembed information for the given URL .
2202	Creates an instagram object from the given parameters .
2203	Create an object from the response
2204	Checks that two objects are not null .
2205	Checks that a string is empty .
2206	Checks that a URL is a valid URL .
2207	Checks that the URL is a valid OAuth callback .
2208	Retrieves an instagram from an HTTP header .
2209	Configures the connection settings .
2210	Get the content of the request body .
2211	Pretty print a json string
2212	Sets the callback
2213	Sets the client id .
2214	Sets the client secret .
2215	Sets the subscription type
2216	Sets the verify token .
2217	Sets the aspect
2218	Sets the latitude for the latitude .
2219	Sets the longitude
2220	Sets the radius .
2221	Delete a subscription
2222	Delete all subscriptions
2223	Returns the subscription list
2224	Encodes the given map .
2225	Encodes a string .
2226	Append the parameters to the URL .
2227	Concatenates a map of parameters .
2228	Convert query string to map .
2229	Throw an exception from the response .
2230	Adds a trade .
2231	Increases the length by the given index to the given maximum length .
2232	Calculates the maximum drawdown .
2233	Returns the set of begin positions for the given time series .
2234	Calculates the regular expression line .
2235	Opens an order .
2236	Build the time series
2237	Returns a random decimal .
2238	Generate a random tick
2239	Increments the acceleration .
2240	Calculates the SAR for the given index .
2241	Calculates the ratio of the entry
2242	Fill to the end of the value .
2243	Load the logback configuration file
2244	Creates a OHLC dataset from a TimeSeries .
2245	Creates the additional data set for the given series .
2246	Add cash flow axis
2247	Displays a JFreeChart
2248	Removes the maximum tick count .
2249	Build a list of empty ticks .
2250	Destroys the manager .
2251	Sets the state of the instance .
2252	Sends an event to the dispatcher .
2253	Creates a new CompletableFuture that watches the given executor .
2254	Register a watch event .
2255	Gets the class loader .
2256	Adds the relevant plugin dependencies to the classpath .
2257	Add project dependencies to the classpath .
2258	Resolve the dependencies of the executable .
2259	Find the executable artifact .
2260	Create the working directory .
2261	Get calendar service range start .
2262	Returns the bounds of the feed .
2263	Checks the distance and time to see if it is good .
2264	Loads the specified table .
2265	Returns the size of the table
2266	Transform field to null .
2267	Creates a copy of the tables .
2268	Checks if table exists .
2269	Adds the fields for the given table to the given table .
2270	Registers a snapshot .
2271	Returns the id of the trip .
2272	Execute the remaining batch .
2273	Clean up the zip file .
2274	Exports the given table to the given query .
2275	Registers an error for the given entity .
2276	Registers an error
2277	Export a feed to a file
2278	Loads the specified file and returns it .
2279	Validate a feed .
2280	Deletes all tables for a given feed .
2281	Creates a DataSource for the given URL and password .
2282	Add an error .
2283	Creates a new GTFSError for the given line .
2284	Creates a new GTFSError for the given entity .
2285	Factory method to create a new GTFSError for a given feed .
2286	Returns the average speed for a pattern .
2287	Returns the average speed for a collection of trips .
2288	Returns the start time for a collection of trips .
2289	Returns the end time for the given collection of trips .
2290	Returns the distance between a pattern .
2291	Returns the average stop spacing for the given pattern .
2292	Copy entity to table .
2293	Creates a ValidateFieldResult from a ValidateFieldResult .
2294	Returns the number of errors .
2295	Commit the transaction .
2296	Validate and convert to seconds .
2297	Compares this object to another .
2298	Returns the distance between a tripString and a geometry .
2299	Matches a field with the given name and table name
2300	Gets a group field definition .
2301	Deduplicate an int array .
2302	Get all trips for a given stop_id
2303	Returns the average headway for a given stop .
2304	Get the headways for a given stop_id
2305	Get the headway for a given route .
2306	Get a JsonNode from a string
2307	Create a document in the database
2308	Update stop times for a pattern stop .
2309	Checks that all references in the given table exists in the database .
2310	Checks to see if the original stops are identical .
2311	Inserts a new stop times for a given start stop .
2312	Delete an object from the database .
2313	Handle the statement execution .
2314	Get the number of rows
2315	Returns the set of tables referenced by the given table .
2316	Returns the value for the given id .
2317	Upload a feed .
2318	Puts a feed into the database .
2319	Returns true if the given date is active on the given date .
2320	Initialize the GraphQuery
2321	Gets the editor fields .
2322	Returns the list of required fields .
2323	Returns the list of required fields .
2324	Create a SQL table
2325	Generate the insert statement for the editor .
2326	Returns a comma delimited list of fields .
2327	Generates the update statement for the given id
2328	Generate SELECT statement to select the table .
2329	Generate SELECT statement to select all existing fields
2330	Generate DELETE statement to delete a field .
2331	Creates a SQL table from a database .
2332	Clone stop times .
2333	Returns the index of the key field .
2334	Ensure that a namespace is valid .
2335	Returns the index of the specified field .
2336	Returns a set of keys .
2337	Load a feed from a file
2338	Find all patterns .
2339	Get the distance from the trip_id
2340	Returns the speed for the specified trip .
2341	Returns stop times for given stop_id .
2342	Get all services for a given date
2343	Returns the agency timezone for the given stop_id .
2344	Creates a map of pattern objects .
2345	Sets the idle timer .
2346	Enables and registers a receiver for the application .
2347	Reports a new idle state .
2348	Adds a job status to the job set .
2349	Checks if a job with the given id exists .
2350	Removes the given job .
2351	Reschedule a failed job .
2352	Clears the hash table .
2353	Invoked when a start job is received .
2354	Called when a stop job is received .
2355	Determines if a tracking job can be stopped .
2356	Puts a String value into the Bundle .
2357	Inserts a String array value into the Bundle .
2358	Retrieve a string value from the resource bundle .
2359	Puts a PersistableBundle into the map .
2360	Write to a Parcel Object
2361	Returns the height of the parent view .
2362	Dumps a string to stdout .
2363	Check properties
2364	Checks the PostProperties
2365	Prepares the XML for export .
2366	Sets a property to a Properties object .
2367	Escape special chars .
2368	Get the real path of the servlet .
2369	Verify the OAuth token .
2370	Verify the parameters
2371	Validate the request .
2372	Launch the LTI2 provider
2373	Build the tool consumer profile .
2374	Validate services .
2375	Validate the capabilities .
2376	Add custom properties to launch .
2377	Toogle the view
2378	On list scroll
2379	Converts a SafeUrl to a safe URL .
2380	Converts a SafeStyle to a proto .
2381	Converts a SafeScript to a safe script .
2382	Convert a SafeStyleSheet to a proto .
2383	Converts TrustedResourceUrl to a TrustedResourceUrlProto .
2384	Converts a SafeHtml to a SafeHtml proto .
2385	Wrap an angle .
2386	Rounds the input double to the specified decimals .
2387	Lerp function .
2388	Returns a new quaternion of two vectors .
2389	Bessel function .
2390	Calculate the Ler p
2391	Appends the given colors to the given color .
2392	Clamp the given value to the given range .
2393	Calculate the inverse of a function .
2394	Cast object to a Float
2395	Cast object to a Byte
2396	Cast object to a Short .
2397	Cast an Object to a Number
2398	Cast object to a Double .
2399	Cast object to Long
2400	Cast object to boolean
2401	Returns the mean of an integer
2402	Modulo a double .
2403	Multiplicly to shift to the given value .
2404	Multiply this vector by another .
2405	Divides this vector by another .
2406	Rotates this vector by the given x y and z .
2407	Returns the length squared of this vector .
2408	Normalize this quaternion .
2409	Creates a new quaternion to a new one .
2410	Creates a new quaternion from the given parameters .
2411	Creates a new quaternion from the specified rotation axes .
2412	Creates a new quaternion from the specified radians .
2413	Creates a new quaternion with the specified angle and axis .
2414	Creates a new quaternion with the specified angle .
2415	Gets the minimum axis .
2416	Multiply two complex values .
2417	Divide two complex numbers
2418	Rotates this vector by the specified x y and y
2419	Normalizes this complex complex .
2420	Create a quaternion to a quaternion .
2421	Creates a complex f from two numbers .
2422	Creates a complex f from the specified angle .
2423	Returns the maximum axis .
2424	Hashes a double value .
2425	Add a new quaternion to this one .
2426	Multiply this vector by another
2427	Multiply this vector by a factor .
2428	Returns the axis of this transformation .
2429	Returns the rotation angle of the rotation axis .
2430	Creates a new quaternion from the binary representation .
2431	Creates a new quaternion from the given parameters .
2432	Creates a new quaternion from the specified rotation axes .
2433	Creates a new quaternion from the specified radians .
2434	Creates a quaternion from the specified angle and axis .
2435	Creates a new quaternion with the specified angle .
2436	Multiply two complex numbers .
2437	Divide two complex numbers
2438	Rotates this vector by the specified x y .
2439	Create a quaternion to a quaternion .
2440	Creates a complex d from two numbers .
2441	Creates a complex d from the specified angle .
2442	Moves a child view .
2443	Moves a child view .
2444	Sets the block span .
2445	Reduce the bound set of this constraint .
2446	Transform the type parameters
2447	Returns a symbol reference .
2448	Returns a symbol reference .
2449	Returns true if the given type is a valid type .
2450	Returns the least upper bound of the given types .
2451	Returns the groundTargetType of the given Lambda expression .
2452	Returns the non - wildcard parameterization of the given type .
2453	Returns the union type of the given types .
2454	Solve the type of the field .
2455	Solve the arguments for the object creation .
2456	Solves the given method call expression .
2457	Finds the type of the given lambda expression .
2458	Returns the qualified name for the given class or interface .
2459	Gets the type of this node .
2460	Exit the given break statement .
2461	Checks to see if the statement can complete .
2462	Solves a type in a type .
2463	Solves a method in a type .
2464	Creates a value from a resolvedValueDeclaration .
2465	Determines if the invocation expression is applicable to the given method call .
2466	Returns true if the given method call is more specific to the given method call .
2467	Checks if the expression is in the assignment context .
2468	Returns a prediction for the specified feature .
2469	Load a model from a model reader .
2470	Returns the index of the leaf .
2471	Returns the leaf value for the given node .
2472	Unflatten the tree structure
2473	Flattens the map
2474	Flatten the map as a Map .
2475	Concatenates a list of lists .
2476	Returns a stream of invalidations from an observable .
2477	Creates an event stream that contains the given observable .
2478	Generate the animation frames .
2479	Merges the given ObservableSet into an EventStream .
2480	Wrap the ObservableList .
2481	Executes the given supplier on the thread .
2482	Observe the given observer .
2483	Creates a copy of this metadata .
2484	Removes prefix from string .
2485	Configures the digester .
2486	Process the given class .
2487	Joins an array of strings into a single string .
2488	Initialize device scan .
2489	Detects if the current device is a device .
2490	Detects if the current browser is a Webkit .
2491	Detects if the device is a Windows device .
2492	Detects if the browser is a BlackBerry device .
2493	Returns true if the S60Oss browser is detected .
2494	Checks to see if the current device is available .
2495	Detects if the current browser is an Opera device .
2496	Detects if the current browser is an Opera device .
2497	Detects if the browser is a MaOS tablet .
2498	Determines if the device is a mobile device .
2499	Detects if the current device is an iOS device .
2500	Detects if this device is a mobile device .
2501	Checks if the value is an EL expression .
2502	Checks if the value contains an element .
2503	Build the script for the URL .
2504	Static factory method
2505	Checks if the string contains a field descriptor .
2506	Copy response headers to servlet response .
2507	Encode URI query .
2508	Converts this object to a URI .
2509	Build query string .
2510	Get the value of a parameter .
2511	Returns the values of a parameter .
2512	Add parameters to the URL
2513	Derives the view id for the given view id .
2514	Gets the pattern parser .
2515	Gets the validators for a specific path parameter .
2516	Creates a new QueryStringBuilder from an encoded string .
2517	Extract query string from url .
2518	Adds a parameter to the request .
2519	Gets the list of DispatcherType providers .
2520	Returns the number of negation .
2521	Adds a parameter to the navigation .
2522	Build the standard out outcome .
2523	Handle a class entry .
2524	Decodes a query string literal .
2525	Filter the given list of parameters .
2526	Build the URL for the given URL .
2527	Sends an error message .
2528	Visit a class .
2529	Prepend context path .
2530	Strip the context path .
2531	Translates the given value and returns the result .
2532	Build a dyna view id
2533	Process a DynaView
2534	Returns the required type .
2535	Creates a proxy for the given annotation .
2536	Filters all transient fields of the given class .
2537	Gets all the fields of the given class .
2538	Put the value in the map .
2539	Removes the key from the map .
2540	Loads the agent .
2541	Checks if the size of an agent is available .
2542	Copy a file to a file
2543	Checks if the given file is the same as the given file .
2544	Adds the given directory to the archive .
2545	Initialize the output stream
2546	Zip a single file .
2547	Gets the default manifest .
2548	Adds a section to the manifest .
2549	Writes the data to the output stream .
2550	Returns an enumeration of warnings .
2551	Gets a section by its name .
2552	Copy a file from an archive .
2553	Adds a new manifest .
2554	Adds a single file to the archive .
2555	Clean up resources .
2556	Reset the configuration .
2557	Write index like list .
2558	Gets the files and directories .
2559	Decompress an input stream
2560	Compress the source file
2561	Merges attributes from the given section .
2562	Sets the application xml .
2563	Adds an archive to the archive .
2564	Add directories to the archive .
2565	Compress the source file
2566	Adds resources to the archive .
2567	Add parent directories .
2568	Zip a file .
2569	Create an empty zip file
2570	Reset the destination file .
2571	Compress a file to an output stream
2572	Compress the file and write it to the output stream
2573	Sets the maximum dynamic table size .
2574	Decode the input stream
2575	Returns the index for the given name .
2576	Returns the index of the first occurrence of the specified value .
2577	Creates a map of static variables .
2578	Returns the length of the given byte array .
2579	Returns the number of bytes in this buffer .
2580	Adds a header field to the list .
2581	Sets the capacity .
2582	Encode a header .
2583	Sets the maximum header table size .
2584	Encode an integer
2585	Encode a string literal .
2586	Encode a literal .
2587	Ensure that the buffer contains the given size .
2588	Returns the header field at the specified index .
2589	Returns the header entry with the given name .
2590	Returns the index of the header with the given name .
2591	Adds a header field .
2592	Returns the hash for the given name .
2593	Decode the given byte array .
2594	Sets the default script names .
2595	Assert that two short values are equal
2596	Assert that two short values are not equal .
2597	Assert that the actual short is greater than the expected value .
2598	Assert that the value is greater than the expected float .
2599	Assert that the string is equal to the expected character .
2600	Assert that two char values are not equal .
2601	Assert that the actual character is less than the other .
2602	Assert that the actual character is not greater than the other .
2603	Assert that the actual character is greater than the other .
2604	Assert that the actual character is not less than the other .
2605	Assert that the given character is lower case .
2606	Asserts that the given character is upper case .
2607	Asserts that the array contains the size of the arrays with the expected size .
2608	Assert that the given int array contains the given values .
2609	Assert that the map contains the given key .
2610	Assert that the given map contains the given key .
2611	Assert that the map contains a value .
2612	Asserts that the given map contains the given value .
2613	Assert that the map contains duplicate values .
2614	Assert that two numbers are equal .
2615	Assert that the value is zero .
2616	Assert that the number is not zero .
2617	Assert that the number is positive .
2618	Assert that the value is not negative .
2619	Assert that two float values are equal
2620	Assert that the given byte array contains the given value .
2621	Assert that two numbers are not equal
2622	Assert that the actual value is not greater than the expected value .
2623	Assert that the actual value is less than the expected value .
2624	Assert that the actual value is not less than the expected value .
2625	Assert that the array contains only elements that are not contained in the array .
2626	Assert that the given sequence contains the given sequence .
2627	Assert that two objects are equal
2628	Assert that two objects are not equal .
2629	Assert that two objects are identical .
2630	Assert that two objects are not same .
2631	Assert that the values are not present in the array .
2632	Assert that the actual string is sorted .
2633	Matches the given matcher with the given name .
2634	Matches a string that is not empty .
2635	Returns the middle name for the given field name .
2636	Checks if the given field exists .
2637	Returns the list of annotation resolvers .
2638	Expect this method .
2639	Reduces the name of the class .
2640	Get a boolean property .
2641	Removes the given response from the cache .
2642	Gets the annotations as string array .
2643	Synchronously sends the response
2644	Process the request .
2645	Handle password .
2646	Handle a ticket .
2647	Process a ticket .
2648	Collects all claims from the subject and locales .
2649	Handle authentication decision .
2650	Issue a user info .
2651	Compute the login id .
2652	Handle authentication .
2653	Handle authentication .
2654	Creates the service owner credentials .
2655	Creates the service credentials .
2656	Get the JaxRs client
2657	Creates the JaxRs client .
2658	Set connection timeout
2659	Set read timeout
2660	Execute an API call .
2661	Handle authentication request .
2662	Process the request .
2663	Process an access token .
2664	Handle user info request .
2665	Process the request .
2666	Checks to see if there is no interaction .
2667	Process the request .
2668	Extracts the client certificate from the request .
2669	This method is called when the repository is created .
2670	Generates a X509Certificate for a given key pair .
2671	Returns the name of the named node .
2672	Generate a relationship file .
2673	Commit changes .
2674	Add a snapshot data object to a DataObjectList
2675	Get the name of the repository name
2676	Returns the next unique name .
2677	Sends a message to a Kafka topic .
2678	Sends a message to a topic .
2679	Sends a message to a Kafka topic .
2680	Get cache names .
2681	Zip a set of tracked content into a ZIP file .
2682	Read the contents of the ZIP input stream and write it to the consumer .
2683	Get target key .
2684	Checks if the given path is a list of patterns .
2685	Deletes obsolete files .
2686	Parse the given repository name .
2687	Checks if a store exists .
2688	Load an artifact store from disk .
2689	Loads an artifact store from disk .
2690	Create a repository from an input stream
2691	Creates the HttpClientContext for the given site .
2692	Creates a closeable http client .
2693	Performs a cleanup .
2694	Handles group members changed .
2695	Sets system properties .
2696	Get a list of file ranges
2697	Read messages from an input stream .
2698	Create the table if not already exists .
2699	Deletes this table .
2700	Deletes the table .
2701	Uploads the specified permissions .
2702	Download the table permissions .
2703	Applies the default values to the request options .
2704	Get the storage error information from an input stream .
2705	Gets the access condition for the given sequence number .
2706	Creates an access condition for the given sequence number .
2707	Generates an access condition for the given sequence number .
2708	Applies the condition to the request .
2709	Apply source condition to the request .
2710	Applies the append condition to the request .
2711	Applies the lease condition to the request .
2712	Applies the condition to the request .
2713	Verify the given ETag against the given ETag .
2714	Combines two filters .
2715	Sets the storage URI .
2716	Write shared access identifiers to a string writer .
2717	Generate the message request body
2718	Add headers to a URL connection .
2719	Appends a canonical element to a StringBuilder .
2720	Converts an HTTP request to a URL .
2721	Converts a HTTP request to a HTTP request .
2722	Compute the HMAC256 for the given value .
2723	Sign a table request .
2724	Gets the first message from the list of messages .
2725	Adds a message to the CloudQueue .
2726	Clears a queue .
2727	Creates a new Queue .
2728	Create a queue if not already exists .
2729	Deletes a Queue .
2730	Deletes a queue .
2731	Deletes a message .
2732	Download attributes from Queue .
2733	Checks to see if this queue exists .
2734	Returns the next message from the queue .
2735	Retrieves messages from the CloudQueue .
2736	Peek messages from the CloudQueue .
2737	Retrieves a message from the Queue .
2738	Retrieve a list of messages .
2739	Retrieve messages .
2740	Updates the specified message .
2741	Update a message .
2742	Upload permissions to Queue .
2743	Download queue permissions .
2744	Gets the storage URI .
2745	Retrieves the hour metrics table for the given service .
2746	Retrieves the minimum metrics table for the given StorageLocation .
2747	Returns the message content as a byte array .
2748	Get the message content as a string .
2749	Get a list of files from an input stream .
2750	Applies continuation token .
2751	Create a new HTTP URL connection
2752	Performs a query on the given root URI and returns the result .
2753	Creates an update request .
2754	Sets the ACL for the given root URI .
2755	Serialize the service properties to a byte array .
2756	Write retention policy .
2757	Write the CORS rules .
2758	Write metrics properties to xml .
2759	Write the logging properties .
2760	Abort a copy .
2761	Adds a share snapshot to the UriQuery .
2762	Creates a copy from a source file .
2763	Creates a new share .
2764	Delete a share .
2765	Gets the ACL .
2766	Gets a file .
2767	Get file properties .
2768	Get file ranges .
2769	Get share properties .
2770	Gets the share stats .
2771	Gets the uri query builder .
2772	Gets the properties of a share snapshot .
2773	List shares .
2774	Sets the share metadata for a file .
2775	Sets the metadata for a directory .
2776	Create a directory .
2777	Deletes a directory .
2778	Get directory properties .
2779	List files and directories .
2780	Creates a PUT file .
2781	Creates a new URL connection to a file .
2782	Resize a file .
2783	Sets metadata for a file .
2784	Sets metadata for a file .
2785	Creates a snapshot of a file .
2786	Sets file properties .
2787	Close the stream .
2788	Dispatches a read .
2789	Reads a single byte .
2790	Read data from the input stream .
2791	Reset the buffer .
2792	Skip n bytes .
2793	Demonstrates how to run a blob get started sample
2794	Run the next sample in the view
2795	Run the table getting started
2796	Run the table payload format sample
2797	Output text .
2798	Print an exception .
2799	Prints sample start info .
2800	Prints the complete sample information .
2801	Canonicalize the table and content length
2802	Gets the last result .
2803	Checks if the log type is correct
2804	Updates the iterator .
2805	Create a copy of the source blob .
2806	Creates a copy of the source blob .
2807	Start a copy of the source file .
2808	Start a copy of source file .
2809	Start a copy of the given source .
2810	Performs a copy operation .
2811	Create a new file .
2812	Create a file .
2813	Deletes an empty file .
2814	Download the content of this file as a String .
2815	Download file ranges .
2816	Opens an output stream for writing .
2817	Creates a new file output stream for writing .
2818	Creates a new file output stream .
2819	Upload a file .
2820	Uploads a file from a file .
2821	Uploads text to the storage .
2822	Upload a text to a file .
2823	Uploads a range from an input stream .
2824	Upload a range from an input stream .
2825	Implementation of put range operation .
2826	Resizes this file .
2827	Uploads an InputStream to the Storage .
2828	Upload a file .
2829	Extracts the parent name from a share URI .
2830	Gets the share .
2831	Appends a path to a single URI .
2832	Get the blob name from a URI .
2833	Gets the canonical path from the given credentials .
2834	Gets the container name from a blob address .
2835	Extracts the file name from a URI .
2836	Extracts the share name from a URI .
2837	Gets the table name from a resource address .
2838	Extracts the resource name from a URI .
2839	Returns the container name for the given blob address .
2840	Gets the share name .
2841	Parse query string .
2842	Generate shared access signature for blob and file .
2843	Generate shared access signature for a queue .
2844	Generate shared access signature for a table .
2845	Create a directory .
2846	Creates a file with the given options .
2847	Deletes the file with the given access condition .
2848	Returns true if this file exists .
2849	Retrieves a list of files and directories .
2850	Gets the share reference .
2851	Clear messages from a queue .
2852	Deletes a message .
2853	Download attributes .
2854	Creates a list of queues .
2855	Peeks a number of messages .
2856	Retrieve messages from a queue .
2857	Creates an update message .
2858	Sets the ACL for the given queue .
2859	Get the ACL for the given queue .
2860	Splits a string into a list of tokens .
2861	Split string into EnumSet
2862	Update key .
2863	Gets the HMAC256 hash .
2864	Validate an IP address .
2865	Decode a string .
2866	Encode a byte array to a string .
2867	Validate string .
2868	Validate the container name
2869	Validate the blob name
2870	Validate the file name .
2871	Validate the table name
2872	List a CloudFile shares with the given prefix .
2873	Lists a list of file shares .
2874	Retrieves a list of file shares .
2875	Lists a list of file shares with the specified prefix .
2876	Lists the shares with the given prefix .
2877	Disables cached entity cache .
2878	Get date value from request .
2879	Gets the metadata for the given request .
2880	Is server request encrypted?
2881	Get the error information from the reader .
2882	Parse the error details from the request .
2883	Parses the JSON error exception map .
2884	Parse the shared access identifiers from an input stream .
2885	Get copy state from request .
2886	Get file share attributes .
2887	Get file directory attributes from request .
2888	Get file attributes from storage .
2889	Returns the http verb for the given operation type
2890	Fire event .
2891	Fires a sending request event
2892	Fires a response received event
2893	Fires an ErrorReceiving response event .
2894	Fires a request completed event
2895	Fires a Retrying event .
2896	Assert that the given result continuation token is not null .
2897	Ensures that the parameter is in the range .
2898	Assert that the value is greater than the given value .
2899	Validate the maximum execution timeout .
2900	Returns the remaining timeout for the given operation .
2901	Determines the path style from the given URI .
2902	Returns true if the given URI is a valid host name .
2903	Format an ETag .
2904	Generate an unexpected storage exception .
2905	Gets the standard header value .
2906	Utility method to parse a date from a string .
2907	Parse a string in GMT format .
2908	Relative version of a URI .
2909	Logs an error response .
2910	Logs the response to the server .
2911	Trim the end of the string
2912	Removes leading whitespace from string .
2913	Parse a date string .
2914	Get the listing location mode
2915	Populates the queue request options .
2916	Read a string .
2917	Read a quoted string .
2918	Read a boolean .
2919	Read a date from the input stream .
2920	Read a double .
2921	Reads a UUID .
2922	Read an integer .
2923	Read a long .
2924	Reads this field .
2925	Read a delimiter .
2926	Peek the next delimiter .
2927	Read the next field .
2928	Creates a new instance of retry policy .
2929	Call this method to get the next segment .
2930	Set the class type
2931	Sets the entity resolver .
2932	Write a MIME boundary to an output stream .
2933	Write a closure to the output stream .
2934	Write content type .
2935	Add a key value .
2936	Adds the given URI to the given URI .
2937	Adds an optional header to the request .
2938	Creates a new URL connection .
2939	Create a DELETE request .
2940	Get the service properties .
2941	Get the user agent string .
2942	Sets the metadata for the given URI .
2943	Sets the service properties .
2944	Closes the output stream .
2945	Commit the file .
2946	Dispatches a write .
2947	Flushes the stream .
2948	Waits for a task to complete .
2949	Write a byte array to the output stream .
2950	Write the contents of an InputStream to an OutputStream .
2951	Internal write method .
2952	Get DNS name
2953	Checks to see if the dev store should be used .
2954	Tries to create a new Cloud Storage account .
2955	Creates a CloudAnalyticsClient object .
2956	Creates a new CloudBlobClient object .
2957	Creates a CloudFileClient object that can be used to create a CloudFileClient .
2958	Creates a CloudQueueClient for the Queue .
2959	Creates a CloudTableClient for the table .
2960	Generates a shared access signature .
2961	Generate the request identity for a single index entry .
2962	Generate request identity with table name
2963	Initialize the result .
2964	Translate the exception .
2965	Post process response .
2966	Parse the error details from the response .
2967	Deletes the given entity from this partition .
2968	Insert an entity into the table .
2969	Insert or merge an entity into the table .
2970	Insert or replace the given entity .
2971	Merges the given entity into this one .
2972	Remove the entity at the given index .
2973	Removes all entities from the collection .
2974	Replace the given entity .
2975	Check single query per batch .
2976	Sets the lock to the given partition key .
2977	Creates a new file .
2978	Deletes the share with the given access condition .
2979	Download the file share permissions .
2980	Generates a shared access signature .
2981	Uploads the specified permissions .
2982	Upload permissions to this file .
2983	Returns the URI of this file .
2984	Basic insert entity
2985	Perform basic batch processing .
2986	Performs basic query
2987	Performs basic POST request .
2988	Deletes the entity
2989	Example of basic listing
2990	Generate table query
2991	Execute a query .
2992	Generate an iterator for a query .
2993	Populates the version1 log .
2994	Get a list of queues from a stream .
2995	Translate an HTTP status code to a StorageException .
2996	List queues .
2997	List queues .
2998	List queues .
2999	List queues .
3000	Lists all queues in the Cloud Storage .
3001	Add an XML catalog to the XML catalog .
3002	Get the unique ID .
3003	Set the phase of the Schematron .
3004	Set the error handler
3005	Set the variable resolver .
3006	Set the function resolver .
3007	Set the entity resolver
3008	Get the bound schema
3009	Validate the passed error handler .
3010	Apply validation to sVRL .
3011	Resolve the rule content .
3012	Get the minimal schema .
3013	Convert the passed schema to a preprocessed schema .
3014	Get the preprocessed schema .
3015	Read an XML Schema from the passed resource .
3016	Get the query binding for the passed schema .
3017	Preprocess the provided schema using the provided query binding .
3018	Write an XML element to a file .
3019	Write the passed element to the passed output stream .
3020	Write an XML element to a writer .
3021	Apply the Schematron to the passed XML resource .
3022	Apply a Schematron to the passed node .
3023	Remove a variable .
3024	Remove all variables from the map .
3025	Get all failed Assertions .
3026	Get all failed Assertions that are greater than the provided Schematron .
3027	Get all the results of the passedhematron output .
3028	Get all the results that are greater than the given Schematron output .
3029	Get all failed Assertions .
3030	Set the error level determinator .
3031	Get the query binding with the given name .
3032	Get the query binding by name .
3033	Load an XML document from an input stream .
3034	Formats the message using the format and argument .
3035	Format the first and second .
3036	Check if the passed node is a valid schematron .
3037	Check if the passed node is a valid schematron .
3038	Check if the passed resource is a valid schematron .
3039	Check if the passed source is a valid schematron .
3040	Create a Schematron from a Schematron resource .
3041	Get the XSLT provider from a Schematron resource .
3042	Get the error text .
3043	Get the location of the passed element .
3044	Check the passed source element .
3045	Read the active element from an XML element .
3046	Read an Assert report from an XML element .
3047	Read the diagnostic from an XML element .
3048	Read the elements from the XML .
3049	Read all the elements from the XML
3050	Read an emph from an XML element .
3051	Read the extended extension element .
3052	Read the include from an XML element .
3053	Read the given XML element from an XML element .
3054	Read the name from an XML element .
3055	Reads a Schematron object from an XML element .
3056	Read a PSP object .
3057	Read the param from the XML .
3058	Read the pattern from the XML .
3059	Read the structure from the XML
3060	Read the element from the XML .
3061	Read the Schematron XML from an XML element .
3062	Read the span from the XML .
3063	Read the title from the XML .
3064	Read the value of an XML element .
3065	Create a namespace mapping from the passed schema .
3066	Performs a regular expression .
3067	Mark as authorized .
3068	Checks if the request is authorized .
3069	Defer a dead bolt action .
3070	Gets the deferred action .
3071	Execute and execute the given request .
3072	Checks if the action is left in the action chain .
3073	Gets role names .
3074	Checks if the given subject option has the given role .
3075	Returns true if the subject is present .
3076	Returns a list of roles .
3077	Converts a list of permissions to a string .
3078	Gets all of the arguments .
3079	Performs a restricted view restriction .
3080	Overwrites the input buffer to the output buffer .
3081	Underflow function .
3082	Returns a set of bits .
3083	Encodes the given string using the given encoder .
3084	Encode a string to a Writer .
3085	Maps the given encoder with the given name .
3086	Returns the encoder for the given context name .
3087	Append the contents of the source to the output buffer .
3088	Encodes the given string .
3089	Flush the buffer to the writer .
3090	Flush left over buffer .
3091	Observes a sensor for the given type .
3092	Returns the property value as a string .
3093	Executes the given query and returns the result .
3094	Builds the URL for the given query .
3095	Fetches the Sonar status and returns the result .
3096	Fetch Sonar status .
3097	Parse the response to a List of QualityGateResults .
3098	Extracts the build artifacts from a specific build .
3099	Process uploads .
3100	Compute the identifier for the entry .
3101	Compute the generic identifier .
3102	Validate an artifact .
3103	Returns true if the specified build task has a dependency on this build .
3104	Returns true if the specified build task has a direct config dependency on this build .
3105	Parses a JSONPNC config and returns it .
3106	Monitor the artifacts for cleaning up .
3107	Called when the task has completed .
3108	Get the build task for the given build configuration .
3109	Monitor the repository .
3110	Merges the given graph into the target graph .
3111	Read a file as a String
3112	Reads the contents of the stream as a String .
3113	Trigger a new release .
3114	Clean up resources
3115	Gets the task id by the given build id .
3116	Collect all elements in a flat list
3117	Clean up expired temporary files .
3118	Initialize the build repositories .
3119	Invoked when the builder is created .
3120	Helper method to add websocket forwarding listeners .
3121	Creates an artifact with the specified id .
3122	Sets whether SSL is required .
3123	Deletes a temporary build .
3124	Deletes a temporary build .
3125	Build the build set .
3126	Checks for empty build config set task .
3127	Get the environment driver for the given system image type .
3128	Predicate that is not archived or not
3129	Load build configurations from the build configuration .
3130	Stores the results of a build task .
3131	Initialize the build record builder for the build task .
3132	Predicate that matches the build configuration id
3133	Checks to see if the url is secured by the given URL .
3134	Saves all artifacts in the cache .
3135	Saves a build config set record .
3136	Returns all build configurations for the given build configuration set .
3137	Returns true if the current build record has an explicit dependent dependency .
3138	Checks if an explicit build record has an explicit dependency .
3139	Adds a listener for the given event type .
3140	Returns the extended process parameters .
3141	Collect dependent configurations .
3142	Creates a new build set task .
3143	Creates a build set task .
3144	Fill the build task set .
3145	Get all artifacts for a specific build record .
3146	Add ending slash .
3147	Deserialize an array of integers .
3148	Serialize an array of integers .
3149	Adds a build task to the queue .
3150	Adds a new task to the builder
3151	Execute new ready tasks
3152	Returns the first available task for the given build configuration .
3153	Checks if the target repository is trusted .
3154	Adds a build record to this build .
3155	Removes a build record from this build .
3156	Deletes a temporary build .
3157	Returns the set of dependencies .
3158	Adds a dependency to this build configuration .
3159	Remove a dependency from this build configuration
3160	Retrieves the name of a clone name .
3161	Get the configuration for the given provider .
3162	Instantiates an Embedded Tomcat .
3163	Registers an embedded server .
3164	Unregister an embedded server .
3165	Put the value in the store .
3166	Find an extension in the store .
3167	Concatenates a path and returns a path .
3168	Creates the context .
3169	Read a cookie from a string .
3170	Creates a new header with the given name and value .
3171	Creates a new header with the given name and values .
3172	Creates the web application context .
3173	Executes the hooks .
3174	Process the given target object .
3175	Process a field .
3176	Creates a new Apache HTTP client .
3177	Creates a new Apache HTTP client with default configuration .
3178	Handle body .
3179	Creates the request URI .
3180	Adds headers to the http request .
3181	Handles the form parameters .
3182	Handles the request body .
3183	Adds cookies to the http request
3184	Creates an AsyncHttpClient with default configuration .
3185	Parse the Java version number .
3186	Maps a collection of inputs to a list of outputs .
3187	Concatenates a list of inputs to a single value
3188	Filters the list according to the given predicate .
3189	Creates a new response with the given status and status code .
3190	Instantiates an EmbeddedJetty .
3191	Creates a default OkHttpClient with the given embedded server .
3192	Creates a new OkHttpClient with the given HttpServer .
3193	Find all fields of the given type including any inherited ones .
3194	Find static fields of the given type .
3195	Find static methods .
3196	Find static fields annotated with given class .
3197	Find static methods annotated with given class .
3198	Sets the value of the given field .
3199	Gets the value of the field .
3200	Invokes the given method .
3201	Format a date
3202	Formats the time with the given pattern .
3203	Adds the headers to the request .
3204	Checks if a string is blank
3205	Removes prefix from value if present .
3206	Joins a collection of values with a separator .
3207	Adds query parameters to the request builder .
3208	Handle body .
3209	Adds the form parameters to the request builder .
3210	Adds cookies to request builder .
3211	Adds the headers to the request .
3212	Append a map with a name and value .
3213	Append values to a StringBuilder
3214	Append value .
3215	Gets the dialog from the distributed cache .
3216	Put a dialog into the distributed cache .
3217	Remove a dialog from the distributed cache .
3218	Initialize the SIPStack after a load .
3219	Add a transaction to the stream .
3220	Print an entry .
3221	Load a directory entry from an input stream .
3222	Dumps the results of the search query .
3223	Execute the search .
3224	Configures the JAX - RS component .
3225	Add the dependencies to the container .
3226	Build a list of classpath elements .
3227	Gets the dependencies for the given server type .
3228	Returns the artifact for the given server type .
3229	Get the server type .
3230	Creates a DSML format writer .
3231	Opens a DSML file reader .
3232	Configures the directory with the given name .
3233	Starts the unbound ID server .
3234	Stops the unbound ID server .
3235	Get the next record .
3236	Execute the input source .
3237	Starts the Apache Directory Service .
3238	Stops the ApacheDS server .
3239	Create the root entry .
3240	Starts the OpenDJ server .
3241	Stops the OpenDJ server .
3242	Print an entry .
3243	Gets the server type .
3244	Returns the server configuration .
3245	Sends a metric to the server .
3246	Reports a metric .
3247	Read the geometry type information .
3248	Reads a point from the reader
3249	Reads a LineString from the given ByteReader
3250	Read a polygon .
3251	Read a multipoint .
3252	Read a multipline string .
3253	Read a MultiPolygon .
3254	Read a geometry collection .
3255	Reads a circular string .
3256	Read a compound curve .
3257	Read a curve polygon from the reader
3258	Read a polygon surface .
3259	Read a TIN .
3260	Read a triangle .
3261	Write a geometry .
3262	Write a point
3263	Write a linestring to a writer
3264	Write a polygon to a writer
3265	Write a multipoint .
3266	Write a MultiLineString to a ByteWriter
3267	Write a multipolygon to a writer
3268	Write a geometry collection
3269	Write a circular string .
3270	Write a compound curve .
3271	Write a curve polygon .
3272	Write a polyhedral surface
3273	Write a TIN
3274	Writes a triangle to a writer .
3275	Returns the code for a geometry .
3276	Get the value code for a geometry type .
3277	Returns the geometry type for the given code .
3278	Returns true if this file exists .
3279	Returns the gcd of the given list
3280	Abbreviates a string .
3281	Converts a string to a JsonValue .
3282	Create a new JsonObject
3283	Parse a Json value .
3284	Gets a string from the settings .
3285	Read a JsonObject from a string
3286	Gets a value by its name .
3287	Returns an iterator over the members of this member .
3288	Resolve a placeholder for a property .
3289	Returns the version of the JmxTransporter .
3290	Create a JsonArray from a string
3291	Adds a value to the list .
3292	Sets the value at the given index .
3293	Returns the value at the specified index .
3294	Returns the value of the property .
3295	Returns an iterator over the values .
3296	Process event .
3297	Publish event .
3298	Publishes an event .
3299	Removes the specified child .
3300	Add a tag in WFF id map .
3301	Adds a value to an attribute value map .
3302	Invokes the value change listeners for the shared object .
3303	Adds all elements to the attribute value map .
3304	Remove an attribute from an attribute value map .
3305	Pushes the shared objects .
3306	Remove a value from an attribute map .
3307	Adds a value to the attribute value set .
3308	Adds multiple values to an attribute value set .
3309	Removes all items from the attribute value set .
3310	Remove all shared objects from the attribute value set .
3311	Adds an attribute value change listener .
3312	Checks if the attribute value contains a valid regular expression .
3313	Set the r paramater
3314	Sets the value of the gauge .
3315	Set b .
3316	Sets the alpha value .
3317	Load all tag classes
3318	Gets the first substring of the given string .
3319	Clones an array .
3320	Checks if a string contains whitespace .
3321	Strip whitespace from a string .
3322	Remove all children .
3323	Add inner HTML elements .
3324	Remove a collection of children .
3325	Removes the specified child from this element .
3326	Append the list of children .
3327	Initialize the attributes .
3328	Returns an attribute by its name .
3329	Set owner tag .
3330	Initialize in constructor .
3331	Get the list of children .
3332	Gets the first child element .
3333	Returns the number of children .
3334	Checks if the element contains a child .
3335	Returns the opening tag .
3336	Inserts a new element into this tag .
3337	Sets the attribute value .
3338	Replace all values in an attribute value set .
3339	Adds a WebSocket push listener to the session .
3340	Removes a WebSocket push listener from the session .
3341	Remove the given Ons from the context
3342	Gets the tag repository .
3343	Sets the nonce for the wff script .
3344	Sets the border style .
3345	Sets the value of the attribute .
3346	Merges the given data array into a new one .
3347	Removes all CSS properties .
3348	Checks if the given property is present in the cache .
3349	Gets the css properties as a map .
3350	Finds all tags matching the specified attribute .
3351	Finds an element by its attribute .
3352	Find all attributes .
3353	Build all attributes stream .
3354	Find all attributes of the given tags .
3355	Checks if the given tag exists in the browser page .
3356	Checks if an attribute exists in the browser page .
3357	Build all attributes stream .
3358	Gets the child text .
3359	Write bytes by chunk .
3360	Sets the context path .
3361	Sets the context file .
3362	Adds a context environment from a file .
3363	Returns a filter that matches the given path .
3364	Returns a filter that matches two filters .
3365	Checks that the reader is not an end of the file .
3366	Returns true if the token is a line space .
3367	Parse string .
3368	Scan the input .
3369	Parse the command .
3370	Parse data .
3371	Prints usage .
3372	Determines the maximum size of the given descriptors .
3373	Create a zip file
3374	Read file contents .
3375	Creates a filter from a filter string .
3376	Writes an integer to the output stream .
3377	Write an unsigned 32 bit integer .
3378	Write a set of bits .
3379	Write syntactic markers to the output stream .
3380	Prints syntactic markers .
3381	Extracts syntactic items from binary binary data .
3382	Returns the parent node of the given type .
3383	Gets the parents of the given type .
3384	Returns an ancestor of the given type .
3385	Append two int arrays .
3386	Append two integers .
3387	Append two int arrays .
3388	Appends two arrays to the given type .
3389	Adds multiple elements to the rhs .
3390	ToString array .
3391	To int array .
3392	Sort and return an array of children .
3393	Checks if the given array is sorted .
3394	Compare two arrays
3395	Gets the build schema .
3396	Registers a template extension point .
3397	Activates default plugins .
3398	Determines the WHIley home directory .
3399	Determines the root of the application .
3400	Read a configuration file .
3401	Returns an instance of the given module .
3402	Starts the server .
3403	Activates all modules .
3404	Outputs an error message .
3405	Determines if the specified task is ready .
3406	Parse a list of options .
3407	Split a comma delimited string into a Map .
3408	Gets the parent .
3409	Returns the first ancestor of the given type .
3410	Substitute a substitution .
3411	Returns the content type for the given file .
3412	Returns the entry for the given file .
3413	Inspect the given entry .
3414	Print a binary file .
3415	Reads the syntactic items .
3416	Creates a trie from a path .
3417	Creates a descriptor for the given descriptors .
3418	Gets the repository root .
3419	Resolve package names .
3420	Scan the input .
3421	Reports a syntax error .
3422	Print stack trace .
3423	Get the indent string for the indent level .
3424	Execute an instruction .
3425	Add a string to the array
3426	Replies the name of an attribute .
3427	Replies the attribute of the stack map table attribute .
3428	Replies the attribute for the local variable_type table .
3429	Find the stack map .
3430	Find the index of the stack map .
3431	Find the index of the stack_map_map_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_index_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table_table
3432	Build the uninitialized map .
3433	Update the stack map entries .
3434	Update the uninitialized state of the instruction list .
3435	Set the current stack map table .
3436	Print stack map table .
3437	Create a new stack map attribute .
3438	Returns a copy of the specified type .
3439	Generate a stack map type from the constant pool .
3440	Generate the type for the stackMapType
3441	Create a scope for a method .
3442	Returns the stack type .
3443	Convert access flags to string .
3444	Convert an instruction list to a String
3445	Convert attribute name to string
3446	Checks the given MethodGen .
3447	Checks for methods .
3448	Dumps stack trace .
3449	Dumps methods .
3450	Add instructions to the start of the instruction .
3451	Returns the string at the specified index in the constant pool .
3452	Reset local variables .
3453	convert type to class
3454	 postpend the given type to the given type .
3455	Sets the location from the given frame .
3456	Inserts the code at the start of the instruction .
3457	Print an instruction handle .
3458	Build instruction list .
3459	Generate the live stack map types .
3460	Returns the index of the specified character .
3461	Reads data from the input stream .
3462	Flush the output buffer .
3463	Creates a new WebSocket client .
3464	Determines if an ad can use this ad .
3465	Returns an ad view for the given position
3466	Called when an ad view fails .
3467	Gets the ad request .
3468	Determines the number of ads that should be published .
3469	Get the original content position
3470	Returns the index of the given position
3471	Check if an ad is available
3472	Returns true if the specified position is a fetching ad .
3473	Get the wildcard type for the given element type .
3474	Checks if the element has a generic type argument .
3475	Emit package .
3476	Compress the given type .
3477	Begins a new initializer .
3478	End type declaration .
3479	Emit a single line comment .
3480	Emit an annotation value .
3481	Ends a method .
3482	Returns the type name of the given class .
3483	Emit modifiers .
3484	Gets the psi class from the context .
3485	Find and remove a method .
3486	Generate the psi element .
3487	Makes sure the class implements the interface .
3488	Checks if the element is a class .
3489	Is the given type of the given class?
3490	Returns the first type of the given type .
3491	Returns the package name of the given type .
3492	Returns the binary name for the given type .
3493	Generate write to ParcelableField .
3494	Checks if the given type is a public class .
3495	Returns true if the given type has a public empty constructor .
3496	Returns the determinant of the 3x3 matrix .
3497	Performs a search by the given criteria .
3498	Creates an orthogonal matrix .
3499	Get binary multi bulk reply .
3500	Get the set of members and their scores
3501	Returns the raw key .
3502	Returns the raw hash key .
3503	Returns the set of typed values .
3504	Deserialize hash keys .
3505	Deserialize a list of hash values .
3506	Deserialize hash map .
3507	Deserialize hash list .
3508	Deserialize the hash set .
3509	Returns a list of addresses from a domain .
3510	Returns the host part of the address .
3511	Parse a port number .
3512	Sets a key value pair .
3513	Sync the state of the Gateway .
3514	Get a set of tuples from the cluster .
3515	Stop the leader offer .
3516	Generate execute info .
3517	Set quorum .
3518	Checks if the node has permission .
3519	Joins two parameters into a byte array .
3520	Expire a key
3521	Decrease by a key
3522	Increments the counter by the given key
3523	Performs a zadd command .
3524	Sets the value of the specified key in the specified range .
3525	range by score
3526	Sets the slave command .
3527	Execute a config set command .
3528	Get bit from key
3529	Get the range of a key
3530	Shutdown nio event selector .
3531	Process the hb process .
3532	Process the selected keys .
3533	Loop all sessions .
3534	Registers a session to the selector .
3535	Adds a default header .
3536	Evaluate the received times that match the given predicate .
3537	Returns the value associated with the given key .
3538	Returns the values for the given key .
3539	Adds the encoding to the builder .
3540	Create a stubbing .
3541	Encode a JSONObject to a token .
3542	Copy a date .
3543	Creates a new token .
3544	Get error dialog
3545	Connect and request google account .
3546	Log out and clear state
3547	Checks if the cache is invalid .
3548	Get the status of the baragon service
3549	Retrieves the global state
3550	Retrieves the list of load balancer groups .
3551	Retrieves all available base paths for the given load balancer group .
3552	Retrieves the request with the given ID .
3553	Returns all queued requests .
3554	Ensure that the given targets are registered .
3555	De - registers the specified targets .
3556	Ensure that the given targets are assigned to the target group .
3557	Ensure that all targets are in the given targets .
3558	Sets the href .
3559	Create a member key from an object .
3560	Process a line separator .
3561	flush tag
3562	Extract the content for the given tag type .
3563	Read a list of segments .
3564	Returns a pattern that matches the given configuration .
3565	Creates a decorator for the given delegate .
3566	Unwraps the given instance .
3567	Builds and returns the current engine .
3568	Adds a template locator .
3569	Adds a resolver .
3570	Registers a callback to be executed when the engine is ready .
3571	Adds a value converter .
3572	Adds a context converter .
3573	Capitalizes the given string with the given delimiter .
3574	Appends the given sequence to the given options .
3575	Build the source cache .
3576	Pushes a container .
3577	Adds a new segment .
3578	Validate the last segment on the stack .
3579	Split a helper name .
3580	Decorate the delegate type .
3581	Flush the buffer .
3582	Find a field by its name .
3583	Registers the helper classes .
3584	Registers a helper .
3585	Reads a list of lines before rendering .
3586	Invalidate fragments by key part .
3587	Returns a date - time object for the given value .
3588	Gets the local storage .
3589	Gets the session storage .
3590	Clears the cache .
3591	Returns true if the given key exists .
3592	Put a value in the storage .
3593	Removes an item from the cache .
3594	Creates a new object key .
3595	Creates a StorageKey with the given name .
3596	Creates a new StorageKey with the given name .
3597	Obtains the size of the floating point dialog from a specific typed array .
3598	Obtains the color from a specific typed array .
3599	Obtains the activated color from a specific typed array .
3600	Obtains the pressed color from a specific typed array .
3601	Obtains the disabled color from a specific typed array .
3602	Obtains the icon from a specific typed array .
3603	Obtains the visibility duration from a specific typed array .
3604	Adapts the shadow of the button s shadow .
3605	Adapts the size of the image button .
3606	Adapts the background of the image button .
3607	Create the background drawable
3608	Creates the background drawable
3609	Creates the background drawable
3610	Creates and returns a background drawable that will be used to display the disabled state .
3611	Create the background drawable
3612	Returns the size of the floating action button .
3613	Animates the visibility of the view .
3614	Creates and returns a listener which allows to show the visibility of the button .
3615	Sets the size of the button .
3616	Obtains the size of the circular progress bar from a specific typed array .
3617	Initialize the paint
3618	Initialize the angle animation .
3619	Creates and returns a property which allows to draw the current circle .
3620	Initialize the sweep animation .
3621	Creates a new sweep property .
3622	Creates and returns a listener which allows to observe when an animation is shown .
3623	Initializes the floating action buttons .
3624	Creates and returns a toast which allows to show the toast when the button is clicked .
3625	Initializes the button which allows to hide the buttons .
3626	Creates and returns a listener which allows to hide the floating action buttons .
3627	Initialize the close listeners .
3628	Creates and returns a close listener which allows to close the hardware .
3629	Handle the visibility of the saved instance .
3630	Obtains the text from a specific typed array .
3631	Obtains the text color from a specific typed array .
3632	Obtains the color from a specific typed array .
3633	Obtains the icon from a specific typed array .
3634	Obtains the boolean value from a specific typed array .
3635	Obtains the close button icon from a specific typed array .
3636	Adds a close listener .
3637	Removes a specific close listener .
3638	Sets the background color .
3639	Sets the close button .
3640	Gets the partial values .
3641	Gets the script engine .
3642	Gets the layout mappings .
3643	Checks if the given class is present .
3644	Gets annotation value .
3645	Get a stream from the classpath
3646	Gets the first available stream of the given names .
3647	Renders the given template with the given model .
3648	Add aliases .
3649	Adds an alias .
3650	Gets the listener for the given id .
3651	Run a synchronous operation .
3652	Checks whether the given method is a callback .
3653	Invoked when the server is resume .
3654	Called when an event occurs .
3655	Invokes an asynchronous operation .
3656	Invokes an operation with the given tag .
3657	Cancel the task .
3658	Cancel a request .
3659	Checks if the given tag is currently running .
3660	Invoked when an operation is finished .
3661	Store a result
3662	Delivers the result .
3663	Delivers the result .
3664	Logs a message .
3665	Cancel an operation .
3666	Called when an operation has started .
3667	Cancel all pending operations .
3668	Returns true if the given operation is cancelled .
3669	Run the given operation .
3670	Creates an empty result .
3671	Asynchronously sends an asynchronous operation .
3672	Run a synchronous operation synchronously .
3673	Called when an operation has finished .
3674	Main entry point .
3675	Gets the modules .
3676	Main entry point .
3677	Check next line .
3678	Initialize the event handler .
3679	Get the MBeanServerConnection for the given child name
3680	Closes the MBean server connection .
3681	Initialize the search view .
3682	Main entry point .
3683	Get the validator
3684	Gets the find column list .
3685	Get insert column list
3686	Gets all packages .
3687	Gets the content of the file .
3688	Write not overridden content .
3689	Find table by name
3690	Find the bean with the given name
3691	Returns the list of property properties for the given bean .
3692	Returns the visible properties of one - to - many property .
3693	Updates the source with the given source .
3694	Adds a history .
3695	Customize the JNDI connector .
3696	Adds a requirement specification node .
3697	Write to database .
3698	Returns the type for the given type .
3699	Retrieves a setting by its name .
3700	Gets a string field .
3701	Create a boolean field .
3702	Gets a numeric field .
3703	Displays a workflow .
3704	Refresh the workflow .
3705	Traverses a component tree .
3706	Receive a single upload request .
3707	Gets the address strength .
3708	Converts a descriptor to a file descriptor .
3709	Extracts the blockscore error from the exception .
3710	Score answers .
3711	Returns the MD5 descriptor of the given stream using the given operation .
3712	Returns true if the given path should be accepted .
3713	Adds an answer to the question .
3714	Returns the matching information .
3715	Returns a copy of this address .
3716	Create a question set .
3717	Retrieves a question set by id .
3718	Returns the date of the birth date .
3719	Gets the address .
3720	Retrieves the incorporation date .
3721	Gets the revision history .
3722	Get watchlists for a given entity type
3723	Sets the date of the birth date .
3724	Sets the address .
3725	Retrieves a person .
3726	Retrieves a candidate .
3727	Returns the encoded authorization string .
3728	Returns the date of the birth end .
3729	Determine the type parameter of the given class .
3730	Gets a property .
3731	Get a boolean property .
3732	Returns the directory path for the given entry .
3733	Gets the error type .
3734	Gets validation error code .
3735	Flush the files .
3736	Synchronize the cache .
3737	Returns a cache of file descriptors .
3738	Creates the hierarchy of the files contained in this container .
3739	Find the first available port .
3740	Returns the value of the named parameter .
3741	Sets the parameter values in the context .
3742	Sets a parameter value .
3743	Add a parameter value .
3744	Returns the target command .
3745	Get the value for the wizard .
3746	Registers an OID .
3747	Creates a new node for the widget .
3748	Create a new sub - tree .
3749	Returns the complement of the given set .
3750	Creates a set of indexes .
3751	Adds a value to the map .
3752	Removes the entry with the given key .
3753	Generate a random ID
3754	Gets the user widths .
3755	Sets the sort direction .
3756	Sets the column order .
3757	Returns the list of user s sorted columns .
3758	Override the sort label .
3759	Replace the component tag body .
3760	Called when the UI is clicked .
3761	Get a config by name
3762	Renders the eFaps header items .
3763	Renders the Require header .
3764	Generate the code to create a tree node .
3765	Method to get the data line
3766	Execute the given instance .
3767	Expand the UICLassociation .
3768	Add the children .
3769	Method to get the class instance keys
3770	Returns the cache key .
3771	Add highlight expressions .
3772	Add start tags .
3773	Add end tags .
3774	Gets the lazy load component .
3775	Get loading component .
3776	Close the tab .
3777	Inserts a new element before the current element .
3778	Gets the previous element .
3779	Add parameters to the wizard .
3780	Evaluate the instance .
3781	Method to add the class elements .
3782	Update the class elements .
3783	Adds the cell to the form .
3784	Evaluate the field .
3785	Evaluate the field set .
3786	Gets the class elements .
3787	Generate sub menu item .
3788	Returns the javascript event javascript for the given menu item .
3789	Get the image .
3790	Retrieves the behavior of the menu item .
3791	Add the components .
3792	Gets the children of the given node .
3793	Make a request to the backend
3794	Make a request to the OAuth token
3795	Generates an input stream from the backend
3796	Make a request using the given token proxy .
3797	Converts a JSON input to an object .
3798	Renders the head .
3799	Handle error .
3800	Launch the given job .
3801	Adds prefixes to text index .
3802	Add additional metadata .
3803	Add promotion categories to the query profile
3804	Add categories to query profile
3805	Add categories to blacklist
3806	Initiate the call back .
3807	Handle the request .
3808	Gets the resource stream .
3809	Generate the call back back script .
3810	Send keepalive message
3811	Initialize the keep alive .
3812	Gets the UI user sessions .
3813	Sets the body of the component tag .
3814	Renders the markup .
3815	Gets the dashboard link .
3816	Parse a response from the response .
3817	Parse a response from a response .
3818	Parse the response .
3819	Parse the response .
3820	Gets the events for the given event type .
3821	Renders the component tag .
3822	Runs the status of the job .
3823	Override the default implementation for the DND item .
3824	Render head .
3825	Set the default menu .
3826	Get the label for the command .
3827	Gets the editable component .
3828	Override afterRender .
3829	Method to get the date as string
3830	Gets the date list .
3831	Override after render .
3832	Destroy the executor service .
3833	Method to handle the recent object .
3834	Override this method to display the action .
3835	Handle multipart .
3836	Reset the set counter .
3837	Initialize the LoginHandler
3838	Handle authentication .
3839	Check the name and password .
3840	On the AJAX request .
3841	Method to get the persistence script for a UIGrid .
3842	Generate menu items .
3843	Gets the menu .
3844	Gets the sub menu .
3845	Gets the data for the UIGrid .
3846	Method to get the data reload javascript .
3847	Create the page .
3848	Handle the AJAX event .
3849	Add a value to this row .
3850	Returns the index for the given input name
3851	Add a new row .
3852	Add the children of the given class .
3853	Method to get the help for the given id
3854	Create a new structur browser .
3855	Initialise the type tree .
3856	Expands the list .
3857	Sorts the model .
3858	Check to see if there is a hidden column in the row
3859	Check for allowed children .
3860	Execute the listener
3861	Replies the label .
3862	Binds this handler to this component .
3863	Generate the data table .
3864	Method to execute events
3865	Method to get the rendered content
3866	Returns the command for the given UUID .
3867	Gets the label .
3868	Removes all executions that are not finished .
3869	Get jobs page .
3870	Gets the execution bridge for the given job name .
3871	Is the user logged in?
3872	Lazy login .
3873	Login the user .
3874	Log out the session .
3875	Add indexes .
3876	Returns the model for the given id .
3877	Add components to the form container .
3878	Adds the given children to the body .
3879	Method to convert the date field values .
3880	Method to convert the field values .
3881	Handle error .
3882	Method to validate the validation field values .
3883	Evaluate the form element .
3884	Validate the form .
3885	Check for required components .
3886	Gets the form panels .
3887	Show the dialog .
3888	Initialize servlet .
3889	Returns complement of given set of resource types .
3890	Creates a set of resource types .
3891	Checks if the given field is checked .
3892	Returns true if the given field has access to the given type .
3893	Get the type image
3894	Initialize the UI .
3895	Replies the label .
3896	Remove all pages for a session .
3897	Override onComponentTag .
3898	Handle the content of the type
3899	Gets the session for the given request .
3900	Method to begin the request
3901	End request .
3902	Register a user session .
3903	Register an Activity .
3904	Adds a message connection to the registry
3905	Invalidates a session .
3906	Removes a session .
3907	Gets all users .
3908	Gets the connections for a user .
3909	Gets the connection for the given session id .
3910	Returns a cache of user sessions .
3911	Initialize the object with the given ID .
3912	Gets the command .
3913	Method to execute the given event type
3914	Adds the behaviors for the update .
3915	Gets the width weight .
3916	Evaluate the label .
3917	Is this field?
3918	Gets the sim field configuration .
3919	Is this tab visible?
3920	Responds to the AJAX request .
3921	Initialize the button .
3922	Method to get the choices .
3923	Gets the date time formatter .
3924	Sets the file .
3925	Method to get the main help menu
3926	Gets the submenu for an instance .
3927	Initialise the UI .
3928	Method to get the instance list
3929	Add a filter list to the table .
3930	Add a filter to the table .
3931	Gets the filter for the given UITableHeader .
3932	Gets the filter pick list .
3933	Returns the status for the given type .
3934	Store the filters .
3935	Remove a filter from the table .
3936	Gets the data type .
3937	Method to get the instances
3938	Get filter for field
3939	Returns the command associated with this command .
3940	Returns the target title .
3941	Is a date filter .
3942	Method to get the row for the id
3943	Method to print the UIGrid .
3944	Gets the query .
3945	Returns the list of children that are excluded .
3946	Determines if the nodes are applied to the given nodes .
3947	Fill the dimensions provider .
3948	Build the hierarchy parameters .
3949	Checks if the given file has the expected root element .
3950	Updates the expiration time .
3951	Refresh a TTL value .
3952	Try to clone a object .
3953	Initialize the cache .
3954	Sets the cache properties .
3955	Get cache property .
3956	Calculate the cache key .
3957	Get cache properties .
3958	Sets the entry in the cache .
3959	Deletes a key from the cache .
3960	Delete a local key
3961	Deletes all caches .
3962	Delete all local caches
3963	Returns the label for the given element .
3964	Sets the tab indexes .
3965	Generate the form .
3966	Generate HTML for an element .
3967	Get rendered input .
3968	Generate an HTML element .
3969	Registers an application context .
3970	Build a SelectInput with the given name .
3971	Build all the attributes for this tab .
3972	Build max length attribute .
3973	Gets the allowed content types .
3974	Determines if the callback start session has the same name .
3975	Converter for ListConverter
3976	Initialize listeners .
3977	Get the profile for the given profile .
3978	Sets the listener that will be notified when a change occurs .
3979	Gets the document builder factory .
3980	Create a DOM source from a file .
3981	Get a schema from a file
3982	Parses the given XML file and returns a Document .
3983	Validate the given XML file against the given error handler .
3984	Validate an XML document .
3985	Adds a child to this tag .
3986	Removes an attribute .
3987	Returns the velocity template .
3988	Returns a string representation of this tag .
3989	Add a service if not already present .
3990	Get a service by its address
3991	Handle start command .
3992	Returns all triggers for the given app identifier .
3993	Delete all triggers for the given app .
3994	Deletes a trigger .
3995	Returns the trigger with the given id
3996	Validates an access token .
3997	Converts an XML string to an object with the given aliases .
3998	Converts an XML string to an object using an XStream .
3999	Converts an XML String to json string
4000	Invoke a method .
4001	Check current thread .
4002	Log a method call
4003	Loads an object from an input stream .
4004	Creates a new tag with the given name and value .
4005	Returns true if the given query contains the given query .
4006	Dispatches an invocation request .
4007	Unregister a service .
4008	Generate a unique unique identifier for the query .
4009	Called when an instance is lost .
4010	Stop a search .
4011	Stop all search for the given app identifier
4012	Connects to the server .
4013	Creates the standard display view .
4014	Create the spinner view
4015	Creates the view for the given date picker .
4016	Creates the tag view .
4017	Creates the standard edit view
4018	Sends an action to the client .
4019	Returns the XML representation of this object .
4020	Sets the content view with minimal elements .
4021	Returns the name of a profile field .
4022	Kills the scheduler .
4023	Initialize the spf context
4024	Broadcast event
4025	Creates and returns a view fragment fragment .
4026	Invoked when the profile data is available .
4027	Starts a crop .
4028	Crop the image
4029	To json .
4030	Adds a tag .
4031	Sets the list of tags .
4032	Save a trigger
4033	Delete a trigger
4034	Starts the notification handler .
4035	Start registration .
4036	Adds an attribute .
4037	Invokes a method .
4038	Sets the selection .
4039	Sets the selection .
4040	Returns the selected strings .
4041	Returns the selected indices .
4042	On refresh .
4043	Shutdown all registered services .
4044	Insert a new line .
4045	Write to buffer .
4046	Converts an object to a json string .
4047	Registers an access token .
4048	Binds the service to the service .
4049	Disconnects from the service .
4050	Handle an error .
4051	refresh the triggers
4052	Adds a new person to the database .
4053	Removes the person from the database .
4054	Register a service descriptor .
4055	Retrieves an app authorization by its id .
4056	Registers an application .
4057	Unregister an application .
4058	Retrieves the persona for the given app identifier .
4059	Handle incoming message .
4060	Add a client to the list if it does not already exist .
4061	Connect to the client .
4062	Returns the value of the specified field .
4063	Indicates whether this field is modified .
4064	Stop a search .
4065	Stop all searches .
4066	Lookup a SPFerson by its identifier .
4067	Get a list of profile fields .
4068	Retrieves the base information for the given person .
4069	Get a list of nodes from an XML document .
4070	Executes a callback on the main thread
4071	Retrieves the person auth from the database .
4072	Creates an entry for a sent request .
4073	Create a new entry for a received request .
4074	Checks if an entry exists for a given user .
4075	Confirm a request .
4076	Adds a closing tag .
4077	Adds an empty tag .
4078	Adds an opening tag .
4079	Deletes a file .
4080	Creates a new temporary directory .
4081	Gets the proxied object .
4082	Loads a class from the specified class loader .
4083	Compute the signature for a method .
4084	Creates a new instance with the given algorithm and password .
4085	Reset the connection .
4086	Create a new URL builder from the given path .
4087	Adds a query parameter to the URL .
4088	Gets the value of a parameter .
4089	Add a query parameter .
4090	Add parameters to the request .
4091	Adds a parameter to the request .
4092	Add query .
4093	Validates the query .
4094	add query
4095	Rebuild the query .
4096	Replace a parameter .
4097	Invokes the method on the object .
4098	Create a shutdown proxy
4099	Convert an object to a boolean .
4100	Returns the stack trace of the given exception .
4101	Removes the trailing slash from the given path .
4102	Waits for the call to shutdown .
4103	Adds an empty tag .
4104	Adds an attribute .
4105	Add attributes .
4106	Extract the resource info from the URL
4107	Change the root of the given resource .
4108	List resources .
4109	Convenience method for chroot .
4110	Creates a resource from a file .
4111	Starts the process .
4112	Create an external command from a list of commands .
4113	Start an external command .
4114	Executes an external command .
4115	Returns the next tick .
4116	Get elapsed time .
4117	Adds a tag .
4118	Adds a tag .
4119	Print a block to a string
4120	Returns the end time for the given timeout .
4121	Adds an entry .
4122	Creates a new ram directory .
4123	Encode a string
4124	Decode a string .
4125	Create a LeafResource from a Resource
4126	Reverses the given array .
4127	To Enum set .
4128	Load properties from a file .
4129	Load properties from a reader .
4130	Returns a string representation of the given set of time units .
4131	Compares two timespan .
4132	Truncates this MemorySize by the given size .
4133	Add another MemorySize .
4134	Compares the given memory size .
4135	Creates a new MemorySize from the given MemorySets .
4136	Executes the given Callable asynchronously .
4137	Adds a marker to the map
4138	Remove a marker
4139	Creates a bitmap descriptor from a view
4140	Returns a function that returns true if the given file is related to the given file .
4141	Emits events to the given watch .
4142	Get the state list drawable
4143	Initialize with viewPager
4144	Add views .
4145	Returns the message for the given exception .
4146	This method is used to set sequential ids .
4147	Parse a UUID value .
4148	Maps two characters to a byte .
4149	Gets the timestamp .
4150	Get MAC fragment .
4151	Sets a property .
4152	Sets the Facebook user credentials .
4153	Sets the socialize credentials .
4154	Merges a set of properties from another .
4155	Performs a single share .
4156	Handle non - network share .
4157	Add comment to entity
4158	Delete a comment
4159	Add comment to entity
4160	Get a comment
4161	Gets comments .
4162	Get comments for a user
4163	Get comments for an entity
4164	Get comments by app .
4165	Show the comment view
4166	Parse a json string
4167	Open URL .
4168	Parse the response to a FacebookObject .
4169	Displays an alert .
4170	Logs a debug message .
4171	Determines the type if any .
4172	Sets entity safe .
4173	Build the profile image url
4174	Called when the image has changed .
4175	Generate an OAuth message .
4176	Normalize the request parameters .
4177	Initializes the dialog .
4178	Initialize the dialog .
4179	Validate an intent .
4180	Log out the session .
4181	Dialog .
4182	Serialize a date
4183	Displays a link .
4184	Displays a link .
4185	Performs a link .
4186	Post entity .
4187	Extend access token .
4188	Get the current permissions for the given token
4189	Returns the SHA1 hash of the package .
4190	Saves entity .
4191	Gets an entity .
4192	Gets the entity .
4193	Gets the entities .
4194	Gets a list of entities .
4195	On createContextMenu
4196	Subscribe to entity
4197	Checks if an entity is subscribed to the given type
4198	Checks if the connection has been registered .
4199	Peek the next token .
4200	Reads the next null .
4201	Read an escape character .
4202	Show a share dialog
4203	Shows the given entity
4204	Share via email via email
4205	Share via google api .
4206	Share via other
4207	Share via SMS
4208	Share via social networks
4209	Get a share by id
4210	Gets a share list .
4211	Get the share for a user
4212	Gets the list of entities for the specified entity .
4213	Get share list .
4214	Like the entity
4215	Like entity
4216	Displays an entity .
4217	Gets a Like object .
4218	Get a Like object
4219	Retrieves the entity identified by the given key
4220	Gets the likes of a user .
4221	Gets the likes for an entity .
4222	Get Facebook .
4223	Collect the header parameters from the request .
4224	Collect the body parameters .
4225	Collect query parameters .
4226	Creates a JsonWriter for writing to the given writer .
4227	Creates a new instance of the specified type .
4228	Replace new lines in a string .
4229	Reloads the component .
4230	Returns the simple location for the given address .
4231	Asynchronously gets the user .
4232	Get actions by app .
4233	Get actions for a user .
4234	Get actions for an entity .
4235	Get actions by user and entity .
4236	Closes the writer .
4237	Set name .
4238	Parse a Json document into a JsonElement .
4239	Parse the given JsonReader .
4240	Performs a link .
4241	Sets the credentials for the given consumer key and secret .
4242	Creates a tweet
4243	HTTP GET request
4244	Displays a tweet .
4245	Performs a single photo .
4246	Get scaled bitmap
4247	Asynchronously sends a POST request asynchronously .
4248	Sets the text size
4249	Called when an image has changed .
4250	Synchronously saves a user asynchronously .
4251	Gets a user .
4252	Saves user settings .
4253	Sets whether or not the given networks should be shown or not .
4254	Authenticate with Facebook .
4255	Authenticate for read .
4256	Gets a static field .
4257	Get the name of a static field
4258	Handles a message .
4259	Handles a broadcast intent .
4260	Encodes the given source into a byte array .
4261	Decode the given byte array using the given decoder .
4262	Implementation of the View interface
4263	Invoked when the user changes .
4264	Decode form string .
4265	Converts a Map into a Map .
4266	Generate a header element .
4267	Put an object in the cache .
4268	Put an object in the cache .
4269	Puts an object into the cache .
4270	Get the value associated with the key
4271	Returns the object associated with the specified key .
4272	Returns true if the given key exists false otherwise .
4273	Extend TTL .
4274	Load an image by data .
4275	Load image by url .
4276	Parse the tag string into a map of tags .
4277	Format tags .
4278	Replaces all encoded tags in the name with a prefix .
4279	Creates a new builder with the specified name .
4280	Returns a string representation of a telnet put .
4281	Converts a domain name to a human readable string .
4282	Decode a string .
4283	Returns the value of a query parameter .
4284	Returns a list of query parameters for the given name .
4285	Relative version of this path .
4286	Builds a hierarchical URL .
4287	Build an opaque URL .
4288	Returns a human readable string representation of this URL .
4289	Query the stream with ordinal params
4290	Queries a stream with named parameters .
4291	Get cached fields for the given class .
4292	Fetch the next row .
4293	Returns the value as a LocalDateTime .
4294	Returns the value as a LocalDate .
4295	Returns the value as a LocalTime .
4296	Returns the value as a ZonedDateTime .
4297	Returns as offsetDateTime .
4298	Returns the AS offset as an offset .
4299	Get the value of the designated column in the ResultSet .
4300	Crops the specified width and height
4301	Crop the center of the image
4302	Crops the specified color
4303	Resize the width
4304	Resize the path to a size
4305	Scale the image to the specified width
4306	Scale the center of the image
4307	Enable blur .
4308	Set the sharp strength
4309	Sets the preview of this Cdn .
4310	Returns information about the project .
4311	Get a file .
4312	Deletes a file .
4313	Saves a file .
4314	Execute a command .
4315	Check the response status code and throw an exception .
4316	Upload a file from the source url
4317	Injects the object graph .
4318	Creates a new builder for the current theme .
4319	Find a class by its name .
4320	Load a class by its name .
4321	Performs the search .
4322	Adds a word to the trie .
4323	Append a character .
4324	Get and set the value .
4325	Checks if the given class is assignable to the given type .
4326	Copy parse information from a zip file .
4327	Hashes a group .
4328	Ignore case .
4329	Matches a Unicode character .
4330	Matches a Unicode range .
4331	Matches any of the specified characters .
4332	Matches any of the specified characters .
4333	Limit string .
4334	Matches a string .
4335	Ignore case .
4336	Matches an optional rule .
4337	Creates a new optional rule .
4338	Matches a sequence of repeated rules .
4339	Creates a new one or more rules .
4340	Create a rule from a string literal .
4341	Converts an array of objects to an array of rules .
4342	Converts an object to a rule .
4343	Pushes a value onto the stack .
4344	Pop an element from the stack .
4345	Pop an element from the stack .
4346	Peek to the next element of the stack .
4347	Emit a value .
4348	Performs a pre match .
4349	Returns true if this range overlaps with another .
4350	Returns true if this range touches another .
4351	Returns a new IndexRange with the specified other .
4352	Returns the byte code for the given parser class .
4353	Adds a word .
4354	Unwrap a matcher .
4355	Register a listener to the bus .
4356	Post an object to the bus
4357	Gets the sub context .
4358	Matches this rule with the specified number of cycles .
4359	Returns the maximum rule for this rule .
4360	Returns a new rule with the specified number of cycles .
4361	Matches this rule with the specified boundaries .
4362	Matches a range .
4363	Returns all characters except the given chars .
4364	Gets the value of the deploymentDescriptor property .
4365	Gets the value of the authenticationConfiguration property .
4366	Gets the Bw services .
4367	Add monitoring events to all services
4368	Gets the value of the globalVariable property .
4369	Gets the value of the baseService property .
4370	Gets the value of the event property .
4371	Checks if the project directory is valid .
4372	Read dependencies from a file .
4373	Launches a binary binary .
4374	Gets the value of the action property .
4375	Clean the directory
4376	Gets the value of the final property .
4377	Gets the value of the rulebase property .
4378	Add an alias to the list
4379	Process an XML file .
4380	Gets the value of the rest property .
4381	Gets the value of the nvpair property .
4382	Adds a dependency to the pom file .
4383	Removes a dependency from a pom file .
4384	Checks if a dependency exists .
4385	Checks if a given dependency exists in the pom file .
4386	Adds a project as a module .
4387	Checks if the pom exists in the pom file .
4388	Returns the artifact file name
4389	Execute the plugin .
4390	Extract the content of a file
4391	Update repository instances .
4392	Gets the value of the any property .
4393	Create a new instance of the given class with the given parameters .
4394	Creates a proxy class .
4395	Creates a constructor .
4396	Start statement execute timer .
4397	Start callable statement lifecycle .
4398	Start a timer for a result set .
4399	Marks the result set row .
4400	Creates a proxy for the given handler .
4401	Wrap a connection .
4402	Wrap statement .
4403	Wrap a prepared statement .
4404	Wrap a callable statement .
4405	Returns the type of the given ResultSet .
4406	Build the command line arguments
4407	Helper method to build the command line arguments
4408	Execute the command .
4409	Execute the executor .
4410	Sets the current language .
4411	Returns the message for the given key
4412	Returns true if or false otherwise .
4413	This method is used to format the HTML page .
4414	Get thecowFace from the command line
4415	Gets the cowFace .
4416	Extracts the template from a string
4417	Loads and returns the name of the given file .
4418	Converts an input stream to a string .
4419	Get a file from a path
4420	Gets an input stream from the container
4421	Checks if the given file is a war file .
4422	Converts a file to an input stream .
4423	Gets the container with the given name .
4424	Get a list of files from a folder
4425	Gets the channel with the given mode .
4426	Sets the eye .
4427	Sets the tongue .
4428	Checks if the given mode is a known mode .
4429	Parse command line arguments
4430	Displays command line usage .
4431	Format the bubble .
4432	Wrap a message .
4433	Format the message .
4434	Sets the wordwrap .
4435	Gets the longest line length .
4436	Log a message .
4437	Asynchronously logs a message .
4438	Logs multiple messages .
4439	Joins a collection of messages .
4440	Posts a single event to the Loggly event .
4441	Returns a sorted map of all schema names .
4442	Get schema by name
4443	Sets the servlet context .
4444	Resync watcher .
4445	Returns a sorted map of table names .
4446	Retrieves a table by its name .
4447	Write to the output stream .
4448	Returns a map of all catalog names .
4449	Get catalog by name
4450	Get the buffer from the buffer .
4451	Writes the given encoder .
4452	Write a writer to a writer
4453	Creates a lexical position .
4454	Append a single segment .
4455	Write a single segment .
4456	Returns the character at the specified position .
4457	Gets the SQL data types .
4458	Gets the column map .
4459	Get column by name
4460	Get the list of columns .
4461	Returns the column at the given ordinal position .
4462	Returns the set of imported tables .
4463	Gets the set of foreign tables .
4464	Adds a new segment .
4465	Log a character .
4466	Log a string .
4467	Put all values into the target .
4468	Moves the current location to the last location
4469	Animates the camera to include .
4470	Creates an animator to the specified circle .
4471	Creates a circle from a circle .
4472	Get the arc motion .
4473	Gets the bold font .
4474	Creates a view property animator for the specified view .
4475	Scales the given view to the exit screen .
4476	Scales the next view to the next view .
4477	Counts the number of rows
4478	Concatenates address lines into a string .
4479	Connects a GoogleApiClient to a GoogleApiClient .
4480	Sets the transition for the fragment manager .
4481	Gets the foreground color .
4482	Sets onClick listeners for all views .
4483	Returns the log level name for the given level .
4484	Create a scale up animation for the given view
4485	Show the given view .
4486	Hide soft input from view
4487	Returns true if the cursor has the specified position .
4488	Counts the number of items in the cursor .
4489	Read the first int from the cursor
4490	Gets the long from the cursor .
4491	Reads the first string from the cursor and closes it .
4492	Read all ints from the cursor and close the cursor
4493	Returns an array of longs from the cursor .
4494	Returns an array of Strings from the cursor .
4495	Load a placeholder
4496	Get orientation of a RecyclerView
4497	Gets the span count .
4498	Add a rule to the view
4499	Returns true if the buffer was read .
4500	Get the current Looper .
4501	Returns the values of a sparse array
4502	Returns the values of the given long sparse array .
4503	Checks if the adapter has been changed .
4504	Check the drawable
4505	Update matrix
4506	Delete an element from the database .
4507	Translate the elements into a SQL statement .
4508	Returns the byte count for the given size
4509	Returns a copy of the given bitmap .
4510	Checks if an intent has been found .
4511	Create an intent to send to a list of recipients .
4512	Sets the default content view
4513	Find the fragment with the specified pane .
4514	Creates a Bundle with two int values .
4515	Create an intent to launch an Intent with the given data .
4516	Creates an intent that can be used to update the data .
4517	Creates an intent to delete data .
4518	Creates an intent that will be used to delete data .
4519	Gets the size of the action bar .
4520	Gets the background of the action bar .
4521	Check if current network is connected .
4522	Determines the difference between the diffs .
4523	Computes the difference between two texts .
4524	Applies the given ThrowableFunction1 to the given ThrowableFunction1
4525	Converts a SOAP message into a string .
4526	Get or create a file object for the tracee profile .
4527	Checks if an element is a valid method .
4528	Is a getter method?
4529	Returns the boolean value for the given property key .
4530	Checks if the class has no arguments .
4531	Gets an annotation from the given type .
4532	Checks if the method has no return type .
4533	Apply the given output element .
4534	Find the set of wrapper classes .
4535	Returns all explicit context data providers .
4536	Returns all available wrappers .
4537	Initialize the connectors
4538	Send error report to all registered connectors
4539	Returns the set of connector names .
4540	Gets the properties for the connector .
4541	Creates a connector from the given configuration name .
4542	Checks if the given connector class is an instance of the given class .
4543	Checks if the method has a getter prefix .
4544	Checks if the given method is a public method .
4545	Returns true if the given method has a matching return type .
4546	Returns the matching field for the given method .
4547	Checks if the given method name is a getter method .
4548	Capitalizes the first character of the string .
4549	Decompose the first character of the string .
4550	Strip getter prefix .
4551	Sends an error report to all connected connections .
4552	Apply the given instance to the given instance .
4553	Creates an instance of the given type .
4554	Gets the current profile .
4555	Open a properties file .
4556	Fill the manual context override map .
4557	Creates a TraceeContextString representation of the trace .
4558	Checks if the method throws an exception .
4559	Checks if a class is defined in the throwable throws an exception .
4560	Extract the declared methods from a method signature .
4561	Checks to see if the process is a watchdog .
4562	Fails if the group has the expected size .
4563	Assert that the value is not null .
4564	Returns the drop down view
4565	Reserve a term name .
4566	Registers a term .
4567	Initializes the vocabulary .
4568	Returns the representation of this template .
4569	Resolve relative path .
4570	Merges the given path with the given path .
4571	Removes all dot segments from the path .
4572	Creates a name with the given names .
4573	Creates a name with the given names .
4574	Creates a wildcard with the specified type .
4575	Creates a wildcard with the specified type and suffix .
4576	Creates a media type with the specified type and subtype .
4577	Serialize the given media type .
4578	Run the snapshot .
4579	Compares two terms .
4580	Returns a list of pending attachment names for the given attachment id .
4581	Adds an attachment name .
4582	Returns the next attachment name .
4583	Creates a name provider for the given resource name .
4584	Parse the suffix .
4585	Checks that the string is valid .
4586	Returns the next codepoint .
4587	Update the resource .
4588	Convert this URI to a URI .
4589	Closes an input stream and logs it .
4590	Returns true if the given character is a name start character .
4591	Returns true if the given character is a valid name .
4592	Validates a token .
4593	Sets the media type
4594	Register adapter class .
4595	Creates a type adapter .
4596	Adapts the given object to the given type .
4597	Returns a new namespaces with the given prefix .
4598	Returns a copy of this namespace without prefix .
4599	Escape an XML string .
4600	Performs a query against the given query .
4601	Adds a name provider to the registry .
4602	Returns the name provider for the given container .
4603	Unwraps this object to the given class
4604	Returns true if this object is out of scope .
4605	Creates a new Path with the given name .
4606	Creates a new Path with the given file .
4607	Helper method to assemble a path from a base path .
4608	Returns the type parameterization for the given class .
4609	Create a primitive object factory .
4610	Create a variant list from the given media types .
4611	Converts a DataSet into an Individual object .
4612	Returns a Matcher that matches all children with the given count .
4613	Creates a matcher that matches the given value .
4614	Creates a matcher that matches some children with the given value .
4615	Creates a matcher that matches the given integer .
4616	Matches if the children are less than or equal to the given value .
4617	Getasures by year state
4618	Get the measure
4619	Get the candidate rating
4620	Get the vote
4621	Get the vote by year state
4622	Get the selection by zip
4623	Get stage candidates for a stage .
4624	Get an address from an office state
4625	Get Offices by type
4626	Get Offices by level
4627	Get Offices by type level
4628	Get the Offices for a branch level
4629	Get counties for a state
4630	Get the cities for a given state
4631	Get details of a local .
4632	Performs a query .
4633	Get statewide
4634	Get by office type state
4635	Get the candidate list
4636	Get AddlBio
4637	Get the detailed Bio
4638	Get a list of candidates by lastname
4639	Get the candidate list .
4640	Get the candidates for a district .
4641	Get details for a specific type state
4642	Get the details of the specified committee
4643	Get the group members of the specified rack
4644	Get leadership for a state
4645	Get ownership of a leader .
4646	Sleeps .
4647	Starts the timer .
4648	Waits for the result to complete .
4649	Close the underlying stream .
4650	Merges the provided map using the provided function using the provided function .
4651	Splits the specified map into the specified limit .
4652	Sets the size of the map .
4653	Sorts the given map using the provided comparator .
4654	Returns the first value of the given map .
4655	Checks that the given test is null .
4656	Checks that the given test is not null .
4657	Checks that a String is not null or empty
4658	Checks that the given set is null or empty .
4659	Check that the array is null or empty
4660	Gets a resource as a string .
4661	Returns a set of words from a resource file .
4662	Get the last modified time of the given resource file
4663	Get string from input stream .
4664	Get bytes from an input stream .
4665	Reads a file to a string .
4666	Returns the absolute path of the given resource .
4667	Generate a random id .
4668	Generates a random id .
4669	Joins two arrays .
4670	Split the given set into a list .
4671	Gets the month start .
4672	Gets the month end .
4673	Removes whitespace from a string .
4674	Capitalizes the first letter of the given string .
4675	Joins an array of objects with the given separator .
4676	Joins the given set with the given separator .
4677	Extract words from text .
4678	Removes whitespace from a string .
4679	Trims text down by appending append to the end of the string
4680	As list of chars .
4681	Returns the similarity of the search string
4682	Unquote a string .
4683	Gets the timezone time .
4684	Returns the status of the filter .
4685	Checks if the given severity is a violation .
4686	Draws the icon .
4687	Draws the icon .
4688	Gets the tags list .
4689	Sets the next Content Specification .
4690	Sets the previous node and cleans it .
4691	Finds a node by its host and port .
4692	Find all sockets with the given host .
4693	Get all nodes that are not dead
4694	Adds a node to this node .
4695	Removes a node from the map .
4696	Marks the specified node as alive .
4697	Mark a node as dead .
4698	Sends event to all registered handlers .
4699	Gets the checkstyle version .
4700	Configure the resource locator .
4701	Builds an object from a list of attributes .
4702	Creates a map of object property values .
4703	Returns the current sequence for the given class .
4704	Compares two NodeIDs .
4705	Get and clear eventslist
4706	Find the packages from the classes in the classpath .
4707	Sets a property on the target object .
4708	Sets a field on the target object .
4709	Gets methods from target class .
4710	Invoke a method on the target object .
4711	Starts the cache server .
4712	Gets the value of an attribute .
4713	Create rules summary .
4714	Checks if the given audit event matches the given rule name .
4715	Creates a key for receiving at once .
4716	Initialize the cache .
4717	Waits for all nodes to be started .
4718	Waits for all nodes to be sent .
4719	Waits for all clusters to be connected .
4720	Waits for a task to finish .
4721	Close the cache .
4722	Prints the state of the cluster .
4723	Starts a guest node .
4724	Returns a sorted list of properties .
4725	Returns the hash code for the version .
4726	Returns total number of pages .
4727	Returns the list of entries for the specified page .
4728	Prepare result data .
4729	Store results .
4730	Creates a new object with the specified attributes .
4731	Compares two categories .
4732	Migrates a set of locale names .
4733	Recalculates the minimum hash for the given topic .
4734	get min hash from xml
4735	Checks to see if there is a minimum hash .
4736	Validate and fix relationships .
4737	Update the content hash of a topic .
4738	Checks to see if the topic is valid .
4739	Sort classes by their name .
4740	Execute the project .
4741	Splits a string into a list of tokens .
4742	Convert a string to a list of patterns .
4743	Checks if the source string contains a prefix .
4744	Gets the factory class .
4745	Sends a message .
4746	Sends a message to the destination .
4747	Execute zero function .
4748	Execute the query function
4749	Handle exception .
4750	Format the results .
4751	Adds an error message .
4752	Returns the error message .
4753	Is the socket alive?
4754	Executes the specified Thread .
4755	Checks if the list contains resources
4756	Merge deprecated information .
4757	Add limit to query string
4758	Gets the locator from locators string .
4759	Returns the size of the region
4760	Returns true if the cache is a validEMFire client .
4761	Removes all keys from the given set .
4762	Retries the given runnable by retries .
4763	Generate a buffered image
4764	Paint the icon .
4765	Get buffered reader
4766	Waits for a line to enter .
4767	Executes the CheckReplicationTool .
4768	Parse the command line arguments .
4769	Prints the help command .
4770	Initializes the Gnu options .
4771	Aggregate single cluster member data .
4772	Add a property not null
4773	Parse the command line arguments .
4774	Prints the help .
4775	Initializes the Gnu options .
4776	Returns the index of the command .
4777	Extract the launcher arguments from the given command line .
4778	Extract the command arguments from the given command line .
4779	Starts the launcher .
4780	Displays a debug message .
4781	Start the timer .
4782	Creates a set of regions .
4783	Process expired entries .
4784	Sets the indentation token .
4785	Gets the package statement .
4786	Starts the given node .
4787	Extract a set of ports from a system member .
4788	Find or create a pool .
4789	Gets the event name from the event source name .
4790	Returns the category of the given event name .
4791	Enter a frame .
4792	Exit the specified frame .
4793	Returns the names of the classes in the frame counter .
4794	Set the package extractors .
4795	Add packages to the map .
4796	Updates the image data .
4797	Sets the original file name .
4798	Extract the limit .
4799	Format select results .
4800	Checks that object is allowed in real time .
4801	Runs a process and waits for a confirmation .
4802	Run the given process using the default shutdown delay .
4803	Runs a process with the given arguments .
4804	Stops the next line in the process .
4805	Starts a process .
4806	Redirects streams to stdout .
4807	Waits for a process to complete .
4808	Generate a new file .
4809	Processes the cluster .
4810	Returns true if the given parameterizedType is an instance of the given type .
4811	Checks if the given method is compatible with this interface .
4812	Find the implementing method .
4813	Extract the type argument from a generic type .
4814	Resolves the given type variable .
4815	Find the actual type arguments of an interface .
4816	Populate the object .
4817	Adds a description to the return .
4818	Return object to pool
4819	Get destination .
4820	Get message consumer for given destination name
4821	Returns a producer for the given destination name .
4822	Gets the session .
4823	Gets the connection .
4824	Sends text message with destination name .
4825	Listen text messages with destination .
4826	Receive text message from destination with timeout .
4827	Stops the JMS server .
4828	Handle recommendations engine .
4829	Gets the pool configuration .
4830	Sets the id .
4831	Sets the model .
4832	Add or update the wka model .
4833	Remove a model
4834	Gets the event manager service .
4835	Shuster event manager .
4836	Encode non - ASCII characters .
4837	Decode a MultivaluedMap .
4838	Create a service group from the given resource classes .
4839	Closes the server .
4840	Forward event transfer object .
4841	Returns the annotations for the given method .
4842	Find an annotation from the given type .
4843	Returns the resource constructor for the given class .
4844	Extracts the root resource from the given class .
4845	Sets the baging classifiers .
4846	Gets the object .
4847	Gets the serialized object .
4848	Writes the object to a file .
4849	Returns the leaf score for the given instances .
4850	Returns the provider URL .
4851	Gets the context .
4852	Gets the connection supplier .
4853	Build the JMS service .
4854	Returns the type for the given jackson type .
4855	Returns the type for the given type .
4856	Introspect the serializer
4857	Introspect the serializer .
4858	Introspects the given EnumSerializer .
4859	Introspect the serializer .
4860	Sets the next frame .
4861	frame 3 frames
4862	Sends a frame to the console .
4863	Generate next random number
4864	Returns the next element .
4865	Main entry point .
4866	Returns the last name for the given number .
4867	Randomly selects a random number from the distribution
4868	Returns the relative path of the given file .
4869	Execute a git add .
4870	Performs a commit .
4871	Moves a file to a destination .
4872	Execute the remote repository .
4873	Checks that the given file is valid .
4874	Checks if two lists are identical .
4875	Checks that the given int is in the range .
4876	Get the client instance for the given client type .
4877	Sets the preferred client type .
4878	Execute a git add command .
4879	Add a list of files to the repository .
4880	Adds a file to the repository .
4881	Adds a file to the repository .
4882	Add a set of paths to the repository .
4883	Add a list of paths to the repository .
4884	Add a list of paths to the repository .
4885	Adds a dry run .
4886	Compares two GitVersion .
4887	Add a path to a repository .
4888	Add a list of paths to the repository .
4889	Executes a git commit process .
4890	Sets the Git path to the given file .
4891	Creates a list of parameters for the given method .
4892	Get function definition table .
4893	Get the value array .
4894	Checks if the given file exists .
4895	Create a branch .
4896	Deletes a branch .
4897	Rename a branch .
4898	Get the list of branches .
4899	Commit all files in the given repository .
4900	Convert an object to a given class .
4901	Convert integer to boolean .
4902	Convert boolean to integer .
4903	Convert a Date to a String
4904	Returns the message for the given error code .
4905	Get the file at the given index
4906	Adds a file to the list of deleted files .
4907	Adds a file to deleted files not updated .
4908	Adds a file to the list of modified files to commit .
4909	Add a file not updated
4910	Adds a file to the list of files to commit .
4911	Adds a file to the list of renamed files .
4912	Add a file to untracked files
4913	Create a new parameter .
4914	Get the value for this field .
4915	Sets the verbose flag .
4916	Sets whether or not the driver should be executed .
4917	Sets whether or not the delete flag should be true .
4918	Sets whether or not the mode should be used .
4919	Sets the opt manager .
4920	Returns the type of the function return type
4921	Evaluate a function .
4922	Gets the injection value array .
4923	Run a function method .
4924	Convert a return value to a boolean .
4925	Evaluates a script .
4926	Executes git branch .
4927	Deletes a branch .
4928	Deletes a branch .
4929	Rename a branch .
4930	Executes a commit on this file .
4931	Get current branch .
4932	Executes git checkout .
4933	Get the status of this file .
4934	Remove a file from the repository .
4935	Gets the file from the new files list .
4936	Gets the file from deleted files .
4937	Gets the file from modified files .
4938	Gets the file from deleted files not updated .
4939	Gets the file from modified files not updated .
4940	Gets the file at the specified index .
4941	Gets the file at the given index .
4942	Returns the error at the given index .
4943	Returns the error message .
4944	Execute git reset .
4945	Adds a file to the list of added files .
4946	Adds a file to the destination file .
4947	Add a deleted file .
4948	Sets the number of files changed
4949	Sets the number of lines deleted
4950	Sets the number of lines inserted .
4951	Execute git mv process .
4952	Returns the index of the first occurrence of the specified character .
4953	Gets the result set .
4954	Executes git log and returns a list of commits .
4955	Add a commit .
4956	Adds a file .
4957	Executes git checkout .
4958	Executes git checkout .
4959	Executes git checkout .
4960	Executes git checkout .
4961	Executes git checkout .
4962	Executes git checkout .
4963	Checks if the given ref type is valid .
4964	Gets the children of the GitFileSystemObject .
4965	Gets the removed file .
4966	Executes git checkout .
4967	Executes git checkout .
4968	Sets a comment .
4969	Sets the branch options .
4970	Inject service methods .
4971	Inject service method .
4972	Sets the optB branch .
4973	Execute GitClone process .
4974	This is a utility method that reads the properties file from a data binder . xml file .
4975	Returns an Enumeration of all the resources in the jar
4976	Sets up the reset type .
4977	Adds a method to the list of methods .
4978	Perform filter .
4979	Reduces database connection .
4980	Consume database .
4981	Query the database .
4982	Execute raw query
4983	Build the command line
4984	Get the file at the specified index .
4985	Gets the deleted file at the given index .
4986	Gets the modification file at the specified index .
4987	Get the status of this file .
4988	Replies the head element .
4989	Returns the list of files
4990	Returns the number of files .
4991	Returns true if the given string matches this pattern .
4992	Updates the list after the specified entry .
4993	Removes the last element from the list .
4994	Clean up expired time .
4995	Updates the list after the specified entry .
4996	Returns true if the specified string starts with the specified index .
4997	Get access token .
4998	Sign the given OAuth request .
4999	Returns the URL to use for authorization .
5000	Performs a finish .
5001	Finish the container .
5002	Create the control .
5003	Replies the default Java package .
5004	Sets the visibility of the group .
5005	Creates the query string .
5006	Get query parameters as list .
5007	Create the part control .
5008	Adds a new item to the list
5009	Returns the palette items for the given category
5010	Configures the size of the table .
5011	Returns the selected template
5012	Get the current html template
5013	Load the last saved preferences .
5014	Saves the last saved preferences .
5015	Sets the selected template .
5016	Updates the viewer input
5017	Creates an IN expression that evaluates to a collection of values .
5018	Creates a member of the given path .
5019	Create a not member of the given path .
5020	Create the field editors for the preference .
5021	Returns the last path component of the given path .
5022	Populates the container name field .
5023	Validate the page .
5024	Checks if the file name is valid for the given content type .
5025	Add default extension to the file name
5026	Get the project from a path
5027	Gets the user id .
5028	Create the page .
5029	Saves the current page .
5030	Handle a resource changed event .
5031	Show the page .
5032	Creates the query log message
5033	Convert an object to a string .
5034	Insert a new timeline item .
5035	Insert a timeline item .
5036	Insert a timeline item .
5037	Validates the response .
5038	Returns the query string for the given criteria .
5039	Get the template store
5040	Get the context type registry
5041	Replies an action by its ID .
5042	Create a DBI object
5043	Append limit and offset .
5044	Creates a new named property .
5045	Creates a named property .
5046	Creates a new named property .
5047	Creates a String literal .
5048	Creates a new URI literal .
5049	Creates a typed literal .
5050	Creates a QName .
5051	Initialize the filter .
5052	Sets the entity id .
5053	Initialize the JsonParser .
5054	Indicate that the entity was updated .
5055	Closes the specified port .
5056	Starts the server .
5057	Validate options .
5058	Validate the arguments .
5059	Subscribe a listener to the server .
5060	Unsubscribe a listener .
5061	Unsubscribe from the destination .
5062	Unsubscribe and wait for a recipient .
5063	Sends a message to a destination .
5064	Gets the next message .
5065	Returns true if the given receipt_id exists .
5066	Clears a specific receipt .
5067	Log dead event .
5068	Convert the given source object to the target class .
5069	Returns the priority for the given number of lines .
5070	Execute the arguments .
5071	Inject options .
5072	Adjusts the list of arguments .
5073	Migrates a personality .
5074	Tag the request .
5075	Handle actual request .
5076	Handle preflight request .
5077	Sets the JDK options .
5078	Checks the existence of the Java home directory .
5079	Filter lines by regex .
5080	Returns the regular expression for the packages .
5081	Output the dependencies .
5082	Compares the priority of this instance .
5083	Gets the IOUtils .
5084	Gets the image .
5085	Get the PriceUtils
5086	Get ResourceUtils
5087	Get the ZipUtils class
5088	Get the DigestUtils instance
5089	Get StringUtils
5090	Gets the resource service .
5091	Gets the pricing service .
5092	Gets the instance service .
5093	Retrieves a set of objects from an uploaded file .
5094	Create a digital object from a file
5095	Store list .
5096	Ensure metadata table exists .
5097	Creates a source detail object for the given string .
5098	Validate the input .
5099	Validate arguments .
5100	Validate options .
5101	Is a class on the classpath?
5102	Return true if the given URI is accepted .
5103	Load file .
5104	Run the Gnuish command .
5105	Read commands .
5106	Post process .
5107	Pre processing .
5108	Migrate the database .
5109	Validate databases .
5110	Returns the database history .
5111	Initialize database .
5112	Convert lines to statements .
5113	region > findByDetailName
5114	region UpdateLink
5115	Parse the options .
5116	send a command
5117	Format the source code .
5118	Gets the link with the given hashCode .
5119	Sends a command to the client .
5120	Returns the JAXBContext object for the given path .
5121	Creates the box list .
5122	Creates a new box tree .
5123	Compute the background of a box .
5124	Sets the mapping file .
5125	Returns the mapping file for the given URL .
5126	Creates a version range from a version specification .
5127	Concatenates this transform to another .
5128	Transform a rectangle .
5129	Determines the minimum bounding box .
5130	Recompute the visual bounds .
5131	Recompute the bounds of this box .
5132	Compute the bounding box .
5133	Gets the top border .
5134	Returns the bottom border of the element .
5135	Returns the left border of the element .
5136	Returns the right border of the element .
5137	Returns the effective color of the element .
5138	Checks if the given child node is enclosing .
5139	Removes all child nodes from the list .
5140	Execute a command .
5141	Sets the data source .
5142	Utility method that can be used to create a DataSource
5143	Sets up the platform .
5144	Queries the given method and returns the result .
5145	Registers a command .
5146	Registers a command .
5147	Unregister a command .
5148	Execute a command
5149	Starts the replicator .
5150	Search for submissions
5151	Retrieves the detail for the given id
5152	Connects to a JMX connector .
5153	Get the value of a property
5154	Invoke the JMX connector
5155	Search by state
5156	Search for all districts
5157	Lookup a boundary .
5158	Get the metadata for the given state
5159	Creates an object from the given interface .
5160	Registers an interface with the given interface .
5161	Unregister a MBean
5162	Validate MBean .
5163	Returns a unique identifier .
5164	Adds a value to the parameter .
5165	Search by state
5166	Search by a given state
5167	Search by a state term
5168	Returns a search for a given state
5169	Retrieve the detail of the given id
5170	Compares this object to another .
5171	Sets the mapped class .
5172	Invokes the method .
5173	Stop the timer .
5174	Build the HttpClient .
5175	Creates the minter request .
5176	Transform response text to pid
5177	Execute an XPath on an XML document .
5178	Retrieves a pid from the server .
5179	Creates a new ConfigurationBinder for the given class .
5180	Binds the given configuration .
5181	Creates a new filter pattern .
5182	Execute the constructor
