0	Copies the contents of this source to the given sink .
1	Reads the contents of this source as a string .
2	Reads all the lines of this source as a list of strings . The returned list will be empty if this source is empty .
3	buffer when possible .
4	Returns a new CharBuffer identical to buf except twice the capacity .
5	Handle the case of underflow caused by needing more input characters .
6	Flips the buffer output buffer so we can start reading bytes from it . If we are starting to drain because there was overflow and there aren t actually any characters to drain then the overflow must be due to a small output buffer .
7	Copies an iterable s elements into an array .
8	Determines if the given iterable contains no elements .
9	Useful as a public method?
10	Returns an Iterator that walks the specified array nulling out elements behind it . This can avoid memory leaks when an element is no longer necessary .
11	Concats a varargs array of iterators without making a defensive copy of the array .
12	Clears the iterator using its remove method .
13	Writes all the given bytes to this sink .
14	Creates a CacheBuilderSpec from a string .
15	Returns a CacheBuilder configured according to this instance s specification .
16	Returns a joiner with the same behavior as this joiner except automatically skipping over any provided null elements .
17	okay since we have to copy the just - created array anyway .
18	Returns a new immutable array containing the values in the specified range .
19	Reads the next byte of data from the underlying input stream and updates the hasher with the byte read .
20	Reads the specified bytes of data from the underlying input stream and updates the hasher with the bytes read .
21	Stores the contents of a map in an output stream as part of serialization . It does not support concurrent maps whose content may change while the method is running .
22	Stores the contents of a multiset in an output stream as part of serialization . It does not support concurrent multisets whose content may change while the method is running .
23	Secret sauce for setting final fields ; don t make it public .
24	Starts the stopwatch .
25	Adds a number of occurrences of the specified element to this multiset .
26	Resizes the entries storage if necessary .
27	Convert a byte array into an InetAddress .
28	Identify and mark the longest run of zeroes in an IPv6 address .
29	Convert a list of hextets into a human - readable IPv6 address .
30	Returns an InetAddress representing the literal IPv4 or IPv6 host portion of a URL encoded in the format specified by RFC 3986 section 3 . 2 . 2 .
31	Evaluates whether the argument is an IPv6 compat address .
32	Returns the IPv4 address embedded in an IPv4 compatible address .
33	Evaluates whether the argument is a Teredo address .
34	Evaluates whether the argument is an ISATAP address .
35	Returns the IPv4 address embedded in an ISATAP address .
36	Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an IPv6 address of one of the specified address types that contain an embedded IPv4 address .
37	Evaluates whether the argument is an IPv4 mapped IPv6 address .
38	Returns a new InetAddress that is one less than the passed in address . This method works for both IPv4 and IPv6 addresses .
39	Returns a buffered reader that reads from a file using the given character set .
40	Overwrites a file with the contents of a byte array .
41	Copies all bytes from a file to an output stream .
42	Copies all the bytes from one file to another .
43	Creates an empty file or updates the last updated timestamp on the same as the unix command of the same name .
44	Reads the first line from a file . The line does not include line - termination characters but does include other leading and trailing whitespace .
45	Returns a new builder expecting the specified number of entries to be added .
46	Guaranteed to throw an exception and leave the bimap unmodified .
47	Creates a new min - max priority queue using natural order no maximum size and initially containing the given elements .
48	Returns ~2x the old capacity if small ; ~1 . 5x otherwise .
49	Finalization mix - force all bits of a hash block to avalanche
50	Returns an instance which specifies that the natural ordering of the elements is guaranteed .
51	Enters this monitor . Blocks at most the given time .
52	Enters this monitor . Blocks at most the given time and may be interrupted .
53	Enters this monitor when the guard is satisfied . Blocks indefinitely but may be interrupted .
54	Enters this monitor when the guard is satisfied . Blocks at most the given time including both the time to acquire the lock and the time to wait for the guard to be satisfied and may be interrupted .
55	Enters this monitor when the guard is satisfied . Blocks indefinitely .
56	Enters this monitor if the guard is satisfied . Blocks indefinitely acquiring the lock but does not wait for the guard to be satisfied .
57	Enters this monitor if the guard is satisfied . Blocks at most the given time acquiring the lock but does not wait for the guard to be satisfied .
58	Enters this monitor if the guard is satisfied . Blocks indefinitely acquiring the lock but does not wait for the guard to be satisfied and may be interrupted .
59	Enters this monitor if it is possible to do so immediately and the guard is satisfied . Does not block acquiring the lock and does not wait for the guard to be satisfied .
60	Waits for the guard to be satisfied . Waits indefinitely but may be interrupted . May be called only by a thread currently occupying this monitor .
61	Waits for the guard to be satisfied . Waits indefinitely . May be called only by a thread currently occupying this monitor .
62	Waits for the guard to be satisfied . Waits at most the given time . May be called only by a thread currently occupying this monitor .
63	Returns an estimate of the number of threads waiting for the given guard to become satisfied . Note that because timeouts and interrupts may occur at any time the estimate serves only as an upper bound on the actual number of waiters . This method is designed for use in monitoring of the system state not for synchronization control .
64	Signals some other thread waiting on a satisfied guard if one exists .
65	Signals all threads waiting on guards .
66	Records that the current thread is about to wait on the specified guard .
67	Records that the current thread is no longer waiting on the specified guard .
68	Caller should check before calling that guard is not satisfied .
69	Shuts down the given executor service gradually first disabling new submissions and later if necessary cancelling remaining tasks .
70	Writes the given character sequence to this sink .
71	Runs this execution list executing all existing pairs in the order they were added . However note that listeners added after this point may be executed before those previously added and note that the execution order of all listeners is ultimately chosen by the implementations of the supplied executors .
72	Similar to load64 but allows offset + 8 > input . length padding the result with zeroes . This has to explicitly reverse the order of the bytes as it packs them into the result which makes it slower than the native version .
73	Store 8 bytes into the provided array at the indicated offset using the value provided .
74	Load 4 bytes from the provided array at the indicated offset .
75	Creates a new media type with the given type and subtype .
76	Parses a media type from its string representation .
77	Returns the captured type .
78	Remove each element in an iterable from a set .
79	Returns the escaped form of a given literal string .
80	Helper method to grow the character buffer as needed this only happens once in a while so it s ok if it s in a method call . If the index passed in is 0 then no copying will be done .
81	Guides the allowed concurrency among update operations . Used as a hint for internal sizing . The table is internally partitioned to try to permit the indicated number of concurrent updates without contention . Because assignment of entries to these partitions is not necessarily uniform the actual concurrency observed may vary . Ideally you should choose a value to accommodate as many threads as will ever concurrently modify the table . Using a significantly higher value than you need can waste space and time and a significantly lower value can lead to thread contention . But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact . A value of one permits only one thread to modify the cache at a time but since read operations and cache loading computations can proceed concurrently this still yields higher concurrency than full synchronization .
82	Builds a cache which does not automatically load values when keys are requested .
83	Handle lazy allocation of arrays .
84	Adds the given value to the dataset .
85	Calculates the new value for the accumulated mean when a value is added in the case where at least one of the previous mean and the value is non - finite .
86	Builds a new open - addressed hash table from the first n objects in elements .
87	Returns an array size suitable for the backing array of a hash table that uses open addressing with linear probing in its implementation . The returned size is the smallest power of two that can hold setSize elements with the desired load factor . Always returns at least setSize + 2 .
88	Returns an empty immutable table .
89	Returns an immutable table containing a single cell .
90	Returns an immutable copy of the provided table .
91	Returns a serializable converter that always converts or reverses an object to itself .
92	A factory that chooses the most space - efficient representation of the table .
93	Returns an immutable sorted multiset containing a single element .
94	Returns a builder that creates immutable sorted multisets whose elements are ordered by the reverse of their natural ordering .
95	Delegate implementation which cares about the element type .
96	Returns an unmodifiable iterable over the nodes in a tree structure using pre - order traversal . That is each node s subtrees are traversed after the node itself is returned .
97	Returns best - effort - sized StringBuilder based on the given collection size .
98	Returns a resolver that resolves types invariantly .
99	Used during deserialization only .
100	Removes all values for the provided key .
101	Concatenates a varargs array of iterables without making a defensive copy of the array .
102	Returns a fluent iterable containing no elements .
103	Returns an array containing all of the elements from this fluent iterable in iteration order .
104	Returns an immutable multimap containing the given entries in order .
105	Returns an immutable collection of all key - value pairs in the multimap .
106	Counts the bytes in the given input stream using skip if possible . Returns SKIP_FAILED if the first call to skip threw in which case skip may just not be supported .
107	Reads the full contents of this byte source as a byte array .
108	Hashes the contents of this byte source using the given hash function .
109	Checks that the contents of this byte source are equal to the contents of the given byte source .
110	Returns an empty immutable range map .
111	Returns an immutable range map mapping a single range to a single value .
112	Returns a hash function which computes its hash code by concatenating the hash codes of the underlying hash functions together . This can be useful if you need to generate hash codes of a specific length .
113	Returns an immutable sorted set containing a single element .
114	Specifies the expected number of nodes in the graph .
115	think tip it over into being worthwhile .
116	Starts the Finalizer thread . FinalizableReferenceQueue calls this method reflectively .
117	Returns the empty sorted map .
118	Returns an immutable map containing a single entry .
119	Returns an immutable sorted map containing the given entries sorted by the natural ordering of their keys .
120	Returns an immutable map containing the same entries as the provided sorted map with the same ordering .
121	Computes intermediate hash of 32 bytes of byte array from the given offset . Results are returned in the output array because when we last measured this was 12% faster than allocating new arrays every time .
122	Checks that the current state is equal to the expected state .
123	Returns an immutable list of paths to the files contained in the given directory .
124	Returns whether or not the file with the given name in the given dir is a directory .
125	Returns true if the files located by the given paths exist are not directories and contain the same bytes .
126	Like the unix command of the same name creates an empty file or updates the last modified timestamp of the existing file at the given path to the current system time .
127	Returns a path to the parent directory of the given path . If the path actually has a parent path this is simple . Otherwise we need to do some trickier things . Returns null if the path is a root or is the empty path .
128	Checks that the given options allow an insecure delete throwing an exception if not .
129	Throws an exception indicating that one or more files couldn t be deleted . The thrown exception contains all the exceptions in the given collection as suppressed exceptions .
130	Applies a supplemental hash function to a given hash code which defends against poor quality hash functions . This is critical when the concurrent hash map uses power - of - two length hash tables that otherwise encounter collisions for hash codes that do not differ in lower or upper bits .
131	Returns the segment that should be used for a key with the given hash .
132	are guaranteed to be non - null .
133	Computes the coalesced range for the given range + value - does not mutate the map .
134	Unregisters all subscribers on the given listener object .
135	Gets an iterator representing an immutable snapshot of all subscribers to the given event at the time this method is called .
136	Returns all subscribers for the given listener grouped by the type of event they subscribe to .
137	Returns an immutable list containing the given elements sorted according to their natural order . The sorting algorithm used is stable so elements that compare as equal will stay in the order in which they appear in the input .
138	Views the array as an immutable list . Does not check for nulls ; does not copy .
139	Views the array as an immutable list . Does not check for nulls .
140	Returns a new builder expecting the specified number of elements to be added .
141	Returns a new array that contains the concatenated contents of two arrays .
142	Returns an array containing all of the elements in the specified collection ; the runtime type of the returned array is that of the specified array . If the collection fits in the specified array it is returned therein . Otherwise a new array is allocated with the runtime type of the specified array and the size of the specified collection .
143	creation cost .
144	Returns the JavaLangAccess class that is present in all Sun JDKs . It is not allowed in AppEngine and not present in non - Sun JDKs .
145	Just don t ever let the user access it .
146	Views the array as an immutable list . Copies if the specified range does not cover the complete array . Does not check for nulls .
147	Not supported for ImmutableSortedMap .
148	Returns an immutable set of the mappings in this map . The iteration order is specified by the method used to create this map . Typically this is insertion order .
149	Called when a line is complete .
150	Views a function as an entry transformer that ignores the entry key .
151	Returns a view of an entry transformed by the specified transformer .
152	Views an entry transformer as a function from entries to entries .
153	Returns a map from the ith element of list to i .
154	Provide a human - readable explanation of why this future has not yet completed .
155	Updates this hasher with bytes from the given buffer .
156	Assumes that delegate doesn t have null elements and comparator .
157	Serialization type safety is at the caller s mercy .
158	Returns the sum of all values in this map .
159	Iterates through the given loaders until it finds one that can load Finalizer .
160	Dispatches all events enqueued prior to this call serially and in order for every listener .
161	Copies all bytes from a URL to an output stream .
162	Posts an event to all registered subscribers . This method will return successfully after the event has been posted to all subscribers and regardless of any exceptions thrown by subscribers .
163	Guides the allowed concurrency among update operations . Used as a hint for internal sizing . The table is internally partitioned to try to permit the indicated number of concurrent updates without contention . Because assignment of entries to these partitions is not necessarily uniform the actual concurrency observed may vary . Ideally you should choose a value to accommodate as many threads as will ever concurrently modify the table . Using a significantly higher value than you need can waste space and time and a significantly lower value can lead to thread contention . But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact . A value of one permits only one thread to modify the map at a time but since read operations can proceed concurrently this still yields higher concurrency than full synchronization . Defaults to 4 .
164	Specifies the delegate maps going in each direction . Called by the constructor and by subclasses during deserialization .
165	Returns a two - dimensional array with the table contents . The row and column indices correspond to the positions of the row and column in the iterables provided during table construction . If the table lacks a mapping for a given row and column the corresponding array element is null .
166	Adds a task to the queue and makes sure a worker thread is running .
167	Returns a view of a table where each value is transformed by a function . All other properties of the table such as iteration order are left intact .
168	Creates an empty multiset containing the given initial elements sorted according to the elements natural order .
169	Adds the chain to the seen set and returns whether all the chain was new to us .
170	Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry s creation or the most recent replacement of its value .
171	Sets the priority for new threads created with this ThreadFactory .
172	Build a HostAndPort instance from separate host and port values .
173	Build a HostAndPort instance from a host only .
174	Split a freeform string into a host and port without strict validation .
175	Parses a bracketed host - port string throwing IllegalArgumentException if parsing fails .
176	Returns the whole range relative to the specified comparator .
177	Returns the same range relative to the reversed comparator .
178	the elements are known to be non - null .
179	Returns an empty type to instance map .
180	CycleDetectingLock implementations must call this method before attempting to acquire the lock .
181	Returns a view of the intersection of this range set with the given range .
182	Makes an entry usable internally by a new ImmutableMap without rereading its contents .
183	Makes an entry usable internally by a new ImmutableMap .
184	Private helper to wrap a CharEscaper as a UnicodeEscaper .
185	Adds the given pair of values to the dataset .
186	Returns an immutable bimap containing a single entry .
187	Returns an immutable bimap containing the given entries . The returned bimap iterates over entries in the same order as the original iterable .
188	implementation is fully variant ; E has become a pass - through type
189	Creates a function that returns the same boolean output as the given predicate for all inputs .
190	Singleton placeholder that indicates a value is being loaded .
191	Returns true if the entry has expired .
192	Reserves next ticket and returns the wait time that the caller must wait for .
193	Returns the Unicode code point of the character at the given index .
194	Ensures that all of the internal structures in the HashBiMap are ready for this many elements .
195	Updates the K - to - V hash table to include the entry at the specified index which is assumed to have not yet been added .
196	Updates the V - to - K hash table to include the entry at the specified index which is assumed to have not yet been added .
197	Updates the K - to - V hash table to remove the entry at the specified index which is assumed to be present . Does not update any other data structures .
198	Updates the V - to - K hash table to remove the entry at the specified index which is assumed to be present . Does not update any other data structures .
199	Removes the entry at the specified index given the hash of its key and value .
200	Removes the entry at the specified index given the hash of its key .
201	Removes the entry at the specified index given the hash of its value .
202	Specifies the expected number of nodes in the network .
203	Specifies the expected number of edges in the network .
204	Generates the query for the callable statement with all parameter placeholders replaced with the actual parameter values
205	Records the value of a parameter .
206	java Object to bytes
207	bytes to java object .
208	lock data line
209	save sql undo log
210	default configuration redis template when have RedisConnectionFactory
211	String Type App map .
212	Locates a file on the classpath .
213	This method should only be used in test scenarios
214	Looks at the exception and its causes trying to find an ID .
215	Subscriber classes should be skipped if their class or any involved event class are not visible to the index .
216	Convenience singleton for apps using a process - wide EventBus instance .
217	Must be called in synchronized block
218	Only updates subscriptionsByEventType not typesBySubscriber! Caller must update typesBySubscriber .
219	Unregisters the given subscriber from all event classes .
220	Posts the given event to the event bus .
221	Gets the most recent sticky event for the given type .
222	Remove and gets the recent sticky event for the given event type .
223	Removes the sticky event if it equals to the given event .
224	Looks up all Class objects including super classes and interfaces . Should also work for interfaces .
225	Recurses through super interfaces .
226	Adds an index generated by EventBus annotation preprocessor .
227	Scope is limited to the activity s class .
228	Prepares the fragment s arguments and creates the fragment . May be overridden to provide custom error fragments .
229	May be overridden to provide custom error title .
230	May be overridden to provide custom error messages .
231	Drains the queue either in a pre - or post - complete state .
232	Block until the first value arrives and return it otherwise return null for an empty source and rethrow any exception .
233	Emit only the element at the given index position or fall back to a default value if the sequence is shorter .
234	Subscribe to a returned fallback publisher when any error occurs using a function to choose the fallback depending on the error .
235	Repeatedly subscribe to the source if the predicate returns true after completion of the previous subscription . A specified maximum of repeat will limit the number of re - subscribe .
236	Returns the appropriate Mono instance for a known Supplier Flux .
237	Concurrent subtraction bound to 0 and Long . MAX_VALUE . Any concurrent write will happen before this operation .
238	Returns the subscription as QueueSubscription if possible or null .
239	Calls onSubscribe on the target Subscriber with the empty instance followed by a call to onError with the supplied error .
240	Concurrent subtraction bound to 0 mostly used to decrement a request tracker by the amount produced by the operator . Any concurrent write will happen before this operation .
241	Represents a fuseable Subscription that emits a single constant value synchronously to a Subscriber or consumer .
242	Shifts the current last Mono into the ignore array and sets up a new last Mono instance .
243	Block by parking in a loop
244	Join the termination signals from this mono and another source into the returned void mono
245	Provide a default single value if this mono is completed without any data
246	Emit the first available result from this mono or the other mono .
247	Subscribe to a fallback publisher when any error occurs using a function to choose the fallback depending on the error .
248	Immutable views on hook trackers for testing purpose
249	Add a trigger generator to wait for .
250	Drain the queue but give up with an error if there aren t enough requests .
251	Checks if the source is a Supplier and if the mapper s publisher output is also a supplier thus avoiding subscribing to any of them .
252	Perform a fluent transformation to a value via a converter function which receives this ParallelFlux .
253	Collect the elements in each rail into a collection supplied via a collectionSupplier and collected into with a collector action emitting the collection at the end .
254	Generates and concatenates Publishers on each rail signalling errors immediately and generating 2 publishers upfront .
255	Run the specified runnable when a rail receives a cancellation .
256	Run the specified runnable when a rail completes .
257	Call the specified consumer with the exception passing through any rail .
258	Call the specified consumer with the request amount if any rail receives a request .
259	Generates and flattens Publishers on each rail optionally delaying errors having a total number of simultaneous subscriptions to the inner Publishers and using the given prefetch amount for the inner Publishers .
260	Merges the values from each rail in a round - robin or same - order fashion and exposes it as a regular Publisher sequence running with a give prefetch value for the rails .
261	Validates the number of subscribers and returns true if their number matches the parallelism level of this ParallelFlux .
262	Generates and concatenates Publishers on each rail optionally delaying errors and using the given prefetch amount for generating Publishers upfront .
263	Generates and concatenates Publishers on each rail delaying errors and using the given prefetch amount for generating Publishers upfront .
264	Atomic utility to safely mark a volatile throwable reference with a terminal marker .
265	Structured logging with level adaptation and operator ascii graph if required .
266	Start the download queue by the same listener .
267	Pause all tasks running in FileDownloader .
268	Get downloaded bytes so far by the downloadId .
269	Unbind and stop the downloader service when there is no task running in the FileDownloader .
270	Set the maximum count of the network thread what is the number of simultaneous downloads in FileDownloader .
271	Pause all running task
272	Start tasks in a queue .
273	Divert all data in list 2 destination list
274	This method generally used for enqueuing the task which will be assembled by a queue .
275	Pause the queue .
276	Resume the queue if the queue is paused .
277	accept range is effect by response code and Accept - Ranges header field .
278	content - length .
279	Sets whether open and close actions should be animated
280	Sets the shadow color and radius to mimic the native elevation .
281	Set the label s background colors
282	Adds properties for this instance from any properties configured in the CommentGenerator configuration .
283	Adds a comment for a model class . The Java code merger should be notified not to delete the entire class in case any manual changes have been made . So this method will always use the do not delete annotation .
284	Adds the enum comment .
285	Adds the getter comment .
286	Adds the general method comment .
287	This method should add a suitable comment as a child element of the specified xmlElement to warn users that the element was generated and is subject to regeneration .
288	This method returns the fully qualified name - including any generic type parameters .
289	This method should return an XmlElement for the select key used to automatically generate keys .
290	Builds an Android framework resource table in the android package space .
291	Creates an application resource table which can be constructed with multiple resources paths representing overlayed resource libraries .
292	Check the stylable elements . Not for aapt generated R files but for framework R files it is possible to have attributes in the styleable array for which there is no corresponding R . attr field .
293	Non - Android accessor that allows the value of the WIFI_ON setting to be set .
294	If the Config already has a sw qualifier do nothing . Otherwise add a sw qualifier for the given width .
295	Creates native stub which returns the default return value .
296	Filters methods that might need special treatment because of various reasons
297	Verifies if the
298	Replaces protected and private class modifiers with public .
299	Replaces protected and private method modifiers with public .
300	Replaces protected and public class modifiers with private .
301	Sets the view whose node is visited after this one in accessibility traversal .
302	Sets the view before whose node this one should be visited during traversal .
303	Add a child node to this one . Also initializes the parent field of the child .
304	Forces a return of a default value depending on the method s return type
305	Returns the st_mode for the path .
306	Calls the same lifecycle methods on the Activity called by Android when an Activity is restored from previously saved state .
307	Performs a configuration change on the Activity .
308	Recreates activity instance which is controlled by this ActivityController . NonConfigurationInstances and savedInstanceStateBundle are properly passed into a new instance . After the recreation it brings back its lifecycle state to the original state . The activity should not be destroyed yet .
309	Sets the current call state with the option to specify an incoming phone number for the CALL_STATE_RINGING state . The incoming phone number will be ignored for all other cases .
310	Adds an expected log statement . If this log is not printed during test execution the test case will fail . Do not use this to suppress failures . Use this to test that expected error cases in your code cause log messages to be printed .
311	Returns whether this service is exported by checking the XML attribute .
312	Returns the end point of a given segment
313	Returns the estimated position along a path of the given length .
314	packed version of tl
315	that is different .
316	Returns true if this is the default any configuration .
317	Compared to real Android there is no check that the package name matches the application package name and the method returns instantly .
318	Adds a profile associated for the user that the calling process is running on .
319	Creates a user with the specified name userId and flags .
320	This method doesn t perform an actual connection and returns immediately
321	Intercepts the method using the invokedynamic bytecode instruction available in Java 7 + . Should be called through interceptInvokeVirtualMethod not directly .
322	Adds mappings from the other DynamicRefTable
323	the given package .
324	Grant the given permissions for the given process and user .
325	Revoke the given permissions for the given process and user .
326	Enumerate the SDKs to be used for this test .
327	Extract an asset from a zipped up assets provided by the build system this is required because there is no way to get a FileDescriptor from a zip entry . This is a temporary measure for Bazel which can be removed once binary resources are supported .
328	Accessor to obtain HTTP requests made during the current test in the order in which they were made .
329	Adds an HTTP response rule . The response will be returned when the rule is matched .
330	Adds an HTTP response rule . For each time the rule is matched responses will be shifted off the list and returned . When all responses have been given and the rule is matched again an exception will be thrown .
331	Closes the FileOutputStream for the associated muxer .
332	Add a response rule .
333	Adds the Bluetooth A2DP route and ensures it s the selected route simulating connecting a Bluetooth device .
334	Stores priority for the given thread but doesn t actually change it to not mess up with test runner . Unlike real implementation does not throw any exceptions .
335	Returns priority stored for the given thread .
336	Gets the index of the specified bit in the set which is the number of marked bits that appear before the specified bit .
337	Change the operating mode for the given op in the given app package . You must pass in both the uid and name of the application whose mode is being modified ; if these do not match the modification will not be applied .
338	Returns the color value represented by the given string value
339	Returns the TypedValue color type represented by the given string value
340	Parse a float attribute and return the parsed value into a given TypedValue .
341	native method implementations ...
342	The fd must be seekable .
343	Perform a click on a menu item .
344	For internal use only . Not for public use .
345	Starts a lock task .
346	Stops a lock task .
347	Add a runnable to the queue to be run after a delay .
348	Add a runnable to the head of the queue .
349	Remove a runnable from the queue .
350	Run all runnables in the queue and any additional runnables they schedule that are scheduled before the latest scheduled runnable currently in the queue .
351	Run all runnables that are scheduled to run in the next time interval .
352	Run all runnables that are scheduled before the endTime .
353	Run the next runnable in the queue .
354	Binds to a service but ignores the given UserHandle .
355	Sets the current wall time .
356	Exposes the API23 + _isIdle method to older platforms
357	so it should be package private
358	Creates a ActivityController for the given activity class .
359	Creates a ActivityController for the given activity class with the intent .
360	Simulates starting activity with the given class type and returns its reference .
361	Creates a FragmentController for the given fragment class .
362	Speaks the string using the specified queuing strategy and speech parameters .
363	Returns the natural dimensions of the default display .
364	Returns a reference - counted Jar FileSystem possibly one that was previously returned .
365	Returns ordered list of all log items for a specific tag .
366	Returns all transitively reachable manifests including this one in order and without duplicates .
367	Returns data for the broadcast receiver with the provided name from this manifest . If no receiver with the class name can be found returns null .
368	Delete a notification channel group and all notification channels associated with the group . This method will not notify any NotificationListenerService of resulting changes to notification channel groups nor to notification channels .
369	Returns the Java version as an int value .
370	shadow this directly as opposed to nativeTransform because need access to ShadowMatrix
371	Obtain a property of the CaptureResult .
372	Returns true if the resource was found filling in mRetStringBlock and mRetData .
373	Enqueue a task to be run later .
374	Enqueue a task to be run ahead of all other delayed tasks .
375	Makes sure that given activity exists .
376	Makes sure that given service exists .
377	Makes sure that given receiver exists .
378	Makes sure that given provider exists .
379	Adds or updates given activity in the system .
380	Adds or updates given service in the system .
381	Adds or updates given broadcast receiver in the system .
382	Adds or updates given content provider in the system .
383	Removes activity from the package manager .
384	Removes service from the package manager .
385	Removes content provider from the package manager .
386	Removes broadcast receiver from the package manager .
387	Sets extra resolve infos for an intent .
388	Adds extra resolve info for an intent .
389	Internal use only .
390	Add intent filter for given activity .
391	Add intent filter for given service .
392	Add intent filter for given receiver .
393	Add intent filter for given provider .
394	to represent the root locale
395	any results in out . )
396	Parses an AndroidManifest . xml file using the framework PackageParser .
397	This implementation makes sure that the activity you are trying to launch exists
398	the ResChunk_header is safe .
399	Find valid library AndroidManifest files referenced from an already loaded AndroidManifest s project . properties file recursively .
400	Returns organization name .
401	Sets permitted accessibility services .
402	Sets permitted input methods .
403	Activates reset token for given admin .
404	boolean exclude_mipmap = false ) ;
405	boolean merge_equivalent_languages = false ) ;
406	is inconsistent for split APKs .
407	Adds a restore set available to be restored .
408	compatibility for now
409	Executes the given runnable on the loopers thread and waits for it to complete .
410	this needs to start above 0 which is a magic number to Parcel
411	non - existent - in - JDK java . util . Arrays . checkOffsetAndCount method .
412	nativeWriteBlob was introduced in lollipop thus no need for a int nativePtr variant
413	Converts a ByteBuffer to a raw byte array . This method should be symmetrical with fromByteArray .
414	Sets the current data position .
415	Ensures that the next sizeBytes are all the initial value we read .
416	Returns the item at the current position or null if uninitialized or null .
417	Reads a complete item in the byte buffer .
418	Reads the next value in the byte buffer of a specified type .
419	Determines if there is a sequence of castable zeroes and consumes them .
420	Reads a primitive which may reinterpret zeros of other types .
421	Writes an encoded item directly bypassing alignment and possibly repeating an item .
422	This method consumes an input stream and returns its content .
423	Retrieve the native id for given object . Assigns a new unique id to the object if not previously registered .
424	Retrieve the native object for given id . Throws if object with that id cannot be found
425	Attaches an application to a base context .
426	Sets the active state of the default network .
427	native method .
428	FileDescriptor which would make it difficult to check if a given sound has been placed .
429	Triggers a reapplication of the most recent set of actions against the widget which is what happens when the phone is rotated . Does not attempt to simulate a change in screen geometry .
430	Creates a bunch of widgets by inflating the same layout multiple times .
431	Allows test cases to simulate seek completion by invoking callback .
432	Allows test cases to directly simulate invocation of the OnInfo event .
433	Allows test cases to directly simulate invocation of the OnError event .
434	Returns the default display .
435	Changes the density for this display .
436	Changes the horizontal DPI for this display .
437	Changes the vertical DPI for this display .
438	Changes the name for this display .
439	Changes the flags for this display .
440	Changes the width available to the application for this display .
441	Changes the height available to the application for this display .
442	Changes the simulated physical width for this display .
443	Changes the simulated physical height for this display .
444	Changes the rotation for this display .
445	Changes the simulated state for this display such as whether it is on or off
446	Returns the connection back to the connection manager and prepares for retrieving a new connection during the next request .
447	Establishes the target route .
448	Returns the common super type of the two given types without actually loading the classes in the ClassLoader .
449	for testing only ...
450	Navigate to the next node after a node and all of his children have been explored .
451	Tell is a given feature is supported by android .
452	bool appAsLib = false bool isSystemAsset = false ) ;
453	Returns a qualifier string describing the given configuration and display metrics .
454	Overrides the current device configuration .
455	Builds a string from a null - terminated char data .
456	Creates a new service loader for the given service type and class loader .
457	Creates a new service loader for the given service type using the extension class loader .
458	Internal API to support built - in SPIs that check a system property first . Returns an instance specified by a property with the class binary name or null if no such property is set .
459	Returns true if the given package has permission to access the device .
460	Revokes permission to a USB device granted to a package . This method does nothing if the package doesn t have permission to access the device .
461	Adds a USB device into available USB devices map with permission value . If the USB device already exists updates the USB device with new permission value .
462	Removes a USB device from available USB devices map .
463	Adds a USB port to UsbManager .
464	Opens a file descriptor from a temporary file .
465	Adds entry to the DropboxManager with the flag indicating data is text .
466	Creates a MediaItem and returns it .
467	Create a proxy for the given class which returns other deep proxies from all it s methods .
468	Reflectively get the value of a field .
469	Reflectively call an instance method on an object .
470	Reflectively call an instance method on an object on a specific class .
471	Helper method for calling a static method using a class from a custom class loader
472	Reflectively call a static method on a class .
473	Create a new instance of a class
474	Reflectively call the constructor of an object .
475	If there are RangingResults set by the setRangeResults method of this shadow class this method will call the onRangingResults method of the callback on the executor thread and pass the list of RangingResults . If there are no ranging results set it will pass RangingResultCallback . STATUS_CODE_FAIL to the onRangingFailure method of the callback also called on the executor thread .
476	Returns a stub typeface immediately .
477	Returns the ResourceTable for the compile time SDK .
478	Emits an xml - like representation of the view to System . out .
479	Returns the text contained within this view .
480	Returns the BroadcaseReceivers wrappers matching intent s action and permissions .
481	Enforces that BroadcastReceivers invoked during an ordered broadcast run serially passing along their results .
482	This is implemented in native code in the Android SDK .
483	Starts a new trace section with given name .
484	Ends the most recent active trace section .
485	Finds a provider for the given key .
486	Returns false on failure .
487	Execute all posted tasks and block until they are complete .
488	Executes the next queued task .
489	Provides a mock like interface for the requestAudioFocus method by storing the request object for later inspection and returning the value specified in setNextFocusRequestResponse .
490	Provides a mock like interface for the abandonAudioFocusRequest method by storing the request object for later inspection and returning the value specified in setNextFocusRequestResponse .
491	Starts the async encoding process by first reporting a format change event and then presenting an input buffer to the callback .
492	Returns the input or output buffer corresponding to the given index or null if invalid .
493	Triggers presentation of the corresponding output buffer for the given input buffer and passes the given metadata as buffer info .
494	Triggers presentation of the corresponding input buffer for the given output buffer if end of stream has not yet been signaled .
495	Simulates the operations done by the framework when there is a time change . If the time is changed the timestamps of all existing usage events will be shifted by the same offset as the time change in order to make sure they remain stable relative to the new time .
496	Goes through the meta data and puts each value in to a bundle as the correct type .
497	Convert SQL with phrase COLLATE LOCALIZED or COLLATE UNICODE to COLLATE NOCASE .
498	There is no copy constructor for PackageInfo
499	Returns whether a permission should be treated as granted to the package for backward compatibility reasons .
500	Modifies the component in place using .
501	Returns the index of the given permission in the PackageInfo . requestedPermissions array or - 1 if it s not found .
502	Adds a profile badge to the icon .
503	Returns whether the current user profile has a profile owner or a device owner .
504	Converts code points in a given string to actual characters . This method doesn t handle code points whose char counts are 2 . In other words this method doesn t handle U + 10XXXX .
505	Returns an object which provides accessors for invoking otherwise inaccessible methods and fields .
506	Retrieve information on the status of the given account .
507	Returns the content observers registered for updates under the given URI .
508	Adds a simulated display and drain the main looper queue to ensure all the callbacks are processed .
509	Changes properties of a simulated display . The original properties will be passed to the consumer which may modify them in place . The display will be updated with the new properties .
510	Forked from android . os . Debug
511	Search the bits provided for the next set bit after the value provided and reset the calendar .
512	Reset the calendar setting all the fields provided to zero .
513	Parse the given pattern expression .
514	Returns the index of the given method argument in the frame s local variables array .
515	Generates the instruction to push a local variable on the stack .
516	Generates the instruction to store the top stack value in a local variable .
517	Generates the instructions to load the given method arguments on the stack .
518	Generates the instructions to load all the method arguments on the stack as a single object array .
519	Generates the instruction to load the given local variable on the stack .
520	Generates the instruction to store the top stack value in the given local variable .
521	Generates the instructions to swap the top two stack values .
522	Generates the instructions to box the top stack value . This value is replaced by its boxed equivalent on top of the stack .
523	Generates the instructions to unbox the top stack value . This value is replaced by its unboxed equivalent on top of the stack .
524	Generates the instructions to jump to a label based on the comparison of the top two stack values .
525	Generates a get field or set field instruction .
526	Generates the instruction to push the value of a static field on the stack .
527	Generates the instruction to store the top stack value in a static field .
528	Generates the instruction to push the value of a non static field on the stack .
529	Generates the instruction to store the top stack value in a non static field .
530	Generates an invoke method instruction .
531	Generates the instruction to invoke a normal method .
532	Generates the instruction to invoke a constructor .
533	Generates the instruction to invoke a static method .
534	Generates the instruction to invoke an interface method .
535	Generates the instructions to create and throw an exception . The exception class must have a constructor with a single String argument .
536	Generates the instruction to check that the top stack value is of the given type .
537	Visit the implicit first frame of this method .
538	Starts the visit of a stack map frame .
539	Adds a method reference to the constant pool of the class being build . Does nothing if the constant pool already contains a similar item .
540	Adds a float to the constant pool of the class being build . Does nothing if the constant pool already contains a similar item .
541	Adds a string to the constant pool of the class being build . Does nothing if the constant pool already contains a similar item .
542	Adds a name and type to the constant pool of the class being build . Does nothing if the constant pool already contains a similar item .
543	Returns the constant pool s hash table item which is equal to the given item .
544	Puts one byte and two shorts into the constant pool .
545	Puts two bytes and one short into the constant pool .
546	Visits an enumeration value of the annotation .
547	Visits a nested annotation value of the annotation .
548	2 . width y x
549	Java s ImageIO can t process 4 - component images and Java2D can t apply AffineTransformOp either so convert raster data to RGB . Technique due to MArk Stephens . Free for any use .
550	Visits a parameter of this method .
551	Visits an annotation of this method .
552	Visits an annotation of a parameter this method .
553	Visits a type instruction . A type instruction is an instruction that takes the internal name of a class as parameter .
554	Visits a field instruction . A field instruction is an instruction that loads or stores the value of a field of an object .
555	Visits a method instruction . A method instruction is an instruction that invokes a method .
556	Visits a TABLESWITCH instruction .
557	Visits a LOOKUPSWITCH instruction .
558	Visits a MULTIANEWARRAY instruction .
559	Visits an annotation on a local variable type .
560	Visits a line number declaration .
561	Reads a stack map frame type and stores it at the given index in the given array .
562	Sets this frame to the given value .
563	Returns the output frame local variable type at the given index .
564	Sets the output frame local variable type at the given index .
565	Pushes a new type onto the output frame stack .
566	Returns the int encoding of the given type .
567	Pops the given number of types from the output frame stack .
568	Pops a type from the output frame stack .
569	Adds a new type to the list of types on which a constructor is invoked in the basic block .
570	Replaces the given type with the appropriate type if it is one of the types on which a constructor is invoked in the basic block .
571	Visits the source of the class .
572	Visits the enclosing class of the class . This method must be called only if the class has an enclosing class .
573	Visits an annotation of the class .
574	Visits an annotation on a type in the class signature .
575	Get part of one integer as a new integer
576	Returns the Java type corresponding to the given internal name .
577	Returns the Java types corresponding to the argument types of the given method descriptor .
578	Returns the Java type corresponding to the return type of the given method descriptor .
579	Computes the size of the arguments and of the return value of a method .
580	Returns the Java type corresponding to the given type descriptor . For method descriptors buf is supposed to contain nothing more than the descriptor itself .
581	Appends the descriptor corresponding to this Java type to the given string buffer .
582	Returns the descriptor corresponding to the given Java type .
583	Returns a JVM instruction opcode adapted to this Java type . This method must not be used for method types .
584	Puts a byte into this byte vector . The byte vector is automatically enlarged if necessary .
585	Puts two bytes into this byte vector . The byte vector is automatically enlarged if necessary .
586	Puts a short into this byte vector . The byte vector is automatically enlarged if necessary .
587	Puts a byte and a short into this byte vector . The byte vector is automatically enlarged if necessary .
588	Puts an int into this byte vector . The byte vector is automatically enlarged if necessary .
589	Puts a long into this byte vector . The byte vector is automatically enlarged if necessary .
590	Puts an UTF8 string into this byte vector . The byte vector is automatically enlarged if necessary .
591	Puts an array of bytes into this byte vector . The byte vector is automatically enlarged if necessary .
592	Enlarge this byte vector so that it can receive n more bytes .
593	Retrieves the column name for a given column position
594	Sets the column mapping to those passed in .
595	Returns the value for the given property cast to the passed returnType . If the type of the property and the given return type are not compatible an exception will be thrown . If the passed propertyName is not a defined property an exception is thrown .
596	Override default values for properties with the given ConfigurationProviders .
597	Factory method to create an IOCase from a name .
598	Converts the case of the input String to a standard format . Subsequent operations can then use standard String methods .
599	Returns the current value of this parameter for the given Change .
600	Sets the value of this parameter on the given change .
601	Returns a new empty array if the passed array is null .
602	Returns a new empty set if the passed array is null .
603	Extract the global parameter from the properties .
604	Sets the list of bind variables for the execution of a DML statement
605	Gets absolute and normalized path for path . If path is relative absolute path is calculated relative to change log file .
606	Parse the given storedCheckSum string value and return a new CheckSum object .
607	Compute a storedCheckSum of the given string .
608	Returns an isolated classloader .
609	Prints the settings that have been set of defaulted for the plugin . These will only be shown in verbose mode .
610	Parses a properties file and sets the associated fields in the plugin .
611	This method will check to see if the user has specified a value different to that of the default value . This is not an ideal solution but should cover most situations in the use of the plugin .
612	Writes the next line to the file .
613	checks to see if the line contains special characters .
614	Processes all the characters in a line .
615	Appends the character to the StringBuilder adding the escape character if needed .
616	Executes the Liquibase update .
617	Converts an object of a different type to the type used by this property . If types are not convertible an exception is thrown .
618	Returns the value currently stored in this property cast to the given type .
619	Overwrites the value currently stored in this property . It he passed type is not compatible with the defined type an exception is thrown .
620	Adds an alias for this property . An alias is an alternate to the name field that can be used by the ConfigurationProvers to look up starting values .
621	Sets the default value to use if no ConfigurationProviders override it . Throws an exception if the given object is not compatible with the defined type .
622	Generate a CREATE INDEX SQL statement for Firebird databases .
623	An imperfect heuristic to determine if an expression is more likely a column name or a computed expression .
624	Tags the database for future rollback
625	Display change log lock information .
626	Returns the ChangeSetStatuses of all changesets in the change log file and history in the order they would be ran .
627	Sets checksums to null so they will be repopulated next run
628	parse the values from a csvReader constructed from the passed in Reader .
629	Creates a single object from a line from the csv file .
630	Attempt to find custom property editor on descriptor first else try the propery editor manager .
631	Finds matching classes within a jar files that contains a folder structure matching the package structure . If the File is not a JarFile or does not exist a warning will be logged but no error will be raised .
632	Add the class designated by the fully qualified class name provided to the set of resolved classes if and only if it is approved by the Test supplied .
633	Tried to determine the appropriate reader method for a given propertyName of a given object and if found returns the class of its return type .
634	Examines the given object s class and returns true if reader and writer methods both exist for the given property name .
635	Tries to guess the real data type of propertyValue by the given propertyName then sets the selected property of the given object to that value .
636	Tries to find the Java method to read a given propertyName for the given object .
637	Tries to find the Java method to write a new value for a given propertyName to the given object .
638	Determines the class of a given object and returns an array of that class s methods . The information might come from a cache .
639	Sometimes an attribute in one object is a single - entity collection and on the other it is just the object . Check the passed potentialCollection and if it is a single - entry collection of the same type as the otherObject return just the collection element . Otherwise return the original collection .
640	Returns the list of all outgoing FOREIGN KEYS from this table
641	API method .
642	Synchronization among multiple JVM s .
643	Method used to simplify an entryName
644	Convenience method to check wither a given ChangeSetFilter type is a reason for running the change set or not .
645	Checks whether a result set has a column matching the specified column name . The column name is first changed to match the database format . E . g . an unquoted columnName in h2 will be converted to uppercase so the column name that is being checked for is really the uppercase version of the column name
646	Re - initialize the configuration with the given ConfigurationProviders . Any existing AbstractConfigurationContainer instances are reset to defaults .
647	Executes RawSqlStatements particular to each database engine to set the default schema for the given Database
648	Static so it can be used in other comparators if needed
649	Method to map validate option for FK . This thing works only for ORACLE
650	Adds a new DatabaseObject type to the list of object types to be included in snapshots .
651	Executed automatically when the bean is initialized .
652	Returns the trimmed value of the string only if the property the string is describing should be trimmed to be converted to that type .
653	Convert a string value to its Object value .
654	Entry point . This is what gets executes when starting this program from the command line . This is actually a simple wrapper so that an errorlevel of ! = 0 is guaranteed in case of an uncaught exception .
655	What the number 2 stands for is obvious from the context
656	Returns true if the given arg is a valid main command of Liquibase .
657	Returns true if the given main command arg needs no special parameters .
658	Extract a single object from a JAR file into a temporary file .
659	Open a property file that is embedded as a Java resource and parse it .
660	On windows machines it splits args on = signs . Put it back like it was .
661	After parsing checks if the given combination of main command and can be executed .
662	Checks for missing command line parameters and if any problems are found returns the list of issues in String form .
663	Checks for incorrectly written command line parameters and if any problems are found returns the list of issues in String form .
664	Reads various execution parameters from an InputStream and sets our internal state according to the values found .
665	If any errors have been found print the list of errors first then print the command line help text .
666	Print instructions on how to use this program from the command line .
667	Parses the command line options . If an invalid argument is given a CommandLineParsingException is thrown .
668	Returns the value for a command line parameter of the form parameterName = value or defaultValue if that parameter has not been specified by the user .
669	Convenience method for converting a string to an Integer object
670	Returns true if the passed runtime labels match this label expression
671	Checks if a specific object is present in a database
672	Creates a database snapshot for a given array of DatabaseObjects
673	Creates a DatabaseSnapshot for a single DatabaseObject .
674	Iterates through all the FOREIGN KEYs of the target table and outputs a list of DropForeignKeyConstraintChanges for a given database type .
675	Clean a directory without deleting it .
676	Splits a candidate multi - line SQL statement along ; s and go s .
677	Adds spaces to the right of the input value until the string has reached the given length . Nothing is done if the string already has the given length or if the string is even longer .
678	Adds spaces to the left of the input value until the string has reached the given length . Nothing is done if the string already has the given length or if the string is even longer .
679	Produce a random identifer of the given length consisting only of uppercase letters .
680	Strips the comments and whitespaces from the end of given sql string .
681	Concatenates the addition string to the baseString string adjusting the case of addition to match the base string . If the string is all caps append addition in all caps . If all lower case append in all lower case . If baseString is mixed case make no changes to addition .
682	Fetches an array of Strings with the catalog names in the database .
683	Adds a new clause at the end of the list with the given key .
684	Adds a new sub - clause at the end of the list with the given key .
685	Adds a clause with the given key to the beginning of the list .
686	Inserts a new clause before the given key . Throws IllegalArgumentException if the existingKey does not exist .
687	Inserts a new clause after the given key . Throws IllegalArgumentException if the existingKey does not exist .
688	Retrieves the given key . Returns null if not set . If clause at key is a StringClause return the string version of it . Will traverse sub - clauses to find the key .
689	Retrieves the given key . Returns null if not set . If clause at key is a String return a new StringClause version of it . Will traverse sub - clauses to find the key .
690	Prints changeLog that would bring the target database to be the same as the reference database
691	Returns instances of all implemented database types .
692	Returns instances of all internal database types .
693	Validates the correct state of this data type against a given database .
694	Transforms this data type into the native data type of the target DBMS .
695	Returns the value object in a format to include in SQL . Quote if necessary .
696	Determines if the given function name refers to the function that returns the current time and date for a specific DBMS . Also returns true if the name returns the Liquibase wildcard CURRENT_DATE_TIME_PLACE_HOLDER which will later be translated into the appropriate function .
697	boolean data type column are allowed for versions > = 11 . 1 . 1 . 1
698	Recursive way of building CONCAT instruction
699	Return true if the SqlStatement class queries the database in any way to determine Statements to execute . If the statement queries the database it cannot be used in updateSql type operations
700	Adds the artifact file into the set of URLs so it can be used in a URLClassLoader .
701	Recursively searches for the field specified by the fieldName in the class and all the super classes until it either finds it or runs out of parents .
702	Return alternate options for the given path that the user maybe meant . Return in order of likelihood .
703	Returns true if the passed runtime contexts match this context expression
704	Creates a suitable ResourceAccessor for use in an Ant task ..
705	Convenience method to safely close the database connection .
706	Appends the next character in the line to the stringbuffer .
707	Checks to see if the character after the index is a quotation character .
708	Checks to see if the character after the current index in a String is an escapable character . Meaning the next character is either a quotation character or the escape char and you are inside quotes .
709	Returns all child nodes with the given namespace and name . If none match an empty list is returned . Returned list is unmodifiableList .
710	Sets the value of this ParsedNode . If the passed value is a ParsedNode it is added as a child not as the value . If the passed value is a Map it is converted to a ParsedNode and added as a child not as the value . If the passed value is a Collection each object is added as a child if it is a ParsedNode or a Map . If there are multiple simple values in a passed collection value is set to a List . If there is a single value in a collection value is set to the single value .
711	Return the value associated with this node converted to the given type .
712	Returns the ParsedNode defined by the given namespace and name .
713	Returns the value of the given node converted to the passed type .
714	Returns the value of the given node with no conversion attempted .
715	Close the streams in this collection .
716	Mainly for postgres check if the column is a serial data type .
717	Returns true if the given path is a compressed file .
718	Returns the column object for the given columnName . If the column does not exist in this table return null .
719	Looks up the singleton object of the given type . If the singleton has not been created yet it will be instantiated . The singleton is a singleton based on the root scope and the same object will be returned for all child scopes of the root .
720	Tags the database changelog with the given string .
721	Create a new Precondition subclass based on the given tag name .
722	Checks if date starts with NOW or TODAY .
723	Return the value of a parameter
724	Method to map validate option for UC . This thing works only for ORACLE
725	Gets an SQL query that returns the constraint names and columns for all UNIQUE constraints .
726	Return the parameters of the given change that are set to a non - null value . Will never return a null map only an empty or populated map .
727	Returns the required parameters for this change for the given database . Will never return a null map only an empty or populated map .
728	Copied and modified from liquibase . sqlgenerator . core . InsertOrUpdateGeneratorMySQL
729	Returns the fields on this change that are serializable .
730	Does the work of getting the path .
731	Creates an index map of column names to column position .
732	Gets the column index that corresponds to a specific colum name . If the CSV file doesn t have a header row this method will always return null .
733	Gets the property descriptor for a given column position .
734	Gets the field for a given column position .
735	Get the column name for a given column position .
736	Find the property descriptor for a given column .
737	Find the field for a given column .
738	Determines if the name of a property descriptor matches the column name . Currently only used by unit tests .
739	builds a map of property descriptors for the Bean .
740	gets a column name .
741	Setter for the ColumnMappings .
742	Return the size of this data type definition . If unknown or unspecified return - 1
743	Checks to see if the string is an acceptable computed value for HSQL datetime columns are the only columns for which HSQL supports computer values .
744	Return the change sets that will execute
745	This has special case logic to handle NOT quoting column names if they are of type LiquibaseColumn - columns in the DATABASECHANGELOG or DATABASECHANGELOGLOCK tables .
746	Set the number this column should be set to . Supports integers and decimals and strips off any wrapping parentheses . If the passed value cannot be parsed as a number in US locale it is assumed to be a function that returns a number . If the value null is passed it will set a null value .
747	Set the valueBoolean based on a given string . If the passed value cannot be parsed as a date it is assumed to be a function that returns a boolean . If the string null or an empty string is passed it will set a null value . If 1 is passed defaultValueBoolean is set to true . If 0 is passed defaultValueBoolean is set to false
748	Set the defaultValueBoolean based on a given string . If the passed value cannot be parsed as a date it is assumed to be a function that returns a boolean . If the string null or an empty string is passed it will set a null value . If 1 is passed defaultValueBoolean is set to true . If 0 is passed defaultValueBoolean is set to false
749	Unregister all instances of a given Change name . Normally used for testing but can be called manually if needed .
750	Returns all defined changes in the registry . Returned set is not modifiable .
751	Create a new Change implementation for the given change name . The class of the constructed object will be the Change implementation with the highest priority . Each call to create will return a new instance of the Change .
752	Displays swing - based dialog about running against a non - localhost database . Returns true if the user selected that they are OK with that .
753	Overwrite this method to get the default schema name for the connection . If you only need to change the statement that obtains the current schema then override
754	Default implementation just look for local IPs . If the database returns a null URL we return false since we don t know it s safe to run the update .
755	Takes a list of SqlVisitors and returns a new list with only the SqlVisitors set to apply to rollbacks
756	Most relational databases support 9 fractional digits and subclasses must overwrite this method if they support less than that .
757	Catch any characters that will cause problems when parsing the XML down the road .
758	create a XML node with nodeName and simple text content
759	Throws exception if passed object is null
760	package private to facilitate testing
761	Create a new Change subclass based on the given tag name .
762	Returns Local Host IP Address
763	Returns Local Host Name
764	Convenience method for when the schemaName is set but we don t want to parse the body
765	Convenience method for other classes similar to this that want to be able to modify the procedure text to add the schema
766	Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order . The returned array will be double the length of the passed array as it takes two characters to represent any given byte .
767	Fetches an array of Strings with the schema names in the database .
768	Reads the next line from the buffer and converts to a string array .
769	Reads the next line from the file .
770	Checks to see if the file is closed .
771	Start polling the configuration source with the specified scheduler .
772	Adds a listener to the pathChildrenCache initializes the cache then starts the cache - management background thread
773	The folder where the application s properties files are located .
774	Create a new property whose value is an integer and subject to change on - the - fly .
775	Create a new property whose value is a long and subject to change on - the - fly .
776	Create a new property whose value is a boolean and subject to change on - the - fly .
777	Create a new property whose value is a float and subject to change on - the - fly .
778	Create a new property whose value is a double and subject to change on - the - fly .
779	Scan the table in dynamo and create a map with the results . In this case the map has a complex type as the value so that Deployment Context is taken into account .
780	Gets the DynamicProperty for a given property name . This may be a previously constructed object or an object constructed on - demand to satisfy the request .
781	return true iff _some_ value actually changed
782	Add the callback to be triggered when the value of the property is changed
783	Remove all callbacks registered through this instance of property
784	Expects property value to be of the form &lt ; uriRegex&gt ; OR &lt ; HTTP Verb name&gt ; &lt ; space&gt ; &lt ; uriRegex&gt ;
785	Load properties from InputStream with utf - 8 encoding and it will take care of closing the input stream .
786	Need to override this method for PDCLOUD - 1809 .
787	Updates the properties in the config param given the contents of the result param .
788	Add or update the property in the underlying config depending on if it exists
789	Delete a property in the underlying config
790	Clear the map and fire corresonding events .
791	Utility method to get a Properties object from this Configuration
792	Do an initial poll from the source and apply the result to the configuration .
793	Add a configuration with a name at a particular index .
794	Remove a configuration . The container configuration cannot be removed .
795	Removes the configuration with the specified name .
796	Get all the keys contained by sub configurations .
797	Get the list of the keys contained in the sub configurations that match the specified prefix .
798	Check if the any of the sub configurations contains the specified key .
799	Get a List of objects associated with the given configuration key . If the key doesn t map to an existing object the default value is returned .
800	Get an array of strings associated with the given configuration key . If the key doesn t map to an existing object an empty array is returned
801	Load resource configName . properties first . Then load configName - deploymentEnvironment . properties into the system wide configuration . For example if configName is application and deployment environment is test this API will first load application . properties then load application - test . properties to override any property that also exist in application . properties .
802	Load properties from the specified configuration into system wide configuration
803	Load the specified properties into system wide configuration
804	Retrieve the content of the property files . For each poll it always returns the complete union of properties defined in all URLs . If one property is defined in content of more than one URL the value in file later on the list will override the value in the previous one .
805	The angle relative to the direction EAST .
806	An overridden implementation that heavily favors read access over write access speed . This is thread - safe .
807	in gigabyte per hour
808	Returns the JavaBeans property name of the given member .
809	Checks whether the given method is a valid getter method according to the JavaBeans standard .
810	Add a hard constraint of specified weighting .
811	Add a medium level constraint of specified weighting .
812	Add a soft constraint match of specified weighting .
813	Cleans the URL .
814	Not incremental .
815	Only called if Drools score calculation is used .
816	Calculates an indication on how big this problem instance is . This is intentionally very loosely defined for now .
817	Generates a task name for the request .
818	Check whether per - request timeout is specified in the given request context .
819	check whether we need to apply timeout to a rest . li request task .
820	Apply timeout to a ParSeq rest . li request task through parseq timer task .
821	Return task that has general HTTP status and body information based on the build task s result .
822	Returns task that builds graph using graphviz . Returned task might be shared with other concurrent requests .
823	Returns new task that builds graph using graphviz .
824	Writes error info to a String .
825	Need to fix in the next major version release .
826	This method returns Task that returns value for a single key allowing this strategy to batch operations .
827	Overriding this method allows providing custom name for a batch . Name will appear in the ParSeq trace as a description of the task that executes the batch .
828	Allows consuming histogram and returning a result . Histogram passed to the consumer includes stable consistent view of all values accumulated since last harvest . This method is thread safe .
829	Default configuration map must specify default values for all properties .
830	Composes transformation with the transformation of the predecessor .
831	Create new FusionTask with an async predecessor .
832	Sets an engine related property on the engine . That property can then be accessed by tasks via the Context .
833	Creates a new promise that is already resolved with the given value .
834	Copies the value or error from the source promise to the destination promise .
835	handles failures delivering degraded experience
836	handles failures delivering degraded experience in timely fashion
837	create list of summaries one per each connection
838	Creates a task that will run another task as a side effect once the primary task completes successfully . The side effect will not be run if the primary task fails or is canceled . The entire task is marked done once the base task completes even if the side effect has not been run .
839	Creates a new task that wraps the given task . If the given task finishes before the timeout occurs then this task takes on the value of the task . If the task does not complete in the given time then this task will have a TimeoutException . The wrapped task may be cancelled when a timeout occurs .
840	Finds node with next lowest sequence number than the given node within the given list of nodes .
841	Concatenate stack traces if kept the original stack trace from the task creation
842	Main loop of monitoring thread .
843	Check how much we missed scheduled wake up and if it is larger than _minStallNano then consider it a stall and remember it .
844	A helper for creating task wrapper with associated retry policy .
845	Create a wrapped task with associated recovery task that will retry if necessary .
846	Invoke event monitors and schedule a retry if policy allows .
847	Starts a retriable task
848	Generates a consistent exception that can be used if coercion fails .
849	Sets the underlying Rest . li client implementation .
850	Try to acquire the lock within the given deadline .
851	Try to release the lock .
852	rate limiter and then from plan class level rate limit if specified .
853	Returns raw http client . If client has not been initialized yet then new client is created with default configuration .
854	Initializes HttpClient with custom configuration .
855	Read characters until the first of any delimiters is found .
856	Validates that the array contains no null elements
857	Validates that the string is not empty
858	delims are whitespace or s
859	Gets a sorted filtered list of files stored in this gridfs .
860	Finds a list of files matching the given filename .
861	Finds a list of files matching the given query .
862	Removes the file matching the given id .
863	Removes all files matching the given query .
864	Puts a value at an index . For interface compatibility . Must be passed a String that is parsable to an int .
865	Gets a value at an index . For interface compatibility . Must be passed a String that is parsable to an int .
866	Creates a new builder for ClassTypeData
867	Gets the maximum execution time on the server for this operation . The default is 0 which places no limit on the execution time .
868	Creates a new compressor from this compressor with the given property added to it .
869	Get the name of the replica set .
870	Gets the ServerAddress of the master server in this replica set .
871	Checks to see if a given server is the primary server in this replica set .
872	Gets the maximum size for a BSON object supported by the current master server . Note that this value may change over time depending on which server is master .
873	Adds a new key to the query if not present yet . Sets this key as the current key .
874	Apply majority write concern if the commit is to be retried .
875	Gets the ok field which is whether this command executed correctly or not .
876	Gets the error message associated with a failed command .
877	Sets the read annotations to be applied when serializing to BSON
878	Get a list of index names for the given list of index models
879	Convenience method to generate an index name from the set of fields it is over .
880	Verifies that the MD5 matches between the database and the local file . This should be called after transferring a file .
881	Gets the Codec mapped to the given bson type .
882	Returns the batchSize to be used with the cursor .
883	Equivalent to Long . parseUnsignedLong in Java 8 .
884	Creates a child context and then deserializes using the reader .
885	Checks if this writer s current state is in the list of given states .
886	Reads a single document from the given BsonReader and writes it to this appending the given extra elements to the document .
887	Pipe a list of extra element to this writer
888	Convert to a byte array . Note that the numbers are stored in big - endian order .
889	Convert to bytes and put those bytes to the provided ByteBuffer . Note that the numbers are stored in big - endian order .
890	Converts this instance into a 24 - byte hexadecimal string representation .
891	Returns a short pretty description for this ServerDescription .
892	Creates an object builder from an existing map of key value pairs .
893	Creates an new empty object and inserts it into the current object with the given key . The new child object becomes the active one .
894	Add a result
895	Add an error result
896	Add a write error result
897	Add a list of error results and a write concern error
898	Gets the combined errors as an exception
899	compareAndSet next link
900	Returns next node ignoring deletion marker .
901	Returns the next non - deleted node swinging next pointer around any encountered deleted nodes and also patching up successor s prev link to point back to this . Returns null if this node is trailer so has no successor .
902	Returns the previous non - deleted node patching up pointers as needed . Returns null if this node is header so has no successor . May also return null if this node is deleted so doesn t have a distinct predecessor .
903	Returns the next node containing a nondeleted user element . Use for forward list traversal .
904	Returns previous node containing a nondeleted user element if possible . Use for backward list traversal but beware that if this method is called from a deleted node it might not be able to determine a usable predecessor .
905	Tries to insert a node holding element as successor failing if this node is deleted .
906	Tries to insert a node holding element as predecessor failing if no live predecessor can be found to link to .
907	Tries to mark this node as deleted failing if already deleted or if this node is header or trailer .
908	Tries to insert a node holding element to replace this node . failing if already deleted . A currently unused proof of concept that demonstrates atomic node content replacement .
909	Unlocks the MongoDB server allowing write operations to go through .
910	Chooses the servers from the given cluster than match this read preference .
911	Gets a read preference that forces reads to the primary if available otherwise to a secondary .
912	Gets a read preference that forces reads to a secondary that is less stale than the given maximum .
913	Gets a read preference that forces reads to a secondary that is less stale than the given maximumm if one is available otherwise to the primary .
914	Gets a read preference that forces reads to a primary or a secondary that is less stale than the given maximum .
915	Gets a read preference that forces reads to the primary if available otherwise to a secondary with the given set of tags that is less stale than the given maximum .
916	Gets a read preference that forces reads to a secondary with the given set of tags that is less stale than the given maximum .
917	Gets a read preference that forces reads to a secondary with the given set of tags that is less stale than the given maximum or the primary is none are available .
918	Gets a read preference that forces reads to the primary or a secondary with the given set of tags that is less stale than the given maximum .
919	Gets a read preference that forces reads to the primary if available otherwise to a secondary with one of the given sets of tags that is less stale than the given maximum .
920	Gets a read preference that forces reads to the primary or a secondary with one of the given sets of tags that is less stale than the given maximum .
921	Creates a read preference from the given read preference name .
922	Creates a taggable read preference from the given read preference name and list of tag sets .
923	Creates a taggable read preference from the given read preference name list of tag sets and max allowable staleness of secondaries .
924	Reads bytes from the input stream and puts them into the given byte buffer .
925	Reads and returns a single integer value from the input stream .
926	Reads and returns a single integer value from the buffer .
927	Reads and returns a single big - endian integer value
928	Reads and returns a single long value from the input stream .
929	Gets the credentials in an immutable list . The list will be empty if no credentials were specified in the connection string .
930	gets a random server that still exists in the cluster . Returns null if there are none .
931	Create a new client with the given connection string .
932	Copies this instance into a new Object .
933	Creates a new Class Model builder instance using reflection .
934	Gets a collection with a given name .
935	Drops this database . Removes all data on disk . Use with caution .
936	Returns a set containing the names of all collections in this database .
937	Executes a database command with the selected readPreference and encodes the command using the given encoder .
938	Executes the command against the database with the given read preference .
939	Checks to see if a collection with a given name exists on a server .
940	Evaluates JavaScript functions on the database server . This is useful if you need to touch a lot of data lightly in which case network transfer could be a bottleneck .
941	Helper method for calling a dbStats command . It returns storage statistics for a given database .
942	Removes the specified user from the database .
943	Determines the read preference that should be used for the given command .
944	Gets a Codec but if it detects a cyclic dependency return a LazyCodec which breaks the chain .
945	Insert a document into a collection . If the collection does not exists on the server then it will be created . If the new document does not contain an _id field it will be added .
946	Modify an existing document or documents in collection .
947	Get a single document from collection by _id .
948	Change the name of an existing collection .
949	Allows you to run map - reduce aggregation operations over a collection and saves to a named collection .
950	Return the explain plan for the aggregation pipeline .
951	Forces creation of an index on a set of fields if one does not already exist .
952	Creates an index on the field specified if that index does not already exist .
953	Atomically remove and return a single document . The returned document is the original document before removal .
954	Set a custom decoder factory for this collection . Set to null to use the default from MongoOptions .
955	Set a custom encoder factory for this collection . Set to null to use the default from MongoOptions .
956	Return a list of the indexes for this collection . Each object in the list is the info document from MongoDB
957	Drops an index from this collection . The DBObject index parameter must match the specification of the index to drop i . e . correct key name and type must be specified .
958	Drops the index with the given name from this collection .
959	Checks whether this collection is capped
960	Sets the internal class for the given path in the document hierarchy
961	Gets the internal class for the given path in the document hierarchy
962	Creates an update that sets the value of the field with the given name to the given value .
963	Creates an update that sets the value of the field with the given name to the given value but only if the update is an upsert that results in an insert of a document .
964	Creates an update that renames a field .
965	Creates an update that increments the value of the field with the given name by the given value .
966	Creates an update that multiplies the value of the field with the given name by the given number .
967	Creates an update that sets the value of the field to the given value if the given value is less than the current value of the field .
968	Creates an update that sets the value of the field to the given value if the given value is greater than the current value of the field .
969	Creates an update that adds the given value to the array value of the field with the given name unless the value is already present in which case it does nothing
970	Creates an update that adds each of the given values to the array value of the field with the given name unless the value is already present in which case it does nothing
971	Creates an update that adds the given value to the array value of the field with the given name .
972	Creates an update that adds each of the given values to the array value of the field with the given name .
973	Creates an update that removes all instances of the given value from the array value of the field with the given name .
974	Creates an update that removes from an array all elements that match the given filter .
975	Creates an update that removes all instances of the given values from the array value of the field with the given name .
976	Write the query prologue to the given BSON output .
977	If there was a socket exception that wasn t some form of interrupted read increment the generation count so that any connections created prior will be discarded .
978	Helper method that walks superclass and interface graph superclasses first then interfaces to compute an ancestry list . Super types are visited left to right . Duplicates are removed such that no Class will appear in the list before one of its subtypes .
979	Creates replace options from updateOptions .
980	Decodes the given Base64 - encoded string .
981	Encodes the given byte array into a Base64 - encoded string .
982	Gets the address of the current master
983	Get the status of the replica set cluster .
984	Gets a list of the names of all databases on the connected server .
985	Forces the master server to fsync the RAM data to disk This is done automatically by the server at intervals but can be forced for better reliability .
986	Forces the master server to fsync the RAM data to disk then lock all writes . The database will be read - only after this command returns .
987	Unlocks the database allowing the write operations to go through . This command may be asynchronous on the server which means there may be a small delay before the database becomes writable .
988	Gets this value as a BsonNumber if it is one otherwise throws exception
989	Creates a new connectionId with the set server value
990	Starting with children and going back to parents
991	Converts to GeoJSON representation
992	Executing this will return a cursor with your results and the statistics in .
993	Gets the time to live for documents in the collection
994	Turns this group command into the DBObject format of the command .
995	Gets the logical session timeout in minutes or null if at least one of the known servers does not support logical sessions .
996	Returns the Set of all server descriptions in this cluster sorted by the String value of the ServerAddress of each one .
997	Returns the ServerDescription for the server at the given address
998	While it may seem counter - intuitive that a MongoDB cluster can have more than one primary it can in the case where the client s view of the cluster is a set of mongos servers any of which can serve as the primary .
999	Get a list of all the secondaries in this cluster
1000	Get a list of all the secondaries in this cluster that match a given TagSet
1001	Gets a list of ServerDescriptions for all the servers in this cluster which are currently accessible .
1002	Gets a list of all the primaries and secondaries in this cluster .
1003	Gets a list of all the primaries and secondaries in this cluster that match the given replica set tags .
1004	Returns a short pretty description for this ClusterDescription .
1005	Creates a MongoCredential instance with an unspecified mechanism . The client will negotiate the best mechanism based on the version of the server that the client is authenticating to .
1006	Creates a MongoCredential instance for the SCRAM - SHA - 256 SASL mechanism .
1007	Creates a MongoCredential instance for the PLAIN SASL mechanism .
1008	Creates a new MongoCredential as a copy of this instance with the specified mechanism property added .
1009	Creates a new MongoCredential with the set mechanism . The existing mechanism must be null .
1010	Get the value of the given key to a mechanism property or defaultValue if there is no mapping .
1011	Gets a copy of the buffered bytes .
1012	Assign a ObjectSerializer to perform a type specific serialization scheme
1013	Sets whether this will update all documents matching the query filter .
1014	Encoded the message to the given output .
1015	Writes the message prologue to the given output .
1016	Appends a document to the message .
1017	Appends a document to the message that is intended for storage in a collection .
1018	Backpatches the message length into the beginning of the message .
1019	Creates a new chunk of this file . Can be over - ridden if input files need to be split into chunks using a different mechanism .
1020	Creates a copy of an existing database cursor . The new cursor is an iterator even if the original was an array .
1021	Checks if there is another object available .
1022	Non blocking check for tailable cursors to see if another object is available .
1023	Converts this cursor to an array .
1024	Returns the first document that matches the query .
1025	Gets the default read preference .
1026	Get the read concern for this collection .
1027	Puts a new value into the document .
1028	Deals with encoding database references .
1029	Create an unacknowledged BulkWriteResult
1030	Gets the underlying socket address
1031	Gets all underlying socket addresses
1032	Creates a filter that matches all documents where the value of the field name does not equal the specified value .
1033	Creates a filter that matches all documents where the value of the given field is greater than the specified value .
1034	Creates a filter that matches all documents where the value of the given field is less than the specified value .
1035	Creates a filter that matches all documents where the value of the given field is greater than or equal to the specified value .
1036	Creates a filter that matches all documents where the value of the given field is less than or equal to the specified value .
1037	Creates a filter that preforms a logical OR of the provided list of filters .
1038	Creates a filter that performs a logical NOR operation on all the specified filters .
1039	Creates a filter that matches all documents that either contain or do not contain the given field depending on the value of the exists parameter .
1040	Creates a filter that matches all documents matching the given search term using the given language .
1041	Creates a filter that matches all documents matching the given the search term with the given text search options .
1042	Creates a filter that matches all documents containing a field that is an array where at least one member of the array matches the given filter .
1043	Creates a filter that matches all documents containing a field with grid coordinates data that exist entirely within the specified box .
1044	Creates a filter that matches all documents containing a field with grid coordinates data that exist entirely within the specified polygon .
1045	Creates a filter that matches all documents containing a field with grid coordinates data that exist entirely within the specified circle .
1046	Creates a filter that matches all documents containing a field with geospatial data that is near the specified GeoJSON point .
1047	Creates a filter that matches all documents containing a field with geospatial data that is near the specified point .
1048	Converts a sequence of regular expression modifiers from the database into Java regular expression flags .
1049	Converts a regular expression modifier from the database into Java regular expression flags .
1050	Converts Java regular expression flags into regular expression modifiers from the database .
1051	Set the text index version number .
1052	Sets the 2dsphere index version number .
1053	Copy this DBCollectionFindOptions instance into a new instance .
1054	Cast an object to the given class and return it or throw IllegalArgumentException if it s not assignable to that class .
1055	over an array of ByteBuffer instances from a PooledByteBufferOutputBuffer
1056	Executes a bulk write operation .
1057	Specifies that the request being built should be an upsert .
1058	Specifies that the request being built should use the given array filters for an update . Note that this option only applies to update operations and will be ignored for replace operations
1059	Executing this will return a cursor with your results in .
1060	Initializes the mongod library for use .
1061	Creates a new client .
1062	Closes down the mongod library
1063	Enable SNI if running on Java 8 or later . Otherwise fail silently to enable SNI .
1064	Gets the type byte for a given object .
1065	Turns this command into a DBObject representation of this map reduce command .
1066	Returns a short pretty description for these ClusterSettings .
1067	Create an acknowledged UpdateResult
1068	The content type of the file
1069	The aliases for the file
1070	Gets the first key in this document or null if the document is empty .
1071	Creates a child context based on this and serializes the value with it to the writer .
1072	Gets this read concern as a document .
1073	be copied into a single byte array . For that reason the compress method defined in the base class can t be used .
1074	Returns the value of a field as a string
1075	Returns the value of a field as a boolean
1076	Returns the object id or def if not set .
1077	Returns the date or def if not set .
1078	create a copy of from but with keys ordered alphabetically
1079	Gets the credential that this client authenticates all connections with
1080	Creates a client session .
1081	Gets the wTimeout in the given time unit .
1082	Gets this write concern as a document .
1083	Returns true if this write concern indicates that write operations must be acknowledged .
1084	Constructs a new WriteConcern from the current one and the specified integer - based value for w
1085	Constructs a new WriteConcern from the current one and the specified tag - set based value for w
1086	Constructs a new WriteConcern from the current one and the specified wTimeout in the given time unit .
1087	Create a Majority Write Concern that requires a majority of servers to acknowledge the write .
1088	Add an insert request to the bulk operation
1089	Start building a write request to add to the bulk write operation . The returned builder can be used to create an update replace or remove request with the given query .
1090	Execute the bulk write operation with the default write concern of the collection from which this came . Note that the continueOnError property of the write concern is ignored .
1091	Creates a new instance which is a copy of this BasicDBObject .
1092	Create an index key for a geohaystack index on the given field .
1093	Gets the index names .
1094	If the document does not contain the given key return the given default value . Otherwise gets the value of the key .
1095	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonDocument .
1096	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonArray .
1097	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonNumber .
1098	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonInt32 .
1099	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonInt64 .
1100	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonDecimal128 .
1101	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonDouble .
1102	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonBoolean .
1103	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonString .
1104	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonDateTime .
1105	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonTimestamp .
1106	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonObjectId .
1107	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonBinary .
1108	If the document does not contain the given key return the given default value . Otherwise gets the value of the key as a BsonRegularExpression .
1109	Intended use of the channel group is with sockets that run tasks internally but out of tolerance run tasks in thread in case the socket does not .
1110	A helper to convert an document of type Object to a BsonDocument
1111	Throw IllegalArgumentException if the value is null .
1112	Throw IllegalStateException if the condition if false .
1113	Gets a property by the property name .
1114	Creates a new ClassModel instance based on the mapping data provided .
1115	Gets the options to apply .
1116	Returns the wrapper if this object can be assigned from this class .
1117	Returns an existing Wrapper instance associated with a class or creates a new one .
1118	Returns the binary as a UUID . The binary type must be 4 .
1119	Returns the binary as a UUID .
1120	Parse an unknown type .
1121	Read the current character making sure that it is a hexidecimal character .
1122	Advances the position in the string past any whitespace .
1123	Parses a string .
1124	Parses a number .
1125	Advances the pointer through the exponent .
1126	Parses the next array .
1127	Adds a request to update one document in the collection that matches the query with which this builder was created .
1128	Creates a new connection description with the set connection id
1129	Create an acknowledged WriteConcernResult
1130	Create an unacknowledged WriteConcernResult
1131	Throws ClassCastException if any of the intermediate embedded values is not a Document .
1132	A ClassCastException will be thrown if an element in the list is not of type T .
1133	Merge the two provided transaction options with the first taking precedence over the second .
1134	call done when you are done with an object from the pool if there is room and the object is ok will get added
1135	Gets an object from the pool - will block if none are available
1136	Clears the pool of all objects .
1137	Pipe the raw bytes into the given output stream .
1138	Throws an InvalidOperationException when the method called is not valid for the current ContextType .
1139	Throws an InvalidOperationException when the method called is not valid for the current state .
1140	Verifies the current state and BSONType of the reader .
1141	Verifies the name of the current element .
1142	Ensures any conditions are met before reading commences . Throws exceptions if the conditions are not met .
1143	Returns a Decimal128 value representing the given String .
1144	Gets a BigDecimal that is equivalent to this Decimal128 .
1145	May have leading zeros . Strip them before considering making this method public
1146	Sets the hint for which index to use . A null value means no hint is set .
1147	Gets this collation options as a document .
1148	Writes the file s data to a file on disk .
1149	Writes the file s data to an OutputStream .
1150	Removes file from GridFS i . e . removes documents from files and chunks collections .
1151	Sets the sort direction for sorting array elements that are not documents .
1152	Sets the sort direction for sorting array elements that are documents .
1153	Returns the namespace
1154	Returns the database name
1155	Creates the codec for the specific ChangeStreamOutput type
1156	Gets an instance of a builder initialized with the given options
1157	Reset all settings to the default .
1158	Copy this MongoOptions instance into a new instance .
1159	Helper method to return the appropriate WriteConcern instance based on the current related options settings .
1160	Generate UserAgent string for given service .
1161	Populates default properties during
1162	Checks that the JSON Node is a valid User Group to extract User Groups from
1163	Converts UserGroup list to Set of GrantedAutorities
1164	Get ServiceEndpoints data for the given environment .
1165	Declare AADAuthenticationFilter bean .
1166	HTTP GET ALL
1167	Add the given path to the watcher .
1168	Build assets using the given distribution and write output to the provided directory .
1169	Print a summary of the given results .
1170	Register the given directory with the WatchService
1171	Defines a new property .
1172	Get a RAML type from string .
1173	Append a kind filter .
1174	Set a handlebars callback .
1175	Advanced configuration of main registry .
1176	Set a configuration callback .
1177	Add a form auth client .
1178	Add a basic auth client .
1179	Resolve the deferred value and handle it . This method will send the response to a client and cleanup and close all the resources .
1180	Get a path for the given pattern . If the path doesn t exist a new path will be created .
1181	Register a Java type and produces an equivalent RAML type . It returns an existing RAML type if the Java type was registered already .
1182	Convert this RAML object to Yaml .
1183	Get status codes .
1184	Status code .
1185	Set status code map .
1186	Set media type .
1187	package for test .
1188	Set media types .
1189	Get or create a query parameter using the giving name .
1190	Get or create a form parameter using the giving name .
1191	Get or create a header parameter using the giving name .
1192	Get or create a response using the given status code .
1193	Setup a configurer callback .
1194	Read the specified number of bytes into an array .
1195	Creates a Requery module with RxJava data store .
1196	Creates a Requery module with Reactor data store .
1197	Creates an async Requery module with Java 8 data store .
1198	Creates a Kotlin Requery module .
1199	Set JavaScript escape type and level .
1200	Set HTML escape type and level .
1201	Set JSON escape type and level .
1202	Set CSS escape type and level .
1203	Read an object path and optionally filter some child paths .
1204	Generate a CSS rule it reads the width and height attributes of the svg element or fallback to viewBox attribute .
1205	Parse a css size unit value like 10px or 18 . 919px and optionally round the value to the closest integer .
1206	Write content to file .
1207	Use a named key for accessing to the request scoped Handle .
1208	Mostly for kotlin null safe operator and immutable properties .
1209	Server sent event will send a Last - Event - ID header if the server goes down .
1210	Send an event .
1211	Set a model attribute and override existing attribute .
1212	Set model attributes and override existing values .
1213	Constructs a new AssetClassLoader that includes the public dir if present in the current working dir
1214	Constructs a new AssetClassLoader that includes the public dir if present in the provided working dir
1215	Set route attributes .
1216	Set route attribute .
1217	Find a parameter by name and invoke the given callback .
1218	Return the enum constant of this type with the specified numeric value .
1219	Configurer a jdbi instance .
1220	Munge up the SQL as desired . Responsible for figuring out ow to bind any arguments in to the resultant prepared statement .
1221	Send an asset to the client .
1222	Configure DBI instance .
1223	Configuration callback .
1224	Schedule the provided job and trigger .
1225	Schedule the provided job and trigger . This method will setup a default name and group for both .
1226	Shutdown executor in order .
1227	Configure a cluster after creation .
1228	Set the response status .
1229	Register the provided module .
1230	Set a default action which is execute when no user is logged in .
1231	Add a simple login form . Useful for development and quick startup .
1232	Parse application bytecode and build route methods from it .
1233	Add a scan criteria like an annotation interface or class .
1234	Mount Swagger at the given path and customize Swagger objects .
1235	Mount Swagger using the given options .
1236	Mount RAML at the given path and customize RAML objects .
1237	Mount RAML using the given options .
1238	Method that processes the provided source and returns the processed contents .
1239	auto generated Axis2 call back method for cteRecepcaoOS method override this method for handling normal response from cteRecepcaoOS operation
1240	auto generated Axis2 call back method for mdfeRecepcaoLote method override this method for handling normal response from mdfeRecepcaoLote operation
1241	auto generated Axis2 call back method for cteInutilizacaoCT method override this method for handling normal response from cteInutilizacaoCT operation
1242	auto generated Axis2 call back method for mdfeRecepcaoEvento method override this method for handling normal response from mdfeRecepcaoEvento operation
1243	auto generated Axis2 call back method for cteConsultaCT method override this method for handling normal response from cteConsultaCT operation
1244	auto generated Axis2 call back method for mdfeConsNaoEnc method override this method for handling normal response from mdfeConsNaoEnc operation
1245	get the default envelope
1246	A utility method that copies the namepaces from the SOAPEnvelope
1247	auto generated Axis2 call back method for nfeConsultaNF method override this method for handling normal response from nfeConsultaNF operation
1248	Retorna o Lote assinado .
1249	Faz o envio de lote para a Sefaz
1250	Faz a consulta de status responsavel pela UF
1251	Faz a correcao da nota
1252	Faz o cancelamento da nota
1253	Inutiliza a nota
1254	Realiza a consulta de cadastro de pessoa juridica com inscricao estadual
1255	auto generated Axis2 call back method for cteRecepcaoLote method override this method for handling normal response from cteRecepcaoLote operation
1256	auto generated Axis2 call back method for cteRetRecepcao method override this method for handling normal response from cteRetRecepcao operation
1257	Retorna XML assinado para uso externo .
1258	auto generated Axis2 call back method for cteRecepcaoEvento method override this method for handling normal response from cteRecepcaoEvento operation
1259	Faz o cancelamento do CTe
1260	auto generated Axis2 call back method for mdfeConsultaMDF method override this method for handling normal response from mdfeConsultaMDF operation
1261	auto generated Axis2 call back method for mdfeRetRecepcao method override this method for handling normal response from mdfeRetRecepcao operation
1262	Faz o cancelamento do MDFe
1263	Faz o encerramento do MDFe
1264	Faz o encerramento do MDFe assinado
1265	auto generated Axis2 call back method for mdfeStatusServicoMDF method override this method for handling normal response from mdfeStatusServicoMDF operation
1266	este metodo teve que ser implementado pois a Bahia trata de forma diferente
1267	Computes how a user vector Xu changes in response to interaction with an item vector Yi . This can also be used to compute how an item vector changes in response to a user interaction even though the code naming follows the former convention .
1268	Computes cosine similarity of values in two given arrays when the norm of one array is known in advance which is a not - uncommon case .
1269	Proactively try to compute the solver asynchronously if not already computed . Does not block .
1270	Deletes the given path and if it is a directory all files and subdirectories within it .
1271	Loads and instantiates a named implementation class a subclass of a given supertype whose constructor takes the given arguments .
1272	Optionally publish additional model - related information to the update topic after the model has been written . This is needed only in specific cases like the ALS algorithm where the model serialization in PMML can t contain all of the info .
1273	Opens the URL on a Custom Tab if possible . Otherwise fallsback to opening it on a WebView .
1274	Goes through all apps that handle VIEW intents and have a warmup service . Picks the one chosen by the user if there is one otherwise makes a best effort to return a valid package name .
1275	Used to check whether there is a specialized handler for a given intent .
1276	Loads the appropriate view in the activity based on whether user is successfully authorized or not .
1277	Executes the deeplink to launch the Uber app . If the app is not installed redirects to the play store .
1278	Validates the local variables needed by the Uber SDK used in the sample project
1279	Used to handle Redirect URI response from customtab or browser
1280	Edit representation for method specified in sent parameter after controller calls for it .
1281	Main method to run the task generator .
1282	Shuts down the Mesos driver .
1283	Determines whether the prospective host already has tasks either running on it or assigned to be run on it and returns a false Result if either of those things is the case .
1284	Tests a host to determine whether it has an attribute of the required value for this task request .
1285	Determines whether a particular target host is appropriate for a particular task request by rejecting any host that has the same value for the unique constraint attribute as another host that is already assigned a co - task of the specified task request .
1286	Set the autoscale call back action . The callback you pass to this method receives an indication when an autoscale action is to be performed telling it which autoscale rule prompted the action and whether the action is to scale up or scale down the autoscale group . The callback then initiates the appropriate scaling actions .
1287	Disable the virtual machine with the specified hostname . The scheduler will not use disabled hosts for allocating resources to tasks .
1288	Disable the virtual machine with the specified ID . The scheduler will not use disabled hosts for allocating resources to tasks .
1289	Enable the VM with the specified host name . Hosts start in an enabled state so you only need to call this method if you have previously explicitly disabled the host .
1290	Mark task scheduler as shutdown and shutdown any thread pool executors created .
1291	Check if this entity contains all of the given properties .
1292	Retrieves summary - data from the given input source
1293	reads a metadata stream and returns it s contents
1294	alternative to 6? Similar to dota?
1295	reads a variable int32 from the current position
1296	reads a fixed int32 from the current position
1297	reads the magic of a demo file identifying the engine type
1298	Appends a DomContent - object to the end of this element
1299	Appends a list of DomContent - objects to the end of this element
1300	Generic if - expression to if ing inside method calls
1301	Return a complete html document string
1302	Sets an attribute on an element
1303	Sets a custom attribute
1304	Adds the specified attribute . If the Tag previously contained an attribute with the same name the old attribute is replaced by the specified attribute .
1305	Convenience methods that call attr with predefined attributes
1306	Compress a JS - string
1307	Parses out the properties of a selector s body .
1308	Parse the values out of a property .
1309	ensures that the end margin of the search input is according to Material specs
1310	Sets the menu button s color .
1311	Sets the background color of the search view including the suggestions section .
1312	Mimics a menu click that opens the menu . Useful for navigation drawers when they open as a result of dragging .
1313	Mimics a menu click that closes . Useful when fo navigation drawers when they close as a result of selecting and item .
1314	Inflates the menu items from an xml resource .
1315	Sets whether the the button with the search icon will appear in the soft - keyboard or not .
1316	Set whether a touch outside of the search bar s bounds will cause the search bar to loos focus .
1317	Sets whether the search is focused or not .
1318	returns true if the suggestion items occupy the full RecyclerView s height false otherwise
1319	results is > = max . The max option allows us to avoid doing unnecessary and potentially long calculations .
1320	Set a callback that will be called after each suggestion view in the suggestions recycler list is bound . This allows for customized binding for specific items in the list .
1321	a byte array to a HEX string
1322	Setting testMode configuration . If set as testMode the connection will skip certification check
1323	enforced by constructor parameters .
1324	Actual abstract value type that is definitive model for the value type .
1325	Package relative path
1326	Actual immutable value type generated implementation .
1327	safe unchecked typecheck performed by type token equality
1328	Returns singleton empty immutable ordinal set
1329	Iterator over all present inhabitants of ordinal domain .
1330	The same class included in two parents may or may not be nested builders based on that discovery pattern
1331	Serialized name actully specified via annotation
1332	Marshaled name for compatibility with repository .
1333	Factory method to create evaluator instance
1334	Wraps listenable future with a fluent future .
1335	alternatively it can be exposed as Optional of ImmutableMap
1336	overridable stringify .
1337	Reads current value including objects and array as effiecient token buffer . Use of Jackson s own mechanisms is important to preserve custom elements such as special embedded objects in BSON or other data formats .
1338	Closes the current window .
1339	Injects an asynchronous script for execution and waits for its result .
1340	Set proxy for WebClient using Proxy .
1341	Sets HTTP proxy for WebClient with bypass proxy hosts
1342	Sets Proxy Autoconfiguration URL for WebClient
1343	Get a BoxDeveloperEditionAPIConnection that can be used by an App user to access Box .
1344	Updates all modifiable fields from another process definition entity .
1345	Add TaskListener on complete event generically every time so we don t have to add it in the XML .
1346	private static final String PROCESS_DEFINITION_KEY = tenantdemo - process - application ;
1347	lazy load task if bridge state has changed in the meantime
1348	Retrieve the servlet context path of a process definition from a known process engine .
1349	Retrieve the servlet context path of a process definition from any process engine .
1350	Retrieve the application info of a process definition from a known process engine .
1351	Retrieve the application info path of a process definition from any process engine .
1352	In real world scenarios this would be replaced by the actual IAM solution
1353	Type - and null - safe cast of variable - value .
1354	private QueueConnectionFactory queueConnectionFactory ;
1355	Checks if a variable is set .
1356	Checks if a global variable is set .
1357	Simply opens the menu by doing necessary calculations .
1358	Closes the menu .
1359	Recalculates the positions of each sub action item on demand .
1360	Gets the coordinates of the main action view This method should only be called after the main layout of the Activity is drawn such as when a user clicks the action button .
1361	Returns the center point of the main action view
1362	Calculates the desired positions of all items .
1363	Finds and returns the main content view from the Activity context .
1364	Retrieves the screen size from the Activity context
1365	Restores the specified sub action view to its final state according to the current actionType Should be called after an animation finishes .
1366	Sets a content view with custom LayoutParams that will be displayed inside this SubActionButton .
1367	Sets the position of the button by calculating its Gravity from the position parameter
1368	Attaches it to the content view with specified LayoutParams .
1369	Accept the specified trigger and transition to the destination state
1370	Accept the specified trigger and transition to the destination state if guard is true
1371	Accept the specified trigger and transition to the destination state if guard true otherwise ignore
1372	ignore the specified trigger when in the configured state if the guard returns true
1373	Return StateRepresentation for the specified state . Creates representation if it does not exist .
1374	Add an additional managed instance
1375	Returns false if not overflow bucket matching the given bucket id was found
1376	Returns this for chaining
1377	Encodes a sequence of encoded values .
1378	Decodes a sequence of encoded values .
1379	Decodes a optional element of a sequence .
1380	Encodes a bit string padded with the specified number of bits . The encoding is a byte containing the padBits followed by the value bytes .
1381	Encodes an octet string .
1382	Encodes the length of a DER value . The encoding of a 7bit value is simply the value . Values needing more than 7bits are encoded as a lead byte with the high bit set and containing the number of value bytes . Then the following bytes encode the length using the least number of bytes possible .
1383	Gets a named logger
1384	Logs a message at DEBUG level .
1385	Logs a message at WARN level .
1386	Logs a message at ERROR level .
1387	Replace the current path with the given unencoded path
1388	input must be an ASCII string representing a percent - encoded UTF - 8 byte sequence
1389	Calculate the summary statistics for the interarrival time of the onResponseContent callbacks .
1390	This is used by the configuration provider
1391	Adds an old value with a fixed timestamp to the sample .
1392	Encodes the specified data into a base64 string .
1393	Decodes the specified base64 string back into its raw data .
1394	write the current buffer contents to the underlying logger .
1395	todo this should be
1396	Compute the alpha decay factor such that the weight of an entry with age targetAgeInSeconds is targetWeight
1397	Cancels the destination Future if the source Future is cancelled .
1398	Returns a future that can not be completed or canceled .
1399	Returns a future that can not be completed or optionally canceled .
1400	Returns a failed future containing the specified throwable .
1401	Waits for the value from the future . If the future is failed the exception is thrown directly if it is an instance of the specified exception type or unchecked or it is wrapped in a RuntimeException . If the thread is interrupted the thread interruption flag is set and the original InterruptedException is wrapped in a RuntimeException and thrown .
1402	Gets the current value of the future without waiting . If the future value is null an empty Optional is still returned and in this case the caller must check the future directly for the null value .
1403	Waits for the the value from the future for the specified time . If the future value is null an empty Optional is still returned and in this case the caller must check the future directly for the null value . If the future is failed the exception is thrown directly if unchecked or wrapped in a RuntimeException . If the thread is interrupted the thread interruption flag is set and the original InterruptedException is wrapped in a RuntimeException and thrown .
1404	Waits for the the value from the future for the specified time . If the future value is null an empty Optional is still returned and in this case the caller must check the future directly for the null value . If the future is failed the exception is thrown directly if it is an instance of the specified exception type or unchecked or it is wrapped in a RuntimeException . If the thread is interrupted the thread interruption flag is set and the original InterruptedException is wrapped in a RuntimeException and thrown .
1405	Checks that the completed future completed successfully .
1406	Creates a future that completes when the first future completes either normally or exceptionally . Cancellation of the future propagates to the supplied futures .
1407	Creates a future that completes when the first future completes either normally or exceptionally . Cancellation of the future does not propagate to the supplied futures .
1408	Creates a future that completes when the first future completes either normally or exceptionally . Cancellation of the future will optionally propagate to the supplied futures .
1409	Returns an unmodifiable future that is completed when all of the given futures complete . If any of the given futures complete exceptionally then the returned future also does so immediately with a CompletionException holding this exception as its cause . Otherwise the results of the given futures are reflected in the returned future as a list of results matching the input order . If no futures are provided returns a future completed with an empty list .
1410	Converts a ListenableFuture to a CompletableFuture . Cancellation of the CompletableFuture will be propagated to the ListenableFuture .
1411	Converts a CompletableFuture to a ListenableFuture . Cancellation of the ListenableFuture will be propagated to the CompletableFuture .
1412	Invokes the callback using the specified executor if the future fails .
1413	is calculated .
1414	Remove the node if possible or set its count to 0 if it has children and it needs to be kept around
1415	Computes the max weight of any path starting at node and ending at a leaf in the hypothetical complete tree . The weight is the sum of counts in the ancestors of a given node
1416	Adds a value that has already been hashed to the set of values tracked by this HyperLogLog instance .
1417	Loads properties from the given file
1418	Binds default values for all the instances of given config class for the current binder
1419	Generate the next duration
1420	Tail recursive implementation of fibonacci
1421	Multiply this amount with the given amount
1422	Divide this duration amount with the given amount
1423	Find single field using strategy .
1424	Checks for field proper modifier .
1425	Throw exception if field was not found .
1426	Get field annotated with a particular annotation . This method traverses the class hierarchy when checking for the annotation .
1427	Handle condition evaluation results each time evaluation of a condition occurs . Works only with a Hamcrest matcher - based condition .
1428	Specify the executor service whose threads will be used to evaluate the poll condition in Awaitility . Note that the executor service must be shutdown manually!
1429	Await until a Atomic boolean becomes true .
1430	Await until a Atomic boolean becomes false .
1431	Catching uncaught exceptions in other threads . This will make the await statement fail even if exceptions occur in other threads . This is the default behavior .
1432	Sets the default timeout all await statements will use .
1433	Sets the default timeout that all await statements will use .
1434	Tokenizes the given String into String tokens .
1435	Inserts backslashes before any occurrences of a backslash or quote in the given string . Also converts any special characters appropriately .
1436	Serves resources from the assets directory of your application .
1437	Attempts to load a message file and sets the file changed reloading strategy on the configuration if the runtime mode is Dev .
1438	Does all the loading of message files .
1439	Looks up a potential file from 1 ) The classpahth 2 ) From the filesystem 3 ) From an URL
1440	!!!! Only for testing purposes !!!!
1441	so we can mock a fake one for unit testing
1442	This might be a bit hacky . But just a little bit .
1443	Resolves which standalone class to use . Either defined as a system property or falling back to the default .
1444	Encrypts data with secret key .
1445	Decrypts data with secret key .
1446	Simply reads a property resource file that contains the version of this Ninja build . Helps to identify the Ninja version currently running .
1447	Register the given path with the WatchService
1448	returns NinjaMode . dev if no mode is set . Or the valid mode set via a System Property called ninja . mode .
1449	check the mimetype is referenced in the mimetypes database
1450	Build the route .
1451	Configure start add shutdown hook and join . Does not exit .
1452	helpful utilities for subclasses
1453	Scans identifies and registers annotated controller methods for the current runtime settings .
1454	Takes the found methods and checks if they have a valid format . If they do the controller path classes for these methods are generated
1455	Sorts the methods into registration order
1456	Searches for Methods that have either a Path Annotation or a HTTP - Method Annotation
1457	Configures the set of packages to scan for annotated controller methods .
1458	Determines if this method may be registered as a route . Ninja properties are considered as well as runtime modes .
1459	Returns the HTTP method for the controller method . Defaults to GET if unspecified .
1460	Builds an invoker for a functional method . Understands what parameters to inject and extract based on type and annotations .
1461	Returns the lower class name . Eg . A class named MyObject will become myObject .
1462	Used to check whether a class exists on the classpath .
1463	Calculates the relative path of the source code file of a StackTrace element if its available . Uses the packageName of the class to create a relative path and appends the filename included with the stack trace element .
1464	Add an element only if it doesn t exist .
1465	Convenient clazz to get a value a class type ;
1466	Utility that check that an object is serializable .
1467	Implicitly generates a hashmap as object being rendered and adds this key value pair . If the object being rendered is already a hashmap it simply adds this key value pair to it .
1468	This method directly renders the String to the output . It completely bypasses any rendering engine .
1469	This method directly renders the byte array to the output . It completely bypasses any rendering engine .
1470	Returns cookie with that name or null .
1471	This function sets
1472	This method checks that your configurations have set a application . secret = 23r213r12r123
1473	Adds the objects in the specified collection to the end of this List . The objects are added in the order in which they are returned from the collection s iterator .
1474	Retrieves the position in the list corresponding to itemId .
1475	Switches the item that is currently being dragged with the item belonging to given id by notifying the adapter to swap positions and that the data set has changed .
1476	Clear the active state for given index . Will insert any pending pairs if this call leads to a state where there are no active pairs .
1477	Returns a collection of currently active indexes .
1478	Return the title view at the specified position .
1479	Return the content view at the specified position .
1480	Expand the view at given position . Will do nothing if the view is already expanded .
1481	Collapse the view at given position . Will do nothing if the view is already collapsed .
1482	Return the content parent at the specified position .
1483	Override this method to provide additional animators on top of the default height and alpha animation .
1484	Returns a bitmap showing a screenshot of the view passed in .
1485	Finds out whether the item represented by given position is dismissable .
1486	Resets the fields to the initial values ready to start over .
1487	Call this method to reset animation status on all views .
1488	Cancels any existing animations for given View .
1489	Animates given View .
1490	Returns the delay in milliseconds after which animation for View with position mLastAnimatedPosition + 1 should start .
1491	Merges given Animators into one array .
1492	Handles a request that s not a CORS request but is a valid request i . e . it is not a cross - origin request . This implementation just forwards the request down the filter chain .
1493	throws a NonEmptyException exception when number is greater than 0
1494	Generate a bitmap from an iterator .
1495	Remove the element on top of the heap
1496	Resizes the buffer if the number of words to add exceeds the buffer capacity .
1497	Returns the resulting buffer size in words given the number of words to add .
1498	Simple algorithm that computes the XOR aggregate .
1499	virtually add several literal words .
1500	append to the list the literal words as EWAHPointer
1501	Get a copy of this ImmutableBitSet as a mutable BitSet .
1502	Compute the number of bits set to 1
1503	Check whether a bitset contains a set bit .
1504	Iterate over the set bits
1505	Checks whether two bitsets intersect .
1506	Iterate over the unset bits
1507	Process the next run
1508	Open the menu .
1509	Close the menu .
1510	Sets TapBarMenu s background color from given resource .
1511	Fetch range index that the database name from connection url if H2 database running with file mode .
1512	Fetch range index that the database name from connection url if H2 database running with memory mode .
1513	parse the url to the ConnectionInfo
1514	register new ConnectionURLParser . Can override existing parser .
1515	Fetch database name from connection url .
1516	Run daemon process .
1517	copy file to destination
1518	copy file in assets into destination file
1519	Install specified binary into destination directory .
1520	calls the missing field handler if any for each recorded missing field .
1521	Fetch enum value ( may need to try twice due to potential name field shadowing by enum subclasses
1522	For all fields where the value was
1523	Walk the JsonObject fields and perform necessary substitutions so that all references matched up . This code patches
1524	Convert the passed in JSON string into a Java object graph .
1525	Convert a root JsonObject that represents parsed JSON into an actual Java object .
1526	Walk the Java object fields and copy them from the JSON object to the Java object performing any necessary conversions on primitives or deep traversals for field assignments to other objects arrays Collections or Maps .
1527	stores the missing field and their values to call back the handler at the end of the resolution cause some reference may need to be resolved later .
1528	Given the passed in Type t return the raw type of it if the passed in value is a ParameterizedType .
1529	Read a JSON array
1530	Read a JSON number
1531	Read a JSON string This method assumes the initial quote has already been read .
1532	Return an instance of of the Java Field class corresponding to the passed in field name .
1533	Strip leading and trailing double quotes from the passed in String .
1534	Convert a Java Object to a JSON String .
1535	Format the passed in JSON string in a nice human readable format .
1536	tab the JSON output by the given number of characters specified by delta .
1537	Write the passed in array element to the JSON output if any only if there is a customer writer for the class of the instance o .
1538	Perform the actual custom writing for an array element that has a custom writer .
1539	Fetch the customer writer for the passed in Class . This method always fetches the custom writer doing the complicated inheritance distance checking . This method is only called when a cache miss has happened . A sentinal nullWriter is returned when no custom writer is found . This prevents future cache misses from re - attempting to find custom writers for classes that do not have a custom writer .
1540	Write the passed in Java object in JSON format .
1541	Walk object graph and visit each instance following each field each Collection Map and so on . Tracks visited to handle cycles and to determine if an item is referenced elsewhere . If an object is never referenced more than once no
1542	Reach - ability trace to visit all objects within the graph to be written . This API will handle any object using either reflection APIs or by consulting a specified FIELD_SPECIFIERS map if provided .
1543	Ensure that all keys within the Map are String instances
1544	Write an element that is contained in some type of Collection or Map .
1545	Creates the map from list .
1546	Gets the source .
1547	Gets the topics .
1548	Gets the hjid .
1549	Gets the document detail list .
1550	Creates the axes XY date float .
1551	Creates the default grid .
1552	Created legend enhanced inside north west .
1553	Created legend enhanced inside west .
1554	Creates the legend outside one column .
1555	Sets the legend styling .
1556	Creates the high lighter .
1557	Creates the high lighter north .
1558	Creates the series default pie chart .
1559	Creates the donout series default .
1560	Gets the document attachment list .
1561	Creates the committeee ranking menu bar .
1562	Creates the committee ranking topics .
1563	Creates the overview page .
1564	Creates the overview content .
1565	Gets the kommunvalkrets .
1566	Configure authentication .
1567	Sets the list .
1568	Sets the status map .
1569	Sets the resource type map .
1570	Gets the kommun .
1571	Gets the uppdrag .
1572	Gets the proposal .
1573	Gets the page path .
1574	Update ballot .
1575	Gets the max size view riksdagen vote data ballot party summary daily .
1576	Inits the party map .
1577	Adds the party data .
1578	Creates the party ballot chart .
1579	Adds the ballot data .
1580	Creates the org ministry map .
1581	Adds the result for month .
1582	Creates the field .
1583	Creates the display property converters .
1584	Gets the converter for type .
1585	Gets the type of property .
1586	Gets the document activities .
1587	Gets the user account from security context .
1588	Gets the county regions .
1589	Gets the against proposal container .
1590	Gets the committee proposal container .
1591	Gets the value of the events property .
1592	Gets the page id .
1593	Gets the page nr .
1594	Creates the panel content .
1595	Creates the page visit history .
1596	Adds the politician indicator data .
1597	Adds the politican data .
1598	Sets the google auth scratch codes .
1599	Creates the role ghant .
1600	Creates the generic gantt .
1601	Entries sorted by values .
1602	Adds the view generic role member to step .
1603	Strip dates after current date .
1604	Creates the gantt .
1605	Convert to years string .
1606	Load secret XA data source .
1607	Send message .
1608	Gets the document person reference list .
1609	Cleanup decision .
1610	Gets the document name .
1611	Gets the committtee short name .
1612	Block by user failed login attempts .
1613	Block by session or ip failed login attempts .
1614	Navigate to page .
1615	Gets the application manager .
1616	Show notification .
1617	Gets the topic .
1618	Adds the sources and indicators to menu .
1619	Gets the topic indicator map .
1620	Gets the value of the address property .
1621	Adds the cache hints .
1622	Gets the string id list .
1623	Read using zip input stream .
1624	Creates the paging controls .
1625	Adds the paging link .
1626	Insert politician .
1627	Insert party .
1628	Gets the against proposal list .
1629	Adds the data serie value .
1630	Adds the annual summary .
1631	Adds the annual summary data .
1632	Adds the annual data .
1633	Adds the entry data .
1634	Creates the ministry summary .
1635	Creates the role list .
1636	Process all .
1637	Load and process document list .
1638	Load document list .
1639	Read with string buffer .
1640	Read input stream .
1641	Gets the votering .
1642	Gets the government body list .
1643	Gets the person assignment element .
1644	Gets the person detail element .
1645	Creates the user account .
1646	Creates the row item .
1647	Creates the grid layout .
1648	Send country indicator work order .
1649	Gets the document proposal .
1650	Gets the document activity container .
1651	Gets the document detail container .
1652	Gets the document attachment container .
1653	Gets the document reference container .
1654	Gets the document person reference container .
1655	Gets the view riksdagen party document daily summary map .
1656	Adds the document history by party data .
1657	Read missing person list .
1658	Append object presentation .
1659	Adds the fallback value .
1660	Reencrypt vault values .
1661	Gets the landstingsvalkrets .
1662	Adds the commitee summary .
1663	Adds the entry .
1664	Adds the decision data rows .
1665	Adds the doc type data rows .
1666	Adds the doc type decision data rows .
1667	Gets the user id from security context .
1668	Gets the request url .
1669	Allow role in security context .
1670	Gets the application action event page daily summary map .
1671	Gets the application action event page mode daily summary map .
1672	Gets the application action event page element daily summary list .
1673	Adds the view application action event page element daily summary values .
1674	Update person assignment data .
1675	Update assignment data .
1676	Input validation .
1677	Creates the base application event request .
1678	Validate request .
1679	Gets the human message .
1680	Handle input violations .
1681	Creates the data indicator summary chart panel .
1682	Inits the application menu bar .
1683	Creates the admin menu .
1684	Creates the button link .
1685	Sets the result element .
1686	Kie container .
1687	Gets the javers .
1688	Javers auditable aspect .
1689	Author provider .
1690	Creates the role summary .
1691	Adds the ministry per year to map .
1692	Adds the government body annual summary to list .
1693	Gets the integer .
1694	Adds the data for year to map .
1695	Adds the government body annual summary to map .
1696	Creates the government body annual summary from row .
1697	Gets the person assignment data .
1698	Gets the person detail data .
1699	Gets the committee decision type map .
1700	Gets the committee decision type org map .
1701	Adds the decision type by org data .
1702	Display document attachements .
1703	Creates a new Label object .
1704	Builds the key .
1705	Gets the rule summary .
1706	Adds the violation .
1707	Creates the map from list vote .
1708	Check include date .
1709	Gets the date .
1710	Gets the parties .
1711	Creates the enable google auth button .
1712	Creates the disable google auth button .
1713	Creates the change password button .
1714	Gets the document reference list .
1715	Best guess vote date .
1716	Check same date .
1717	Try to find valid vote date .
1718	Gets the ip information .
1719	Gets the operating system .
1720	Gets the committee proposal list .
1721	Gets the parliament electoral regions .
1722	Gets the view riksdagen org document daily summary map .
1723	Adds the document history by org data .
1724	Adds the new data serie .
1725	Adds the data item .
1726	Inits the user command map .
1727	Perform operation .
1728	Gets the vote data list .
1729	Gets the assignment list .
1730	Configure column orders and hidden fields .
1731	Configure listeners .
1732	Creates the grid cell filter .
1733	Sets the column converters .
1734	Gets the document type map .
1735	Adds the data series .
1736	Gets the election types .
1737	Gets the ballot summary item .
1738	Gets the adminregion .
1739	Gets the income level .
1740	Gets the lending type .
1741	Gets the ballot document data .
1742	Gets the ballot document element .
1743	The main method .
1744	Encrypt value .
1745	Gets the encryptor .
1746	Decrypt value .
1747	Gets the county electoral regions .
1748	Gets the job context holder .
1749	Gets the value of the portals property .
1750	Gets the active user account .
1751	Gets the dokument .
1752	Creates the basic layout with panel and footer .
1753	Creates the top header actions for user context .
1754	Creates the full size vertical layout .
1755	Adds the logo to header .
1756	Creates the top title header .
1757	Gets the mail sender .
1758	Gets the smtp port .
1759	Find language .
1760	Gets the supported locales language data .
1761	Creates the issue concern map .
1762	Sets the name space on xml stream .
1763	Adds the chart .
1764	Gets the chart window height .
1765	Gets the party name .
1766	Gets the view riksdagen politician document daily summary map .
1767	login is copied without changes from FormAuthenticator
1768	Are we running on a flavour of Windows .
1769	Start the Android Emulator with the specified options .
1770	Unlocks the emulator .
1771	Writes the script to start the emulator in the background for windows based environments .
1772	Writes the script to start the emulator in the background for unix based environments .
1773	Stop the running Android Emulator .
1774	This method contains the code required to stop an emulator
1775	Sends a user command to the running emulator via its telnet interface .
1776	Assemble the command line for starting the emulator based on the parameters supplied in the pom file and on the command line . It should not be that painful to do work with command line and pom supplied values but evidently it is .
1777	Get executable value for emulator from command line options or default to emulator .
1778	Get wait value for emulator from command line option .
1779	Get options value for emulator from command line option .
1780	Get avd value for emulator from command line option .
1781	Get location value for emulator from command line option .
1782	Unjars the specified jar file into the the specified directory
1783	Calculates a map which contains all files to be pushed to the device or emulator . The source filename works as the key while the value is the destination .
1784	Visits all nodes from the given node and collects dependencies .
1785	Resolves an artifact to a particular repository .
1786	Run a wait loop until adb is connected or trials run out . This method seems to work more reliably then using a listener .
1787	Wait for the Android Debug Bridge to return an initial device list .
1788	Deploys an apk file to a connected emulator or usb device .
1789	Deploy the apk built with the current projects to all attached devices and emulators . Skips other projects in a multi - module build without terminating .
1790	Undeploys an apk from a connected emulator or usb device . Also deletes the application s data and cache directories on the device .
1791	Undeploys an apk specified by package name from a connected emulator or usb device . Also deletes the application s data and cache directories on the device .
1792	Extracts the package name from an apk file .
1793	Provides package name for android artifact .
1794	Attempts to find the instrumentation test runner from inside the AndroidManifest . xml file .
1795	Generates R java files those libraries that do not already have their R java in the compile classpath .
1796	Display a list of attached devices .
1797	Copies an input stream into an output stream but does not close the streams .
1798	Copy the Ndk GdbServer into the architecture output folder if the folder exists but the GdbServer doesn t .
1799	Figure out the full path to the current java executable .
1800	Get the path for proguard . jar
1801	Get the path for shrinkedAndroid . jar
1802	Get the path for build - tools lib directory
1803	Get the path for mainDexClasses . rules
1804	Get the android tool path .
1805	Resolves the android . jar from this SDK .
1806	This method returns the previously specified version . However if none have been specified it returns the latest version .
1807	Loads the SDK Tools version
1808	Generates the sources .
1809	Copy the AndroidManifest . xml from androidManifestFile to destinationManifestFile
1810	Extract the source dependencies .
1811	Extracts ApkLib and adds the assets and apklib sources and resources to the build .
1812	Extracts AarLib and if this is an APK build then adds the assets and resources to the build .
1813	Traverses the list of project dependencies looking for &quot ; AAR depends on APKLIB&quot ; artifact combination that has been deprecated . For each occurrence of an AAR artifact with APKLIB direct or transitive dependency produces a warning message to inform the user . Future plugin versions may default to skipping or not handling unsupported artifacts during build lifecycle .
1814	Provides map with all provided dependencies or project itself grouped by package name
1815	Generate correct R . java for apklibs dependencies of a current project
1816	Generate correct R . java for aar dependencies of a current project
1817	Executes aapt to generate the R class for the given apklib .
1818	Check if given artifact includes a matching BuildConfig class
1819	Check whether the artifact includes a BuildConfig located in a given package .
1820	Gets the input files for dex . This is a combination of directories and jar files .
1821	Execute the mojo by parsing the confign and actually doing the zipalign .
1822	Ensure the client secrets file has been filled out .
1823	Add jar files in libs into the project classpath .
1824	Add the dependent library classes to the project classpath .
1825	Execute the mojo by parsing the config and actually invoking the lint command from the Android SDK .
1826	Get the Maven GAV string of the plugin .
1827	Convert the jvm arguments in parsedJvmArguments as populated by the config in format as needed by the java command . Also preserve backwards compatibility in terms of dashes required or not ..
1828	Finds a library file in either the primary or alternate lib directory .
1829	Tries to resolve the toolchain based on the path of the file .
1830	Returns the complete path for the ndk - build tool based on this NDK .
1831	Read manifest using JAXP
1832	Write manifest using JAXP transformer
1833	Expose the version properties and other simple parsed manifest entries .
1834	If the specified version name cannot be properly parsed then fall back to an automatic method . If the version can be parsed then generate a version code from the version components . In an effort to preseve uniqueness two digits are allowed for both the minor and incremental versions .
1835	Extracts if embedded correctly the artifacts architecture from its classifier . The format of the classifier if including the architecture is &lt ; architecture&gt ; - &lt ; classifier&gt ; . If no architecture is embedded in the classifier armeabi will be returned .
1836	Finds the files in the supplied folder that match the configured includes .
1837	Convert data to encrypted hex string
1838	Convert encrypted hex string to UTF - 8 string
1839	Parse a domain name starting at the given offset .
1840	Converts a hexadecimal character to an integer .
1841	if deltaY > 0 tryToMove the content down
1842	This method starts listening for network connectivity state changes .
1843	This method stops this class from listening for network changes .
1844	post data to Server
1845	Adds a form field to the request
1846	Adds a upload file section to the request
1847	Create a BitmapDrawable which can be managed in ImageProvider
1848	Load the image in advance .
1849	Detach the ImageView from the ImageTask .
1850	Add the ImageTask into loading list .
1851	Check weather this imageTask has cache Drawable data .
1852	Recover the from the work list
1853	Drop all the work and leave it in the work list .
1854	Drop all the work clear the work list .
1855	LiefCycle phase will be same to CubeFragment an will be processed automatically .
1856	delete cache by key
1857	clear the disk cache
1858	Allocate a table of the given capacity and set the threshold accordingly .
1859	Doubles the capacity of the hash table . Existing entries are placed in the correct bucket on the enlarged table . If the current capacity is MAXIMUM_CAPACITY this method is a no - op . Returns the table which will be new unless we were already at MAXIMUM_CAPACITY .
1860	Adds a bitmap to both memory and disk cache
1861	Returns the last committed value as a string or null if no value has been committed .
1862	Sets the value
1863	delete all content
1864	Commits this edit so it is visible to readers . This releases the edit lock so another edit may be started on the same key .
1865	add file to be uploaded
1866	clear the memory cache
1867	try to resume last status when we got off
1868	Computes the initial size and collects garbage as a part of opening the cache . Dirty entries are assumed to be inconsistent and will be deleted .
1869	Creates a new journal that omits redundant information . This replaces the current journal if it exists .
1870	remove files from list delete files
1871	process back pressed
1872	page has loaded
1873	Find out the size list can be re - sued .
1874	Timeout will not be considerate
1875	will only notify once
1876	Completes the request and receives response from the server .
1877	set the placeholder bitmap
1878	set customized view to right side
1879	Download a bitmap from a URL and write the content to an output stream .
1880	Bind ImageView with ImageTask
1881	Remove the ImageView from ImageTask
1882	When loading from network
1883	Will be called when begin load image data from dish or network
1884	Join the key and the size information .
1885	Join the tag with the key .
1886	initiate the disk cache
1887	flush the data to disk cache
1888	If disk is not read will prepare it first .
1889	Try to delete directory in a fast way .
1890	Get the external application cache directory .
1891	Check how much usable space is available at a given path .
1892	Notifies the drawable that it s displayed state has changed .
1893	Only when Activity resume not very precise . When activity recover from partly invisible onBecomesPartiallyInvisible will be triggered .
1894	the last item in list
1895	Hides the FAB .
1896	Aligns the sheet s position with the FAB .
1897	Shows the sheet by morphing the FAB into the sheet .
1898	Hides the sheet by morphing the sheet into the FAB .
1899	Hides the overlay .
1900	Shows the sheet .
1901	Sets up the action bar .
1902	Sets up the navigation drawer .
1903	Sets up the tabs .
1904	Sets up the Floating action button .
1905	Updates the FAB based on the selected page
1906	Updates the snackbar based on the selected page
1907	Animates the FAB as if the FAB is morphing into a sheet .
1908	Animates the FAB as if a sheet is being morphed into a FAB .
1909	Hides the suggestions if there are no more incoming queries .
1910	Returns a subset
1911	Returns true if the input string contains an explicit character .
1912	Returns true if the input string contains a word - breaking character .
1913	Given a string and starting index return true if the first numCharsToCheck characters at the starting index are either a letter or a digit .
1914	Returns the index of the end of the last span before the cursor or the start of the current line if there are no spans before the cursor .
1915	Returns the index of the beginning of the first span after the cursor or length of the text if there are no spans after the cursor .
1916	Show or hide the text counter view .
1917	Disables spelling suggestions from the user s keyboard . This is necessary because some keyboards will replace the input text with spelling suggestions automatically which changes the suggestion results . This results in a confusing user experience .
1918	Updates the TextView counting the number of characters in the editor . Sets not only the content of the TextView but also the color of the text depending if the limit has been reached .
1919	Sets the factory used to create MentionSpans within this class .
1920	Copy the text between start and end in clipboard . If no span is present text is saved as plain text but if span is present save it in Clipboard using intent .
1921	Paste clipboard content between min and max positions .
1922	Paste clipboard content between min and max positions . This method is supported for all the api above the 10 . If clipboard content contain the MentionSpan set the span in copied text .
1923	Don t allow user to set starting position or ending position of selection within the mention .
1924	Method to handle the cursor changing positions . Returns true if handled false if it should be passed to the super method .
1925	Deselects any spans in the editor that are currently selected .
1926	Parse a duration
1927	Returns a new string where any special characters in the source string have been encoded .
1928	Writes an HTML file containing an SVG element .
1929	Creates a compatible image . This override is only here to provide support for Java 6 because from Java 7 onwards the super class has a non - abstract implementation for this method .
1930	Returns a volatile image . This method is a workaround for a ClassCastException that occurs on MacOSX when exporting a Swing UI that uses the Nimbus Look and Feel to SVG .
1931	Returns a string containing the view box coordinates and dimensions .
1932	Maps the specified font family name to an alternative or else returns the same family name .
1933	Sets the value of the shape - rendering property that will be written to the SVG element . Permitted values are auto crispEdges geometricPrecision inherit and optimizeSpeed .
1934	Sets the value of the text - rendering property that will be written to the SVG element . Permitted values are auto optimizeSpeed optimizeLegibility and geometricPrecision .
1935	A utility method that appends an optional element id if one is specified via the rendering hints .
1936	Creates an SVG path string for the supplied Java2D path .
1937	Returns the SVG RGB color string for the specified color .
1938	Returns a string representing the specified color in RGBA format .
1939	Returns a stroke style string based on the current stroke and alpha settings .
1940	Returns a fill style string based on the current paint and alpha settings .
1941	Returns a string containing font style info .
1942	Returns the font metrics for the specified font .
1943	Applies a scale transformation .
1944	Applies this transform to the existing transform by concatenating it .
1945	Sets the transform .
1946	Sets the user clipping region .
1947	Registers the clip so that we can later write out all the clip definitions in the DEFS element .
1948	Clips to the intersection of the current clipping region and the specified shape .
1949	Clips to the intersection of the current clipping region and the specified rectangle .
1950	Sets the user clipping region to the specified rectangle .
1951	Returns the bytes representing a PNG format image .
1952	Draws the rendered image .
1953	Draws the renderable image .
1954	Returns an element to represent a radial gradient . All the radial gradients that are used get written to the DEFS element in the SVG .
1955	Returns a clip path reference for the current user clip . This is written out on all SVG elements that draw or fill shapes or text .
1956	Match one regexp at a time . Remove the matched part from the string trim and match next regexp on that string ...
1957	Prefixes the stats key with the stat key prefix and then calls statsCollector . recordLevel .
1958	Prefixes the stats key with the stat key prefix and then calls statsCollector . recordTiming .
1959	Tracks timeouts periodically if timeout tracking is enabled .
1960	Checks client health periodically to see if we are connected . Tries to reconnect if not connected .
1961	Request coming from the client side .
1962	Creates a backend request from the client request and then forwards it .
1963	Handle errors .
1964	Handle a response from the backend service
1965	Manage periodic jobs .
1966	Create service discovery that can talk via Lokate .
1967	Handles calling a method
1968	Call the method .
1969	Creates a proxy interface to a particular client . Given a particular address .
1970	Handles before call operation
1971	Handles the before argument transformer .
1972	Stop the client bundle .
1973	Start the client bundle .
1974	Looks up a service name based on its dns service name . The service part of the SRV DNS Record .
1975	Load the service nodes based on the internal service name . DB Ingester RadarAggregator etc .
1976	Convert a single srvRecord into an EndpointDefinition .
1977	Determines the request type .
1978	Handle a vertx request by converting it into a QBit request .
1979	This method is where all of the action is .
1980	Creates a new client given a host and a port .
1981	Get a DNS client .
1982	This returns a new instance of ReceiveQueue every time you call it so call it only once per thread .
1983	This returns a new instance of SendQueue every time you call it so call it only once per thread .
1984	Converts a Reakt promise into a QBit callback .
1985	Converts a Reakt promise into a QBit callback . Reactor is used to manage timeouts and ensure callback happens on same thread as caller .
1986	Creates a QBit callback based on promise created .
1987	Iterate through the health service queue and load the services .
1988	If the primary load failed we could have a backup provider registered .
1989	Supply an instance of DnsClient .
1990	Add a task that gets executed once .
1991	Process items in reactor .
1992	Remove a callback from the list of callbacks that we are managing .
1993	Utility method to create a coordinator .
1994	Monitors timeouts . If the callback timed - out trigger it and then remove callback from the list .
1995	Monitors Callback Coordinators . Trigger timeouts if needed and remove coordinators from list that timed out .
1996	Used for quickly delegating one callback to another . This allows one liners so you don t have to create a builder for this common case .
1997	Build the impl .
1998	Builds a proxy queue service to the impl .
1999	All WebSocket calls come through here .
2000	Start this .
2001	Add an event listener to the channel There can only be one consumer and many listeners .
2002	Create service discovery that can talk DNS .
2003	Convert from json string using Class as a suggestion for how to do the parse .
2004	Converts from a json string using componentClass as a guide to a List .
2005	Converts from Object into JSON string .
2006	Converts from a json string using componentClassKey and componentClassValue as a guide to a Map .
2007	Helper method . Converts a value map into a regular map of Java basic types .
2008	False is unknown true is no callbacks .
2009	Builder method to add a callback handler .
2010	Builder method to wrap and delegate timeout and error handling and callback itself .
2011	Builder method to set callback handler that takes a list
2012	Builder method to set callback handler that takes a set
2013	Builder method to set callback handler that takes a collection
2014	Builder method to set callback handler that takes a map
2015	Builder method to set callback handler that takes an optional string
2016	Add a header
2017	Checks to see if a service is registered with the local agent ..
2018	Pings the Consul Agent .
2019	Register a service with Consul .
2020	Remove registration of a particular service .
2021	De - registers a Health Check with the Agent
2022	Checks in with Consul .
2023	Sets a TTL check to passing state with a note
2024	Sets a TTL check to warning state with a note .
2025	Stop client . Stops processing call backs .
2026	Handles an async callbackWithTimeout .
2027	Sends a message over websocket .
2028	Creates a new client proxy given a client interface .
2029	Creates the queue listener for method call responses from the client bundle .
2030	Create a wrapper ReceiveQueue that does decoding on the fly .
2031	Helper method to create SendQueue wrappers that do JSON encoding .
2032	Start a listener .
2033	Builds a service .
2034	Check in the service .
2035	Fail the node for the service with a specific status .
2036	Enable the logging diagnostic context
2037	Enable consul discovery
2038	Get the Admin builder .
2039	Get context meta builder .
2040	Add an endpoint with a managment bundle
2041	Add an endpoint with a managment bundle and an alias
2042	Add an endpoint service
2043	Add endpoint service with alias
2044	Get the ServiceEndpointServer constructed with all of the service endpionts that you registered
2045	Configure a list of common interceptors .
2046	Destroy the session .
2047	Load the services .
2048	Deletes a specified key .
2049	Main entry point .
2050	Process . This can be called periodically and it will check to see if there are messages on the queue .
2051	Send the queue item to the event .
2052	Start listener . Once this is called messages can come in on a foreign thread .
2053	Grab the current http request .
2054	Remove an event connector
2055	Forwards en event to another event system .
2056	Flushes the pool used to optimize flushing of IO operations .
2057	Reads the readConfig file which can be a classpath or file system resource .
2058	Register a callbackWithTimeout handler
2059	Gets called before a method gets invoked on a service . This adds request URI remote address and request headers of the HttpRequest if found .
2060	Extract request data and put it into the logging Mapped Diagnostic Context .
2061	Extract headersToAddToLoggingMappingDiagnosticsContext data and put them into the logging mapping diagnostics context .
2062	MOST IMPORTANT METHOD FOR DEBUGGING WHY SOMETHING IS NOT CALLED .
2063	2nd MOST IMPORTANT METHOD FOR DEBUGGING WHY SOMETHING IS NOT CALLED .
2064	Add a request to the timeout queue . Server checks for timeouts when it is idle or when the max outstanding outstandingRequests is met .
2065	Add a new value to the list .
2066	Add a new value to the list but don t employ a wrapper .
2067	Add a new array to the list .
2068	Set a value in the list .
2069	This would be a good opportunity to reintroduce dynamic invoke
2070	Intercept the call before it gets sent to the service queue .
2071	Notify the listener about a change . If this is due to adding a new listener rather than being an update only notify the listener if this is the first notification sent to it .
2072	Adds appropriate sublist serializers as default serializers .
2073	Caches method reflection lookup
2074	Method called when we have seen one zero and want to ensure it is not followed by another
2075	Method called when we see non - white space character other than double quote when expecting a field name . In standard mode will just throw an expection ; but in non - standard modes may be able to parse name .
2076	Method for handling cases where first non - space character of an expected value token is not legal for standard JSON content .
2077	Method called to skim through rest of unparsed String value if it is not needed . This can be done bit faster if contents need not be stored for future access .
2078	Helper method for checking whether input matches expected token
2079	Efficient handling for incremental parsing of base64 - encoded textual content .
2080	Returns true if a string does not need to be quoted when serialized . Uses the strict definition described in the Rison specification appropriate for encoding .
2081	Returns true if the string represented by the specified character array does not Uses the strict definition described in the Rison specification appropriate for encoding .
2082	This method called when the string content is already in a char buffer and need not be copied for processing .
2083	Method called to try to either prepend character escape at front of given buffer ; or if not possible to write it out directly .
2084	Method called to append escape sequence for given character at the end of standard output buffer ; or if not possible write out directly .
2085	Set the flags that can be used by the conversion .
2086	Turn a Thrift Struct into a loading schema for a pig script .
2087	type can only be BAG or TUPLE
2088	Open an index stored in path Override if you want more control over how indexes are opened
2089	This is sort of an approximation of progress . It splits the progress equally among all indexes then among all queries for that index . So it won t move linearly since we don t know how many hits there will be per query
2090	Turn a generic message into a Tuple . Individual fields that are enums are converted into their string equivalents . Fields that are not filled out in the protobuf are set to null unless there is a default field value in which case that is used instead .
2091	Translate a nested message to a tuple . If the field is repeated it walks the list and adds each to a bag . Otherwise it just adds the given one .
2092	Translate a single field to a tuple . If the field is repeated it walks the list and adds each to a bag . Otherwise it just adds the given one .
2093	If the given field value is an enum translate it to the enum s name as a string since Pig cannot handle enums . Also if the given field value is a bool translate it to 0 or 1 to avoid Pig bools which can be sketchy .
2094	Turn a generic message descriptor into a Schema . Individual fields that are enums are converted into their string equivalents .
2095	Turn a nested message into a Schema object . For repeated nested messages it generates a schema for a bag of tuples . For non - repeated nested messages it just generates a schema for the tuple itself .
2096	Turn a single field into a Schema object . For repeated single fields it generates a schema for a bag of single - item tuples . For non - repeated fields it just generates a standard field schema .
2097	Turn a generic message descriptor into a loading schema for a pig script .
2098	Turn a generic message descriptor into a loading schema for a pig script . Individual fields that are enums are converted into their string equivalents .
2099	Turn a nested message into a pig script load string . For repeated nested messages it generates a string for a bag of tuples . For non - repeated nested messages it just generates a string for the tuple itself .
2100	Turn a single field into a pig script load string . For repeated single fields it generates a string for a bag of single - item tuples . For non - repeated fields it just generates a standard single - element string .
2101	Creates a descriptor for a Thrift class
2102	returns enum name - > enum object mapping . Currently used for converting Tuple to a Thrift object .
2103	Creates a path filter that accepts non - hidden directories that start with index - This is what the indexes created by this output format look like so this is useful for finding them when traversing the file system
2104	For a configured protoClass should the message be dynamic or is it a pre - generated Message class? If protoClass is null or set to DynamicMessage . class then the configurer intends for a dynamically generated protobuf to be used .
2105	Returns typeref for a Protobuf class
2106	Get the progress within the split .
2107	Converts the message to raw bytes and caches the converted value .
2108	For cases where we need to set hadoop1 input format in a hadoop2 Configuration object .
2109	A helper to set configuration to class name . Throws a RuntimeExcpetion if the configuration is already set to a different class name .
2110	Writes a list of strings into a configuration by converting it to a json array
2111	Reads a list of strings stored as a json array from a configuration
2112	Writes a list of strings into a configuration by base64 encoding them and separating them with commas
2113	Reads a list of strings stored as comma separated base64
2114	Verify that clazz is a Thrift class . i . e . is a subclass of TBase
2115	Returns value of a fieldName in an object .
2116	Returns value of a static field with given name in containingClass .
2117	Returns the value class of the given thrift field .
2118	Serializes a single field of a thrift struct .
2119	Turn a Tuple into a Message with the given type .
2120	Converts a tupleField string to its corresponding protobuf enum type if necessary otherwise returns the tupleField as is .
2121	Add a field to a protobuf builder
2122	For a given Pig type return the protobufs type that maps to it .
2123	Construct a Thrift object from the tuple .
2124	For a given Pig value return a Thrift object of the same type as the Thrift field passed . The thrift field is expected to be compatible with the value passed . If it is not a warning will be logged and a null value will be returned .
2125	return an instance assuming tClass is a Thrift class
2126	This sets configures the delegate though it does not configure DelegateCombineFileInputFormat .
2127	Finds and creates all the index splits based on the input paths set in conf
2128	Sets the input paths for for this input format . All paths will be searched for indexes recursively
2129	Gets the input paths for this input format
2130	Add an InputSplit to this collection .
2131	Collect a set of hosts from all child InputSplits . Note that this is just a hint to the MapReduce framework for where the task should go so we return the top 5 as returning too many can be expensive on the MR side of things .
2132	Parse an input delimiter string as with PigStorage and return the byte it represents .
2133	Creates a new ResourceFieldSchema which reflects data from an input RequiredField .
2134	Method used to read a protobuf input stream into a byte array
2135	Read the file line by line returning lines the match the regex in Tuples based on the regex match groups .
2136	Get a instance of standard base64 implementation from apache commons - codec library
2137	Returns a ProtobufConverter for a given Protobuf class .
2138	Returns true if new proto object was read into writable false other wise .
2139	Return byte blob for the next proto object . null indicates end of stream ;
2140	returns true if bytes for next object are written to writable false other wise .
2141	Creates TaskAttempContext from a JobConf and jobId using the correct constructor for based on Hadoop version .
2142	Instantiates MapContext under Hadoop 1 and MapContextImpl under Hadoop 2 .
2143	Returns a ThriftWritable for a given Thrift class .
2144	Use the typeRef s parameter to create a new instance of the TypeRef s template parameter .
2145	The cheap ugly version of the above for when you don t want to catch 900 exceptions at the calling site .
2146	For the given thriftClass return a Protobufs builder to build a similar protobuf class .
2147	Return Protobufs builder for a Map field
2148	Generate a DescriptorProto . Builder for the Message type that will be used to represent the entries of the input Map field .
2149	For a TStructDescriptor resolves the typeName and optionally converts and memoizes it s schema .
2150	Convert a thrift object to a protobuf message .
2151	conver TBase object to Message object
2152	Builds a Message that contains the key value pair of a Map entry
2153	name the proto message used for Map types after the thrift class name of the enclosing struct and the field name
2154	Recursively walk a path applying visitor to each path accepted by filter
2155	Recursively walk a path adding paths that are accepted by filter to accumulator
2156	Calculates the total size of all the contents of a directory that are accepted by filter . All subdirectories will be searched recursively and paths in subdirectories that are accepted by filter will also be counted .
2157	set number of columns into the given configuration .
2158	We can allow overriding the compression settings for just this scheme here
2159	Parse the method for a message
2160	Parse the message in a given InputStream using scpecified Method
2161	Parse the message in a given Message container
2162	The first element is expected to be a map or null . Anything else causes an error .
2163	Sets an internal configuration in jobConf so that remote Tasks instantiate appropriate object for this generic class based on protoClass
2164	set typeRef from conf
2165	Check if the container size is valid .
2166	Sets a new pattern for this StreamSearcher to use .
2167	Underscore the given word .
2168	Return the ordinal for the given number .
2169	Returns a ProtobufWritable for a given Protobuf class .
2170	Use this method to create valid instances of LzoW3CLogInputFormat
2171	For cases where we need to set hadoop1 output format in a hadoop2 Configuration object .
2172	Does the given word match?
2173	Replace the word with its pattern .
2174	Return the pluralized version of a word .
2175	Return true if the word is uncountable .
2176	Helper method to create lzo output file needed to create RecordWriter
2177	Tests validity of Writable class ensures consistent error message for both key and value tests .
2178	Returns a ThriftConverter for a given Thrift class .
2179	Returns class using Pig s class loader .
2180	Returns TypeRef using Pig class loader .
2181	Returns list of columns that need to be read from the RCFile . These columns are the intersection of currently required columns and columns stored in the file . If any required column does not exist in the file we need to read the unknown fields column which is usually the last last one .
2182	Sets an internal configuration in jobConf so that remote Tasks instantiate appropriate object for this generic class based on thriftClass
2183	Execute the given HTTP request .
2184	Add authorization to the HTTP request .
2185	Validate that it is indeed the starting of a listing of reddit things .
2186	Parse the data into a thing if possible .
2187	Parse JSON received from reddit into a list of submissions and comments . This parser expects the JSON to be of a listing of submissions and comments .
2188	Format a comma separated list of the given list .
2189	Wait if required .
2190	Add the basic authentication protocol to the OAuth request using the credentials of the Reddit application provided .
2191	Refresh this reddit token with data received from the new token .
2192	Get printable version of the given comment tree .
2193	Safely converts an object into an integer
2194	Safely converts an object into an double
2195	Safely converts an object into an boolean
2196	Safely converts an object into an long
2197	Parse a JSON object consisting of comments and add them to the already existing list of comments . This does NOT create a new comment list .
2198	Parse JSON received from reddit into a list of subreddits . This parser expects the JSON to be of a listing of subreddits .
2199	signature returns the HmacSHA256 encoded signature used for signed Instagram requests
2200	Sorts a Map
2201	Returns information about the media associated with that link .
2202	Create an Instagram object based on class - name and response .
2203	Creates an object from the JSON response and the class which the object would be mapped to .
2204	Checks that at least one of object1 or object2 is not null
2205	Checks that a string is not null or empty
2206	Checks that a URL is valid
2207	Checks that a URL is a valid OAuth callback
2208	Return an Instagram object with enforced signed header
2209	Configure the request with the connection settings of config
2210	Returns the body of the request
2211	Pretty print the JSON response in the logs
2212	Configures the callback url
2213	Configures the clientId
2214	Configure the clientSecret
2215	Configure the subscription type
2216	Configure the verifyToken for the subscription
2217	Configure the aspect for the subscription
2218	Configure the latitude for geography subscription
2219	Configure the longitude for geography subscription
2220	Configure the radius for geography subscription
2221	Deletes a subscription with the specified identifier .
2222	Deletes all the known subscription .
2223	Returns the currently active subscription .
2224	Turns a map into a form - urlencoded string
2225	Percent encodes a string
2226	Append given parameters to the query string of the url
2227	Concats a key - value map into a querystring - like String
2228	Parses and form - urldecodes a querystring - like string into a map
2229	Throw instagram exception to the client
2230	Adds a trade at the end of tick period .
2231	Increases the size of cached results buffer .
2232	Calculates the maximum drawdown from a cash flow over a series .
2233	Builds a list of split indexes from splitDuration .
2234	Calculates the regression line .
2235	Operates the trade at the index - th position
2236	Builds a JFreeChart time series from a Ta4j time series and an indicator .
2237	Generates a random decimal number between min and max .
2238	Generates a random tick .
2239	Increments the acceleration factor .
2240	Calculates the SAR .
2241	Calculates the cash flow for a single trade .
2242	Fills with last value till the end of the series .
2243	Loads the Logback configuration from a resource file . Only here to avoid polluting other examples with logs . Could be replaced by a simple logback . xml file in the resource folder .
2244	Builds a JFreeChart OHLC dataset from a ta4j time series .
2245	Builds an additional JFreeChart dataset from a ta4j time series .
2246	Adds the cash flow axis to the plot .
2247	Displays a chart in a frame .
2248	Removes the N first ticks which exceed the maximum tick count .
2249	Builds a list of empty ticks .
2250	Cancels all subscriptions and releases references to Observables and Observers . No more Observables can be added to this group after it has been destroyed and it becomes unusable .
2251	Call this method from your Activity or Fragment s onSaveInstanceState method
2252	WatchEvent not WatchEvent . Kind
2253	Asynchronously watch the directories .
2254	Internal method to be used by registerAll
2255	Set up a classloader for the execution of the main class .
2256	Add any relevant project dependencies to the classpath . Indirectly takes includePluginDependencies and ExecutableDependency into consideration .
2257	Add any relevant project dependencies to the classpath . Takes includeProjectDependencies into consideration .
2258	Resolve the executable dependencies for the specified project
2259	Examine the plugin dependencies to find the executable artifact .
2260	This is a convenient method to make the execute method a little bit more readable . It will define the workingDirectory to be the baseDir in case of workingDirectory is null . If the workingDirectory does not exist it will created .
2261	returns null for schedules without calendar service schedules
2262	Get the bounding box of this GTFS feed . We use a Rectangle2D rather than a Geotools envelope because GTFS is always in WGS 84 . Note that stops do not have agencies in GTFS .
2263	This just pulls some of the range checking logic out of the main trip checking loop so it s more readable .
2264	This wraps the main internal table loader method to catch exceptions and figure out how many errors happened .
2265	Get the uncompressed file size in bytes for the specified GTFS table .
2266	Sets field to null in statement or string array depending on whether postgres is being used .
2267	Copy primary entity tables as well as Pattern and PatternStops tables .
2268	Helper method to determine if a table exists within a namespace .
2269	Add columns for any required optional or editor fields that don t already exist as columns on the table . This method contains a SQL statement that requires PostgreSQL 9 . 6 + .
2270	Add a line to the list of loaded feeds to record the snapshot and which feed the snapshot replicates .
2271	Frequency entries have no ID in GTFS so we define one based on the fields in the frequency entry .
2272	Execute any remaining statements and return the total records processed .
2273	Removes any empty zip files from the final zip file .
2274	Export a table to the zipOutputStream to be written to the GTFS .
2275	Store an error that affects a single line of a single table . Wraps the underlying error factory method .
2276	Store an error that affects a single line of a single table . Add a bad value to it .
2277	Export a feed ID from the database to a zipped GTFS file in the specified export directory .
2278	Load the GTFS data in the specified file into the given JDBC DataSource .
2279	Once a feed has been loaded into the database examine its contents looking for various problems and errors .
2280	Deletes all tables for the specified feed . Simply put this is a drop schema SQL statement called on the feed s namespace .
2281	Create an automatically managed pool of database connections to the supplied JDBC database URL .
2282	Add a single key - value pair of supplemental info to this error .
2283	Factory Builder for cases where an entity has not yet been constructed but we know the line number .
2284	Factory Builder for cases where the entity has already been decoded and an error is discovered during validation
2285	Factory Builder for feed - wide error
2286	Gets the pattern speed for a given pattern for a specified date and time window .
2287	Get average speed for set of trips that begin within the time window in meters per second .
2288	Get earliest departure time for a set of trips .
2289	Get last arrival time for a set of trips .
2290	Get distance for a pattern . Uses the first trip associated with the pattern .
2291	Get average stop spacing for a pattern .
2292	Creates table for the specified Table inserts all entities for the iterable in batches and finally creates indexes on the table .
2293	Builder method that constructs a ValidateFieldResult with type String from the input result .
2294	Commits any outstanding error inserts and returns the error count via a SQL query .
2295	This executes any remaining inserts and commits the transaction .
2296	Actually this is converting the string . Can we use some JDBC existing functions for this?
2297	must be comparable to put into mapdb
2298	Get the length of a linestring in meters
2299	Convenience method to create a field in a GraphQL schema that fetches the number of rows in a table . Must be on a type that has a namespace field for context .
2300	A GraphQL field used to deliver lists of group counts . Currently the primary use of this field is for delivering trip counts grouped by either service_id pattern_id or route_id . These quantities can also be filtered by providing a string value for pattern_id
2301	Used to deduplicate time and stop sequence arrays . The same times may occur in many trips .
2302	Get list of trips that visit a stop for a specified date of service .
2303	Get the average headway in seconds for all trips at a stop over a time window .
2304	Get the route headway for a given service date at a stop over a time window in seconds
2305	Get the average headway in seconds for a route at a stop over a time window .
2306	Wrapper method to call Jackson to deserialize a JSON string into JsonNode .
2307	Create a new entity in the database from the provided JSON string . Note any call to create or update must provide a JSON string with the full set of fields matching the definition of the GTFS table in the Table class .
2308	Updates the stop times that reference the specified pattern stop .
2309	Checks that a set of string references to a set of reference tables are all valid . For each set of references mapped to a reference table the method queries for all of the references . If there are any references that were not returned in the query one of the original references was invalid and an exception is thrown .
2310	Check the stops in the changed region to ensure they remain in the same order . If not throw an exception to cancel the transaction .
2311	You must call this method after updating sequences for any stop times following the starting stop sequence to avoid overwriting these other stop times .
2312	Deletes an entity for the specified ID .
2313	Handle executing a prepared statement and return the ID for the newly - generated or updated entity .
2314	Get number of rows for a table . This is currently just used to check the number of entities for the agency table .
2315	Finds the set of tables that reference the parent entity being updated .
2316	For a given integer ID return the value for the specified field name for that entity .
2317	Add a GTFS feed to this cache with the given ID . NB this is not the feed ID because feed IDs are not unique when you load multiple versions of the same feed .
2318	Add a GTFS feed to this cache where the ID is calculated from the feed itself
2319	Is this service active on the specified date?
2320	Username and password can be null if connecting to a local instance with host - based authentication .
2321	Get only those fields included in the official GTFS specification for this table or used by the editor .
2322	Get only those fields marked as required in the official GTFS specification for this table .
2323	Get only those fields included in the official GTFS specification for this table i . e . filter out fields used in the editor or extensions .
2324	Create an SQL table with all the fields specified by this table object plus an integer CSV line number field in the first position .
2325	Create SQL string for use in insert statement . Note this filters table s fields to only those used in editor .
2326	Prepend a prefix string to each field and join them with a comma + space separator . Also if an export to GTFS is being performed certain fields need a translation from the database format to the GTFS format . Otherwise the fields are assumed to be asked in order to do a database - to - database export and so the verbatim values of the fields are needed .
2327	Create SQL string for use in update statement . Note this filters table s fields to only those used in editor .
2328	Generate select all SQL string . The minimum requirement parameter is used to determine which fields ought to be included in the select statement . For example if OPTIONAL is passed in both optional and required fields are included in the select . If EDITOR is the minimum requirement editor optional and required fields will all be included .
2329	Generate a select statement from the columns that actually exist in the database table . This method is intended to be used when exporting to a GTFS and eventually generates the select all with each individual field and applicable transformations listed out .
2330	Generate delete SQL string .
2331	Creates a SQL table from the table to clone . This uses the SQL syntax create table x as y not only copies the table structure but also the data from the original table . Creating table indexes is not handled by this method .
2332	Normalize stop sequences for stop times table so that sequences are all zero - based and increment by one . This ensures that sequence values for stop_times and pattern_stops are not initially out of sync for feeds imported into the editor .
2333	Returns the index of the key field within the array of fields provided for a given table .
2334	Ensures namespace is valid by ensuring it only has alphanumeric characters or the underscore for all characters in the string
2335	Finds the index of the field given a string name .
2336	We currently just expose them as immutable sets in RAM since all of the modification operations are optional .
2337	Static factory method returning a new instance of GTFSFeed containing the contents of the GTFS file at the supplied filesystem path . Forces the feedId to the supplied value if the parameter is non - null .
2338	MapDB - based implementation to find patterns .
2339	Get the length of a trip in meters .
2340	Get trip speed in meters per second .
2341	Get list of stop_times for a given stop_id .
2342	Get list of services for each date of service .
2343	Get the likely time zone for a stop using the agency of the first stop time encountered for the stop .
2344	Once all trips have been processed call this method to produce the final Pattern objects representing all the unique sequences of stops encountered . Returns map of patterns to their keys so that downstream functions can make use of trip pattern keys for constructing pattern stops or other derivative objects .
2345	We can t get idle broadcasts while the app is not running . Since our app will probably be killed before the device becomes idle let s set an alarm sometime in the future that will force an idle check .
2346	Call this as soon as we get a chance it will be unregistered whenever our app is killed .
2347	Interaction with the task manager service
2348	Add a job to the master list persisting it if necessary . If the JobStatus already exists it will be replaced .
2349	Whether this jobStatus object already exists in the JobStore .
2350	Remove the provided job . Will also delete the job if it was persisted .
2351	A job is rescheduled with exponential back - off if the client requests this from their execution logic . A caveat is for idle - mode jobs for which the idle - mode constraint will usurp the timeliness of the reschedule . For an idle - mode job no deadline is given .
2352	Make the array map empty . All storage is released .
2353	Receives callback from the service when a job has landed on the app . Colours the UI and post a message to uncolour it after a second .
2354	Receives callback from the service when a job that previously landed on the app must stop executing . Colours the UI and post a message to uncolour it after a second .
2355	Determines whether this controller can stop tracking the given job . The controller is no longer interested in a job once its time constraint is satisfied and the job s deadline is fulfilled - unlike other controllers a time constraint can t toggle back and forth .
2356	Inserts a String value into the mapping of this Bundle replacing any existing value for the given key . Either key or value may be null .
2357	Inserts a String array value into the mapping of this Bundle replacing any existing value for the given key . Either key or value may be null .
2358	Returns the value associated with the given key or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associated with the given key .
2359	Inserts a PersistableBundle value into the mapping of this Bundle replacing any existing value for the given key . Either key or value may be null .
2360	writes data to parcel
2361	Calculates the height of the SnackBar
2362	Simple Debug Print Mechanism
2363	Check if the properties are properly signed
2364	Check if the fields are properly signed
2365	Remove fields that should not be exported
2366	Mutates the passed Properties props variable . Puts the key value into the Map if the value is not null and is not empty .
2367	Basic utility to encode form text - handle the safe cases
2368	Simple utility method deal with a request that has the wrong URL when behind a proxy .
2369	This method verifies the signed HttpServletRequest
2370	This method will verify a collection of parameters
2371	Assumes data is all loaded
2372	the profile and do a launch .
2373	it is always null and we allow everything
2374	Validate the incoming tool_services against a tool consumer
2375	Validate incoming capabilities requested against out ToolConsumer
2376	Place the custom values into the launch
2377	Each time we touch the opposite ListView than the last one we have selected we need to activate it as the enable one
2378	Receives the distance scroll on listView .
2379	Serializes a SafeUrl into its opaque protocol message representation .
2380	Serializes a SafeStyle into its opaque protocol message representation .
2381	Serializes a SafeScript into its opaque protocol message representation .
2382	Serializes a SafeStyleSheet into its opaque protocol message representation .
2383	Serializes a TrustedResourceUrl into its opaque protocol message representation .
2384	Serializes a SafeHtml into its opaque protocol message representation .
2385	Wraps the radian between - PI and PI
2386	Rounds a number to the amount of decimals specified
2387	Calculates the value at x using linear interpolation
2388	Interpolates a quaternion between two others using spherical linear interpolation .
2389	Calculates the value at x y using bilinear interpolation
2390	Calculates the value at x y z using trilinear interpolation
2391	Blends two colors into one .
2392	Clamps the value between the low and high boundaries
2393	Returns a fast estimate of the inverse square root of the value
2394	Casts a value to a float . May return null .
2395	Casts a value to a byte . May return null .
2396	Casts a value to a short . May return null .
2397	Casts a value to an integer . May return null .
2398	Casts a value to a double . May return null .
2399	Casts a value to a long . May return null .
2400	Casts a value to a boolean . May return null .
2401	Calculates the mean of a set of values
2402	Returns the modulo of a by div with corrections for negative numbers .
2403	Converts a multiplication into a shift .
2404	Multiplies the components of this quaternion by a double scalar .
2405	Divides the components of this quaternion by a double scalar .
2406	Rotates the double components of a vector by this quaternion .
2407	Returns the square of the length of this quaternion .
2408	Normalizes this quaternion .
2409	Creates a new quaternion from the double imaginary components .
2410	Creates a new quaternion from the double components .
2411	Creates a new quaternion from the double angles in degrees around the x y and z axes .
2412	Creates a new quaternion from the double angles in radians around the x y and z axes .
2413	Creates a new quaternion from the rotation double angle in radians around the axis vector .
2414	Creates a new quaternion from the rotation float angle in degrees around the axis vector float components .
2415	Return the axis with the minimal value .
2416	Multiplies the float components of another complex with this one .
2417	Divides this complex by the float components of another one .
2418	Rotates the float components of a vector by this complex .
2419	Normalizes this complex .
2420	Converts this complex to a quaternion by using the provided float components vector as a rotation axis .
2421	Creates a new complex from the float components .
2422	Creates a new complex from the float angle in radians .
2423	Return the axis with the maximum value .
2424	Returns a hashcode for the specified value .
2425	Adds the float components of another quaternion to this one .
2426	Multiplies the components of this quaternion by a float scalar .
2427	Divides the components of this quaternion by a float scalar .
2428	Returns the axis of rotation for this quaternion .
2429	Returns the angles in radians around the x y and z axes that correspond to the rotation represented by this quaternion .
2430	Creates a new quaternion from the float imaginary components .
2431	Creates a new quaternion from the float components .
2432	Creates a new quaternion from the float angles in degrees around the x y and z axes .
2433	Creates a new quaternion from the float angles in radians around the x y and z axes .
2434	Creates a new quaternion from the rotation float angle in radians around the axis vector .
2435	Creates a new quaternion from the rotation double angle in radians around the axis vector double components .
2436	Multiplies the double components of another complex with this one .
2437	Divides this complex by the double components of another one .
2438	Rotates the double components of a vector by this complex .
2439	Converts this complex to a quaternion by using the provided double components vector as a rotation axis .
2440	Creates a new complex from the double components .
2441	Creates a new complex from the double angle in radians .
2442	move childView inside ScalableLayout
2443	move and resize childView inside ScalableLayout
2444	These have trailing newlines that we want to avoid spanning
2445	Takes a compatibility assertion about an expression or type called a constraint formula and reduces it to a set of bounds on inference variables . Often a constraint formula reduces to other constraint formulas which must be recursively reduced . A procedure is followed to identify these additional constraint formulas and ultimately to express via a bound set the conditions under which the choices for inferred types would render each constraint formula true .
2446	Execute a transformation on all the type parameters of this element .
2447	Create a solve reference to the given symbol .
2448	Create an unsolved reference specifying the type of the value expected .
2449	The term proper type excludes such types that mention inference variables .
2450	See JLS 4 . 10 . 4 . Least Upper Bound .
2451	See JLS 15 . 27 . 3 . Type of a Lambda Expression
2452	See JLS 9 . 9
2453	See JLS 5 . 1 . 10 . Capture Conversion .
2454	Java Parser can t differentiate between packages internal types and fields . All three are lumped together into FieldAccessExpr . We need to differentiate them .
2455	Given a constructor call find out to which constructor declaration it corresponds .
2456	Given a method call find out to which method declaration it corresponds .
2457	For some reasons LambdaExprs are duplicate and the equals method is not implemented correctly .
2458	This is an hack around an issue in JavaParser
2459	this inserted in the given point which type would have?
2460	A reachable break statement exits a statement if within the break target either there are no try statements whose try blocks contain the break statement or there are try statements whose try blocks contain the break statement and all finally clauses of those try statements can complete normally .
2461	See JLS 14 . 21
2462	Try to solve a symbol just in the declaration it does not delegate to the container .
2463	Replace TypeDeclaration . solveMethod
2464	Create a Value from a ValueDeclaration .
2465	Determine whether a potentially applicable generic method m is applicable for a method invocation that provides no explicit type arguments .
2466	Return if m2 is more specific than m1
2467	Not sure if should look if the parent is an assignment context
2468	Generates predictions for given feature vector .
2469	Loads model from stream .
2470	Retrieves nodes from root to leaf and returns leaf index .
2471	Retrieves nodes from root to leaf and returns leaf value .
2472	Returns a JSON string of nested objects by the given flattened JSON string .
2473	Returns a flattened JSON string .
2474	Returns a flattened JSON as Map .
2475	Returns a list that is a concatenation of the given lists . The returned list is a view of the underlying lists without copying the elements . The returned list is unmodifiable . Modifications to underlying lists will be visible through the concatenation view .
2476	Creates an event stream that emits an impulse on every invalidation of the given observable .
2477	Creates an event stream that emits the given observable immediately for every subscriber and re - emits it on every subsequent invalidation of the observable .
2478	Returns a stream that on each animation frame emits the duration elapsed since the previous animation frame in nanoseconds .
2479	Returns an event stream that emits all the events emitted from any of the event streams in the given observable set . When an event stream is added to the set the returned stream will start emitting its events . When an event stream is removed from the set its events will no longer be emitted from the returned stream .
2480	Creates an ObservableList wrapper that is able to temporarily block list change notifications .
2481	Runs the given computation making sure this indicator is on . When done this indicator is reset to the previous state .
2482	Overridden to avoid second transformation on removeObserver
2483	Return a copy of this Metadata
2484	Strip everything up to and including a given prefix from a string .
2485	Configure the digester . Assume that the builder object will be pushed after this method is called .
2486	Checks for PrettyFaces mapping annotations on a single class
2487	Joins the list of values .
2488	Initialize Key Stored Values .
2489	Detects if the current device is an iPhone .
2490	Detects if the current browser is based on WebKit .
2491	Detects if the current browser is a Windows Mobile device . Excludes Windows Phone 7 . x and 8 devices . Focuses on Windows Mobile 6 . xx and earlier .
2492	Detects if the current browser is any BlackBerry . Includes BB10 OS but excludes the PlayBook .
2493	Detects if the current browser is the Symbian S60 Open Source Browser .
2494	Detects if the current browser is on a PalmOS device .
2495	Detects Opera Mobile on an Android phone .
2496	Detects Opera Mobile on an Android tablet .
2497	Detects if the current device is on one of the Maemo - based Nokia Internet Tablets .
2498	Detects if the current device is a mobile device . This method catches most of the popular modern devices . Excludes Apple iPads and other modern tablets .
2499	The quick way to detect for a tier of devices . This method detects for devices which can display iPhone - optimized web content . Includes iPhone iPod Touch Android Windows Phone 7 and 8 BB10 WebOS Playstation Vita etc .
2500	The quick way to detect for a tier of devices . This method detects for all other types of phones but excludes the iPhone and RichCSS Tier devices .
2501	Return true if the value is an EL expression .
2502	Return true if the value contains an EL expression .
2503	Creates the required script for the supplied URL
2504	Create a new EL Method binding using distinct expressions to submit and retrieve values . The method intended for use in submission must accept a single parameter of the expected type .
2505	Returns true if the given string contains a field descriptor of one of the annotations we are looking for .
2506	Copy proxied response headers back to the servlet client .
2507	Encodes characters in the query or fragment part of the URI .
2508	Return a URI representation of this URL including path and query string
2509	Build a query string from the given URL . If a ? character is encountered in the URL the any characters up to and including the first ? will be ignored .
2510	Get the first value of given parameter name .
2511	Get the array of values for a given parameter name .
2512	Add parameters from the given URL . If a ? character is encountered in the URL the any characters up to and including the first ? will be ignored . If a parameter already exists append new values to the existing list of values for that parameter .
2513	Canonicalize the given viewId then pass that viewId to the next ViewHandler in the chain .
2514	Get this patterns pattern parser instance .
2515	Return a list of validators that belong to the given parameter .
2516	Build a query string from the given URL . If a ? character is encountered in the URL the any characters up to and including the first ? will be ignored . This method assumes that the given parameters have already been URL encoded .
2517	Get the query string portion of the given URL . If no query string separator character ? can be found return the string unchanged .
2518	Add a single parameter with the given values .
2519	Simple caching mechanism for the providers on a per request basis
2520	Returns the number of Not s that have been evaluated in the current evaluation process .
2521	Set a query parameter to be passed to the specified View Id .
2522	Builds a standard JSF 2 . 0 implicit navigation outcome
2523	Handles class entry in a WEB - INF .
2524	Set a literal query string without additional encoding or decoding . A leading ? character is optional ; the builder will add one if necessary .
2525	Exclude the given query - parameter names from encoding .
2526	For all required values of the given PrettyUrlMapping extract values from their mapped backing beans and create a URL based on the url - pattern .
2527	Sends an error response to the client using the specified HTTP status code .
2528	Processes the annotation on the supplied class .
2529	Adds the context path to the given context - relative URL .
2530	If the given URL is prefixed with this request s context - path return the URI without the context path . Otherwise return the URI unchanged .
2531	Translate a value into the matching one from a resource bundle in specified language .
2532	Given the string value of the Faces Servlet mapping return a string that is guaranteed to match when a servlet forward is issued . It doesn t matter which FacesServlet we get to as long as we get to one .
2533	Handle DynaView processing . This method will end the Faces life - cycle .
2534	Builds the correct required type including actual type arguments in case of parameterized types .
2535	Returns a proxy on the customAnnotation having the same type than the referenceAnnotation
2536	Returns the filtered fields for a particular type
2537	Returns all non - primitive fields for the entire class hierarchy of a type
2538	Puts into the underlying
2539	Remove from the underlying
2540	Attempts to load the agent through the Attach API
2541	Checks whether the agent is available
2542	Copies the sources contents to the given destination file .
2543	Checks whether the resource and the file are identical .
2544	files to add under WEB - INF ;
2545	override of parent ; validates configuration before initializing the output stream .
2546	Overridden from ZipArchiver class to deal with web . xml
2547	Construct a manifest from Ant s default manifest file .
2548	Add a section to the manifest
2549	Write the manifest out to a print writer .
2550	Get the warnings for this manifest .
2551	Get a particular section from the manifest
2552	Copies the specified file to the specified path creating any ancestor directory structure as necessary .
2553	Allows the manifest for the archive file to be provided inline in the build file rather than in an external file .
2554	Overridden from Zip class to deal with manifests and index lists .
2555	Make sure we don t think we already have a MANIFEST next time this task gets executed .
2556	reset to default values .
2557	Writes the directory entries from the first and the filenames from the second list to the given writer one entry per line .
2558	Grab lists of all root - level files and all directories contained in the given archive .
2559	This method wraps the input stream with the corresponding decompression method
2560	perform the GZip compression operation .
2561	Merge in another section
2562	File to incorporate as application . xml .
2563	Adds archive .
2564	Adds archives .
2565	perform the Snappy compression operation .
2566	Add the given resources .
2567	Ensure all parent dirs of a given entry have been added .
2568	Adds a new entry to the archive takes care of duplicates as well .
2569	Create an empty zip file
2570	Makes this instance reset all attributes to their default values and forget all children .
2571	compress a stream to an output stream
2572	compress a resource to an output stream
2573	Set the maximum table size . If this is below the maximum size of the dynamic table used by the encoder the beginning of the next header block MUST signal this change .
2574	Unsigned Little Endian Base 128 Variable - Length Integer Encoding
2575	Returns the lowest index value for the given header field name in the static table . Returns - 1 if the header field name is not in the static table .
2576	Returns the index value for the given header field in the static table . Returns - 1 if the header field is not in the static table .
2577	create a map of header name to index value to allow quick lookup
2578	Returns the number of bytes required to Huffman encode the input string literal .
2579	Return the number of header fields in the dynamic table .
2580	Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
2581	Set the maximum size of the dynamic table . Entries are evicted from the dynamic table until the size of the table is less than or equal to the maximum size .
2582	Encode the header field into the header block .
2583	Set the maximum table size .
2584	Encode integer according to Section 5 . 1 .
2585	Encode string literal according to Section 5 . 2 .
2586	Encode literal header field according to Section 6 . 2 .
2587	Ensure that the dynamic table has enough room to hold headerSize more bytes . Removes the oldest entry from the dynamic table until sufficient space is available .
2588	Return the header field at the given index . Exposed for testing .
2589	Returns the header entry with the lowest index value for the header field . Returns null if header field is not in the dynamic table .
2590	Returns the lowest index value for the header field name in the dynamic table . Returns - 1 if the header field name is not in the dynamic table .
2591	Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
2592	Returns the hash code for the given header field name .
2593	Decompresses the given Huffman coded string literal .
2594	Set the comma delimited list of default scripts
2595	Verifies that two shorts are equal .
2596	Verifies that two integers are not equal .
2597	Verifies that the actual value is greater than the expected one .
2598	Verifies that the actual value is great than the expected one .
2599	Asserts that two characters are equal .
2600	Asserts that two characters are not equal .
2601	Asserts that the actual value is less than the other one .
2602	Asserts that the actual value is less than or equal to the other one .
2603	Asserts that the actual value is greater than the other one .
2604	Asserts that the actual value is greater than or equal to the other one .
2605	Asserts that the actual value is a lowercase character .
2606	Asserts that the actual value is a uppercase character .
2607	Asserts that the number of elements in the given array is equal to the expected one .
2608	Asserts that the given array contains the given values in any order .
2609	Asserts that the actual map contain the given key .
2610	Asserts that the actual map not contains the given key .
2611	Asserts that the actual map contain the given value .
2612	Asserts that the actual map does not contain the given value .
2613	Asserts that the actual map does not contain the duplicate values .
2614	Verifies that two BigDecimals are equal .
2615	Verifies that the actual value is zero .
2616	Verifies that the actual value is not zero .
2617	Verifies that the actual value is positive .
2618	Verifies that the actual value is negative .
2619	Verifies that the actual value is equal to the given one within a positive offset .
2620	Verifies that the given array contains the given value at the given index .
2621	Verifies that two doubles are not equal .
2622	Verifies that the actual value is not greater than the expected .
2623	Verifies that the actual value is less than the expected .
2624	Verifies that the actual value is not less than the expected .
2625	Asserts that the given array contains only the given values and nothing else in any order .
2626	Verifies that the given array contains the given sequence of values without any other values between them .
2627	Asserts that two objects are equal .
2628	Asserts that two objects are not equal .
2629	Asserts that two objects refer to the same instance .
2630	Asserts that two objects do not refer to the same instance .
2631	Asserts that the given array does not contain the given values .
2632	Verifies that the actual is sorted into ascending order according to the natural ordering of its elements . Empty arrays are considered sorted .
2633	Wraps an existing matcher decorating its description with the name specified . All other functions are delegated to the decorated matcher including its mismatch description .
2634	A matcher matching non - null and non - empty strings
2635	Get the middle part of the method name in compliance with the naming convention in the JavaBeans API specification .
2636	checks whether a getter or setter exists on the specified type or any of its super classes excluding Object . respects JsonIgnore accordingly .
2637	access all annotationresolvers that are registered
2638	sets the expected response status code . If the response status code does not match any of the values specified then the request is considered to have failed . Defaults to accepting 200 201 204 . If set to - 1 then any status code is considered a success .
2639	Lets have class name less than 200 to allow new generators safelly to add more sufixes there if needed
2640	Returns the boolean value of the property or the default value .
2641	the real filter method called independent of the response code
2642	convert an array of classes to an array of strings to be usable in js context .
2643	helper method to make RestServiceClassCreator easier to maintain
2644	Process the parameters of the token request .
2645	Process the token request whose flow is Resource Owner Password Credentials .
2646	Handle an end - user s decision on an authorization request .
2647	Process the end - user s decision .
2648	Collect claims of the end - user .
2649	Handle an authorization decision request .
2650	Issue a JSON or a JWT containing user information .
2651	Compute the initial value for the login ID field in the authorization page .
2652	Handle a request for a JWK Set document .
2653	Handle an introspection request .
2654	Create an authorization header for the service owner .
2655	Create an authorization header for the service .
2656	Get an instance of JAX - RS client .
2657	Create an instance of JAX - RS client .
2658	Set a connection timeout .
2659	Set a read timeout .
2660	Execute an Authlete API call .
2661	Handle an authorization request .
2662	Process the parameters of the introspection request .
2663	Process the userinfo request with the access token .
2664	Handle a userinfo request .
2665	Process the authorization request .
2666	Check whether an end - user has already logged in or not .
2667	Process the parameters of the revocation request .
2668	Utility method for extracting a single client certificate from the default certificate extractors . Calls extractClientCertificateChain and returns the first entry in the array if any null otherwise .
2669	We cannot currently remove formerly implied repos because we can t distinguish between the above states .
2670	Create a self - signed X . 509 cert
2671	Get the metric fullname .
2672	Generate relationship file for pom transfer .
2673	Commit the changelog entries
2674	for histograms .
2675	if repo with this name already exists we need to use a different name
2676	Get the next distinct name based on the query result by filter of getNameFilter
2677	Non - blocking send with a logback formatter to format the message .
2678	Blocking send . The message will be available to consumers immediately . Wait for at most the given time for the operation to complete .
2679	Blocking send with a logback formatter to format the message .
2680	This is to register ISPN caches produced by this provider so that the Metrics knows them .
2681	Write sealed records to a zip file .
2682	Read records from input stream and execute consumer function .
2683	Provides target group store key for a given group name . This is meant to provide the same instance of the key for a name to be able to synchronize promotion requests based on this instance .
2684	path mask checking
2685	Clear obsolete files after a meta is generated . This may be http download metadata etc .
2686	Retrieve what is behind koji - or koji - binary -
2687	private HttpServletRequest request ;
2688	Load all store definitions from disk and apply consumer function .
2689	Load store definitions from disk and apply consumer function .
2690	private ExecutorService executors ;
2691	Create http request context and apply site config .
2692	Create http client and apply site config .
2693	Repair one remote repository .
2694	If group members changed should clear the cascading groups metadata cache
2695	Set system properties for keycloak to use when filtering keycloak . json ...
2696	Returns an ArrayList of File Ranges for the given stream .
2697	Populates CloudQueueMessage objects from the XMLStreamReader ; the reader must be at the Start element of QueuesElement .
2698	Creates the table in the storage service with the specified request options and operation context if it does not already exist .
2699	Deletes the table from the storage service using the specified request options and operation context .
2700	Deletes the table from the storage service using the specified request options and operation context if it exists .
2701	Uploads the table s permissions using the specified request options and operation context .
2702	Downloads the permissions settings for the table using the specified request options and operation context .
2703	Populates the default timeout retry policy and location mode from client if they are null .
2704	Gets the Extended Error information from the response stream .
2705	Returns an access condition such that an operation will be performed only if resource s current sequence number is less than or equal to the specified value . This condition only applies to page blobs .
2706	Returns an access condition such that an operation will be performed only if resource s current sequence number is less than the specified value . This condition only applies to page blobs .
2707	Returns an access condition such that an operation will be performed only if resource s current sequence number is equal to the specified value . This condition only applies to page blobs .
2708	RESERVED FOR INTERNAL USE . Applies the access conditions to the request .
2709	RESERVED FOR INTERNAL USE . Applies the source access conditions to the request .
2710	RESERVED FOR INTERNAL USE . Applies the access condition to the request .
2711	RESERVED FOR INTERNAL USE . Applies the lease access condition to the request .
2712	RESERVED FOR INTERNAL USE . Applies the sequence number access conditions to the request .
2713	RESERVED FOR INTERNAL USE . Verifies the condition is satisfied .
2714	Creates a filter condition using the specified logical operator on two filter conditions .
2715	Sets the list of URIs for all locations .
2716	RESERVED FOR INTERNAL USE . Writes a collection of shared access policies to the specified stream in XML format .
2717	Generates the message request body from a string containing the message . The message must be encodable as UTF - 8 . To be included in a web request this message request body must be written to the output stream of the web request .
2718	Add x - ms - prefixed headers in a fixed order .
2719	Append a string to a string builder with a newline constant
2720	Constructs a canonicalized string from the request s headers that will be used to construct the signature string for signing a Blob or Queue service request under the Shared Key Full authentication scheme .
2721	Constructs a canonicalized string that will be used to construct the signature string for signing a Table service request under the Shared Key authentication scheme .
2722	Computes a signature for the specified string using the HMAC - SHA256 algorithm .
2723	Signs a request using the specified operation context under the Shared Key authentication scheme .
2724	Gets the first message from a list of queue messages if any .
2725	Adds a message to the back of the queue with the specified options .
2726	Clears all messages from the queue using the specified request options and operation context .
2727	Creates the queue using the specified request options and operation context .
2728	Creates the queue if it does not already exist using the specified request options and operation context .
2729	Deletes the queue using the specified request options and operation context .
2730	Deletes the queue if it exists using the specified request options and operation context .
2731	Deletes the specified message from the queue using the specified request options and operation context .
2732	Downloads the queue s metadata and approximate message count value using the specified request options and operation context .
2733	Returns a value that indicates whether the queue existse using the specified request options and operation context .
2734	Peeks a message from the queue using the specified request options and operation context . A peek request retrieves a message from the front of the queue without changing its visibility .
2735	Peeks a specified number of messages from the queue . A peek request retrieves messages from the front of the queue without changing their visibility .
2736	Peeks a set of messages from the queue using the specified request options and operation context . A peek request retrieves messages from the front of the queue without changing their visibility .
2737	Retrieves a message from the front of the queue using the specified request options and operation context . This operation marks the retrieved message as invisible in the queue for the specified visibility timeout period .
2738	Retrieves the specified number of messages from the front of the queue using the default request options . This operation marks the retrieved messages as invisible in the queue for the default visibility timeout period .
2739	Retrieves the specified number of messages from the front of the queue using the specified request options and operation context . This operation marks the retrieved messages as invisible in the queue for the default visibility timeout period .
2740	Updates the specified message in the queue with a new visibility timeout value in seconds .
2741	Updates a message in the queue using the specified request options and operation context .
2742	Uploads the queue s permissions using the specified request options and operation context .
2743	Downloads the permissions settings for the queue using the specified request options and operation context .
2744	Returns the transformed URI for the resource if the given credentials require transformation .
2745	Gets the hour metrics table for a specific storage service .
2746	Gets the minute metrics table for a specific storage service .
2747	Gets the content of the message as a byte array .
2748	Gets the content of the message as a string .
2749	Parse and return the response .
2750	Reserved for internal use . Adds continuation token values to the specified query builder if set .
2751	Reserved for internal use . Constructs an HttpURLConnection to perform a merge operation .
2752	Reserved for internal use . Constructs an HttpURLConnection to perform a single entity query operation .
2753	Reserved for internal use . Constructs an HttpURLConnection to perform an update operation .
2754	Sets the ACL for the table . Sign with length of aclBytes .
2755	Writes the contents of the ServiceProperties to the stream in xml format .
2756	Writes the retention policy to the XMLStreamWriter .
2757	Writes the given CORS properties to the XMLStreamWriter .
2758	Writes the given metrics properties to the XMLStreamWriter .
2759	Writes the given logging properties to the XMLStreamWriter .
2760	Generates a web request to abort a copy operation .
2761	Adds the share snapshot if present . Only for listing files and directories which requires a different query param .
2762	Creates a request to copy a file Sign with 0 length .
2763	Constructs a web request to create a new share . Sign with 0 length .
2764	Constructs a web request to delete the share and all of the directories and files within it . Sign with no length specified .
2765	Constructs a web request to return the ACL for this share . Sign with no length specified .
2766	Constructs a HttpURLConnection to download the file Sign with no length specified .
2767	Constructs a HttpURLConnection to return the file s system properties Sign with no length specified .
2768	Constructs a HttpURLConnection to return a list of the file s file ranges . Sign with no length specified .
2769	Constructs a web request to return the user - defined metadata for this share . Sign with no length specified .
2770	Constructs a web request to return the stats such as usage for this share . Sign with no length specified .
2771	Gets the share Uri query builder .
2772	Constructs a web request to return the user - defined metadata . Sign with no length specified .
2773	Constructs a request to return a listing of all shares in this storage account . Sign with no length specified .
2774	Constructs a web request to set user - defined metadata for the share Sign with 0 Length .
2775	Constructs a web request to set user - defined metadata for the directory Sign with 0 Length .
2776	Constructs a web request to create a new directory . Sign with 0 length .
2777	Constructs a web request to delete the directory and all of the directories and files within it . Sign with no length specified .
2778	Constructs a web request to return the properties for this directory . Sign with no length specified .
2779	Constructs a request to return a listing of all files and directories in this storage account . Sign with no length specified .
2780	Constructs a HttpURLConnection to upload a file .
2781	Constructs a HttpURLConnection to upload a file range . Sign with file size for update or 0 for clear .
2782	Constructs a HttpURLConnection to set the file s size Sign with zero length specified .
2783	Constructs a HttpURLConnection to set metadata Sign with 0 length .
2784	Constructs a HttpURLConnection to set the file s metadata Sign with 0 length .
2785	Constructs a HttpURLConnection to create a snapshot of the share .
2786	Constructs a HttpURLConnection to set the file s properties Sign with zero length specified .
2787	Closes this input stream and releases any system resources associated with the stream .
2788	Dispatches a read operation of N bytes .
2789	Reads the next byte of data from the input stream . The value byte is returned as an int in the range 0 to 255 . If no byte is available because the end of the stream has been reached the value - 1 is returned . This method blocks until input data is available the end of the stream is detected or an exception is thrown .
2790	Performs internal read to the given byte buffer .
2791	Repositions this stream to the position at the time the mark method was last called on this input stream . Note repositioning the file read stream will disable file MD5 checking .
2792	Skips over and discards n bytes of data from this input stream . The skip method may for a variety of reasons end up skipping over some smaller number of bytes possibly 0 . This may result from any of a number of conditions ; reaching end of file before n bytes have been skipped is only one possibility . The actual number of bytes skipped is returned . If n is negative no bytes are skipped .
2793	Runs the blob getting started sample .
2794	Runs the queue getting started sample .
2795	Runs the table getting started sample .
2796	Runs the table payload format sample .
2797	Prints the specified text value to the view and to LogCat .
2798	Prints out the exception information .
2799	Prints out the sample start information .
2800	Prints out the sample complete information .
2801	Constructs a canonicalized string for signing a request .
2802	Gets the last request result encountered for the operation .
2803	Validates that the log given is of the correct log type .
2804	Makes the next listBlob call if necessary and updates the currentIterator .
2805	Requests the service to start copying a blob s contents properties and metadata to a new file .
2806	Requests the service to start copying a file s contents properties and metadata to a new file using the specified access conditions lease ID request options and operation context .
2807	Requests the service to start copying an Azure File s contents properties and metadata to a new Azure File .
2808	Requests the service to start copying an Azure File s contents properties and metadata to a new Azure File using the specified access conditions lease ID request options and operation context .
2809	Requests the service to start copying a URI s contents properties and metadata to a new Azure File .
2810	Requests the service to start copying a URI s contents properties and metadata to a new Azure File using the specified access conditions lease ID request options and operation context .
2811	Creates a file . If the file already exists this will replace it .
2812	Creates a file using the specified access condition request options and operation context . If the file already exists this will replace it .
2813	Helper to delete an empty file in the case of an exception
2814	Downloads a file to a string using the specified encoding .
2815	Returns a collection of file ranges and their starting and ending byte offsets using the specified request options and operation context .
2816	Opens an output stream object to write data to the file . The file must already exist and any existing data may be overwritten .
2817	Opens an output stream object to write data to the file using specified request options and operation context . The file must already exist and any existing data may be overwritten .
2818	Opens an output stream object to write data to the file using the specified lease ID request options and operation context . If the length is specified a new file will be created with the length specified . Otherwise the file must already exist and a stream of its current length will be opened .
2819	Uploads a local file . If the file already exists on the service it will be overwritten .
2820	Uploads a file from a local file . If the file already exists on the service it will be overwritten .
2821	Uploads a file from a string using the platform s default encoding . If the file already exists on the service it will be overwritten .
2822	Uploads a file from a string using the specified encoding . If the file already exists on the service it will be overwritten .
2823	Uploads a range to a file .
2824	Uploads a range to a file using the specified lease ID request options and operation context .
2825	Used for both uploadRange and clearRange .
2826	Resizes the file to the specified size .
2827	Uploads the source stream data to the file . If the file already exists on the service it will be overwritten .
2828	Uploads the source stream data to the file using the specified access condition request options and operation context . If the file already exists on the service it will be overwritten .
2829	Retrieves the parent name for a file URI .
2830	Returns the file s share .
2831	Appends a path to a URI correctly using the given separator .
2832	Gets the blob name from the URI .
2833	Gets the canonical path for an object from the credentials .
2834	Get the container name from address from the URI .
2835	Gets the file name from the URI .
2836	Get the share name from address from the URI .
2837	Get the table name from address from the URI .
2838	Get the container queue or table name from address from the URI .
2839	Gets the container URI from a blob address
2840	Gets the share URI from a file address
2841	Parses a query string into a one to many hashmap .
2842	Get the signature hash embedded inside the Shared Access Signature for the blob or file service .
2843	Get the signature hash embedded inside the Shared Access Signature for queue service .
2844	Get the signature hash embedded inside the Shared Access Signature for the table service .
2845	Creates the directory using the specified options and operation context .
2846	Creates the directory if it does not exist using the specified request options and operation context .
2847	Deletes the directory if it exists using the specified request options and operation context .
2848	Returns a value that indicates whether the directory exists using the specified request options and operation context .
2849	Returns a result segment of an enumerable collection of files and directories for this File service client .
2850	Returns the share for this directory .
2851	Constructs a web request to clear all the messages in the queue . Sign the web request with a length of - 1L .
2852	Constructs a web request to delete a message from the queue . Sign the web request with a length of - 1L .
2853	Constructs a web request to download user - defined metadata and the approximate message count for the queue . Sign the web request with a length of - 1L .
2854	Constructs a web request to return a listing of all queues in this storage account . Sign the web request with a length of - 1L .
2855	Constructs a web request to retrieve a specified number of messages from the front of the queue without changing their visibility . Sign the web request with a length of - 1L .
2856	Constructs a web request to retrieve messages from the front of the queue . Sign the web request with a length of - 1L .
2857	Constructs a web request to update the visibility timeout of a message in the queue . Optionally updates the message content if a message request body is written to the output stream of the web request . The web request should be signed with the length of the encoded message request body if one is included or a length of 0 if no message request body is included .
2858	Sets the ACL for the queue . Sign with length of aclBytes .
2859	Constructs a web request to return the ACL for this queue . Sign with no length specified .
2860	Split a delimiter separated string into an ArrayList
2861	Split a delimiter separated string into a EnumSet of CorsHttpMethods
2862	Sets the name of the access key to be used when signing the request .
2863	Gets the HmacSha256 associated with the account key .
2864	Validate that the IP address is IPv4 .
2865	Decodes a given Base64 string into its corresponding byte array .
2866	Encodes a byte array as a Base64 string .
2867	Determines whether the given string contains only Base64 characters .
2868	Checks if a container name is valid .
2869	Checks if a blob name is valid .
2870	Checks if a file name is valid .
2871	Checks if a table name is valid .
2872	Returns an enumerable collection of shares whose names begin with the specified prefix for this File service client .
2873	Returns an enumerable collection of shares whose names begin with the specified prefix for this File service client using the specified details settings request options and operation context .
2874	Returns a result segment of an enumerable collection of shares for this File service client .
2875	Returns a result segment of an enumerable collection of shares whose names begin with the specified prefix for this File service client .
2876	Returns an enumerable collection of shares whose names begin with the specified prefix using the specified details settings request options and operation context .
2877	Sets a boolean representing whether or not the reflected entity cache is disabled . For most scenarios disabling the reflected entity cache is not recommended due to its effect on performance .
2878	Gets the Date
2879	Gets the metadata from the request The response from server .
2880	Gets if the request was encrypted by the server .
2881	Gets the Extended Error information .
2882	Parse the table extended error information from the response body .
2883	Parses the error exception details from the Json - formatted response .
2884	RESERVED FOR INTERNAL USE . Gets the HashMap of SharedAccessPolicies from the response .
2885	Gets the copyState
2886	Gets the FileShareAttributes from the given request .
2887	Gets the FileDirectoryAttributes from the given request .
2888	Gets the CloudFileAttributes from the given request
2889	Reserved for internal use . Returns the HTTP verb for a table operation .
2890	Fires the event to all subscribed event listeners .
2891	Fires events representing that a request will be sent .
2892	Fires events representing that a response has been received .
2893	Fires events representing that an error occurred when receiving the response .
2894	Fires events representing that a response received from the service is fully processed .
2895	Fires events representing that a request will be retried .
2896	Asserts a continuation token is of the specified type .
2897	Asserts that the specified integer is in the valid range .
2898	Asserts that the specified value is greater than or equal to the min value .
2899	Returns a value representing whether the maximum execution time would be surpassed .
2900	Returns a value representing the remaining time before the operation expires .
2901	Returns a value that indicates whether a specified URI is a path - style URI .
2902	Returns a boolean indicating whether the host of the specified URI is DNS .
2903	Reads character data for the Etag element from an XML stream reader .
2904	Returns an unexpected storage exception .
2905	Returns the standard header value from the specified connection request or an empty string if no header value has been specified for the request .
2906	Returns a GMT date in the specified format
2907	Returns a GMT date for the specified string in the RFC1123 pattern .
2908	Determines the relative difference between the two specified URIs .
2909	Serializes the parsed StorageException . If an exception is encountered returns empty string .
2910	Logs the HttpURLConnection response . If an exception is encountered logs nothing .
2911	Trims the specified character from the end of a string .
2912	Trims whitespace from the beginning of a string .
2913	Given a String representing a date in a form of the ISO8601 pattern generates a Date representing it with up to millisecond precision .
2914	Determines which location can the listing command target by looking at the continuation token .
2915	Populates the default timeout and retry policy from client if they are not set .
2916	Read a String from the stream .
2917	Read a quoted String from the stream .
2918	Read a Boolean from the stream .
2919	Read a Date from the stream .
2920	Read a Double from the stream .
2921	Read a UUID from the stream .
2922	Read an Integer from the stream .
2923	Read a Long from the stream .
2924	Read a URI from the stream .
2925	Read a delimiter from the stream .
2926	Checks to see if the next character is the delimiter expected .
2927	Read a field from the stream .
2928	Generates a new retry policy for the current request attempt .
2929	Indicates if the iterator has another element .
2930	Reserved for internal use . Sets the class type of the entity returned by the query .
2931	Reserved for internal use . Sets the resolver to project the entity retrieved as a particular type .
2932	Reserved for internal use . Writes a MIME part boundary to the output stream .
2933	Reserved for internal use . Writes a MIME part boundary closure to the output stream .
2934	Reserved for internal use . Writes a MIME content type string to the output stream .
2935	Adds a value to the URI with escaping .
2936	Add query parameter to an existing Uri . This takes care of any existing query parameters in the Uri .
2937	Adds the optional header .
2938	Creates the web request .
2939	Deletes the specified resource . Sign with no length specified .
2940	Creates a HttpURLConnection used to retrieve the Analytics service properties from the storage service .
2941	Gets the user agent to send over the wire to identify the client .
2942	Sets the metadata . Sign with 0 length .
2943	Creates a HttpURLConnection used to set the Analytics service properties on the storage service .
2944	Closes this output stream and releases any system resources associated with this stream . If any data remains in the buffer it is committed to the service .
2945	Commits the file .
2946	Dispatches a write operation for a given length .
2947	Flushes this output stream and forces any buffered output bytes to be written out . If any data remains in the buffer it is committed to the service .
2948	Waits for one task to complete
2949	Writes length bytes from the specified byte array starting at offset to this output stream .
2950	Writes all data from the InputStream to the File .
2951	Writes the data to the buffer and triggers writes to the service as needed .
2952	This generates a domain name for the given service .
2953	Evaluates connection settings and returns a CloudStorageAccount representing Development Storage .
2954	Evaluates connection settings and configures a CloudStorageAccount accordingly .
2955	Creates a new Analytics service client .
2956	Creates a new Blob service client .
2957	Creates a new File service client .
2958	Creates a new Queue service client .
2959	Creates a new Table service client .
2960	Returns a shared access signature for the account .
2961	Reserved for internal use . Generates the request identity consisting of the specified entry name or the PartitionKey and RowKey pair from the operation to identify the operation target .
2962	Reserved for internal use . Generates the request identity string for the specified table . The request identity string combines the table name with the PartitionKey and RowKey from the operation to identify specific table entities . This request identity is already UrlEncoded .
2963	Resets the operation status flags between operations .
2964	Returns either the held exception from the operation if it is set otherwise the translated exception .
2965	Post - Stream Retrieval function .
2966	Returns extended error information for this request .
2967	Adds a table operation to delete the specified entity to the batch operation .
2968	Adds a table operation to insert the specified entity to the batch operation .
2969	Adds a table operation to insert or merge the specified entity to the batch operation .
2970	Adds a table operation to insert or replace the specified entity to the batch operation .
2971	Adds a table operation to merge the specified entity to the batch operation .
2972	Removes the table operation at the specified index from the batch operation .
2973	Removes all elements of the specified collection from the batch operation .
2974	Adds a table operation to replace the specified entity to the batch operation .
2975	Reserved for internal use . Verifies that the batch operation either contains no retrieve operations or contains only a single retrieve operation .
2976	Reserved for internal use . Verifies that the specified PartitionKey value matches the value in the batch operation .
2977	Creates the share using the specified options and operation context .
2978	Deletes the share if it exists using the specified request options and operation context .
2979	Downloads the permissions settings for the share using the specified request options and operation context .
2980	Returns a shared access signature for the share . Note this does not contain the leading ? .
2981	Uploads the share s permissions .
2982	Uploads the share s permissions using the specified request options and operation context .
2983	Returns the snapshot or shared access signature qualified URI for this share .
2984	Illustrates how to form and execute a single insert operation .
2985	Illustrates how to form and execute a batch operation .
2986	Illustrates how to form and execute a query operation .
2987	Illustrates how to form and execute an upsert operation .
2988	Illustrates how to form and execute an entity delete operation .
2989	Illustrates how to list the tables .
2990	Reserved for internal use . Generates a query to list table names with the given prefix .
2991	Reserved for internal use . Executes a segmented query operation using the specified retry and timeout policies .
2992	Reserved for internal use . Generates an iterator for a segmented query operation .
2993	Populates a LogRecord using the Version 1 . 0 schema and the given LogRecordStreamReader .
2994	Parses the input stream containing the response body of the list queues request result and populates the class data .
2995	Translates the specified HTTP status code into a storage exception .
2996	Gets an iterable collection of queues for this queue service client .
2997	Returns an iterable collection of queues whose names begin with the specified prefix in this Queue service client .
2998	Returns an iterable collection of queues whose names begin with the specified prefix for this Queue service client using the specified details setting request options and operation context .
2999	Gets a result segment of an iterable collection of queues for this Queue service client .
3000	Gets a result segment of an iterable collection of queues whose names begin with the specified prefix for this queue using the specified listing details options request options and operation context .
3001	Add the catalog to our internal catalog
3002	Create a unique ID based on the passed one . If the passed ID is not yet contained than a numeric index is appended until the ID is unique .
3003	Set the Schematron phase to be evaluated . Changing the phase will result in a newly bound schema!
3004	Set the error handler to be used during binding .
3005	Set the variable resolver to be used in the XPath statements . This can only be set before the Schematron is bound . If it is already bound an exception is thrown to indicate the unnecessity of the call .
3006	Set the function resolver to be used in the XPath statements . This can only be set before the Schematron is bound . If it is already bound an exception is thrown to indicate the unnecessity of the call .
3007	Set the XML entity resolver to be used when reading the Schematron or the XML to be validated . This can only be set before the Schematron is bound . If it is already bound an exception is thrown to indicate the unnecessity of the call .
3008	Get the cached bound schema or create a new one .
3009	Use the provided error handler to validate all elements in the schematron . It tries to catch as many errors as possible .
3010	The main method to convert a node to an SVRL document .
3011	Resolve all &lt ; extends&gt ; elements . This method calls itself recursively until all extends elements are resolved .
3012	Convert the passed schema to a minimal schema .
3013	Convert the passed schema to a pre - processed schema .
3014	Convert the passed schema to a pre - processed schema independent if it is already minimal or not .
3015	Read the specified schema from the passed resource .
3016	Determine the query binding for the read schema .
3017	Pre - process the read schema using the determined query binding .
3018	Write the passed Schematron element to the passed file .
3019	Write the passed Schematron element to the passed output stream .
3020	Write the passed Schematron element to the passed writer .
3021	Apply the passed schematron on the passed XML resource using a custom error handler .
3022	Apply the passed schematron on the passed XML node .
3023	Remove the variable with the specified name
3024	Remove all variables with the specified names
3025	Get a list of all failed assertions in a given schematron output .
3026	Get a list of all failed assertions in a given schematron output with an error level equally or more severe than the passed error level .
3027	Get a list of all successful reports in a given schematron output .
3028	Get a list of all successful reports in a given schematron output with an error level equally or more severe than the passed error level .
3029	Get a list of all failed assertions and successful reports in a given schematron output .
3030	Set the global error level determinator .
3031	Get the query binding with the specified name .
3032	Get the query binding with the specified name
3033	Load XQuery functions from an input stream . As this function is supposed to work with Saxon HE this method allows only for loading full XQuery modules and not for XQuery libraries .
3034	Format with one object .
3035	Format with two objects .
3036	Check if the passed micro node is a valid schematron instance .
3037	Check if the passed DOM node is a valid schematron instance .
3038	Check if the passed resource is a valid schematron instance .
3039	Check if the passed source is a valid schematron instance .
3040	Create a new Schematron validator for the passed resource .
3041	Get the Schematron validator for the passed resource . If no custom parameter are present the result is cached . The respective cache key is a combination of the Schematron resource path the phase and the language code .
3042	Get the error text from an assert or report element .
3043	Get the beautified location for the given namespace and local name .
3044	Emit a warning with the registered error handler .
3045	Read an &lt ; active&gt ; element
3046	Read an &lt ; assert&gt ; or a &lt ; report&gt ; element
3047	Read a &lt ; diagnostic&gt ; element
3048	Read a &lt ; diagnostics&gt ; element
3049	Read a &lt ; dir&gt ; element
3050	Read an &lt ; emph&gt ; element
3051	Read an &lt ; extends&gt ; element
3052	Read an &lt ; include&gt ; element
3053	Read a &lt ; let&gt ; element
3054	Read a &lt ; name&gt ; element
3055	Read a &lt ; ns&gt ; element
3056	Read a &lt ; p&gt ; element
3057	Read a &lt ; param&gt ; element
3058	Read a &lt ; pattern&gt ; element
3059	Read a &lt ; phase&gt ; element
3060	Read a &lt ; rule&gt ; element
3061	Parse the Schematron into a pure Java object . This method makes no assumptions on the validity of the document!
3062	Read a &lt ; span&gt ; element
3063	Read a &lt ; title&gt ; element
3064	Read a &lt ; value - of&gt ; element
3065	Helper method to extract the namespace mapping from the provided Schematron .
3066	Checks access to the resource based on the regex
3067	Marks the current action as authorised . This allows method - level annotations to override controller - level annotations .
3068	Checks if an action is authorised . This allows controller - level annotations to cede control to method - level annotations .
3069	Defer execution until a later point .
3070	Get the deferred action from the request .
3071	Add a flag to the request to indicate the action has passed the constraint and call the delegate .
3072	Recursive method to determine if there is another deadbolt action further down the action chain
3073	Gets the role name of each role held .
3074	Check if the subject has the given role .
3075	A constraint that requires a subject to be present .
3076	Converts the roles into a String array .
3077	Converts the permissions into a String array .
3078	Converts the arguments into a String array wrapped in a list .
3079	Used for restrict tags in the template .
3080	Internal helper method to properly position buffers after encoding up until an overflow .
3081	Internal helper method to properly position buffers after encoding up until an underflow .
3082	Sets a range of characters to 1s in the masks .
3083	Core encoding loop shared by public methods . It first uses the encoder to scan the input for characters that need encoding . If no characters require encoding the input string is returned . Otherwise a buffer is used to encode the remainder of the input .
3084	Core encoding loop shared by public methods . It first uses the encoder to scan the input for characters that need encoding . If no characters require encoding the input string is written directly to the writer . Otherwise a buffer is used to encode the remainder of the input to the buffers . This version saves a wrapping in an String .
3085	Internal method to setup and map encoder singletons .
3086	Returns a new instance of an Encoder for the specified context . The returned instance is thread - safe .
3087	Appends a source array verbatim to the output array . Caller must insure there is enough space in the array for the output .
3088	Encodes an input string to an output string .
3089	Flushes the contents of the buffer to the writer and resets the buffer to make room for more input .
3090	Flushes the left - over buffer . Characters from the input buffer are used to add more data to the _leftOverBuffer in order to make the flush happen .
3091	Returns RxJava Observable which allows to monitor hardware sensors as a stream of ReactiveSensorEvent object with defined sampling period
3092	Get the text from child node with the given name . Returns null if child node does not exist .
3093	Execute the given query on the specified sonar server .
3094	Creates a url for the specified quality gate query
3095	Get the status from sonar for the currently executing build . This waits for sonar to complete its processing before returning the results .
3096	Get the status of a build project from sonar . This returns the current status that sonar has and does not do any checking to ensure it matches the current project
3097	Parses the string response from sonar into POJOs .
3098	Retrieve tracking report from repository manager . Add each tracked download to the dependencies of the build result . Add each tracked upload to the built artifacts of the build result . Promote uploaded artifacts to the product - level storage . Finally clear the tracking report and delete the hosted repository + group associated with the completed build .
3099	Return output artifacts metadata .
3100	Computes identifier string for an artifact . If the download path is valid for a package - type specific artifact it creates the identifier accordingly .
3101	Compute the identifier string for a generic download that does not match package type specific files structure . It prefers to use the origin URL if it is not empty . In case it is then it uses local URL which can never be empty it is the local file mirror in Indy . After that it attaches the sha256 separated by a pipe .
3102	Check artifact for any validation errors . If there are constraint violations then a RepositoryManagerException is thrown . Otherwise the artifact is returned .
3103	Check if this build task has a build configuration dependency on the given build task . The search include transitive dependencies .
3104	Check if this build task has a direct build configuration dependency on the given build task
3105	Loads JSON configuration to the module configuration object
3106	Trigger the repository deletion configured for this instance and send the result to the appropriate consumer .
3107	Notify the set that the state of one of it s tasks has changed .
3108	Get the build task which contains the given audited build configuration
3109	Trigger the repository promotion configured for this instance and send the result to the appropriate consumer .
3110	Adds all elements from toMerge to target .
3111	Reads whole content of file to String
3112	Reads whole content of input stream to String
3113	Starts milestone release process
3114	Regularly cleans finished BPM tasks asynchronously Immediate cleanup is not usable because of NCL - 2300
3115	This method solves backwards compatibility problem . It will be removed soon .
3116	Flattening collector . Look at StreamCollectorsTest for example usage
3117	Cleanup old temporary builds every midnight
3118	Create the hosted repository and group necessary to support a single build . The hosted repository holds artifacts uploaded from the build and the group coordinates access to this hosted repository along with content from the product - level content group with which this build is associated . The group also provides a tracking target so the repository manager can keep track of downloads and uploads for the build .
3119	Given the successful BC creation add the BC into the BC sets . This solution has been selected because if this was done in BPM process there would have to be a foreach cycle and at least two REST requests for each BC Set ID . The process would become too complicated . Notification listeners are ideal for these kind of operations .
3120	This method will add listeners to all important RCC event types and forward the event to WS clients .
3121	Create an artifact with an import date and origin url
3122	Sets flag telling if SSL hostname validation should be done which also clears the cached httpClient . This method is not thread - safe and could cause race conditions if the class is used with different settings at the same time but that is not expected .
3123	Deletes a temporary build and artifacts created during the build or orphan dependencies used
3124	Deletes a BuildConfigSetRecord and BuildRecords produced in the build
3125	Run a single build . Uses the settings from the specific revision of a BuildConfiguration . The dependencies are resolved by the BuildConfiguration relations and are used in the latest revisions
3126	Check if the given build set task is empty and update the status message appropriately
3127	Gets environment driver which can manage requested environment
3128	Return a predicate which excludes all archived build configurations
3129	Fetch build configurations of project to be able access it outside transaction
3130	Store build result along with error information appended to the build log
3131	Initialize a new BuildRecord . Builder based on the data contained in the BuildTask . Note this must be done inside a transaction because it fetches the BuildRecordSet entities from the database .
3132	This predicate returns all the ProductVersions linked to a specified BuildConfiguration
3133	This checks if jenkins does not use option Prevent Cross Site Request Forgery exploits
3134	Checks the given list against the existing database and creates a new list containing artifacts which have been saved to or loaded from the database .
3135	Save a build config set record to the db . This requires a new transaction to ensure that the record is immediately committed to the database so that it s available to use by the foreign keys set in the individual build records .
3136	Rebuild is required if Build Configuration has been modified or a dependency has been rebuilt since last successful build .
3137	Check is some of the dependencies from the previous build were rebuild . Checking is done based on captured dependencies which are stored in the Build Record .
3138	Check is some of the dependencies defined on BuildConfiguration has newer version .
3139	Listen to notifications from BPM process for this task .
3140	Extend process parameters from the task with additional useful information such as pncBaseUrl and taskId needed for notifications . Before use taskId MUST be assigned .
3141	Collects all BuildConfigurationAudited entities that needs to be built .
3142	Create a BuildSetTask of latest revisions of BuildConfigurations contained in the BuildConfigurationSet
3143	Create a BuildSetTask of BuildConfigurations contained in the BuildConfigurationSet .
3144	Creates build tasks and sets up the appropriate dependency relations
3145	Lookups built artifacts for the specified BuildRecord
3146	Adds ending slash if it is not present .
3147	Parse comma separated string to Integer array .
3148	Serialize Integer array to comma separated string .
3149	Add a new ready to build task to queue
3150	Add a task that is waiting for dependencies
3151	Trigger searching for ready tasks in the waiting queue . This method should be invoked if one task has finished and there s a possibility that other tasks became ready to be built .
3152	Get build task for given build configuration from the queue .
3153	Check if a given artifact originates from a trusted source . Compares the given artifactOriginUrl to the list of trusted repositories .
3154	Adds the project build record .
3155	Removes the project build record .
3156	Deletes a single temporary build .
3157	Get the full set of both the direct and indirect dependencies .
3158	This method is private because a dependant should never be added externally . Instead the dependency relation should be set up using the addDependency method
3159	This method is private because a dependant should never be removed externally . Instead the dependency relation should be set up using the removeDependency method
3160	Change the BC clone name into date_original - BC - name where date will be for every clone updated and for original BC names will be added .
3161	Reads configuration for module
3162	Instantiate embedded tomcat to be used in tests .
3163	Start and register the embedded server .
3164	Stop and remove from the store the started embedded server .
3165	Put value in the internal store .
3166	Find value in the internal store .
3167	Concatenate two path value .
3168	Create tomcat context . May be override by subclasses .
3169	Create a cookie from header value .
3170	Create a header with a single value .
3171	Create a header with multiple values .
3172	Build web app context used to launch server . May be override by subclasses .
3173	Exec hooks phase .
3174	Process handlers .
3175	Process field for given handler .
3176	Create new http client using internal with custom internal client .
3177	Create new http client using default internal client .
3178	Add request body .
3179	Create request URI . Each additional query parameters will be appended to final URI .
3180	Add headers to http request .
3181	Add parameters as form url encoded content . Each parameter is set as a key value entry to request body .
3182	Set request body value to http request .
3183	Add cookies to http request .
3184	Create new http client using default internal http client .
3185	Parse java version .
3186	Map input values to output values .
3187	Concat new value to existing inputs and returns new outputs . Note that input is not modified .
3188	Filter input by using given predicate and return filtered outputs .
3189	Create a default HTTP Response from given values .
3190	Instantiate embedded jetty to be used in tests .
3191	Create new http client using internal http client from ok - http library .
3192	Create new http client using custom internal http client from ok - http library .
3193	Get all fields on given object and look for fields of super classes .
3194	Get all static fields on given class object .
3195	Get all static methods on given class object .
3196	Get all static fields on given class object annotated with given annotation .
3197	Get all static methods on given class object annotated with given annotation .
3198	Set value of given field on given instance .
3199	Get value of field on target object . If target is null it means that field is static and do not need any target instance .
3200	Invoke the static method without any arguments .
3201	Format date according to given pattern .
3202	Format timestamp according to given pattern .
3203	Add all HTTP headers to the final request .
3204	Check that given string is blank .
3205	Remove string prefix if and only if string value starts with the prefix otherwise original string is returned .
3206	Join all strings to a single one using given separator .
3207	Add query parameter to the final HTTP request .
3208	Add body entity to the final HTTP request .
3209	Serialize form parameters to the request body .
3210	Add cookies to the final HTTP request .
3211	Add request headers .
3212	Append new map value .
3213	Append new boolean value .
3214	Append formatted value to the final output .
3215	Retrieve the dialog from the distributed cache
3216	Store the dialog into the distributed cache
3217	Remove the dialog from the distributed cache
3218	Updates the local dialog transient attributes that were not serialized during the replication
3219	From and To Uris switch places in certain conditions
3220	Write the LDAP entry to the underlying output stream in LDIF format .
3221	Reads directory entries from the input stream and loads them in the LDAP directory server .
3222	Dump the results of a search against the LDAP directory server to an output stream .
3223	Execute the plugin goal by dumping the matching directory entries to a file in the specified format .
3224	Configure the Mojo by adding the dependencies for the LDAP server type to the class loader .
3225	Resolve the dependencies for an LDAP server type and add them to the class loader .
3226	Retrive the URLs used to locate the JAR files for a list of artifacts .
3227	Resolve the LDAP server type artifact and its dependencies .
3228	Get the artifact descriptor for the JAR file that implements support for the LDAP server type .
3229	Determine the configured LDAP server type . If one has not been configured then return the default .
3230	Create the LDAP writer that will dump LDAP entries to a DSML file .
3231	Create the LDAP reader that will load LDAP entries from a DSML file .
3232	Used to configure the root DN of the LDAP directory the working directory used by the directory service to store the directory data the LDIF file used to seed the directory or the TCP port number on which the server will listening for LDAP traffic .
3233	Configure and start the embedded UnboundID server creating the root DN and loading the LDIF seed data .
3234	Shutdown the the embedded UnboundID server .
3235	Read the next change record from the underlying input stream .
3236	Execute the plugin goal iterating over the list of source files and loading the LDAP directory entries from each file using the appropriate handler .
3237	Configure and start the embedded ApacheDS server creating the root DN and loading the LDIF seed data .
3238	Shutdown the the embedded ApacheDS server .
3239	Create the root DN .
3240	Start the OpenDJ in - memory directory server .
3241	Stop the OpenDJ in - memory directory server .
3242	Writes an individual LDAP directory entry to the DSML file .
3243	Get the server type .
3244	Get the embedded LDAP directory server configuration .
3245	Sends a metric to the kairos server .
3246	Report method . Converts the given metric to a metric kairos understands and sends them .
3247	Read the geometry type info
3248	Read a Point
3249	Read a Line String
3250	Read a Polygon
3251	Read a Multi Point
3252	Read a Multi Line String
3253	Read a Multi Polygon
3254	Read a Geometry Collection
3255	Read a Circular String
3256	Read a Compound Curve
3257	Read a Curve Polygon
3258	Read a Polyhedral Surface
3259	Read a TIN
3260	Read a Triangle
3261	Write a geometry to the byte writer
3262	Write a Point
3263	Write a Line String
3264	Write a Polygon
3265	Write a Multi Point
3266	Write a Multi Line String
3267	Write a Multi Polygon
3268	Write a Geometry Collection
3269	Write a Circular String
3270	Write a Compound Curve
3271	Write a Curve Polygon
3272	Write a Polyhedral Surface
3273	Write a TIN
3274	Write a Triangle
3275	Get the geometry code from the geometry
3276	Get the geometry code from the geometry type
3277	Get the Geometry Type from the code
3278	This implementation checks whether a File can be opened falling back to whether an InputStream can be opened . This will cover both directories and content resources .
3279	Finds the greatest common divisor of all numbers in the list .
3280	Abbreviates a String using ellipses . This will turn Now is the time for all good men into Now is the time for ...
3281	Returns a JsonValue instance that represents the given string .
3282	Creates a new empty JsonObject . This is equivalent to creating a new JsonObject using the constructor .
3283	Parses the given input string as JSON . The input must contain a valid JSON value optionally padded with whitespace .
3284	Return the value of the given property .
3285	Reads a JSON object from the given string .
3286	Returns the value of the member with the specified name in this object . If this object contains multiple members with the given name this method will return the last one .
3287	Returns an iterator over the members of this object in document order . The returned iterator cannot be used to modify this object .
3288	Search for the given placeholder in system properties then in environment variables .
3289	Human readable name and version .
3290	Reads a JSON array from the given string .
3291	Appends the specified JSON value to the end of this array .
3292	Replaces the element at the specified position in this array with the specified JSON value .
3293	Returns the value of the element at the specified position in this array .
3294	Returns a list of the values in this array in document order . The returned list is backed by this array and will reflect subsequent changes . It cannot be used to modify this array . Attempts to modify the returned list will result in an exception .
3295	Returns an iterator over the values of this array in document order . The returned iterator cannot be used to modify this array .
3296	Runs each appropriate EventHandler in an Executor .
3297	Raise an event on all event busses passing it to applicable consumers asynchronously .
3298	Raise an event on a named event bus passing it to applicable consumers asynchronously .
3299	removes the the child content .
3300	adds to wffid map
3301	adds the given key value .
3302	this method should be called after changing of attribute value not before changing value
3303	adds all to the attribute value map .
3304	removes the key value for the input key .
3305	pushes PushQueue from all shared object of parent tags .
3306	removes only if the key and value matches in the map for any particular entry .
3307	adds to the attribute value set .
3308	adds all to the attribute value set .
3309	removes the value from the the attribute set .
3310	clears all values from the value set .
3311	adds value change lister which will be invoked when the value changed
3312	checks the value in this attribute contains a valid regex .
3313	to set the red value which is in between 0 to 255 .
3314	to set the green value which is in between 0 to 255 .
3315	to set the blue value which is in between 0 to 255 .
3316	to set alpha . The default value is 0 .
3317	Loads all tag classes .
3318	gets the first substring which starts and ends with the given values .
3319	To make the clone copy of the given String array . This method is faster than the clone method of String array .
3320	Checks if the given string contains whitespace .
3321	Removes the trailing and leading whitespaces
3322	Removes all children from this tag .
3323	Removes all children and adds the given tags as children .
3324	Removes the given tags from its children tags .
3325	Removes the given tag from its children only if the given tag is a child of this tag .
3326	adds the given children to the last position of the current children of this object .
3327	initializes attributes in this . attributes and also in attributesMap . this should be called only once per object .
3328	gets the attribute by attribute name
3329	marks the owner tag in the attributes
3330	to initialize objects in the constructor
3331	Gets the children of this tag as an array . An efficient way to get the children as an array .
3332	Gets the first child of this tag . The efficient way to get the first child .
3333	Gets the number of children in this tag . An efficient way to find the size of children .
3334	Checks whether a tag is contained in its direct children . An efficient way to check if the given tag is a direct child of this tag .
3335	For internal purpose . Not recommended for external purpose .
3336	Inserts the given tags before this tag . There must be a parent for this method tag .
3337	sets the value for this attribute
3338	Removes all values from the attributeValueSet and adds the given attribute values .
3339	adds the WebSocket listener for the given WebSocket session
3340	removes the WebSocket listener added for this WebSocket session
3341	By default On . TAB_CLOSE and On . INIT_REMOVE_PREVIOUS are enabled .
3342	Gets the TagRepository to do different tag operations . This tag repository is specific to this BrowserPage instance .
3343	Sets nonce attribute value for wff script .
3344	to set the border style .
3345	value for the id attribute .
3346	Merges and returns ByteBuffer from the given dataArray . The ByteBuffer will be returned after flip .
3347	Removes all css properties
3348	Checks if the given cssProperty object exists in this style object .
3349	rebuild true to rebuild the load method will be invoked again .
3350	Finds tags by attribute instance .
3351	Finds one tag by attribute instance .
3352	Finds all attributes from all tags .
3353	Finds all attributes as stream from all tags .
3354	Finds all attributes from the given tags
3355	Checks the existence of a tag instance .
3356	Checks the existence of an attribute instance .
3357	Builds all attributes stream from the given tags .
3358	gets the child text set for this tag .
3359	writes maximum bytes at chuckSize
3360	Sets the contextPath for the webapplication
3361	Sets the location of the context file that configures this web application
3362	Read ContextEnvironment and ContextResource definition from a text file .
3363	Construct a content filter from a path filter and a content type .
3364	Combine two filters together produce one filter whose items must be matched by at least one of the original filters .
3365	Check that the End - Of - File has not been reached . This method should be called from contexts where we are expecting something to follow .
3366	Define what is considered to be linespace .
3367	Parse a string constant whilst interpreting all escape characters .
3368	Scan the given input stream and produce a list of tokens or an error .
3369	Parse a given set of command - line arguments starting from a given index position to produce an appropriate command template .
3370	Parse a given string representing a data value into an instance of Data .
3371	Print usage information to the console .
3372	Determine the maximum width of any configured command name
3373	Given a list of files construct a corresponding ZipFile containing them .
3374	Read the contents of a given file into a byte array .
3375	Create a content filter from the string representation .
3376	Write an unsigned integer value using 8bits using a big - endian encoding .
3377	Write an unsigned integer value using 32bits using a big - endian encoding .
3378	Write an unsigned integer value using n bits using a big - endian encoding .
3379	Print out syntactic markers for all entries in the build graph . This requires going through all entries extracting the markers and then printing them .
3380	Print out an individual syntactic markers .
3381	Traverse the various binaries which have been generated looking for error messages .
3382	Get the first syntactic item of a given kind which refers to this item .
3383	Get all syntactic items of a given kind which refer to this item .
3384	Get the first syntactic item of a given kind which refers to this item either indirectly or directly .
3385	Append an integer item to the front of an array of integer type together producing a fresh array whose length equals that the second plus one .
3386	Append two integer items to the front of an array of integer type together producing a fresh array whose length equals that of the third plus two .
3387	Append two arrays of integer type together producing a fresh array whose length equals that of the first and second added together .
3388	Append an element onto an array of unknown type together producing a fresh array whose length equals that of the second plus one .
3389	Add all elements from an array into a given collection of the same type .
3390	Convert a collection of strings into a string array .
3391	Convert a collection of Integers into an int array .
3392	Sort and remove duplicate items from a given array .
3393	Check whether or not the children of this array are sorted according to their underlying order . And if so whether or not there are any duplicate elements encountered .
3394	A default operator for comparing arrays
3395	Get the appropriate configuration schema for a project . This defines what keys are permitted .
3396	Create the Build . Template extension point . This is where plugins register their primary functionality for constructing a specific build project .
3397	Activate the default set of plugins which the tool uses . Currently this list is statically determined but eventually it will be possible to dynamically add plugins to the system .
3398	Determine the system root . That is the installation directory for the compiler itself .
3399	Determine where the root of this project is . This is the nearest enclosing directory containing a wy . toml file . The point is that we may be operating in some subdirectory of the project and want the tool to automatically search out the real root for us .
3400	Attempt to read a configuration file from a given root .
3401	Get instance of given module within this context or null if no instance available .
3402	Scan and activate all modules on the search path . As part of this all module dependencies will be checked .
3403	Activate all modules in the order of occurrence in the given list . It is assumed that all dependencies are already resolved prior to this and all modules are topologically sorted .
3404	Output the syntax error to a given output stream in either full or brief form . Brief form is intended to be used by 3rd party tools and is easier to parse . In full form contextual information from the originating source file is included .
3405	Check whether a given task is ready to be built . This is currently determined by having at least one source whose timestamp is in front of the target .
3406	Parse options from the list of arguments removing those which are recognised . Anything which is not recognised is left as is .
3407	This splits strings of the form x = y v = w into distinct components and puts them into a map . In the case of a string like x y = z then x is loaded with the empty string .
3408	Get first parent of a syntactic item matching the given kind . If no item was found then null is returned .
3409	Get first ancestor of a syntactic item matching the given kind . If no item was found then null is returned .
3410	Helper method for above .
3411	Determine the content type for this file .
3412	Get the entry associated with this file .
3413	Inspect a given path entry .
3414	Inspect a given binary file . That is a file for which we don t have a better inspector .
3415	Read all the items in this heap returning the identified root item and an array of all items contained therein .
3416	Construct a Trie from a Path ID .
3417	The descriptor for this command .
3418	Get the root of the package repository . This is the global directory in which all installed packages are found .
3419	Add any declared dependencies to the set of project roots . The challenge here is that we may need to download install and compile these dependencies if they are not currently installed .
3420	Scan all characters from the input stream and generate a corresponding list of tokens whilst discarding all whitespace and comments .
3421	Raise a syntax error with a given message at given index .
3422	Print a stack trace to System . out .
3423	Return the current indentation string .
3424	Like InstructionContext . execute but also sets stack_types .
3425	Returns a String array with new_string added to the end of arr .
3426	Return the attribute name for the specified attribute .
3427	Find the StackMapTable attribute for a method . Return null if there isn t one .
3428	Find the LocalVariableTypeTable attribute for a method . Return null if there isn t one .
3429	Find the StackMap entry whose offset matches the input argument . Also sets running_offset .
3430	Find the index of the StackMap entry whose offset is the last one before the input argument . Return - 1 if there isn t one . Also sets running_offset and number_active_locals .
3431	Find the index of the StackMap entry whose offset is the first one after the input argument . Return - 1 if there isn t one . Also sets running_offset .
3432	We need to locate and remember any NEW instructions that create uninitialized objects . Their offset may be contained in a StackMap entry and will probably need to be updated as we add instrumentation code . Note that these instructions are fairly rare .
3433	One of uninitialized NEW instructions has moved . Update its offset in StackMap entries . Note that more than one entry could refer to the same instruction . This is a helper routine used by update_uninitialized_NEW_offsets .
3434	Check to see if any of the uninitialized NEW instructions have moved . Again these are rare so a linear pass is fine .
3435	Get existing StackMapTable from the MethodGen argument . If there is none create a new empty one . Sets both smta and stack_map_table . Must be called prior to any other methods that manipulate the stack_map_table!
3436	Print the contents of the StackMapTable to the debug_instrument . log .
3437	Create a new StackMap code attribute from stack_map_table .
3438	Convert a Type name to a Class name .
3439	Convert a Type to a StackMapType .
3440	Convert a StackMapType to a Type .
3441	Create a new local with a scope of the full method . This means we need to search the existing locals to find the proper index for our new local . This might have the side effect of causing us to rewrite the method byte codes to adjust the offsets for the existing local variables - see below for details .
3442	Calculates the types on the stack for each instruction using the BCEL stack verification routines .
3443	Return a string representation of the access flags of method m . In the string the flags are space - separated and in a canonical order .
3444	Return a printed description of the given instructions .
3445	Return the attribute name for the specified attribute looked up in the original class file ConstantPool .
3446	Checks the specified method for consistency .
3447	Checks all of the methods in gen for consistency .
3448	Print the current java call stack .
3449	Print the methods in the class to standard output .
3450	Adds instructions to the start of a method .
3451	Returns the constant string at the specified offset .
3452	Sets the locals to be the formal parameters . Any other locals are removed . An instruction list with at least one instruction must exist .
3453	Returns the class that corresponds to type .
3454	Returns a copy of the given type array with newType added to the end .
3455	Sets the stack for the instruction at the specified offset to a copy of the information in the given frame .
3456	Inserts an instruction list at the beginning of a method .
3457	Print a BCEL instruction list to the debug_instrument log .
3458	Convenience function to build an instruction list .
3459	Compute the StackMapTypes of the items on the execution stack as described by the OperandStack argument .
3460	Beware with the current algorithm this function cannot find \
3461	Reads from the shared input queue blocking if there is not enough input in the buffer . It s the only way we can emulate the synchronous nature of TTransport using netty .
3462	We need data to be written and flushed at once .
3463	Create a new WebSocket client
3464	Determines if the native ad can be used .
3465	Gets banner ad at a particular index in the fetched ads list .
3466	A handler for failed banner ads
3467	Setup and get an ads request
3468	Gets the count of ads that could be published
3469	Translates an adapter position to an actual position within the underlying dataset .
3470	Gets the ad index for this adapter position within the list of currently fetched ads .
3471	Checks if an ad is available for this position .
3472	Checks if we have to request the next ad block for this position .
3473	Get the wildcardType
3474	Checks if the variabel element has generics arguments that matches the expected type
3475	Emit a package declaration and empty line .
3476	Try to compress a fully - qualified class name to only the class name .
3477	Emits an initializer declaration .
3478	Completes the current type declaration .
3479	Emits a single line comment .
3480	Writes a single annotation value . If the value is an array each element in the array will be written to its own line .
3481	Completes the current method declaration .
3482	Build a string representation of a type and optionally its generic type arguments .
3483	Emits the modifiers to the writer .
3484	Get the class where currently the curser is
3485	Finds and removes a given method
3486	Generate and insert the Parcel and ParcelablePlease code
3487	Make the class implementing Parcelable
3488	Checks if the element is a class
3489	Checks if a TypeMirror equals a class
3490	Returns the class this element is part of
3491	Get the Package name
3492	Get the qualified name of a class . Also respects innner classes
3493	Generate the writeToParcel method
3494	Checks if a class is public
3495	Checks if an public empty constructor is available
3496	Calculate the determinant of the given 3x3 matrix values .
3497	Not cached search
3498	Create a generator initialized with a default component generator that only produces orthogonal matrices .
3499	Gets the binary multi bulk reply .
3500	Gets the binary tupled set .
3501	Raw key .
3502	Raw hash key .
3503	Deserialize tuple values .
3504	Deserialize hash keys .
3505	Deserialize hash values .
3506	Deserialize hash map .
3507	Deserialize hash list .
3508	Deserialize hash set .
3509	As list from domain .
3510	Parses the host .
3511	Parses the port .
3512	Sets the .
3513	Synchronize pipeline by reading all responses . This operation close the pipeline . In order to get return values from pipelined commands capture the different Response&lt ; ?&gt ; of the commands you execute .
3514	Gets the tupled set .
3515	Stops all election services revokes any outstanding leader offers and disconnects from ZooKeeper .
3516	time retry gateway server information .
3517	Since it is a singleton instance and represents a part of workflow logic running in multiple threads .
3518	Clear ZNodePermission of current - thread to null .
3519	Join parameters .
3520	Expire at .
3521	Decr by .
3522	Incr by .
3523	Zadd binary .
3524	Zrange by score .
3525	Zrange by score with scores .
3526	Slaveof no one .
3527	Config set .
3528	Gets the bit .
3529	Gets the range .
3530	Shutdown a selector
3531	Main loop of nio
3532	Demultiplex IO events
3533	to be called on each loop to process idle routines .
3534	register session to Selector in order to detect IO events .
3535	Adds a default header to be added to every stub http response .
3536	Checks whether the number of requests described in this verifying object received so far matches the given predicate .
3537	Returns the first value for the given key
3538	Returns all values for the given key
3539	package protected for testing purposes
3540	Creates new stubbing instance .
3541	Encode and sign a set of claims .
3542	Copies the date since Date objects are mutable .
3543	Create a token for the given object and options .
3544	Helper to create a new dialog from an error code .
3545	Checks if the Google API Client is connected and tries to request the user Account .
3546	Clears this helper state . After this method is called the provider should not be used .
3547	Invalidation will eventually occur when the TTL expires so it s not a showstopper if this fails .
3548	BaragonService overall status
3549	BaragonService service states
3550	BaragonService load balancer group actions
3551	BaragonService base path actions
3552	BaragonService request actions
3553	BaragonService queued request actions
3554	Ensure that the given baragon agent is attached to the given target group . When this function completes the baragon agent will be attached to the load balancer whether or not it originally was .
3555	De - register any targets representing agents that are not known to the BaragonService or which otherwise need to be removed .
3556	When this method completes the target group the agents and the loadBalancers are all on the same VPC . The target group each of the agents and each of the load balancers should think that they are on the same VPC otherwise they won t be able to talk to each other .
3557	After this method completes every agent in baragonAgents should be associated with a target in the given target group .
3558	backwards compatibility would be canged in next version
3559	Simple factory method to obtain a new instance for the given context object and name .
3560	Line separator end - flush .
3561	Real tag end - flush .
3562	Extract the tag content .
3563	Read segment lines recursively .
3564	Delimiters are quoted to avoid regexp reserved characters conflict .
3565	Returns a decorator instance for the specified delegate and mappings .
3566	This method is recursive .
3567	Builds the engine instance .
3568	Adds a template locator .
3569	Adds a value resolver .
3570	Callback is useful to configure a component instantiated before the engine is built .
3571	Add a value converter .
3572	Add a context converter .
3573	Capitalizes all the delimiter separated words .
3574	Escape appended sequence if needed .
3575	Properties of the source cache are dependent on that of the template cache .
3576	Push the container wrapper on the stack .
3577	Add the segment to the container on the stack .
3578	Validate the compiled template .
3579	Extracts parts from an input string . This implementation is quite naive and should be possibly rewritten . Note that we can t use a simple splitter because of string literals may contain whitespace chars .
3580	Returns a decorator converter builder for the specified delegate type .
3581	Append the result to the parent .
3582	Tries to find a public field with the given name on the given class .
3583	Register helper and do nothing if a helper with the same name is already registered .
3584	Register helpers and do nothing if a helper with the same name is already registered .
3585	Read segment lines before rendering .
3586	Invalidate the cache fragments whose key contains the given part of the key .
3587	should be safe
3588	Returns a Local Storage .
3589	Returns a Session Storage .
3590	Removes all items in the Storage and its cache if activated
3591	Test if this storage contains a value for the specified key .
3592	Store the specified value with the specified key in this storage .
3593	Removes the record for the specified key from this storage if present .
3594	Returns non - primitive type value s storage key .
3595	Returns IsSerializable type value s storage key .
3596	Returns Serializable type value s storage key .
3597	Obtains the floating action button s size from a specific typed array .
3598	Obtains the floating action button s color from a specific typed array .
3599	Obtains the floating action button s activated color from a specific typed array .
3600	Obtains the floating action button s pressed color from a specific typed array .
3601	Obtains the floating action button s disabled color from a specific typed array .
3602	Obtains the floating action button s icon from a specific typed array .
3603	Obtains the duration of the animation which may be used to changed the visibility of the floating action button from a specific typed array .
3604	Adapts the shadow of the floating action button depending on its size .
3605	Adapts the size of the image button which is used to show the floating image button s background and icon depending on the floating button s size .
3606	Adapts the background of the image button which is used to show the floating image button s background and icon depending on the floating button s colors .
3607	Creates and returns a state list drawable which can be used as the floating action button background and adapts the background color depending on the button s current state .
3608	Creates and returns a drawable which can be used as the floating action button s background when it is activated .
3609	Creates and returns a drawable which can be used as the floating action button s background when it is pressed .
3610	Creates and returns a drawable which can be used as the floating action button s background when it is disabled .
3611	Creates and returns a drawable with a specific color which can be used as the floating action button s background .
3612	Returns the size of the floating action button in pixels depending on its current size .
3613	Animates changing the visibility of the floating action button .
3614	Creates and returns a listener which allows to adapt the visibility of the floating action button depending on the progress of an animation which is used to change the visibility .
3615	Sets the floating action button s size .
3616	Obtains the progress bar s thickness from a specific typed array .
3617	Initializes the paint which is used for drawing .
3618	Initializes the angle animator .
3619	Creates and returns a property which allows to animate the global angle of the progress drawable .
3620	Initializes the sweep animator .
3621	Creates and returns a property which allows to animate the sweep angle of the progress drawable .
3622	Creates and returns a listener which allows to restart the progress drawable s animation when it has been finished .
3623	Initializes the floating action buttons .
3624	Creates and returns a listener which allows to show a toast when a floating action button has been clicked .
3625	Initializes the button which allows to show or hide the floating action buttons .
3626	Creates and returns a listener which allows to show or hide the floating action buttons .
3627	Initializes all closable chips .
3628	Creates and returns a listener which allows to show a toast when a chip has been closed .
3629	Adapts the activity s views depending on the saved instance state which has been passed to the activity .
3630	Obtains the chip s text from a specific typed array .
3631	Obtains the chip s text color from a specific typed array .
3632	Obtains the chip s color from a specific typed array .
3633	Obtains the chip s icon from a specific typed array .
3634	Obtains whether the chip should be closable or not from a specific typed array .
3635	Obtains the icon of the button which allows to close the chip from a specific typed array .
3636	Adds a new listener which should be notified when the chip has been closed .
3637	Removes a specific listener which should not be notified when the chip has been closed anymore .
3638	Sets the chip s color .
3639	Sets whether the chip is closable or not .
3640	Get current partials stored in view .
3641	Get new nashorn engine .
3642	Get mappings to use with resolvers .
3643	Check that a given class is available on classpath .
3644	Get annotation method value .
3645	Return an input stream from given name . Name is searched into the classpath . Name can contains ant style pattern .
3646	Return an input stream from given names . First result returning a valid stream is returned . Names are searched into the classpath . Names can contains ant style pattern .
3647	Render template with given model object .
3648	Add partials mapping .
3649	Add alias mapping .
3650	Gets previously created ServiceConnector by its id .
3651	Runs operation synchronously .
3652	Checks if a method can be used as a callback to handle operation result .
3653	This method must be called by a bound GUI element when it passes its own onResume state .
3654	This method is used to listening to results stream and operate with them . User should never call this method manually .
3655	Launches an operation in background thread .
3656	Launches an operation in background thread . If operation launched with the same tag from the same ServiceConnector is running new operation launch will not be triggered .
3657	Cancels operation launch by its id . May not physically kill the background thread but it is guaranteed that the result of the operation will not be delivered to any ServiceConnector .
3658	Cancels operation launch by its tag . May not physically kill the background thread but it is guaranteed that the result of the operation will not be delivered to any ServiceConnector .
3659	Checks if an operation with given launch tag is running .
3660	A dispatcher method which decides what to do with an operation result .
3661	Storing an operation result to use it later .
3662	Delivers an operation result to the bound client .
3663	Call bound client methods to pass an operation result .
3664	Logs debug message .
3665	Cancels running operation .
3666	Stores the future as a running operation with a given runs id .
3667	Cancels all running operations .
3668	Checks if operation launch with given id was cancelled .
3669	Runs operation handling all the exceptions that may ne thrown while running .
3670	Creates a template object for storing operations run result .
3671	Runs operation in background .
3672	Runs operation in the same thread .
3673	cancelling in the place it happened
3674	Subclass specific entry point .
3675	Get the Guice modules to be used in injecting dependencies .
3676	Actual main implementation .
3677	Checks if the end of the buffer contains a newline and if so flushes the stream
3678	Initialize the event poller .
3679	Return the MBean server connection to the child process .
3680	Close the MBean server connection .
3681	Inflate the layout to this FrameLayout wrapper
3682	The main program which actually runs JMeter .
3683	Lazy intialization of validator instance
3684	get the list of arguments used in find stored procedure
3685	get the list of arguments used in insert by code stored procedure
3686	recursive method to get all packages including children packages
3687	extract non generated content from a file to keep it after next generation
3688	appends non generated content to be kept at next generation
3689	run through all the tables until it is found
3690	run through all the beans until it is found
3691	get the list of properties that will be used in bean views to show references to other beans
3692	get the list of properties that will be available in a basic view bean
3693	Increase minor is done by default when updating a record .
3694	Add history to this entity .
3695	Get a dataSource connection and set it on the session with lookupType = STRING_LOOKUP
3696	Add a node to this spec .
3697	write to db
3698	Get an Issue Type by name .
3699	Get setting from database
3700	Create a default string field
3701	Create a boolean field
3702	Create a numeric field .
3703	Create workflow from database
3704	Recreate graph with the edited values
3705	recursively walk the Component true
3706	Callback method to begin receiving the upload .
3707	Gets the risk of this particular address .
3708	Takes an optional descriptor and transforms it to file descriptor .
3709	Converts a Retrofit Error into a Blockscore Error .
3710	Scores a question set .
3711	Calculate the MD5 hash sum for the given input stream using the given operation .
3712	Determines if the given path matches the configured include and exclude patterns .
3713	Adds an answer to a question to the AnswerSet .
3714	Gets a list of elements in your request that match this watchlist hit .
3715	Gets the address of the candidate .
3716	Creates a question set with a set time limit in seconds .
3717	Retrieve a question set you have created .
3718	Gets the date of birth for this individual .
3719	Gets the address for this individual .
3720	Gets the date of incorporation .
3721	Returns a complete revision history of a candidate s edits . This allows you to maintain a full audit trail of when and how you update a client s profile over time . The latest revision is presented at the top of the list and the original is at the end of the list .
3722	Performs a watchlist search for this candidate .
3723	Set the date of birth of your candidate .
3724	Sets the primary street address for this person .
3725	Gets a single person exactly as it was when you created it . This route is useful for auditing purposes as you can provide proof that a verification took place along with all of its associated data .
3726	Retrieves a candidate .
3727	Encodes the API key for Basic authentication .
3728	Returns the end of the date of birth range .
3729	Determines the type parameter for a generic super class .
3730	Get a property as string .
3731	Get a property as boolean .
3732	Return the relative path of a file within a directory .
3733	Gets the error type .
3734	Gets the validation error type .
3735	Flush the caches to the store .
3736	Sync the given target collection with the new state from the cache map .
3737	Creates cache map from the given collection of file descriptors .
3738	Build the hierarchy of the container entries i . e . add contains relations from containers to their children .
3739	Find an unused port .
3740	Returns single value for parameter with specified name . This method always returns non - null result even if the parameter does not exist .
3741	Sets the values for given parameter .
3742	Sets value for given key .
3743	Adds a value for given key .
3744	Get the CommandAbstract that is the target of this Page .
3745	Method to get the value for a key in case of wizard .
3746	Register oid .
3747	Create a new component for a node .
3748	Create a new subtree .
3749	Returns a set containing all the known index flavours except those is the given set
3750	Returns a set containing the given index flavours
3751	Add an entry for the given key - value pair to the map
3752	Remove all entries for the given key
3753	Gets the random for ID .
3754	This method retieves the UserAttribute for the ColumnWidths and evaluates the string .
3755	Method to set he sort direction .
3756	Method to set the order of the columns .
3757	This method looks if for this TableModel a UserAttribute for the sorting of the Columns exist . If they exist the Fields will be sorted as defined by the User . If no definition of the User exist the Original default sorting of the columns will be used . In the Case that the Definition of the Table was altered Field which are not sorted yet will be sorted in at the last position .
3758	On the tag the class is set .
3759	The body of the component is filled with the header .
3760	On click the model is sorted and a new page with this model as response rendered .
3761	Returns a Config instance instantiating it on first call . If no factory implementation is provided one will be searched using Service Loader If a Config with given name already exists it will be simply returned
3762	render the eFaps Resource items .
3763	Render combined requir scripts .
3764	Gets the creates the tree node script .
3765	Gets the data line .
3766	Execute the model .
3767	Expand the Tree .
3768	Recursive method used to add the children to this UIClassification .
3769	Method to get the key to the instances related to this classification .
3770	This method generates the Key for a UserAttribute by using the UUID of the Command and the given static part so that for every StruturBrowser a unique key for expand etc is created .
3771	Adds values to the highlight_expression parameter
3772	Adds values to the start_tag parameter
3773	Adds values to the end_tag parameter
3774	Gets the lazy load component .
3775	Gets the loading component .
3776	Method is executed on close of the modal window .
3777	Insert a UIObject before the current one .
3778	Method to get the previous object .
3779	Add parameters .
3780	This is a possibility to replace the current Instance for the form with another one using an table evaluate esjp .
3781	Method that adds the classification forms as elements to the form by walking down the tree .
3782	Method that removes all classifcations and afterwards adds the classification forms as elements to the form by walking down the tree .
3783	Method to add a Cell to the given Row .
3784	Method evaluates a Field and adds it to the row .
3785	Method evaluates a FieldSet and adds it to the row .
3786	Recursive method to add the children classification forms .
3787	Gets the sub menu item .
3788	Gets the url .
3789	Gets the image .
3790	Gets the behavior .
3791	Method to add the Component to this Panel .
3792	Get the children of the given node .
3793	Makes a request to HP Haven OnDemand converting the response body to the type specified by the Class object .
3794	Makes a request to HP Haven OnDemand converting the response body to the type specified by the type reference .
3795	Makes a request to HP Haven OnDemand returning the response body as an input stream .
3796	Makes a request to HP Haven OnDemand converting the response body to the type specified by the JavaType . This method does not guarantee that the type parameter U represents the given JavaType . If possible use one of the safe makeRequest methods instead .
3797	Returns the object returned by calling fromBody on the underlying converter
3798	Render to the web response the eFapsContentReference .
3799	Default means nothing is done on error .
3800	Launch a job .
3801	Adds values to the referencePrefixes parameter
3802	Sets the value of the metadata parameter
3803	Adds categories to the promotion_categories parameter
3804	Adds categories to the synonym_categories parameter
3805	Adds categories to the blacklist_categories parameter
3806	Call this method to initiate the download .
3807	On request respond with a ResourcStream .
3808	Hook method providing the actual resource stream .
3809	Script that searches for an existing iframe to use it for the download of the frame . If it does not exist it will be created .
3810	Send the KeepAlive .
3811	Init the KeepAlive mechanism .
3812	Gets the UI user sessions .
3813	Must be overwritten so that no replacing of html tags is done .
3814	Method is overwritten to prevent the annoing warnings from Component to come up . The warning come up due to the reason that this component moves the tags from parent element to its child .
3815	Gets the dashboard link .
3816	Parse the response into a type represented by the Class object . Checks for a refreshed token and updates the token repository accordingly .
3817	Parse the response into a type represented by the TypeReference object . Checks for a refreshed token and updates the token repository accordingly .
3818	Parse the response into a type represented by the JavaType object . Checks for a refreshed token and updates the token repository accordingly . This method does not guarantee that the type parameter T represents the given JavaType . If possible use one of the safe parseResponse methods instead .
3819	Checks the response headers for a refreshed authentication token then returns the response body as an input stream .
3820	Method to get the events that are related to this UITable .
3821	Add to the tag .
3822	Checks the status of the job . If the job has not finished the runnable will schedule itself to run again after a short wait
3823	The tag of the component must be altered so that the dojo dnd will be rendered .
3824	Add the javascriupt to the head of the webpage .
3825	Set the default selected item .
3826	Method that gets the Value for the Buttons from the DBProperties .
3827	Gets the editable comp .
3828	Set the markupid into the model .
3829	Method to get for the parameters returned from the form as a valid string . for a datetime
3830	Method to get for the parameters returned from the form as a datetimes .
3831	After rendering the datefields are added to the parent .
3832	Shuts down the executor service . This method should be called when the job service is no longer needed if the default executor service was used
3833	Method to load something inside the opener window .
3834	On component tag .
3835	Handle the multipart to store the files and parameters in the context also .
3836	Reset the counters for sets .
3837	Called by the web container to indicate to a filter that it is being placed into service . The servlet container calls the init method exactly once after instantiating the filter . The init method must complete successfully before the filter is asked to do any filtering work .
3838	If the current user is already logged in nothing is filtered .
3839	Checks if the user with given name and password is allowed to login .
3840	On submit .
3841	Gets the persistence script .
3842	Gets the prints the menu items .
3843	Gets the menu .
3844	Gets the sub menu .
3845	Gets the data JS .
3846	Gets the javascript .
3847	Method that creates the page .
3848	Show the modal window .
3849	Adds the value .
3850	Gets the index .
3851	Add a new Row .
3852	Recursive method to add child classifications .
3853	Gets the help .
3854	Internal method to call a constructor it is used to set that this StructurBrowserModel is not a root .
3855	Method used to initialize this StructurBrowserModel .
3856	Expand the tree with the information from the Session .
3857	Method to sort the data of this model . It calls an esjp for sorting .
3858	Method is called from the StructurBrowser in edit mode before rendering the columns for row to be able to hide the columns for different rows by setting the cell model to hide .
3859	This method is used to check if a node has potential children .
3860	This method is used to execute a listener with a specific event .
3861	This method is updating the Label by querying the eFaps - DataBase .
3862	Bind this handler to the given component .
3863	Gets the data table .
3864	Execute the underlying events .
3865	Get the script to render the content for the UserInterface in case that not a standard button should be rendered .
3866	Method to get a Command .
3867	Method that searches a DBProperty for the Label .
3868	Prune finished tasks .
3869	Gets the tasks page .
3870	Gets the bridge for job .
3871	Method to check if a user is checked in .
3872	Lazy login is used in copmination with a Single Sign On mechanism .
3873	Method to log a user with the Parameters from the Request in .
3874	Logs a user out and stores the UserAttribues in the eFaps database .
3875	Adds indexes to the indexes parameter
3876	Gets the model .
3877	Method that adds the Components to the Page .
3878	Adds a child component to this container or to the body .
3879	Method used to convert the date value from the ui in date values for eFaps .
3880	Method used to convert the values from the ui in values for eFaps .
3881	Method is not used but needed from the api .
3882	Method to validate the values for fields .
3883	Recursive method to validate the elements of the form .
3884	Executes the Validation - Events related to the CommandAbstract which called this Form .
3885	Method checking if the mandatory field of the Form are filled with a value and if not opens a WarnDialog and marks the fields in the Form via Ajax .
3886	Method to get the FormPanel of this Page .
3887	Shows a modal DialogPage .
3888	Called by the web container to indicate to a filter that it is being placed into service . The servlet container calls the init method exactly once after instantiating the filter . The init method must complete successfully before the filter is asked to do any filtering work . The web container cannot place the filter into service if the init method either
3889	Returns a set containing all the known resource types except those is the given set
3890	Returns a set containing the given resource types
3891	Checks if is a check out .
3892	Checks for access to menu .
3893	This method returns the URL to the Image of this MenuItem .
3894	this method initializes this MenuItem .
3895	Requery the Label .
3896	Removes the session .
3897	The tag must be overwritten .
3898	Method is executed on click .
3899	Method to get the EFapsSession .
3900	Called when the request cycle object is beginning its response .
3901	Called when the request cycle object has finished its response .
3902	Register user session .
3903	Register activity .
3904	Adds the msg connection .
3905	Invalidate session .
3906	Removes the user session .
3907	Gets the users .
3908	Gets the connections 4 user .
3909	Gets the connection 4 session .
3910	Gets the cache .
3911	Method initializes the model .
3912	Get the CommandAbstract which was originally called from the Frontend and let to the construction of this model .
3913	Execute the events .
3914	Adds the behaviors .
3915	Gets the width weight .
3916	Evaluate the label .
3917	Checks if is table .
3918	Gets the field config .
3919	Checks if is visible .
3920	On request the values are stored .
3921	Init the component .
3922	Method to get the values from the esjp .
3923	Gets the date time formatter .
3924	Search for the requested file in the folder corresponding to the user of the context .
3925	get the CharSequence for the menu .
3926	Recursive method to get the CharSequence for the sub menu .
3927	Method that initializes the TableModel .
3928	Method to get the list of instance .
3929	Add a filterlist to the filters of this UiTable .
3930	Add a classification based filters of this UiTable .
3931	Method to get a Filter from the list of filters belonging to this UITable .
3932	Get the List of values for a PICKERLIST .
3933	Recursive method to get all status for a Type representing a StatusGrp .
3934	Store the Filter in the Session .
3935	Method to remove a filter from the filters .
3936	Gets the cell .
3937	Gets the instances .
3938	Gets the filter for field .
3939	Gets the command .
3940	This method retrieves the Value for the Title from the eFaps Database .
3941	Checks if is date filter .
3942	Gets the row for id .
3943	Prints the .
3944	Gets the query .
3945	Gets the excluded .
3946	Check if a dimension filter applied .
3947	Fill dimension provider .
3948	Build the hierarchy parameters map for a create group request
3949	Matches a file resource for being an XML file with a specific root element .
3950	Touch the cache entry .
3951	Refresh TTL of a cache entry .
3952	Try cloning an object .
3953	Initializes the cache before use .
3954	Cache s custom properties .
3955	Get cache s custom property .
3956	Calculates cache key based on the key mode .
3957	Gets a cache s properties
3958	Puts an entry to both local and remote caches with specified expiries .
3959	Delete an entry from both local and remote caches .
3960	Delete an entry from the local cache .
3961	Deletes all entries in both local and remote caches .
3962	Deletes all entries in the local cache .
3963	move to ViewFacade
3964	resort tab - indexes
3965	Renders the html for the complete form with all elements within .
3966	builds the html for one element
3967	override this if you want to have a different order of the elements .
3968	input - element via a macro!
3969	Registers the specified embedded web context .
3970	a map is not a good structure for that because keys may be used more than once
3971	builds attribs elementId TabIndex
3972	builds the maxlen attribute
3973	Ensure most optimal match works
3974	Checks if currently we are during same session that we were during callback creation .
3975	Wrap a provided converter . Returns a converter that creates of list of elements obtained with a provider converter .
3976	Initialize already started loaders .
3977	Provides a reference to a remote profile . With this reference it is possible to perform read operations and retrieve information from remote people .
3978	Set the change listener .
3979	Gets the document builder factory .
3980	Gets the dOM source .
3981	Gets the schema .
3982	Parses the .
3983	Validate xml through xsd .
3984	Validate given xml schema .
3985	Adds the given child .
3986	Removes the attribute with the given name .
3987	Creates from this Tag object an velocity template as String object . It puts children Tag object in the template recursively .
3988	Creates from this Tag object an xml string .
3989	Method to add a service inside the list in a secure way . The service is added only if isn t already inside the list .
3990	Method to get a service from the list using only the device . This method use only the deviceAddress not the device name because sometimes Android doesn t get the name but only the mac address .
3991	Triggered by the front end to keep spf service active in foreground
3992	Return all the triggers of the specified application
3993	Delete all the triggers registered with the given application identifier .
3994	Delete the trigger with the given id .
3995	Return the trigger with the specified id .
3996	Local app security
3997	Creates from the given xml string an Object . The given map hold the aliases . For more information with aliasing see documation of xstream .
3998	Creates from the given xml string an java object . The given map hold the aliases . For more information with aliasing see documation of xstream .
3999	Creates from the given xml string a json string .
4000	Invokes a remote service providing the name of the method to invoke name and the list of parameters . The invocation is a blocking network request and thus should not be performed on the main thread .
4001	Checks if the current thread is the main thread if so it logs a wrning .
4002	Helper to log a call to a method
4003	Load from the given input stream that should represent an xml file and transform it to the generic type object .
4004	Creates a tag from the given string values . Can be used for creating html or xml tags .
4005	Verifies if the local profile matches the given query .
4006	Dispatches an invocation request to the right application . If the application is not found an error response is returned .
4007	Allows to unregister a previously registered service .
4008	Generate a query id for the specified query . The query id is assigned to the query descriptor .
4009	Call this method when the middleware notify that a spf instance is lost . It will notify the event to all the active searches that have the lost instance in their results .
4010	Call this method to stop the search and release the associated resources . The application will not be notified about the event ;
4011	Unregister all the active queries associated with the given appIdentifier . Application will not be notified about the event .
4012	Creates a connection to SPF asynchronously .
4013	Standard display view for all profile fields except tags
4014	Edit view for multiple choiche fields
4015	Edit view for date fields
4016	Edit and display view for tags
4017	Edit view for all other fields
4018	Sends a notification to the remote SPF instance .
4019	To xml .
4020	Method to set the contentview with Title Text and Image .
4021	Provides the localized friendly name of a field .
4022	Kill the scheduler to stop the Eternal Connect in any case .
4023	Initializes SPFContext . After this method has been called you can get references to SPFContext and SPF .
4024	Broadcasts an event to all registered listeners . Each listener will receive a reference to the given bundle .
4025	Creates a new instance of ProfileFragment to show the local profile .
4026	Called when the profile data is available thus we can set up the view
4027	Method to start the activity to crop an image .
4028	Method to set an show a cropped imaged .
4029	To json .
4030	Adds and shows a new tag .
4031	Set the list of tags to be displayed .
4032	Saves the trigger on the database .
4033	Deletes the trigger specified by its id .
4034	Initialize and start all the threads and resources used by SPFNotification service . Call this method to initialize the logic that handles triggers processing .
4035	Registers a local service .
4036	Adds the attribute with the given name and value .
4037	Invokes a method of the service .
4038	Sets the selected options based on an array of string .
4039	Sets the selected options based on an array of positions .
4040	Returns a list of strings one for each selected item .
4041	Returns a list of positions one for each selected item .
4042	Refreshes the values of displayed fields .
4043	Unbinds all proxies available in caches and prevents the creation of new ones .
4044	Insert a new line to the writer
4045	Write to buffer .
4046	Creates from the given Object a json string . Note if an exception occurs null will be returned .
4047	Loads a local component asynchronously .
4048	Performs the binding to the remote service
4049	Disconnects the component from the remote service .
4050	Performs common error handling operations . Subclasses may override it to provide specific behavior .
4051	Update the current set of triggers with the given list .
4052	Creates a new SPFPersona .
4053	Delete a SPFPersona . All the information related to the specified persona will be erased .
4054	Registers the capabilities of a service to consume activities . If the descriptor doesn t declare the service as capable of handling activities no action will be performed .
4055	Retrieves an appauth given the identifier of an application
4056	Low level method to register applications . It will not validate the descriptor given as parameter .
4057	To be called from application uninstall monitor
4058	Returns the SPFPersona associated to the specified application . If the application does not exist returns the default SPFPersona .
4059	called from the GOInternalClient
4060	Method to add a client inside the list in a secure way . The client is added only if isn t already inside the list .
4061	Life - cycle methods
4062	Gets the value of a field from the container
4063	Returns whether at least one field in the container has been modified
4064	Stops a previously registered search request performed by the application . The application must provide the tag it registered the search with . The callback associated to the search does not receive any further notification .
4065	Stops all searches registered by the application .
4066	Allows to retrieve a reference to a remote person given its identifier . This reference is valid until the given person is reachable from the proximity middleware .
4067	Method for proximity interface to provide access to local profile to remote spf instances
4068	Returns the display_name of the user . If there is no display_name the method returns its identifier .
4069	Gets the node list from the given xml file and the given xpath expression .
4070	Wraps a callback into a proxy that executes its methods on the main thread . Return types are not supported a method with return type other than void always returns null when called on the proxy .
4071	Call this method every time you receive a remote request .
4072	Creates a pending request associated to the target id .
4073	Creates a pending request with the information contained in the message .
4074	check if an entry for the specified user id exists . Returns the entry state .
4075	Confirm a friendship request . the status of the entry associated with the specified person will be REQUEST_ACCEPTED
4076	Adds a closing tag
4077	Adds an empty tag
4078	Adds an opening tag which contains the attributes specified . All the properties will be turned into attributes .
4079	Deletes the file provided . If it is a directory recursively deletes a directory and its content .
4080	Creates a temporary directory .
4081	Given a proxy returns the object proxied . If the object is not a proxy then return the object itself .
4082	Convenient call to return a class in a different class loader ... note that it will handle correctly a class in the same class loader
4083	Computes the signature of a method . Note that if 2 methods are declared in different classes or interfaces then I1 . m and I2 . m are different but they can still have the same signature ...
4084	This creates a well known instance .. the difference with the constructor is that all exceptions are caught and rethrown as RuntimeExcpetion because they should not happen .
4085	Call this method when you want to reset the internal string to start from scratch again
4086	Factory method from a path
4087	Convenient call which adds a query parameter to the give url .
4088	Get the first parameter given its name
4089	Add query parameter to query string .
4090	Adds the map of parameters
4091	Adds a parameter that comes from an array at the provided index
4092	Adds the query extracted from the URI . No Exception is thrown because the uri could not be built if it was not correct .
4093	Internal method in charge of validating the query provided . Exception when query is not valid .
4094	Simply adds the query provided .
4095	Rebuild query instance with values in the map .
4096	Replace existing or add new parameter with given value . Any existing parameter values are deleted prior to adding the new value .
4097	Method from the interface . Checks for shutdown then dispatches the call
4098	Creates the proxy to check for shutdown .
4099	Converts the object into a boolean value .
4100	Returns the stack trace of the throwable as a string
4101	Removes a trailing slash if exists
4102	Waits for shutdown to be completed . After calling shutdown there may still be some pending work that needs to be accomplised . This method will block until it is done but no longer than the timeout .
4103	Adds an empty tag which contains the attributes specified . All the properties will be turned into attributes .
4104	Adds the attribute
4105	Adds the attributes . All the properties will be used as attributes
4106	Extracts the info from the url
4107	Returns a new resource with the root resource set to this resource .
4108	If this resource denotes a directory then it will return all resources that are contained in the directory .
4109	Returns a new resource with the root resource set to the relative path provided . Note that the new resource points at the new root as well .
4110	Creates a file resource from a file
4111	After creating the command you have to start it ...
4112	Creates an external process from the command . It is not started and you have to call start on it!
4113	Creates an external process from the command . The command is executed .
4114	Executes the external command in the given working directory and waits for it to be finished .
4115	Returns the number of milliseconds ellapsed since the last call to this function .
4116	Returns a string that represents the time elapsed
4117	Adds a tag which contains an attribute
4118	Adds a tag which contains the attributes specified . All the properties will be turned into attributes .
4119	Indents a block of text . You provide the block of text as a String and the indent object and it returns another String with each line properly indented .
4120	Computes the end time = now + timeout
4121	Copy the entry in this directory with the provided name
4122	Creates an empty directory and add it to this directory with this name . If the directory already exists it does not recreate it .
4123	Encodes the string using the codec provided .
4124	Decodes the string using the codec provided . Returns a string
4125	Decorates the resource to implement a caching strategy .
4126	Reverses the array in place .
4127	Turns an array of enumeration values into an enum set
4128	Convenient call to load a properties file from the provided file
4129	Convenient call to load a properties file from the provided reader
4130	Returns a string representing this timespan expressed with the units provided .
4131	Compares 2 timespan . Based on duration in milliseconds .
4132	Return a new instance of MemorySize that is truncated to the given unit
4133	Return a new instance of MemorySize that adds up the size of this object with that of the other
4134	Compare with another instance of MemorySize based on size in bytes
4135	Create a new instance of MemorySize by adding up the given array of memorySizes
4136	Executes the callable in a separate thread and return the future to get the result . Note that this implementation is not efficient and should be used very carefully .
4137	Add a marker to the map .
4138	Remove a marker from the map .
4139	Returns a bitmap icon showing a screenshot of the view passed in .
4140	Returns true if and only if the path corresponding to a WatchEvent represents the given file . This will be the case for Create Modify Delete events .
4141	returns true if and only there may be more events
4142	Create a StateListDrawable for the pager indicator
4143	Initialize ViewPagerIndicator with a properly set up ViewPager
4144	Add page indicators based on the attached ViewPager
4145	Always get a message for an exception
4146	Toggle UUID generator into sequential mode so the random segment is in order and increases by one . In sequential mode there is presumably a desire that UUIDs generated around the same time should begin with similar characters but this is difficult in a distributed environment . The solution is to set the counter value based on a hash of the UTC date and time up to a 10 minute precision . This means that UUID classes initialized at similar times should start with similar counter values but this is not guaranteed . If one of these classes is generating vastly more UUIDs than others then these counters can become skewed .
4147	This method maps a hex character to its 4 - bit representation in an int .
4148	Map two hex characters to 4 - bit numbers and combine them to produce 8 - bit number in byte .
4149	Extract timestamp from raw UUID bytes and return as int . If the UUID is not the default type then we can t parse the timestamp out and null is returned .
4150	Extract MAC address fragment from raw UUID bytes setting missing values to 0 thus the first 2 and a half bytes will be 0 followed by 3 and a half bytes of the active MAC address when the UUID was generated .
4151	Sets a custom property . This will override settings in socialize . properties .
4152	Sets the FB credentials for the current user if available .
4153	Sets the Socialize credentials for your App .
4154	Merge properties into the config .
4155	Creates the socialize share object .
4156	Handles a non - network share like email or SMS .
4157	Adds a comment to the given entity . This method will also prompt the user to share their comment .
4158	Deletes a comment . Only the person that created the comment can delete it .
4159	Adds a comment to the given entity . This method will NOT prompt the user to share their comment as the desired networks are passed as a parameter .
4160	Retrieves a single comment based on ID .
4161	Retrieves comments based on a set of IDs .
4162	Retrieves all comments made by the given user .
4163	Retrieves all comments associated with the given entity .
4164	Retrieves all comments across all entities .
4165	Shows the comments for an entity .
4166	Detects whether the inbound string is a JSONArray and if so wraps the array in an object with a single field called data
4167	Connect to an HTTP URL and return the response as a string .
4168	Parse a server response into a JSON Object . This is a basic implementation using org . json . JSONObject representation . More sophisticated applications may wish to do their own parsing .
4169	Display a simple alert dialog with the given text and title .
4170	A proxy for Log . d api that kills log messages in release build . It not recommended to send sensitive information to log output in shipping apps .
4171	Finds a compatible runtime type if it is more specific
4172	Reverts to only set the entity key if the name is not defined . This ensures an existing entity name is not wiped out when the action is saved .
4173	Constructs the URL to access the FB graph API and retrieve a profile image for the user with the given facebook id .
4174	Called when the profile picture has been changed by the user .
4175	Builds the signature base string from the data this instance was configured with .
4176	Normalizes the set of request parameters this instance was configured with as per OAuth spec section 9 . 1 . 1 .
4177	Default authorize method . Grants only basic permissions .
4178	Full authorize method .
4179	Helper to validate an activity intent by resolving and checking the provider s package signature .
4180	Invalidate the current user session by removing the access token in memory clearing the browser cookie and calling auth . expireSession through the API .
4181	Generate a UI dialog for the request action in the given Android context with the provided parameters .
4182	See issue 162
4183	Links the current user to a facebook account . The user will be presented with the Facebook authentication dialog .
4184	Links the current user to a facebook account with custom FB permissions . The user will be presented with the Facebook authentication dialog .
4185	Links an existing Facebook access token with the current user . No authentication dialog will be shown .
4186	Posts an entity to the user s Facebook wall . Post data can be customized by implementing the onBeforePost method in the given SocialNetworkListener .
4187	Extends the user s Facebook access token if needed .
4188	Retrieves the current permissions for token provided .
4189	Returns the hash key used to authenticate this application with Facebook . Useful for debugging .
4190	Saves or Creates an entity
4191	Retrieves an entity based on its key .
4192	Retrieves an entity based on its id .
4193	Retrieves all entities sorted by creation date .
4194	Retrieves the entities designated by the given keys .
4195	Called BEFORE the default activity onCreateContextMenu event .
4196	Subscribes the current user to notifications for new comments on this entity .
4197	Determines if the current user is subscribed to notifications on new comments for the given entity .
4198	Called at application startup .
4199	Returns the type of the next token without consuming it .
4200	Consumes the next token from the JSON stream and asserts that it is a literal null .
4201	Unescapes the character identified by the character or characters that immediately follow a backslash . The backslash \ should have already been read . This supports both unicode escapes u000A and two - character escapes \ n .
4202	Displays the default share dialog . In most cases this is the simplest version to use .
4203	Displays the default share dialog and allows for the handling of share dialog events .
4204	Shares the given entity via email . This method with launch the default email application on the device .
4205	Shares the given entity via Google + . This method with launch the Google + application on the device .
4206	Shares the given entity via a user selected medium . This method with launch the default application share dialog on the device .
4207	Shares the given entity via SMS . This method with launch the default SMS application on the device .
4208	Shares the given entity via a Social Network such as Twitter or Facebook . This will prompt the user to select a network .
4209	Retrieves a single share event based on ID .
4210	Retrieves multiple share events based on ID .
4211	Retrieves all share events performed by the given user .
4212	Retrieves all share events performed on the given entity .
4213	Retrieves all share events across all entities .
4214	Records a like against the given entity for the current user . This method will also prompt the user to share their like .
4215	Records a like against the given entity for the current user . This method will NOT prompt the user to share their like .
4216	Removes a like previously created for the current user .
4217	Retrieves a like for an entity and the current user .
4218	Retrieves a like based on its ID .
4219	Determines if the given entity has been liked by the current user .
4220	Lists all likes for the given user .
4221	Lists all likes for the given entity .
4222	DO NOT CALL
4223	Collects OAuth Authorization header parameters as per OAuth Core 1 . 0 spec section 9 . 1 . 1
4224	Collects x - www - form - urlencoded body parameters as per OAuth Core 1 . 0 spec section 9 . 1 . 1
4225	Collects HTTP GET query string parameters as per OAuth Core 1 . 0 spec section 9 . 1 . 1
4226	Returns a new JSON writer configured for this GSON and with the non - execute prefix if that is configured .
4227	Constructors for common interface types like Map and List and their subytpes .
4228	Replaces successive new line characters .
4229	end - snippet - 0
4230	Returns a simple one - line address based on city and country
4231	so we can mock
4232	Gets the application - wide actions .
4233	Gets the actions of a single user .
4234	Gets the actions for a given entity .
4235	Gets the actions of a single user on a single entity .
4236	Closes the current scope by appending any necessary whitespace and the given bracket .
4237	Encodes the property name .
4238	Parses the specified JSON string into a parse tree
4239	Returns the next value from the JSON stream as a parse tree .
4240	Links the current user to their Twitter account using an existing Twitter oAuth token and secret .
4241	Sets the Twitter App credentials for the application . This sets the same configuration properties as twitter . consumer . key and twitter . consumer . secret
4242	Tweets an entity . A share event will be recorded in Socialize and the entity URL generated by Socialize will be posted to the user s Twitter feed . If the user is not currently linked to a Twitter account they will be prompted to authenticate .
4243	Performs a simple HTTP GET to the Twitter resource endpoint specified . If the user is not currently linked to a Twitter account they will be prompted to authenticate .
4244	Performs a simple tweet . If the user is not currently linked to a Twitter account they will be prompted to authenticate .
4245	Publishes a photo to a user s Twitter feed . If the user is not currently linked to a Twitter account they will be prompted to authenticate .
4246	Returns a scaled bitmap cropped if necessary .
4247	Does a POST but expects a single object in return .
4248	Set the text size in DIP
4249	Called when the user s profile image is changed .
4250	Saves the given user .
4251	Retrieves a User based on the given ID .
4252	Saves the profile for the given user .
4253	Sets the auto post preferences for the user .
4254	Authenticates with default permissions and Single Sign On .
4255	Authenticates with Single Sign On .
4256	Gets the value of the given static field from the given class .
4257	Returns the name of the static field that corresponds to the given value
4258	Handles a GCM message . Returns true ONLY if this message was intended for Socialize .
4259	Handles a broadcast intent received by a Broadcast Receiver on Android . Call this method if you already have a broadcast receiver defined but want to also utilize Socialize SmartAlerts .
4260	Encodes a byte array into Base64 notation .
4261	Decodes Base64 content using the supplied decodabet and returns the decoded byte array .
4262	Records a view against the given entity for the current user .
4263	Called when the current logged in user updates their profile .
4264	Parse a form - urlencoded document .
4265	Construct a Map containing a copy of the given parameters . If several parameters have the same name the Map will contain the first value only .
4266	Helper method to concatenate a parameter and its value to a pair that can be used in an HTTP header . This method percent encodes both parts before joining them .
4267	Adds an object to cache with the given time - to - live
4268	Adds an object to cache that optionally lives forever .
4269	Adds an object to cache with the given Time To Live in milliseconds
4270	Ignores proxy and always returns raw object
4271	Gets an object from cache . Returns null if the object does not exist or has expired .
4272	Returns true if the object with the given key resides in the cache .
4273	Extends the ttl of the object with the given key with the current system time .
4274	Loads an image based on Base64 encoded bytes .
4275	Asynchronously loads the image at the given url and calls the listener when it is loaded .
4276	Convert a tag string into a tag map .
4277	Convert a tag map into a space - delimited string .
4278	Call this function whenever a potentially tag - encoded name is prefixed .
4279	Creates a Builder for a metric name .
4280	Returns a put string version of this metric compatible with the telnet - style reporter .
4281	Converts the domain to a Unicode representation suitable for human interpretation . It does IDNA conversion .
4282	Percent - decodes a string .
4283	Gets the first query parameter value for a given name .
4284	Gets all query parameter values for a given name .
4285	Returns a relative URL reference for the given URL .
4286	Gets a URL object from a relative scheme and a host .
4287	Gets a URL object from a non - relative scheme .
4288	Serializes the URL to a human - readable representation . That is percent - decoded and with IDN domains in its Unicode representation .
4289	Executes a quey for stream with ordinal parameters .
4290	Executes a query for stream with named parameters .
4291	Get fields of the given class .
4292	Fetches a row if not fetched yet .
4293	Get the column value as LocalDateTime .
4294	Get the column value as LocalDate .
4295	Get the column value as LocalTime .
4296	Get the column value as ZonedDateTime .
4297	Get the column value as OffsetDateTime .
4298	Get the column value as OffsetTime .
4299	Get the column value .
4300	Adds top - left - aligned crop .
4301	Adds center - aligned crop .
4302	Adds top - left - aligned crop with a filled background .
4303	Resizes width keeping the aspect ratio .
4304	Resizes width and height
4305	Scales the image until one of the dimensions fits then crops the bottom or right side .
4306	Scales the image until one of the dimensions fits centers it then crops the rest .
4307	Performs Gaussian blur on result image .
4308	Performs sharpening on result image . This can be useful after scaling down .
4309	Reduces an image proportionally in order to fit it into given dimensions .
4310	Requests project info from the API .
4311	Requests file data .
4312	Marks a file as deleted .
4313	Marks a file as saved .
4314	Executes the request et the Uploadcare API and return the HTTP Response object .
4315	Verifies that the response status codes are within acceptable boundaries and throws corresponding exceptions otherwise .
4316	Creates a URL for URL upload .
4317	Injects a target object using this ActionBarActivity s object graph .
4318	Create new Builder .
4319	Returns the class with the given name if it has already been loaded by the given class loader
4320	Loads the class defined with the given name and bytecode using the given class loader
4321	Core search method
4322	Add one word to the trie
4323	Appends the given char . If this instance is currently uninitialized the given char is used for initialization .
4324	Replaces this references value with the given one .
4325	Determines whether the class with the given descriptor is assignable to the given type .
4326	MUST be called after copyInputText!
4327	Generate a hash of the group use it to name it
4328	Match a given character in a case - insensitive manner
4329	Match one Unicode character
4330	Match a Unicode character range
4331	Match any of the characters in the given string
4332	Match any given character among a set of characters
4333	Match a string literal
4334	Match a given set of characters as a string literal
4335	Match a string literal in a case insensitive manner
4336	Try and match a rule zero or one time
4337	Try and match a given set of rules once
4338	Kickstart a repeat rule
4339	Try and match a set of rules zero or more times
4340	Convert a string literal to a parser rule
4341	Convert the given object array to an array of rules
4342	Converts the given object to a rule
4343	Inserts the given value a given number of elements below the current top of the value stack
4344	Removes the value at the top of the value stack and casts it before returning it
4345	Removes the value the given number of elements below the top of the value stack and casts it before returning it
4346	Returns and casts the value at the top of the value stack without removing it
4347	Replaces the element the given number of elements below the current top of the value stack
4348	Internal method . DO NOT USE!
4349	Determines whether this range overlaps with the given other one .
4350	Determines whether this range immediated follows or precedes the given other one .
4351	Created a new IndexRange that spans all characters between the smallest and the highest index of the two ranges .
4352	Generate the byte code of a transformed parser class
4353	Add a word
4354	Retrieves the innermost Matcher that is not a ProxyMatcher .
4355	Register a listener to the event bus
4356	Post an arbitrary non null object on the bus
4357	default implementation is to simply delegate to the context
4358	Return a rule with a minimum number of cycles to run
4359	Return a rule with a maximum number of cycles to run
4360	Return a rule with an exact number of cycles to run
4361	Return a rule with both lower and upper bounds on the number of cycles
4362	Core method for building a repeating matcher
4363	Creates a new Characters instance containing all characters minus the given ones .
4364	Gets the value of the deploymentDescriptor property .
4365	Gets the value of the authenticationConfiguration property .
4366	This method retrieves the list of objects of type BWServiceType .
4367	Add &lt ; events > in &lt ; monitor > element of all &lt ; bw > elements .
4368	Gets the value of the globalVariable property .
4369	Gets the value of the baseService property .
4370	Gets the value of the event property .
4371	This will check that the BW project specified in the POM project exists .
4372	This will read the dependencies from the resolved file found in the build directory . This file was created earlier in the build by the resolve - bw - dependencies execution of the process - resources phase .
4373	Same as launchTIBCOBinary with fork = false and synchronous = true
4374	Gets the value of the action property .
4375	Delete all file of a directory and then delete this directory
4376	Gets the value of the final property .
4377	Gets the value of the rulebase property .
4378	This method add an alias in the object used internally by TIBCO BusinessWorks .
4379	This method adds the JAR aliases to a . aliaslib file
4380	Gets the rest of the content model .
4381	Gets the value of the nvPair property .
4382	Add the Maven dependency to a POM file .
4383	Remove the Maven dependency from a POM file .
4384	Check whether a dependency exists in a list of dependencies .
4385	Check whether a dependency exists in a POM .
4386	Add a project as a module .
4387	Check whether a module exists in a POM .
4388	Retrieves the full path of the artifact that will be created .
4389	MOJO execution method .
4390	Reads the complete content of the javaxpath file .
4391	This will update the &lt ; repoInstances > element .
4392	Gets the value of the any property .
4393	Instantiate a new object of type T
4394	Create proxy class
4395	Create proxy constructor
4396	Start Timer when statement is executed
4397	Start Timer when callable statement is created
4398	Start Timer when result set is created
4399	Increment when result set row is read
4400	Create a proxy for given JDBC proxy handler
4401	Wrap a connection to monitor it .
4402	Wrap a simple statement to monitor it .
4403	Wrap a prepared statement to monitor it .
4404	Wrap a callable statement to monitor it .
4405	Determine the interface implemented by this result set
4406	Build an args array that can be passed to cowsay .
4407	Face specific flags either a face mode or face customizations .
4408	Run cowsay with the provided properties .
4409	Run cowsay with the provided attributes .
4410	Set the language .
4411	Get a message in the correct language .
4412	Do some cowsaying or cowthinking .
4413	May apply HTML markup to the cow if requested in the command line .
4414	If a pre - defined cow mode has been set on the command line then use that face .
4415	Get a regular cow face optionally formatted with custom eyes and tongue from the command line .
4416	Extracts the ascii art part of the cowfile removing any before or after PERL comments variable assignments weird EOC markers etc .
4417	Call this with the provided cowfileSpec - that is the value passed to - f on the commandline .
4418	Reads a cowfile from an InputStream and returns a string .
4419	In the case that the cowfileSpec is a filesystem path call this method to attempt to load the cowfile . It will attempt to load the cowfile relative to CWD and if that fails it will try as an absolute path .
4420	This will attempt to load a cowfile by name from the COWPATH environment variable or bundled cowfiles . Note that bundled cowfiles are considered part of the COWPATH since this is how to original cowsay worked . COWPATH takes precedence and bundled cowfiles are only considered after searching the COWPATH .
4421	Determine if this File appears to be a genuine cowfile . This is not a deep check more rigor will be applied later .
4422	Reads a File to an InputStream . Not sure why I thought this should be a separate method I guess it made sense at the time .
4423	Get a cowfile by name from the given directory .
4424	Gets all cowfiles found in the given directory .
4425	Get cow args by mode .
4426	Set custom cow eyes .
4427	Set custom cow tongue .
4428	Determine if the given mode flag is known and mapped to a particular cow face .
4429	Parses an array of arguments .
4430	Displays help message to user .
4431	Draws a complete bubble around a line - wrapped message .
4432	Applies word wrapping to the message to handle long lines .
4433	Builds the bubble around the message .
4434	Set the length of the wordwrap default is 40 zero disables line - wrap .
4435	For a given multiline message determines the character count of the longest line .
4436	Posts a log message to Loggly
4437	Posts a log message asynchronously to Loggly
4438	Posts several log messages in bulk to Loggly asynchronously
4439	Combines a collection of messages to be sent to Loggly . In order to preserve event boundaries the new lines in each message are replaced with \ r which get stripped by Loggly .
4440	Runs a demo of the Loggly client
4441	Gets all schemas for this catalog keyed by unique name .
4442	Gets the schema of the provided name .
4443	Set to null when context shutdown
4444	Resyncs the entire directory recursively registering and canceling any discrepancies found .
4445	Gets all tables for this schema keyed by unique name .
4446	Gets the table of the provided name .
4447	Implementation of writeTo
4448	Gets all catalogs for this database keyed by unique name .
4449	Gets the catalog of the provided name .
4450	Grows as - needed to fit the provided new capacity .
4451	Provides detailed logging for a media encoder .
4452	Provides detailed logging for a writer .
4453	Construct a lexical position at line 0 column 0 with the given file .
4454	Appends the given range of a segment . to the buffer .
4455	Writes the given range of a segment to the given writer using the given encoder .
4456	Gets the character at the given index in a segment . This is the absolute index the offset is not added - in .
4457	Loads the custom types when first needed and caches the results .
4458	Gets all columns for this schema keyed by unique name .
4459	Gets the column of the provided name .
4460	Gets all columns for this schema in their ordinal position order . Column with ordinal position one is at index zero .
4461	Gets the column of the provided ordinal position where positions start at one .
4462	Gets the set of tables that this table depends on .
4463	Gets the set of tables that depend on this table .
4464	Adds a new segment .
4465	Writes a character unicode escaping as needed .
4466	Writes a String unicode escaping as needed .
4467	Put all of the values into the existing set .
4468	Move and zoom to the most recently reported location .
4469	If the position is not visible on the map animate the camera to include it after the delay .
4470	Get an Animator that reveals the rectangular View from the circular View .
4471	Get an Animator that unreveals the rectangular View to the circular View .
4472	Get a cached arc motion transition .
4473	Get a cached bold span .
4474	Scale in the View to full size .
4475	Scale out the View to zero size .
4476	Scale out the ViewSwitcher show the next View scale it back in and run the action .
4477	Get the number of rows at the URI .
4478	Get a single line address which uses the delimiter between the original lines .
4479	Register the listeners and then connect the client .
4480	Begin a transaction that uses the transition .
4481	Get the result of applying the alpha to the color .
4482	Set the listener on all of the Views .
4483	Get the name of the level .
4484	Scale the new Activity from the View to its full size .
4485	Show the current input method for the focused View which can receive input .
4486	Hide the input method for the View s window .
4487	True if the cursor has a row at the position .
4488	Get the number of rows in the cursor .
4489	Get the int value in the first row and column .
4490	Get the long value in the first row and column .
4491	Get the String value in the first row and column .
4492	Get all int values in the first column .
4493	Get all long values in the first column .
4494	Get all String values in the first column .
4495	Set a placeholder before loading an image optionally resizing and transforming it . All attributes are optional .
4496	Get the orientation of the RecyclerView s LayoutManager .
4497	Get the number of spans laid out by the RecyclerView s LayoutManager .
4498	Add the rule to the View s RelativeLayout params and request a layout of the View .
4499	True if this method has been previously called for the current row . False if the cursor is before the first row or after the last row .
4500	Get this thread s Looper if it s a Looper thread . Otherwise get the main thread Looper .
4501	Get the values of the SparseArray .
4502	Get the values of the LongSparseArray .
4503	Check if the pager has a new adapter and switch to it if it does .
4504	Check if the ImageView has a new Drawable and calculate the new scaling if it does .
4505	Scale the image and translate it according to the pager position and offset .
4506	Update or delete records and get the number of rows affected .
4507	Get the updated SQL elements for the URI and when not inserting a cursor with the query results .
4508	Get the number of bytes that would be used to store a bitmap with the size in pixels and storage config .
4509	If the bitmap is immutable get a mutable copy of it . After a copy is created the source bitmap will be recycled . If the bitmap is already mutable it will be returned .
4510	True if the Intent can be resolved to an Activity .
4511	Get an Activity Intent that launches an email app with the headers . Any null or empty parameters are skipped . The subject and body will be encoded .
4512	Use the default layout for the panes .
4513	Get the fragment that is displayed in the pane .
4514	Get a Bundle of the keys and values .
4515	Get an Intent to insert or update rows of the content .
4516	Get an Intent to update the selected rows of the content .
4517	Get an Intent to delete rows of the content .
4518	Get an Intent to delete the selected rows of the content .
4519	Get the ActionBar height in the Context s theme .
4520	Get the ActionBar background in the Context s theme .
4521	True if a data network is connected .
4522	Reduce the number of edits by eliminating operationally trivial equalities .
4523	Compute a list of patches to turn text1 into text2 . text2 is not provided diffs are the delta between text1 and text2 .
4524	Returns an Option consisting of the result of applying the given function to the current value .
4525	Converts a SOAPMessage instance to string representation .
4526	Central method to get cached FileObjectWrapper . Creates new FileObjectWrapper if it can t be found
4527	Checks if passed element is a method declared as public not abstract and not static
4528	Checks if passed element has a non void return type and takes no parameters
4529	Checks whether the property for the passed key is enabled or not .
4530	Checks if class has noargs constructor or default noargs constructor .
4531	Gets an annotation of passed instance .
4532	Checks whether the passsed method has a non void return value .
4533	Write the type string to the Stringbuilder
4534	Gets a list with all wrapper classes .
4535	Generic function to get a implicit data provider classes from resource files .
4536	Method to get all available wrappers .
4537	Initializes all available connectors .
4538	Send error report to all initialized connector instances .
4539	Extracts all names for connector configurations from System properties .
4540	Collects all properties for a given connector configuration name and writes them to a Map .
4541	Tries to create a Connector for a given connector configuration name .
4542	Checks whether the LogConnector is defined or not .
4543	Getter method names must have a specific prefix .
4544	Getter methods must be public and not be static .
4545	Getter method and field must have compatible fields .
4546	Helper method for getting a corresponsing field for a method
4547	Checks whether the method name starts with a getter prefix .
4548	Capitalizes first char of an input string .
4549	Decapitalizes first char of an input string .
4550	Strips getter prefix from input string
4551	Sends the error reports to all connectors .
4552	Wraps the passed instance inside a matching tracee context logging provider instance . Will return the passed instance if no matching tracee context logging provider exists .
4553	Creates a new instance of the passed type via reflection .
4554	Gets the current profile . Uses the following algorithm to determine the profile . 1 . If System Property is set force it as profile 2 . If Custom Profile resource can be located in classpath use that file as profile 3 . Use default profile
4555	Loads properties from resources .
4556	Adds passed contexts value pairs to manualContextOverrides .
4557	Creates a TraceeGsonContextStringRepresentationBuilder instance which can be used for creating the createStringRepresentation message .
4558	Checks whether the passed Throwable is contained in methods throws part .
4559	Checks whether the passed Throwable is defined included in passed classes array or is subtype of one of the included classes .
4560	Gets all Exceptions declared at the throws part of the method signature .
4561	Checks whether the exception should be processed or not .
4562	Verifies that the number of values in the actual group is equal to the given one .
4563	Verifies that the actual group of objects does not have duplicates .
4564	Declared by SpinnerAdapter this method allows your spinner to show different views in your drop down vs the closed spinned box .
4565	Allow the reservation of term names during the initialization of the vocabulary .
4566	Upon reservation the method enables registering the properly built immutable term instance .
4567	Complete the initialization of the vocabulary . Beyond this point the vocabulary can be put to use .
4568	Get custom representation with bad data
4569	5 . 2 . Relative Resolution
4570	5 . 2 . 3 . Merge Paths
4571	5 . 2 . 4 . Remove Dot Segments
4572	Concatenates elements to form a dotted name discarding null values and empty strings .
4573	Concatenates a canonical class name and elements to form a dotted name discarding any null values or empty strings any null values or empty strings .
4574	Create a wildcard media type for a given primary type
4575	Create a wildcard structured - syntax media type for a given primary type
4576	Create a media type
4577	Format the media type in a HTTP - header compliant manner using preferred format .
4578	Update the resource representation adding the path where the resource is published and whether or not if given that URI it can be resolved to the same resource .
4579	Compares this term with the specified object for order . Returns a negative integer zero or a positive integer as this object is less than equal to or greater than the specified object .
4580	Return the pending names for the specified attachment .
4581	Add a name to the list of available names for a given attachment .
4582	Return the next available name for a given attachment . The name will be removed from the list of available names for the specified attachment .
4583	Create a new name provider .
4584	As per RFC 6838 Section 4 . 2 structuring syntaxes specifier syntaxes are defined after the last + symbol .
4585	Checks the given quoted string for illegal characters as defined in RFC 7230 section 3 . 2 . 6 .
4586	Returns the next code point in the iteration .
4587	Update the resource representation adding a temporal timestamp of when the resource was last updated .
4588	5 . 3 . Component Recomposition
4589	Close an input stream logging possible failures .
4590	Determines if a character is a Name start character .
4591	Determines if a character is a Name character .
4592	Checks the given type name for illegal characters as defined in RFC 7230 section 3 . 2 . 6 .
4593	Create transformator with the specified media type
4594	Register a new adapter class .
4595	Get an adapter capable of transforming instances of a source type into instances of a target type .
4596	Transform a given object into an instance of the specified type .
4597	Create a copy of the namespaces which includes a mapping between a given prefix and namespace URI .
4598	Create a copy of the namespaces without the prefixes .
4599	Escapes a character sequence so that it is valid XML .
4600	Instead of retrieving the contents of the resource return a description of the query received .
4601	Add a name provider for a container resource .
4602	Return the name provider registered for a given container resource .
4603	Return an object of the specified type to allow access to the provider - specific API . If the provider s ApplicationEngine implementation does not support the specified class the ApplicationEngineException is thrown .
4604	Checks if the path is out of the scope .
4605	Create a new path with a given directory .
4606	Create a new path with a given file .
4607	If there are no segments in the resolved path and we are trying to resolve a directory coming from a path we have to make explicit that we want the directory
4608	Finds the type parameter for the given class which is assignable to the bound class .
4609	Create a primitive object factory for the specified primitive class
4610	Get a list of acceptable variants . Current implementation only leverages media type for the specification of variants .
4611	Find the individual of the data set with the same identifier
4612	Is value = expected?
4613	Is value > expected?
4614	Is value > = expected?
4615	Is value < expected?
4616	Is value < = expected?
4617	This method returns a list of state ballot measures in a given year .
4618	This method returns a single Ballot Measure detail .
4619	This method dumps a candidate s rating by an SIG .
4620	This method dumps all candidate ratings from a scorecard by an SIG .
4621	This method grabs district basic election data according to year and stateid .
4622	This method grabs district basic election data according to zip code .
4623	This method grabs district basic election data according to electionId and stageId . Per state lists of a Presidential election are available by specifying the stateId .
4624	This method grabs office address and basic candidate information according to the officeId and state .
4625	This method dumps offices we keep track of according to type .
4626	This method dumps offices we keep track of according to level .
4627	This method dumps offices we keep track of according to type and level .
4628	This method dumps offices we keep track of according to branch and level .
4629	Fetches counties in a state .
4630	Fetches cities in a state .
4631	Fetches officials for a locality .
4632	Queries the API server for the information requested
4633	This method grabs a list of officials according to state representation .
4634	This method grabs a list of officials according to office type and state representation .
4635	This method grabs a list of officials according to the zip code they represent .
4636	This method grabs the extended bio for each candidate that has one .
4637	This method grabs the extended bio for each candidate that has one . It uses the updated version getDetailedBio of the call .
4638	This method grabs a list of candidates according to a lastname match .
4639	This method grabs a list of candidates according to a fuzzy lastname match .
4640	This method grabs a list of candidates according to the district they represent .
4641	Returns the list of committees that fit the criteria .
4642	Returns detailed committee data .
4643	Returns members of the committee .
4644	Gets leadership positions by state and office .
4645	Gets officials that hold the leadership role in certain states .
4646	Sleeps for the provided amount of milliseconds ignoring thread interrupts .
4647	Starts generating tick events starting from 0 . This method must not be called when the tick source is already running .
4648	Waits until the gobbler finished . If the gobbler encountered any exception it is thrown from this method .
4649	Interrupts the gobbler and closes its streams .
4650	Merging single level aggregation maps
4651	Splits map to list of maps
4652	Collector splitting map into seperate maps
4653	Sorts map with comparator
4654	Returns first value in map as given by the iterator or null if empty
4655	Tests if object is null
4656	Tests if object is ! = null
4657	Tests if String is null or empty when trimmed
4658	Tests if set is null or empty
4659	Tests if array is null or empty
4660	Loads class resource to String
4661	Loads resource as a set of Strings where each word is added to the set
4662	Get resource last modified date
4663	Load input stream into string
4664	Load input stream into byte array
4665	Reads file into String
4666	Gets absolute file path of resource
4667	Generates random string from ELEMENTS set of chars and numbers
4668	Generates non negative long key of maximum length 18
4669	joins two arrays and preserves array order array1 items are followed by array2 items as given
4670	Splits set in 1 .. N chunks of maxSize or less
4671	Gets first millisecond of first day in month
4672	Returns last millisecond of last day in month ... + 1 = next first day in month
4673	Trims down text to null if empty
4674	Capitalizes first character in given string
4675	Joins array of objects into string where items are separated with a defined separator .
4676	Joins set of items to a single string where items are separated with a defined separator .
4677	Extracts words from text removing non alpha characters
4678	Reduces text to max given size preserving words
4679	Reduces text size to a given size
4680	Converts text to list of characters
4681	Calculates matching relevance between given string and search expression
4682	Removes double or single quotes if any are present
4683	Returns time for given time zone
4684	Loops through the FilterTags held by this Filter and returns the state of the tag if it exists and - 1 if it does not .
4685	Checks if the given severity is considered a violation .
4686	Render a simple icon of given level .
4687	Render an icon of given level with associated text .
4688	Generates a HTML formatted and categorized list of the tags that are associated with this topic
4689	Sets the Next Node and cleans up any old references .
4690	Sets the Previous Node and cleans up any old references .
4691	Finds the node by host and port .
4692	Finds the set of nodes by host .
4693	Gets all the nodes not in status DEAD .
4694	Adds one more node to the container .
4695	Removes the specified node .
4696	Marks the node as ALIVE in case of its status is not ALIVE .
4697	Marks the node as DEAD in case of its status is not DEAD .
4698	Sends the event to all the handlers .
4699	Get the effective Checkstyle version at runtime .
4700	Configures search paths in the resource locator . This method should only be called once per execution .
4701	Build object .
4702	Merge passed attributes with the supplied property values .
4703	Retrieve the current sequence value for the given property .
4704	Compares the supplied NodeID to this one .
4705	Gets the copy of the buffer and clears the buffer .
4706	Finds all PackageDoc objects from the classes in this JavaDoc execution .
4707	Set the property identified by name to the provided value .
4708	Set the field identified by name to the given value .
4709	Get all methods on the given class that are annotated with the given annotation type .
4710	Invoke the given method on the given target using the given arguments . Allows to call private and protected methods .
4711	Server entry point .
4712	Get the value of the specified attribute from the Checkstyle configuration . If parentConfigurations is non - null and non - empty the parent configurations are searched if the attribute cannot be found in the current configuration . If the attribute is still not found the specified default value will be returned .
4713	Create the rules summary section of the report .
4714	Check if a violation matches a rule .
4715	Creates the receivedAt key
4716	Initializes the technical region
4717	Wait until the other clients started
4718	Wait until received all the entries from other clients . Put the receivedAt entries to cache .
4719	Wait until all the clients received all the receivedAt entries .
4720	Waits for processing finished .
4721	Finalizes work with the guest node
4722	Prints the current state of connections
4723	Configures and starts the guest node
4724	Returns properties in natural order i . e . &quot ; ORDER BY VERSION DECLARING CLASS NAME&quot ;
4725	Returns a hash code of class model for specified bean version based on fields that this model contains .
4726	Returns a total number of query pages .
4727	Returns values for given keys .
4728	Stores paginated query info if it has not been stored yet .
4729	Stores paginated query pages and general info .
4730	Create an object with the given attributes . First builds the object than persists it .
4731	Sorting order is preferentially used to sort TagToCategory s or the name of the Tag that the TagToCategory s point to are used if both TagToCategory s sorting orders are null .
4732	Migrates locales from a very early version of PressGang that was using the wrong locale value .
4733	Recalculate the min hash signature for a topic .
4734	Generate the min hashes
4735	Cleans the provided XML by removing element names and other useless data .
4736	Validate and Fix a topics relationships to ensure that the topics related topics are still matched by the Related Topics themselves .
4737	Set the content hash on the topic .
4738	Validate and Fix a topics tags so that mutually exclusive tags are enforced and also remove any tags that may have been duplicated .
4739	Sorts all given ClassDocs into a SortedMap keyed by their respective PackageDocs .
4740	This is the interface into the rule . This method should throw an exception containing a reason message if the rule fails the check . The plugin will then decide based on the fail flag if it should stop or just log the message as a warning .
4741	Helper method which splices the provided string into a List separating on commas .
4742	Helper method which splices the provided String into a List of Pattern instances .
4743	Checks if any element within source startsWith the provided toCheck string .
4744	Get the class of the Factory for the given factoryClass .
4745	Sends email with subject and content to receivers specified in property file after key mail . to
4746	Sends email with subject and content to receivers specified by argument to
4747	Executes the zero function using pool for the concrete server .
4748	Executes query using arguments query string and query parameters .
4749	Handles exceptions during query execution .
4750	Formats results of query execution .
4751	Adds the provided error message to this ErrorMessageContainer .
4752	Returns the detail message string of this throwable .
4753	Checks if the socket of specified host and port is alive .
4754	Executes the thread with specified timeout .
4755	Check if any of the resources exist .
4756	Merge in the deprecated parameters to the new ones unless the new parameters have values .
4757	Limits query results .
4758	Returns first locator host and port from locators string .
4759	Returns approximate number of entries in the region . As the function counts number of entries on different nodes in parallel per node values may be captured on different moments . So the value may never be valid .
4760	Checks if the current GemFire is a client instance .
4761	Removes several entries from region in a single hop . On partitioned region execution is done simultaneously on all partitions .
4762	Retries passed operation with random exponential back off delay .
4763	Generate the BufferedImage .
4764	Draw the icon at the specified location .
4765	Method getReader returns the reader of this ConsoleUtils object .
4766	Waits for enter with specified message .
4767	Runs the tool . All the tools run in this way .
4768	Parses command - line arguments and sets the local variables
4769	Prints help if requested or in case of any misconfiguration
4770	Constructs the set of GNU options
4771	only for partitioned region!
4772	Adds a description for a null property .
4773	Parses command line arguments .
4774	Prints help if requested .
4775	Constructs the set of GNU options .
4776	Looks for the index of command in the specified array .
4777	Extracts the launcher arguments from the all arguments array .
4778	Extracts the command - specific arguments from the all arguments array .
4779	The entry point of the application .
4780	Prints debug information if debug is enabled .
4781	Starts the checking task
4782	Creates regions structure similar to server region structure .
4783	Applies the specified policy on the specified region and returns number of destroyed entries .
4784	Assigns the indentationToken of this RenderConfiguration .
4785	Retrieves the package definition from the supplied sourceFile .
4786	Generate documentation here . This method is required for all doclets .
4787	Extracts port from the SystemMember object .
4788	Looks for the existing pool with name poolFactory . If there is no such pool creates new one .
4789	Get the rule name from an audit event source name .
4790	Get the rule category from an audit event source name .
4791	Increment the counter .
4792	Decrement the counter and remove class name from the list .
4793	Creates string with all classes that have been entered by method frame counter .
4794	Splices the supplied packageExtractorImplementations argument which is assumed to be a comma - separated string holding fully qualified class names of the PackageExtractor implementations which should be used by this CorrectPackagingRule .
4795	Adds all source file found by recursive search under sourceRoot to the toPopulate List using a width - first approach .
4796	Create the thumbnails and make sure the parent imagefile is valid .
4797	The UI will attempt to assign an empty value if the file upload box does not have a file selected . This method is used to ignore any empty values while passing through any legitimate file uploads . This means that the absence of a file in the upload box does not indicate that no file should be assigned to the entity .
4798	Extracts limit value from query string .
4799	Collects and formats query results into SelectResults . Limits query results based on limit value .
4800	With stack counter
4801	Runs process based on a specified class in a separate VM using array of arguments . To confirm that process completes startup it should write a startup completed string into it s standard output .
4802	Runs process with arguments based on a specified class in a separate VM . Waits DEFAULT_PROCESS_STARTUP_TIME before returns the created process to a caller .
4803	Runs process with arguments based on a specified class in a separate VM . Waits processStartupTime before returns the created process to a caller .
4804	Stops process by sending new line to it s output stream .
4805	Starts process based on specified class using command line arguments . This process inherits a classpath from parent VM that starts it .
4806	Redirects process standard output and error streams into parent process standard output .
4807	Waits startup complete confirmation from process .
4808	Using a specified Velocity Template and provided context create the outputFilename .
4809	Creates configures and runs the guest nodes and collects information form them
4810	Is the genericType of a certain class?
4811	See if the two methods are compatible that is they have the same relative signature
4812	Given a method and a root class find the actual method declared in the root that implements the method .
4813	Returns the type argument from a parameterized type
4814	Finds an actual value of a type variable . The method looks in a class hierarchy for a class defining the variable and returns the value if present .
4815	Given a class and an interfaces go through the class hierarchy to find the interface and return its type arguments .
4816	Populate the pool up to minIdle instances . Is limited to maxIdle and maxActive .
4817	Used for non exception return option
4818	Returns the given object to the pool .
4819	Get the destination .
4820	Get the MessageConsumer .
4821	Get the MessageProducer or create one from the JMS session .
4822	Get the current session or create one from the JMS connection .
4823	Get the current connection or create one using the connectionSupplier .
4824	Send a text message given a queue or topic name and a text message .
4825	Listen to a message from JMS from a given destination by name .
4826	Receive a message from destination with timeout .
4827	Stop the service
4828	Handle defered recommendations based on user loads .
4829	Returns the pool configuration of the scorer .
4830	Sets the ID of the model .
4831	Sets the model file of the serialized classifier .
4832	Adds the given model to the managed models .
4833	Removes the given model from the managed models .
4834	The actual service queue for the clustered event bus . All events are sent to this queue first .
4835	Wraps factory method call so we can provide another implementation of interface if needed .
4836	Encode % if it is not an encoding sequence
4837	decode an encoded map
4838	Main method creates API model from metadata
4839	Will save the configuration to file .
4840	This message receives an event from a remote call .
4841	Returns an array of annotations the specified method of a resource class .
4842	Look for an annotation in a list of annotations . If not there see if it is on the type provided
4843	Picks a constructor from an annotated resource class based on spec rules
4844	Build metadata from annotations on classes and methods
4845	Sets the classifiers in a bagging .
4846	Gets a fresh clone of the object .
4847	Returns a copy of the serialized object .
4848	Writes the serialized object to file .
4849	Retrieves a String representing the score of the given class distribution .
4850	If null will build based on host port and provider url pattern .
4851	Gets the initial JNDI context if not set uses the jndi settings and initialContextFactory to create a JNDI initial context .
4852	If the user name is set use the user name and password to create the JMS connection .
4853	Build JMS Service
4854	From Jackson type creates a JRAPIDoc type type is stored in cache
4855	Do redirection from general Jackson type to the concrete one
4856	Do redirection from general Jackson serializer to the concrete one
4857	Introspect serializer for java beans
4858	Introspect serializer for enumerations
4859	Introspect serializer for map
4860	Get customer customer account and broker information
4861	Estimate overall effects of the trade
4862	Record the trade request by making all related updates
4863	It produces the next random permutation
4864	Not repeat randomly choose a number from 1 to the initinalized size
4865	a main application for debugging
4866	Return a last name as defined by TPC - C 4 . 3 . 2 . 3 .
4867	Return the result of a random choose from a given distribution .
4868	Returns a file with path relative to git working tree
4869	Adds the object to the git index
4870	Commits the file system object
4871	Moves or renames the object
4872	Removes the file system object from the working tree and the index
4873	Checks that the specified file exists .
4874	Checks if two unordered lists are equal .
4875	A general range check utility for checking whether a given &lt ; integer&gt ; value is between a given start and end indexes . This is a helper method for other methods such as checkIntIndexInListRange or can also be used independently by external objects .
4876	Gets an instance of the specified client type .
4877	Sets the preferred client type .
4878	Implementations of &lt ; git - add&gt ; with options and list of files provided .
4879	Adds a list of files with no GitAddOptions .
4880	Adds one file to the index with no GitAddOptions .
4881	Implementations of &lt ; git - add&gt ; with options and one file to be added to index .
4882	Implementation of &lt ; git - add&gt ; dry run .
4883	Implementations of &lt ; git - add&gt ; in verbose mode .
4884	Implementations of &lt ; git - add&gt ; with force option set .
4885	if the dry run option was selected then set the flag in response .
4886	Compares minor releases values given that git version contains no tag for none of GitVersion objects
4887	This command adds the current content of new or modified files to the index thus staging that content for inclusion in the next commit .
4888	This command adds the current content of new or modified files to the index with verbose option set .
4889	Processes the commit .
4890	Called when client code wants to explicitly tell us where to find git on their filesystem . If never called we assume that git is in a directory in the PATH environment variable for this process . Passing null as the path argument will unset an explicitly - set path and revert to looking for git in the PATH .
4891	Creates the list of BinderVariables given a method obtained through reflection .
4892	Return the m_functionDefinition compatible array .
4893	Returns an array of values given a filter execution context
4894	Checks if there is a DotGit instance for a given path
4895	Creates a new branch
4896	Deletes a branch
4897	Renames a branch
4898	Gets a list of the branches in the repository .
4899	Automatically stage all tracked files that have been changed and then commit all files staged in the git repository s index .
4900	Convert the given object value to the given class .
4901	Converts Integer to Boolean . If integer value is 0 then return FALSE else return TRUE .
4902	Converts Boolean to Integer . If boolean value is TRUE then return 1 else return 0 .
4903	Converts Date to String .
4904	Gets the error message for the specified code .
4905	Gets the file at the specified index from the list of files needing update .
4906	Adds a file to list of files that are deleted and will be committed next time &lt ; git - commit&gt ; is run .
4907	Adds a file to the list of files that are deleted locally but not yet deleted from index using &lt ; git - rm&gt ; command .
4908	Adds a file to list of files that are modified and will be committed next time &lt ; git - commit&gt ; is run .
4909	Adds a file to the list of files that are modified files but not yet updated .
4910	Adds a file to the list of new files that are ready to be committed next time &lt ; git - commit&gt ; command is run .
4911	Adds a file to the list of renamed files that are ready to be committed next time &lt ; git - commit&gt ; command is run .
4912	Adds a file to list of files that have been added locally but not yet added to the index .
4913	Factory method to create the concrete variable type .
4914	Get the string value from binder .
4915	Checks whether the verbose option should be set and sets it .
4916	Checks whether the - d option should be set and sets it .
4917	Checks whether the - D option should be set and sets it .
4918	Checks whether the - m option should be set and sets it .
4919	Checks whether the - M option should be set and sets it .
4920	Get idoc function return type .
4921	This is where the custom IdocScript function is evaluated .
4922	Enumerates the correct parameters for the delegated method . Injects any autowired types if present in the method signature .
4923	Executes the annotated method .
4924	Convert the method return value into a PageMerger internal type of String Long or Double
4925	This is where the custom IdocScript variable is evaluated .
4926	Does a basic git - branch without any options .
4927	This method deletes the specified branch using the - d command line option .
4928	Deletes the specified branches using the - d command line option .
4929	Renames the current branch to new branch .
4930	Commits the objects specified in the index to the repository .
4931	Gets the currently checked - out branch of the working directory .
4932	Switches to a new branch
4933	Gets the status of all files in the working directory
4934	Remove files relative to the path within the repository .
4935	Get the name of the file from newFilesToCommit list at a given index .
4936	Get the name of the deleted file that will be committed next time git - commit is executed currently located at the given index in the list .
4937	Get the name of the file that is modified and added to the repository by &lt ; git - add&gt ; command and will be committed to repository next time &lt ; git - commit&gt ; is executed . This file is at the given index in the list of the files .
4938	Returns the name of the deleted file that is removed locally but not yet removed from repository .
4939	Returns the name of the file that is existing in the repository and has been locally modified . This file is one of the files that has been locally modified and is located at given index in the list .
4940	Returns the name of the file at the specified index that has been created locally but has not yet been added to the repository by &lt ; git - add&gt ; .
4941	Returns the file at the specified index in the list of renamed files .
4942	Returns the error message otherwise returns null ;
4943	Gets all the errors generated by &lt ; git - status&gt ; command and returns them in String format .
4944	Perform a reset on the repository . The results of this method are what one would get by running &quote ; git - reset&quote ; against the repository .
4945	Add the information about a newly added file in the repository for a given commit .
4946	Add the information about a newly copied file in the repository for a given commit .
4947	Add the information about a file deleted from the repository for a given commit .
4948	Sets the number of files changed during a commit .
4949	Sets the number of lines deleted in a commit .
4950	Sets the number of lines inserted in a commit .
4951	Exec of git - mv command
4952	Returns the position for char c in string str starting from position pos and searching towards the string beginning
4953	Find a result set in the service binder .
4954	Implementations of &lt ; git log&gt ; with options and one file to be added to index .
4955	This add a newly created commit object to the list of commits for a log .
4956	This adds a file to the list of files affected by a particular commit .
4957	Git checkout with options and base branch information provided to &lt ; git - checkout&gt ; command .
4958	Git checkout without any options and branch information provided . Just a basic checkout command .
4959	Checks out a branch from the git repository with a given branch name .
4960	Checks out a list of files from repository no checkout options provided .
4961	Checks out a list of file from repository with &lt ; tree - ish&gt ; options provided .
4962	Checks out a file from repository from a particular branch
4963	This is just a test method for verifying that a given ref is not of refType provided as one of the parameters .
4964	Gets the children of this directory .
4965	Gets the file at the specified index from the removed file list .
4966	For checking a file or list of files from a branch .
4967	Checks out files from the repository when a tree - ish object is given as the reference .
4968	Sets the non - error message generated in the output of the &lt ; git - add&gt ; command .
4969	Sets the options for delete .
4970	Inject a service into the service manager registry .
4971	Injects a single UCMService annotation into the ServiceManager registry .
4972	Sets the name of the new branch that need to be created from the base branch .
4973	Process the git - clone command to make a clone of the git repository .
4974	Begins injection of filters including the Service and IdocScript injectors required to load other ucm entities .
4975	Replacement for getResources which works on 11g .
4976	Central instance construction setup method .
4977	Adds a method to the registry and returns the UUID .
4978	Main entry point which will delegate to the filter method with dependency injection .
4979	Reduce the connection opened . This should always be called after calling getDatabaseConnection and only after that .
4980	Execute an action on the database . The opening and closing of the database connection is handled for you .
4981	Executes a query on the database . Note that when calling close on the returned cursor the database connection count is reduces as well .
4982	Executes a raw query on the database . Note that when calling close on the returned cursor the database connection count is reduces as well .
4983	Builds the command line .
4984	Returns the file at a given location in the addedFiles list
4985	Returns the file at a given location in the deletedFiles list
4986	Returns the file at a given location in the modifiedFiles list .
4987	Show object s status in the working directory
4988	Gets the document header .
4989	Return array if all files added to dropzone .
4990	Return number of added files .
4991	Match the given string .
4992	Move the entry to the beginning of the LinkedList .
4993	Remove the last element from the cache .
4994	Remove entries that are out of their maxLifetime .
4995	Resort the linked list . If this CacheEntry has more hits than the previous one move it up .
4996	Test whether find can be found at position startPos in the string src .
4997	Makes the call to request an access token for an authorized user .
4998	Adds an authorization header containing the bearer token to a request . It is intended for use in API calls after getting the access token such as requesting the user s profile .
4999	Returns the URL for authorizing the user .
5000	This method is called when Finish button is pressed in the wizard . We will create an operation and run it using wizard as execution context .
5001	The worker method . It will find the container create the file if missing or just replace its contents and open the editor on the newly created file .
5002	Creates page controls .
5003	Returns the default package name .
5004	Loads the group value when the page is displayed .
5005	Creates a human - readable representation of the query that will be created from this builder
5006	Creates an ordered list of all parameter values registered at the root criteria .
5007	create controls and apply configurations .
5008	Adds PaletteItem to the specified category .
5009	Returns PaletteItems which are contained by the specified category .
5010	Correctly resizes the table so no phantom columns appear
5011	Get the currently selected template .
5012	Returns template string to insert .
5013	Load the last template name used in New HTML File wizard .
5014	Save template name used for next call to New HTML File wizard .
5015	Select a template in the table viewer given the template name . If template name cannot be found or templateName is null just select first item in table . If no items in table select nothing .
5016	Updates the pattern viewer .
5017	Adds an in restriction to a persistent field .
5018	Creates a member of restriction .
5019	Creates a not member of restriction .
5020	Creates the field editors . Field editors are abstractions of the common GUI blocks needed to manipulate various types of preferences . Each field editor knows how to save and restore itself .
5021	Returns the last component of a dot - separated path .
5022	This method is overridden to set the selected folder to web contents folder if the current selection is outside the web contents folder .
5023	This method is overridden to set additional validation specific to html files .
5024	Verifies if fileName is valid name for content type . Takes base content type into consideration .
5025	Adds default extension to the filename
5026	Returns the project that contains the specified path
5027	Get the current user s ID from the session
5028	Creates Structured Twext Editot of the multi - page editor which contains an HTML editor .
5029	Saves the multi - page editor s document as another file . Also updates the text for page 0 s tab and updates this multi - page editor s input to correspond to the nested editor s .
5030	Closes all project files on project close .
5031	Sorts the words in page 0 and shows them in page 2 .
5032	Method to create a human readable log message regarding a generated query .
5033	Helper method to create a string representation of an object .
5034	Inserts a simple timeline item .
5035	Inserts an item with an attachment provided as a byte array .
5036	Inserts an item with an attachment provided as an input stream .
5037	Validates that the keyword expected was returned . Otherwise throws an exception with the message returned included .
5038	Renders the order to a ORDER BY substring of JPQL query
5039	Returns the template store for the html editor templates .
5040	Returns the template context type registry for the html plugin .
5041	Returns the action registed with the given text editor .
5042	Creates the datasource config based on the provided parameters .
5043	Appends LIMIT and OFFSET for POSTGRESQL SQL queries
5044	Create a value property from a literal value .
5045	Create a value property from a string value .
5046	Create a value property from a nested document value .
5047	Create a string literal .
5048	Create a URI literal .
5049	Create a typed literal .
5050	Create a QName from a namespace URI local part and prefix .
5051	This method is invoked by the web container to initialise the filter at startup .
5052	Call this method when the entity is updated to increment its version and update its lastupdatedByEntityId
5053	Sub - classes should override this to parse sub - class specific fields .
5054	Call this method when the entity is updated before it is persisted to increment its version and update its lastupdatedByEntityId
5055	Closes a port . All connections on this port will be closed .
5056	Gozirra is probably not the best choice for a stand - alone server . If you are tempted to use it as such you might want to look at ActiveMQ which is a feature - rich MOM solution . Gozirra is intended primarily to be an ultra - light embedded messaging library .
5057	This method will only be called if we know that JSR 303 1 . 0 Bean Validation API and compliant implementation are available on classpath .
5058	This method will only be called if we know that JSR 303 1 . 1 Bean Validation API and compliant implementation are available on classpath .
5059	Subscribe to a channel .
5060	Unsubscribe a single listener from a channel . This does not send a message to the server unless the listener is the only listener of this channel .
5061	Unsubscribe from a channel . Automatically unregisters all listeners of the channel . To re - subscribe with listeners subscribe must be passed the listeners again .
5062	Unsubscribe from a channel . Automatically unregisters all listeners of the channel . To re - subscribe with listeners subscribe must be passed the listeners again . This method blocks until a receipt is received from the server .
5063	Send a message to a channel .
5064	Get the next unconsumed message for a particular channel . This is non - blocking .
5065	Checks to see if a receipt has come in .
5066	Deletes all receipts with a given ID
5067	Logs dead event as warnings . Dead events are events that posted but there are no registered subscribers for that event type .
5068	Convert a value to a specific class .
5069	Returns the priority of the warning .
5070	Execute this command according to the user input arguments parsed by the parser .
5071	Convert options to appropriate type and inject them into the command instance .
5072	Add or remove parameters to fit the method declaration and also convert them to appropriate data type .
5073	Performs the migration of a personality . This must be run under the table lock so that only one thread can use it at a time .
5074	Tags an HTTP servlet request to provide CORS information to downstream handlers .
5075	Handles a simple or actual CORS request .
5076	Handles a preflight CORS request .
5077	Sets the commandline options .
5078	Performs some checks .
5079	Filters the list of strings with a regular expression .
5080	Builds the regular expression for the packages to keep .
5081	Outputs the dependencies on stdout .
5082	Default implementation of compareTo for the InstanceManager .
5083	Retrieve IOUtils implementation
5084	Retrieve ImageUtils implementation
5085	Retrieve PriceUtils implementation
5086	Retrieve ResourceUtils implementation
5087	Retrieve ZipUtils implementation
5088	Retrieve DigestUtils implementation
5089	Retrieve StringUtils implementation
5090	Retrieve ResourceService implementation
5091	Retrieve PricingService implementation
5092	Retrieve InstanceService implementation
5093	Get an individual uploaded file as a digital object . For consistency this should be in a list .
5094	Store the provided file in storage . Ensure proper queue routing is set in object properties .
5095	Take a list of strings from a Java Map concatenate the values together and store them in a Properties object using the Map s original key .
5096	Make sure that the metadata exists . If it does not exist create the metadata table from scratch and register its creation .
5097	Creates the dry source detail view .
5098	Performs on - the - fly validation on thresholds for high and normal warnings .
5099	Validate that the method parameters if Bean Validation 1 . 1 is available on classpath .
5100	Validate that the options if Bean Validation is available on classpath .
5101	Checks to see if JSR303 implementation is available on classpath .
5102	Returns true if this loader accepts the URI .
5103	Load a file from an URI .
5104	Start evaluating the user input and eventually execute the command requested by the user .
5105	Find all commands available on classpath .
5106	The purpose of this methods is to allow the Handler to return an HTTP response . For example return an appropriate response that the request was accepted per the requirements of a REST API .
5107	Validate the request and extract any data from the HTTP request that will be required to process the request asynchronously .
5108	Bring the current database to the requested levels .
5109	Run validation on the database . Make sure that all the changes recorded in the database are the same as the ones that should be applied .
5110	Returns the full history of all applied migrations .
5111	Creates and initializes the Migratory metadata table .
5112	Turns these lines in a series of statements .
5113	Each notable can only have one note per calendar thus this method returns a single object rather than a list .
5114	region > updateLink
5115	Parse the options for the command .
5116	Transmit a message to clients and listeners .
5117	Returns the duplicate source code fragment as formatted HTML string .
5118	Returns the link with the specified hash code .
5119	Transmit a message to the server
5120	If the JAXBContext is not cached then it will create a new instance and cache it .
5121	Recursively creates a list of all the visible boxes in a box subtree . The nodes are added to the end of a specified list . The previous content of the list remains unchanged . The viewport box is ignored .
5122	Creates a tree of box nesting based on the content bounds of the boxes . This tree is only used for determining the backgrounds .
5123	Computes efficient background color for all the nodes in the tree
5124	Set the real file of component url
5125	Get the real file of component url
5126	Create a version range from a string representation
5127	Concatenates another transformation to this transformation .
5128	Transforms a rectangle to other rectangle using the given transformation .
5129	Returns the minimal bounds of the box for enclosing all the contained boxes .
5130	Re - computes the visual bounds of the whole subtree .
5131	Recomputes the total bounds of the whole subtree . The bounds of each box will correspond to its visual bounds . If the child boxes exceed the parent box the parent box bounds will be expanded accordingly .
5132	Computes node the content bounds . They correspond to the background bounds however when a border is present it is included in the contents . Moreover the box is clipped by its clipping box .
5133	Obtains the top border of the box
5134	Obtains the bottom border of the box
5135	Obtains the left border of the box
5136	Obtains the right border of the box
5137	Get the effective text color . If the text color is set it is returned . When the color is not set the parent boxes are considered .
5138	Checks if another node is fully located inside the content bounds of this box .
5139	Goes through the parent s children takes all the nodes that are inside of this node and makes them the children of this node . Then recursively calls the children to take their nodes .
5140	Process user specified command
5141	Use this data source to create an embedded database .
5142	Use this data source to connect to an existing database .
5143	Called when the configuration and environment come into scope .
5144	Handles the actual API calls and caching .
5145	Registers the specified command instance into the shell .
5146	Registers the specified command instance into the shell with the specified name .
5147	Unregisters the command corresponding to the specified name from the shell .
5148	Executes the specified command line input .
5149	Runs into the REPL mode .
5150	Committee Search This method allows searching by state and chamber . Committee objects returned by this method do not include the list of members by default .
5151	Committee Detail This method returns the full committee object given a committee id .
5152	Connect to the JMX service .
5153	Get the property .
5154	Invoke the method and return the result .
5155	List districts for state .
5156	List districts for state and chamber .
5157	Get geographic boundary for a district .
5158	Get detailed metadata for a particular state .
5159	Create the MBean object .
5160	Register the MBean represented by the interface class .
5161	Unregister the MBean represented by the object name .
5162	Validate the MBean represented by the interface class and object name .
5163	Mint a unique identifier as a UUID
5164	Add the specified value to the field . First validate the value if a validator was specified . Then look up any field converter then any type converter and if we can t find any throw an exception .
5165	Get Legislators by State .
5166	Get Legislators by State and Active filters .
5167	Search for Legislators by State and Term .
5168	This method allows looking up a legislator by a number of parameters the results do not include the roles or old_roles items by default .
5169	This method returns the full detail for a legislator .
5170	Compares with the specified object by ordinal .
5171	Set the class that each row should be mapped to .
5172	Proceeds this method invocation .
5173	Stops to measure .
5174	Setup authentication in httpclient .
5175	Instantiate a request object based on the method variable .
5176	Remove unwanted text from the minter service response to produce the desired identifier . Override this method for processing more complex than a simple regex replacement .
5177	Extract the desired identifier value from an XML response using XPath
5178	Mint a unique identifier using an external HTTP API .
5179	The starting point for using a ConfigurationBinder . A class needs to be passed through along with a binder to eventually bind the configuration with .
5180	This method will bind the class to a particular instance .
5181	Returns a new instance of FilterPattern using the passed in arguments .
5182	Proceeds this constructor invocation .
